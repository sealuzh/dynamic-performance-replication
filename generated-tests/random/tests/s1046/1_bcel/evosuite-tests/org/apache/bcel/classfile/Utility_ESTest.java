/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 17:25:39 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.clearBit(2, 56);
      Utility.accessToString(62, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "private protected static final synchronized";
      objectArray0[1] = (Object) "private protected static final synchronized";
      objectArray0[2] = (Object) "private protected static final synchronized";
      objectArray0[3] = (Object) "private protected static final synchronized";
      objectArray0[4] = (Object) "private protected static final synchronized";
      objectArray0[5] = (Object) "private protected static final synchronized";
      objectArray0[6] = (Object) "private protected static final synchronized";
      objectArray0[7] = (Object) "private protected static final synchronized";
      Utility.printArray(objectArray0, false, true);
      Utility.typeOfSignature("Z&a6?Y4D)6%#3");
      Utility.signatureToString("Z&a6?Y4D)6%#3", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("\"private protected static final synchronized\", \"private protected static final synchronized\", \"private protected static final synchronized\", \"private protected static final synchronized\", \"private protected static final synchronized\", \"private protected static final synchronized\", \"private protected static final synchronized\", \"private protected static final synchronized\"", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"private protected static final synchronized\", \"private protected static final synchronized\", \"private protected static final synchronized\", \"private protected static final synchronized\", \"private protected static final synchronized\", \"private protected static final synchronized\", \"private protected static final synchronized\", \"private protected static final synchronized\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte)24;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)63, 10, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, 122, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-15);
      Utility.encode(byteArray0, true);
      Utility.setBit(2594, 2594);
      Utility.searchOpcode("$l$8b$I$A$A$A$A$A$A$A");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format((-1040), (-659), false, 'L');
      Utility.compactClassName("8o.kyS_uAF", false);
      Utility.replace("-1040", "8o.kyS_uAF", "$l$8b$I$A$A$A$A$A$A$A");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)38, 641);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)34;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 122, 834, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = Utility.clearBit(92, 92);
      assertEquals(92, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".lzt");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".lzt");
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)92;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)107, (int) (byte)44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "[]";
      Utility.typeOfSignature("[]");
      String string1 = "float";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("char", "float", "char", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "X2g";
      stringArray0[1] = "X2g";
      stringArray0[2] = "X2g";
      stringArray0[3] = "X2g";
      stringArray0[4] = "X2g";
      Utility.methodTypeToSignature("X2g", stringArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-538), (-503), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fadd
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      Constant[] constantArray0 = new Constant[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantString constantString0 = new ConstantString(120);
      constantArray0[0] = (Constant) constantString0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1014), 85);
      constantArray0[1] = (Constant) constantMethodref0;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[2] = constant0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-119), 778);
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-119), (-1222));
      String string1 = Utility.compactClassName("0:    l2f\n", true);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.format(90, 186, false, ']');
      assertEquals("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]90", string2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)41;
      Constant[] constantArray0 = new Constant[8];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3, (byte)127);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(118, (-2786));
      constantArray0[1] = (Constant) constantMethodref0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2786), (-2786));
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-66), (-2786));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      Constant constant0 = constantFieldref1.copy();
      constantArray0[3] = constant0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[4] = (Constant) constantLong0;
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      constantArray0[5] = (Constant) constantDouble0;
      ConstantClass constantClass0 = new ConstantClass(118);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[6] = (Constant) constantClass1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance(">u''%");
      constantArray0[7] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 165, 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      Utility.typeOfSignature("DJ@5G8FsL2rCA@JS>Q");
      ByteSequence byteSequence0 = null;
      Constant[] constantArray0 = new Constant[5];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)7);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("DJ@5G8FsL2rCA@JS>Q");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getCachedInstance("\t\t");
      constantArray0[2] = (Constant) constantUtf8_1;
      String string0 = null;
      String string1 = "83vg-iui$,";
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("DJ@5G8FsL2rCA@JS>Q", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte) (-14);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-107), 1091);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 14, (int) (byte) (-107), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.accessToString((-893));
      Utility.accessToString((-893), true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)58;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[7] = (byte)67;
      byteArray0[8] = (byte)98;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.fillup("public private transient abstract strictfp synthetic annotation enum", (-893), true, '[');
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 237, (int) (byte)98, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-2);
      byte byte0 = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-98);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 253, (int) (byte) (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+H");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+H");
      Utility.isSet(122, 3148);
      try { 
        Utility.typeOfSignature("+H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("t");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t");
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.isJavaIdentifierPart('t');
      String string0 = Utility.printArray((Object[]) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("fconst_1", "dxio?cV,R$!!snT.C", true);
      Utility.replace("fconst_1", "fconst_1", "fconst_1");
      Utility.clearBit((-614), (-614));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), (int) (byte) (-59), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dmul
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.setBit((-1827), 90);
      try { 
        Utility.typeOfSignature("*9(jq5RY/o^(\b+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9(jq5RY/o^(\b+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-100);
      byteArray0[8] = (byte) (-85);
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong(3870L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(404, (byte)0);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1394), (int) (byte)10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2612. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)52;
      Utility.encode(byteArray0, true);
      Utility.accessToString((int) (byte)0, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-3609), 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 17972. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)50;
      byte byte0 = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-38);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-38), (int) (byte) (-38), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lstore_2
         // 1:    sastore
         // 2:    aaload
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)58;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 59, 800);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.compactClassName("iload_0", "iload_0", true);
      char char0 = ',';
      Utility.isJavaIdentifierPart(',');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)5;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-123), 71, true);
      Utility.compactClassName("");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)9, (int) (byte)9, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      Utility.printArray(objectArray0, false);
      Utility.printArray(objectArray0, true);
      Utility.classOrInterface((-1358));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)100;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, (int) (byte)100, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = Utility.compactClassName("Bn<s{FzK1:}");
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Utility.setBit(83, (-1081));
      assertEquals(211, int0);
      
      int int1 = Utility.clearBit((-2498), (-2498));
      assertEquals((-1073744322), int1);
      
      byte byte0 = Utility.typeOfSignature("Bn<s{FzK1:}");
      assertEquals((byte)8, byte0);
      
      String string1 = Utility.convertString("Bn<s{FzK1:}");
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-113));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteArray0, constantPool0, (-3406), 20, true);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 85, (int) (byte)60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.setBit(30, 754);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)26;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-67), 66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lstore\t\t%253
         // 2:    lneg
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)87;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-889275714), (int) (byte) (-95), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    impdep2
         // 1:    iload_3
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "? super ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "? super ");
      String string1 = "Nsqc@(\\[@7NGVG_B^(";
      try { 
        Utility.typeOfSignature("Nsqc@([@7NGVG_B^(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Nsqc@([@7NGVG_B^(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte) (-100);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-100), 2416);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    i2f
         // 2:    ishr
         // 3:    aconst_null
         // 4:    iconst_2
         // 5:    lload_2
         // 6:    <illegal opcode>
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.accessToString(170);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.searchOpcode("private static synchronized transient");
      boolean boolean0 = true;
      Utility.accessToString(170, true);
      Utility.clearBit(3022, (short) (-1));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 168, 168);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$\"Ln-LkB!F");
      Utility.searchOpcode("kj");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dadd", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "yo!/)=o";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "?dbEI2AT-'nb:kKXOli";
      stringArray0[1] = "yo!/)=o";
      stringArray0[2] = "yo!/)=o";
      stringArray0[3] = "yo!/)=o";
      Utility.methodTypeToSignature("yo!/)=o", stringArray0);
      Utility.methodSignatureArgumentTypes("(L?dbEI2AT-'nb:kKXOli;Lyo!/)=o;Lyo!/)=o;Lyo!/)=o;)Lyo!/)=o;", false);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "yo!/)=o";
      stringArray1[1] = "yo!/)=o";
      stringArray1[2] = "?dbEI2AT-'nb:kKXOli";
      stringArray1[3] = "?dbEI2AT-'nb:kKXOli";
      stringArray1[4] = "(L?dbEI2AT-'nb:kKXOli;Lyo!/)=o;Lyo!/)=o;Lyo!/)=o;)Lyo!/)=o;";
      stringArray1[5] = "org.apache.bcel.classfile.Utility$JavaWriter";
      Utility.methodTypeToSignature("org.apache.bcel.classfile.Utility$JavaWriter", stringArray1);
      try { 
        Utility.typeOfSignature("?dbEI2AT-'nb:kKXOli");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?dbEI2AT-'nb:kKXOli
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-24), (int) (byte) (-93));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ret\t\t%84
         // 2:    goto\t\t#-6142
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-51);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-57);
      Utility.encode(byteArray0, false);
      Utility.setBit((byte)0, (byte)0);
      try { 
        Utility.typeOfSignature("$A$cd$ed$c7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A$cd$ed$c7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("!a[TBJmQ2:GNSTm-iJS", false);
      int int0 = 1938;
      Utility.classOrInterface(1938);
      Utility.clearBit(1938, (-2144));
      int int1 = 2803;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2803, 1938);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "(du$V$^9)|;$-vJ>";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(du$V$^9)|;$-vJ>");
      byte[] byteArray0 = Utility.decode("(du$V$^9)|;$-vJ>", false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfMethodSignature("fstore_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fstore_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = Utility.compactClassName("{r-It%sqCwBkud", "{r-It%sqCwBkud", true);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)7;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-2042), (-4472), false);
      assertEquals("0:    l2d\n1:    dload\t\t%20\n3:    dreturn\n4:    fdiv\n5:    aconst_null\n6:    iconst_4\n", string1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "+).92?";
      try { 
        Utility.typeOfSignature("+).92?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ).92?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.convertString("7cM$<+us~fOYI)A6uZ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.convertString("=,J9");
      assertEquals("=,J9", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      byteSequence0.readByte();
      ConstantLong constantLong0 = new ConstantLong((byte)111);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.convertString("iadd");
      Utility.compactClassName("j<QIlr\"JZ2g", false);
      // Undeclared exception!
      try { 
        Utility.replace("dstore_3", (String) null, "ch)Nbp5FQ}fDP\"^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.compactClassName("/yI1f\r]", true);
      Utility.compactClassName(", class=");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte) (-71);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1414, 1797);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":;nnWR4k'2'0#=@J'bg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :;nnWR4k'2'0#=@J'bg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      try { 
        Utility.typeOfSignature("M.XAl .U5xtj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M.XAl .U5xtj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.fillup("! 5BrukhE9hkGqsvXI", 80, false, '7');
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("77777777777777777777777777777777777777777777777777777777777777! 5BrukhE9hkGqsvXI", false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "! 5BrukhE9hkGqsvXI";
      objectArray0[1] = (Object) "77777777777777777777777777777777777777777777777777777777777777! 5BrukhE9hkGqsvXI";
      objectArray0[2] = (Object) "77777777777777777777777777777777777777777777777777777777777777! 5BrukhE9hkGqsvXI";
      objectArray0[3] = (Object) "77777777777777777777777777777777777777777777777777777777777777! 5BrukhE9hkGqsvXI";
      objectArray0[4] = (Object) "! 5BrukhE9hkGqsvXI";
      Utility.printArray(objectArray0, true);
      Utility.searchOpcode("77777777777777777777777777777777777777777777777777777777777777! 5BrukhE9hkGqsvXI");
      Utility.isSet(80, 47);
      Utility.format(75, 80, false, '7');
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short) (-1), 75, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("hZ7x$te'r}}!", "! 5BrukhE9hkGqsvXI", "0:    lstore\t\t%55\n2:    lstore\t\t%55\n4:    lstore\t\t%55\n6:    lstore\t\t%55\n8:    lstore\t\t%55\n10:   lstore\t\t%55\n12:   lstore\t\t%55\n14:   lstore\t\t%55\n16:   lstore\t\t%55\n18:   lstore\t\t%55\n20:   lstore\t\t%55\n22:   lstore\t\t%55\n24:   lstore\t\t%55\n26:   lstore\t\t%55\n28:   lstore\t\t%55\n30:   lstore\t\t%55\n32:   lstore\t\t%55\n34:   lstore\t\t%55\n36:   lstore\t\t%55\n38:   lstore\t\t%55\n40:   lstore\t\t%55\n42:   lstore\t\t%55\n44:   lstore\t\t%55\n46:   lstore\t\t%55\n48:   lstore\t\t%55\n50:   lstore\t\t%55\n52:   lstore\t\t%55\n54:   lstore\t\t%55\n56:   lstore\t\t%55\n58:   lstore\t\t%55\n60:   lstore\t\t%55\n62:   lload_3\n63:   lload_2\n64:   saload\n65:   lstore_3\n66:   frem\n67:   lneg\n68:   dmul\n69:   imul\n70:   fstore_2\n71:   dstore\t\t%104\n73:   dmul\n74:   dstore_0\n75:   lrem\n76:   drem\n77:   fneg\n78:   pop2\n79:   dstore_2\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: hZ7x$te'r}}!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)99;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2034, (byte)99);
      Constant constant0 = constantMethodref0.copy();
      constantArray0[0] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 42, (int) (byte)99, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-30));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[2] = (Constant) constantClass0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("/wN");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      Utility.methodSignatureReturnType("V");
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-99);
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-81);
      byte byte1 = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      byte byte2 = (byte) (-68);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)7;
      byte byte3 = (byte)12;
      byteArray0[6] = (byte)12;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte) (-81);
      byteArray1[3] = (byte) (-68);
      byteArray1[4] = (byte)7;
      byteArray1[5] = (byte) (-89);
      byteArray1[6] = (byte) (-99);
      Utility.equals(byteArray0, byteArray1);
      try { 
        Utility.methodSignatureArgumentTypes("l<x", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: l<x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte) (-77);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[7] = (byte)5;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$c4$b2$c9$c2$a3$8b$b3$F", string0);
      
      byte[] byteArray1 = Utility.decode("$c4$b2$c9$c2$a3$8b$b3$F", false);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-78), (byte) (-55), (byte) (-62), (byte) (-93), (byte) (-117), (byte) (-77), (byte)5}, byteArray1);
      
      int int0 = Utility.setBit((byte)5, (byte) (-60));
      assertEquals(21, int0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.searchOpcode("Ljjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj3988;V");
      int int0 = (-488);
      Utility.isSet((-488), (short) (-1));
      Utility.compactClassName("Ljjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj3988;V", false);
      Utility.searchOpcode("Ljjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj3988;V");
      Utility.clearBit((-488), (-488));
      Utility.compactClassName("Ljjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj3988;V", true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Ljjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj3988;V";
      objectArray0[1] = (Object) "Ljjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj3988;V";
      objectArray0[2] = (Object) "Ljjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj3988;V";
      Utility.printArray(objectArray0, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("XyN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XyN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (-1134));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte)105;
      byteArray0[8] = (byte)14;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 225, 81, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 26894. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.convertString("mXnq(!TMB\"5/D");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.isSet(60, 1028);
      Utility.replace("mXnq(!TMB\"5/D", "mXnq(!TMB\"5/D", "mXnq(!TMB\"5/D");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "mXnq(!TMB\"5/D";
      stringArray0[1] = "KF";
      stringArray0[2] = "mXnq(!TMB\"5/D";
      stringArray0[3] = "mXnq(!TMB\"5/D";
      stringArray0[4] = "mXnq(!TMB\"5/D";
      stringArray0[5] = "mXnq(!TMB\"5/D";
      stringArray0[6] = "mXnq(!TMB\"5/D";
      Utility.methodTypeToSignature("KF", stringArray0);
      String string0 = Utility.format((-727), 11, false, '<');
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)121;
      byteArray0[8] = (byte)122;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)121, (int) (byte)121);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte) (-80);
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1511, (byte) (-80));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-71));
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 70, 47, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 37808. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Utility.compactClassName("wd;ysf'slQ", "athrow", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte) (-121);
      byteArray0[8] = (byte) (-111);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)77, (int) (byte)6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = Utility.replace("long", "long", "(\"U~Zd9'G]}K");
      assertEquals("(\"U~Zd9'G]}K", string0);
      
      boolean boolean0 = Utility.isSet((-129), (-1441));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)0;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$96$A", string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "long";
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) "long";
      objectArray0[3] = (Object) "long";
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) (byte)0;
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{long, 0, long, long, 0, 0}", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fcmpg", string3);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-41);
      byteArray0[0] = (byte) (-101);
      byteArray0[6] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iflt\t\t#-11056", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "iflt\t\t#-11056";
      stringArray0[1] = "iflt\t\t#-11056";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iflt\t\t#-11056");
      stringArray0[2] = "iflt\t\t#-11056";
      stringArray0[3] = "iflt\t\t#-11056";
      stringArray0[4] = "iflt\t\t#-11056";
      stringArray0[5] = "iflt\t\t#-11056";
      String string1 = Utility.methodTypeToSignature("iflt\t\t#-11056", stringArray0);
      assertEquals("(Liflt;Liflt;Liflt;Liflt;Liflt;Liflt;)Liflt;", string1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "*@!`qRgfKoSUF$";
      try { 
        Utility.typeOfSignature("*@!`qRgfKoSUF$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @!`qRgfKoSUF$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.searchOpcode("org.apache.bcel.classfile.Utility$1");
      boolean boolean0 = true;
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "instanceof";
      stringArray0[1] = "instanceof";
      stringArray0[2] = "instanceof";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringArray0[3] = "instanceof";
      stringArray0[4] = "instanceof";
      stringArray0[5] = "instanceof";
      stringArray0[6] = "instanceof";
      stringArray0[7] = "instanceof";
      stringArray0[8] = "instanceof";
      String string0 = Utility.methodTypeToSignature("instanceof", stringArray0);
      assertEquals("(Linstanceof;Linstanceof;Linstanceof;Linstanceof;Linstanceof;Linstanceof;Linstanceof;Linstanceof;Linstanceof;)Linstanceof;", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aastore", string1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)90;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kc&W`,N)d");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 135, (-32768), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.setBit(225, 17);
      Utility.getSignature("qcb");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Lqcb;";
      objectArray0[1] = (Object) "Lqcb;";
      objectArray0[2] = (Object) "qcb";
      objectArray0[3] = (Object) "qcb";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.printArray((Object[]) null, true, false);
      try { 
        Utility.typeOfMethodSignature("{\"Lqcb;\", \"Lqcb;\", \"qcb\", \"qcb\", \"java.lang.Object@53e8e764\", \"java.lang.Object@102e5466\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {\"Lqcb;\", \"Lqcb;\", \"qcb\", \"qcb\", \"java.lang.Object@53e8e764\", \"java.lang.Object@102e5466\"}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 97, (int) (byte)85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "J1crkXXn.L9o0b6";
      Utility.signatureToString("J1crkXXn.L9o0b6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-122);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)58;
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("long", " ", true);
      boolean boolean0 = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.methodSignatureArgumentTypes("long", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = false;
      Utility.format(9, 95, false, '8');
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ".jar";
      try { 
        Utility.typeOfSignature(".jar");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .jar
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isSet(3297, 5);
      Utility.isJavaIdentifierPart('X');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 41, 632, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Code";
      int int0 = 248;
      boolean boolean0 = false;
      Utility.fillup("org.apache.bcel.classfile.Code", 248, false, '0');
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-29);
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-1);
      byte byte1 = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      byte byte2 = (byte)57;
      byteArray0[3] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1775), (int) (byte)57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    impdep2
         // 2:    d2i
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "T3";
      Utility.typeOfSignature("T3");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "T3";
      stringArray0[1] = "T3";
      stringArray0[2] = "T3";
      stringArray0[3] = "T3";
      stringArray0[4] = "T3";
      Utility.methodTypeToSignature("T3", stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("The prefix must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The prefix must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = Utility.clearBit((-2471), (-2471));
      assertEquals((-33556903), int0);
      
      String string0 = Utility.fillup("getfield", (-33556903), false, 'N');
      assertEquals("getfield", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("l2i", string1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#?PlRpV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #?PlRpV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "breakpoint";
      Utility.getSignature("breakpoint");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Lbreakpoint;");
      int int0 = 620;
      int int1 = 65;
      Utility.format(620, 65, false, 'h');
      String string1 = "GT+@#ECjav$";
      try { 
        Utility.methodSignatureReturnType("GT+@#ECjav$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GT+@#ECjav$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.signatureToString("V", true);
      Utility.clearBit(97, 52);
      Utility.setBit(2526, 67);
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hUA9m0/I\"");
      byteArray0[0] = (byte)22;
      byte byte0 = (byte) (-61);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfMethodSignature("w=*(1.=}o/|SJGS#U,s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: w=*(1.=}o/|SJGS#U,s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Utility.accessToString(1208);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte) (-36);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-117), 1496);
      Utility.format(57, (-1210), false, 'y');
      // Undeclared exception!
      try { 
        Utility.signatureToString("LocalVariable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = "L&E7,a$NoRrYF+?9";
      boolean boolean0 = false;
      Utility.decode("L&E7,a$NoRrYF+?9", false);
      Utility.clearBit(86, 86);
      PrintWriter printWriter0 = null;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "L&E7,a$NoRrYF+?9";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "L&E7,a$NoRrYF+?9";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.compactClassName("lookupswitch", true);
      try { 
        Utility.methodSignatureReturnType("iu1RdU)YqgUFlxGzw[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YqgUFlxGzw['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-76);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 38, (int) (byte)64, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("[", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[";
      stringArray0[1] = "[";
      stringArray0[2] = "[";
      stringArray0[3] = "tmo@u dMxmkW\"\"G.3";
      stringArray0[4] = "[";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "Pj;{^@h%";
      try { 
        Utility.typeOfSignature("Pj;{^@h%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Pj;{^@h%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("<q|7$(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <q|7$(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("O.Gd@R", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O.Gd@R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-116);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lstore_2");
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)13;
      byteArray0[8] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfMethodSignature("lstore_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lstore_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      try { 
        Utility.typeOfSignature("RuntimeInvisibleParameterAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeInvisibleParameterAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.compactClassName("_^", "", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)101;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 164, 176);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "V";
      Utility.searchOpcode("V");
      Utility.typeOfSignature("V");
      String string1 = "Mp";
      try { 
        Utility.methodSignatureReturnType("Mp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-108);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-489), (int) (byte)8);
      assertEquals("0:    iconst_5\n1:    impdep1\n2:    lcmp\n", string0);
      
      String string1 = Utility.fillup("0:    iconst_5\n1:    impdep1\n2:    lcmp\n", 5, false, ',');
      assertEquals("0:    iconst_5\n1:    impdep1\n2:    lcmp\n", string1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.searchOpcode("'");
      Utility.accessToString((int) (short) (-1), false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1877);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, false);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.format("jpU^Gqj0VtQ&A)~jjS~", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 194, 2115, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utility.accessToString(169, false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-54);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 55, 1360, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)121;
      byteArray0[8] = (byte)122;
      Constant[] constantArray0 = new Constant[4];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-20), (byte)122);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("15kC%VT5Amf");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("impdep2");
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[3] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)121, (int) (byte)91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-49);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-887), (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aload_0
         // 1:    istore_0
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Utility.compactClassName("wide", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte) (-75);
      byteArray0[8] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 36, (int) (byte)103, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utility.signatureToString("SITD)BM`Y4a^D}b%");
      Utility.searchOpcode("SITD)BM`Y4a^D}b%");
      Utility.classOrInterface((-1511));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, 4868, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)0;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("72 30 72 7d db b6 03 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 72 30 72 7d db b6 03 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utility.classOrInterface(47);
      Utility.compactClassName("9xl)D@v", "9xl)D@v", false);
      Utility.getSignature("boolean");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)55;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)55, 333, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(93, 14);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)43;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte byte0 = (byte)91;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-17);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, (int) (byte) (-40));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore\t\t%91", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = ": ";
      Utility.searchOpcode(": ");
      try { 
        Utility.typeOfSignature("A3jtY4W-D1W#)surx'B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A3jtY4W-D1W#)surx'B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte) (-29);
      byteArray0[8] = (byte)57;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("4Q`0(!I8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4Q`0(!I8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) stringBuffer0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) stringWriter0;
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-25);
      byteArray0[0] = (byte) (-25);
      byte byte1 = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-63), 95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature(":{ay*.?6vWt", stringArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-83);
      byte byte0 = (byte)47;
      byteArray0[5] = (byte)47;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)87;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 188, 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-100);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-100), 119, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true, "0:    nop\n1:    ret\t\t%156\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 0:    nop
         // 1:    ret\t\t%156
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iand", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockFile mockFile0 = new MockFile("new");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("new", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)60;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, 5, (int) (byte)92);
      assertEquals("5:    dup2\n6:    istore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)16;
      Utility.encode(byteArray0, true);
      Utility.isJavaIdentifierPart('.');
      Utility.convertString("$l$8b$I$A$A$A$A$A$A$A");
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2288), (int) (byte)63);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.format((byte)16, (byte)16, false, '.');
      String string1 = Utility.compactClassName("pryV{K@enG' <GV", true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "float";
      Utility.replace("float", "float", "float");
      try { 
        Utility.methodSignatureArgumentTypes("(0f,ZW8U6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0f,ZW8U6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)55;
      byteArray0[0] = (byte)55;
      byte byte1 = (byte)87;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)59;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("37 57 c0 3b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 37 57 c0 3b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ", low = ";
      String string0 = Utility.methodTypeToSignature(", low = ", stringArray0);
      assertEquals("(L,;)L,;", string0);
      
      String string1 = Utility.signatureToString("DF", false);
      assertEquals("double", string1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "[58";
      try { 
        Utility.methodSignatureReturnType("[58");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `58'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "rwk6Q*']'yp";
      Utility.methodTypeToSignature("rwk6Q*']'yp", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)114;
      Utility.toHexString(byteArray0);
      Utility.printArray((Object[]) stringArray0, false);
      try { 
        Utility.typeOfSignature("OPnVhvzj~TDeECz/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OPnVhvzj~TDeECz/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.signatureToString("K0M^Ve%B >SGf.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K0M^Ve%B >SGf.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-6);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte)90);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3639, (int) (byte) (-75), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Utility.accessToString(184, false);
      Utility.classOrInterface(179);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "static final synchronized transient";
      Utility.printArray(objectArray0);
      Utility.accessToString(184, false);
      Utility.compactClassName("qMAQ|;");
      Utility.compactClassName("F", "qMAQ|;", false);
      Utility.printArray(objectArray0, true, false);
      Utility.clearBit(184, 184);
      Utility.compactClassName("class", "{static final synchronized transient}", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)56;
      byteArray0[0] = (byte)71;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 184, 184, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte) (-61);
      byte byte0 = (byte)11;
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 11, 7, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-79);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("_$a1$b1", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      try { 
        Utility.typeOfSignature("G]=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G]=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.decode("jlz$pDM", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Utility.convertString("jsr");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-68), (int) (byte)81, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dconst_1
         // 1:    <illegal opcode>
         // 2:    fastore
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "1.6nkYv3#tx8XEv2";
      try { 
        Utility.typeOfSignature("1.6nkYv3#tx8XEv2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1.6nkYv3#tx8XEv2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "WaBGGV`I(P-Pl;;CH";
      try { 
        Utility.typeOfSignature("WaBGGV`I(P-Pl;;CH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WaBGGV`I(P-Pl;;CH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)70;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Utility.accessToString(184, false);
      Utility.classOrInterface(179);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "static final synchronized transient";
      Utility.printArray(objectArray0);
      Utility.accessToString(184, false);
      Utility.compactClassName("qMAQ|;");
      Utility.compactClassName("F", "qMAQ|;", false);
      Utility.printArray(objectArray0, true, false);
      Utility.clearBit(184, 184);
      Utility.compactClassName("class", "{static final synchronized transient}", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)71;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 184, 184, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "w3W[8|9UAeMU:Uo");
      MockPrintStream mockPrintStream0 = new MockPrintStream("w3W[8|9UAeMU:Uo");
      PrintStream printStream0 = mockPrintStream0.append('*');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) printStream0;
      Utility.printArray(printStream0, objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      byte byte0 = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)111;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)39, (int) (byte)111, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)80;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1812, (int) (byte)102, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)59, (int) (byte)49, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-80);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), 230, true);
      assertEquals("0:    lstore\t\t%89\n2:    dup2_x2\n3:    areturn\n", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)16;
      Utility.encode(byteArray0, true);
      Utility.isJavaIdentifierPart('.');
      Utility.convertString("$l$8b$I$A$A$A$A$A$A$A");
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2288), (int) (byte)63);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lstore_0
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.classOrInterface(16);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-105);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true, "freturn");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // freturn
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte) (-74);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)115, 2453);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "QgIa}@";
      try { 
        Utility.typeOfSignature("QgIa}@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QgIa}@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "Eniy{-B";
      try { 
        Utility.typeOfSignature("Eniy{-B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Eniy{-B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet(84, 84);
      Utility.clearBit(84, 84);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)28;
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)83;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureReturnType("anewarray", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `anewarray'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte) (-42);
      byteArray1[2] = (byte) (-15);
      byteArray1[3] = (byte)95;
      byteArray1[4] = (byte) (-118);
      Utility.equals(byteArray0, byteArray1);
      Utility.accessToString(173);
      Utility.isJavaIdentifierPart('-');
      Utility.compactClassName("invokespecial");
      String string0 = Utility.accessToString((int) (byte)61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("jsr\t\t#90", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Utility.isSet(2489, 2489);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)89;
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)75;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, 2489);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Utility.format(196, 145, true, '~');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-70);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-2609), 196, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte) (-65);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-282), (int) (byte)76);
      assertEquals("0:    lmul\n1:    dup\n2:    lmul\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    lshr\n6:    astore_1\n7:    athrow\n8:    nop\n", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.getSignature("0:    lmul\n1:    dup\n2:    lmul\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    lshr\n6:    astore_1\n7:    athrow\n8:    nop\n");
      assertEquals("L0:;", string1);
      
      String string2 = Utility.fillup("0:    lmul\n1:    dup\n2:    lmul\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    lshr\n6:    astore_1\n7:    athrow\n8:    nop\n", (byte)89, true, 'M');
      assertEquals("0:    lmul\n1:    dup\n2:    lmul\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    lshr\n6:    astore_1\n7:    athrow\n8:    nop\n", string2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Utility.classOrInterface((-113));
      Utility.convertString("interface");
      try { 
        Utility.typeOfSignature("-3431lllll");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -3431lllll
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "L";
      Utility.typeOfSignature("L");
      String string1 = "N1&pw6sb4u\"'";
      boolean boolean0 = false;
      int int0 = 217;
      LocalVariable[] localVariableArray0 = new LocalVariable[9];
      DataInput dataInput0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Utility.accessToString(1595, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("java.lang.Character");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "java.lang.Character");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "public private static final synchronized interface abstract";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) printStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) "java.lang.Character";
      objectArray0[5] = (Object) "java.lang.Character";
      objectArray0[6] = (Object) mockPrintStream0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("RAiN=auRc>0k'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RAiN=auRc>0k''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-116);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(".zip");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance(".zip");
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 7125, (int) (byte) (-116));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Qa3qF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qa3qF'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = Utility.replace("~;#SzezEZz#~;#SzezEZz#", "short", "K2BeE=0y");
      assertEquals("~;#SzezEZz#~;#SzezEZz#", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte)89;
      byteArray0[8] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iastore", string1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "P]TfxgxT;9v}2[y";
      // Undeclared exception!
      try { 
        Utility.signatureToString("P]TfxgxT;9v}2[y", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P]TfxgxT;9v}2[y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.accessToString((-321), false);
      Utility.setBit((-321), (-321));
      Utility.typeOfSignature("S$V\nl");
      try { 
        Utility.methodSignatureArgumentTypes("S$V\nl", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: S$V
         // l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "?D}";
      try { 
        Utility.typeOfSignature("?D}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?D}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-116);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lstore_2");
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)117;
      byteArray0[8] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_1", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)41;
      Constant[] constantArray0 = new Constant[8];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3, (byte)91);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(118, (-2786));
      constantArray0[1] = (Constant) constantMethodref0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-104), (-2786));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      Constant constant0 = constantFieldref1.copy();
      constantArray0[3] = constant0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[4] = (Constant) constantLong0;
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      constantArray0[5] = (Constant) constantDouble0;
      ConstantClass constantClass0 = new ConstantClass(118);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[6] = (Constant) constantClass1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance(">u''%");
      constantArray0[7] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 165, 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "=class ";
      try { 
        Utility.typeOfSignature("=class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =class 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "/Wd";
      try { 
        Utility.typeOfSignature("/Wd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /Wd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";{5rCXUrv ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;{5rCXUrv 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = false;
      Utility.methodSignatureReturnType("CX1TY.ewmUM@'{v5jP", false);
      Utility.typeOfSignature("CX1TY.ewmUM@'{v5jP");
      int int0 = (-236);
      Utility.accessToString((-236), false);
      String string0 = "\"";
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iload\t\t%97", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "Warning: Padding byte != 0 in ";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "=T7EE[u]JIQj2)E";
      stringArray0[1] = "=T7EE[u]JIQj2)E";
      stringArray0[2] = "=T7EE[u]JIQj2)E";
      stringArray0[3] = "=T7EE[u]JIQj2)E";
      stringArray0[4] = "=T7EE[u]JIQj2)E";
      stringArray0[5] = "=T7EE[u]JIQj2)E";
      String string0 = Utility.methodTypeToSignature("=T7EE[u]JIQj2)E", stringArray0);
      assertEquals("([L=T7EE;[L=T7EE;[L=T7EE;[L=T7EE;[L=T7EE;[L=T7EE;)[L=T7EE;", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = Utility.accessToString(323);
      assertEquals("public private volatile native", string0);
      
      String string1 = Utility.replace("org.apache.bcel.classfile.ConstantUtf8$1", "org.apache.bcel.classfile.ConstantUtf8$1", "");
      assertEquals("", string1);
      
      String string2 = "%A0,<";
      try { 
        Utility.typeOfSignature("%A0,<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %A0,<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "putstatic";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("invokestatic", "invokestatic", "putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokestatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Utility.isJavaIdentifierPart('V');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = ", reference_index = ";
      try { 
        Utility.typeOfSignature(", reference_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , reference_index = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Utility.accessToString(1495);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)34;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)105, (int) (byte)105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.clearBit((-1842171511), (-2771));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)118;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2902, (-4919), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte) (-79);
      byteArray0[8] = (byte) (-65);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 525, (-684));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[1] = (byte)42;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 32, 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)52, (int) (byte)49, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(58);
      byteSequence0.skip(4L);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(5, byteSequence0.getIndex());
      
      int int0 = Utility.setBit((byte) (-40), (byte)26);
      assertEquals((-40), int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("if_icmplt\t\t#21318", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.accessToString(90, true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "if_acmpeq";
      stringArray0[1] = "private static final volatile";
      stringArray0[2] = "if_acmpeq";
      stringArray0[3] = "private static final volatile";
      stringArray0[4] = "if_acmpeq";
      stringArray0[5] = "if_acmpeq";
      stringArray0[6] = "private static final volatile";
      stringArray0[7] = "if_acmpeq";
      Utility.methodTypeToSignature("if_acmpeq", stringArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-62);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)97, (int) (byte)97, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = "1rc[![G8c";
      // Undeclared exception!
      try { 
        Utility.getSignature("1rc[![G8c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[![G8c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString((-84), false);
      String string0 = "0k$</0NgEea.@";
      try { 
        Utility.typeOfSignature("0k$</0NgEea.@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0k$</0NgEea.@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Utility.isJavaIdentifierPart(';');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-35);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.typeOfSignature("JYuNn$<JvX-r,tF");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte) (-98);
      byteArray1[3] = (byte)11;
      Utility.equals(byteArray1, byteArray1);
      String string0 = Utility.fillup("JYuNn$<JvX-r,tF", 1957, false, ';');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("LineNumber(", "LineNumber(", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureReturnType("fG1)H1CR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H1CR'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "L";
      try { 
        Utility.methodSignatureReturnType("L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.replace("\t\t#", "}IO(wJC(rpY?c.b", "ifgt");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\t\t#";
      stringArray0[1] = "Q+";
      stringArray0[2] = "\t\t#";
      stringArray0[3] = "]]T4%F";
      stringArray0[4] = "\t\t#";
      stringArray0[5] = "void";
      stringArray0[6] = "ifgt";
      try { 
        Utility.methodTypeToSignature("]]T4%F", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = Utility.clearBit((-1), 2609);
      assertEquals((-131073), int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)8;
      Utility.toHexString(byteArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Wx[IZv-PV2)Af22fU";
      stringArray0[1] = "61 a9 08";
      stringArray0[2] = "2&;-g~+A";
      stringArray0[3] = "61 a9 08";
      stringArray0[4] = "61 a9 08";
      stringArray0[5] = "Wx[IZv-PV2)Af22fU";
      stringArray0[6] = "61 a9 08";
      stringArray0[7] = "Wx[IZv-PV2)Af22fU";
      stringArray0[8] = "Wx[IZv-PV2)Af22fU";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("Wx[IZv-PV2)Af22fU", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[IZv-PV2)Af22fU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "E2\"_bPhfmv";
      Utility.compactClassName("E2\"_bPhfmv", false);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString(253);
      // Undeclared exception!
      try { 
        Utility.signatureToString("E2\"_bPhfmv", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E2\"_bPhfmv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ifnull");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byte byte0 = (byte) (-19);
      byteArray0[1] = (byte) (-19);
      Utility.toHexString(byteArray0);
      Utility.accessToString(198, false);
      Utility.toHexString(byteArray0);
      boolean boolean0 = true;
      Utility.format(59, 59, true, 'R');
      try { 
        Utility.typeOfSignature("24 ed");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 24 ed
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Utility.isSet(1863, 1863);
      String string0 = "long";
      Utility.getSignature("long");
      try { 
        Utility.typeOfSignature("&IKDs0,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &IKDs0,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "CONSTANT_MethodType";
      Utility.methodSignatureReturnType("CONSTANT_MethodType", true);
      try { 
        Utility.typeOfMethodSignature("CONSTANT_MethodType");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: CONSTANT_MethodType
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0);
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      Utility.searchOpcode("54$i}gfJXoQjQR{~l^");
      try { 
        Utility.typeOfSignature("54$i}gfJXoQjQR{~l^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 54$i}gfJXoQjQR{~l^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = "HK!c2hg";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UF{ A YW;.0a");
      Utility.replace("UF{ A YW;.0a", "UF{ A YW;.0a", "HK!c2hg");
      try { 
        Utility.typeOfSignature("UF{ A YW;.0a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UF{ A YW;.0a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)22;
      byteArray0[0] = (byte)22;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("Y}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("Unrecognized attribute type tag parsed: ", "Unrecognized attribute type tag parsed: ", "impdep2");
      Utility.searchOpcode("impdep2");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.fillup("2E", (short)255, false, ')');
      try { 
        Utility.typeOfSignature(")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))2E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))2E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.decode("N*973AJEGqx[", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.methodSignatureReturnType("N*973AJEGqx[", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N*973AJEGqx['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      boolean boolean0 = true;
      Utility.compactClassName("{java.lang.Object@f4c1a74, java.lang.Object@36afa32a, java.lang.Object@7c5ba200, java.lang.Object@cb7c94a}", "{java.lang.Object@f4c1a74, java.lang.Object@36afa32a, java.lang.Object@7c5ba200, java.lang.Object@cb7c94a}", true);
      Utility.compactClassName("", true);
      Utility.compactClassName("instanceof");
      Utility.clearBit(5, 5);
      String string0 = "\"4h?IK";
      try { 
        Utility.typeOfSignature("\"4h?IK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"4h?IK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)51;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-239), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Utility.accessToString(1495);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-124), (int) (byte) (-124));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lload_1
         // 1:    ifnull\t\t#256
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)72;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1775), 89, false);
      assertEquals("0:    fneg\n1:    fastore\n2:    dstore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = Utility.replace(")", ")", "jsr_w");
      assertEquals("jsr_w", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)73;
      byteArray0[8] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("daload", string1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6;!=i_0c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6;!=i_0c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false, true);
      Utility.compactClassName("impdep1", false);
      Utility.compactClassName("long");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-40), 43);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-117));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[2] = (Constant) constantFieldref1;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantFieldref0.accept(emptyVisitor0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-117), (int) (byte) (-117));
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-117);
      byteArray1[1] = (byte) (-40);
      byteArray1[2] = (byte) (-40);
      byteArray1[3] = (byte)8;
      byteArray1[4] = (byte) (-40);
      byteArray1[5] = (byte) (-40);
      byteArray1[6] = (byte) (-40);
      byteArray1[7] = (byte) (-40);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "'";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[1] = "'";
      Utility.methodTypeToSignature("'", stringArray0);
      try { 
        Utility.typeOfSignature("'G1O0L$$`#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'G1O0L$$`#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("r0X\"92~mZHcF");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-114);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      try { 
        ConstantUtf8.getInstance((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.compactClassName("", false);
      boolean boolean0 = true;
      char char0 = 'G';
      Utility.format((-290), 62, true, 'G');
      Utility.convertString("-290GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-290GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG";
      stringArray0[1] = "long";
      stringArray0[2] = "-290GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[3] = "-290GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG";
      Utility.methodTypeToSignature("-290GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", stringArray0);
      try { 
        Utility.decode("(V.m\";f2+3$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.clearBit(5, 5);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)8;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureReturnType("M$I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M$I'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("vUv,p", false);
      byte[] byteArray0 = null;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A", true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "$l$8b$I$A$A$A$A$A$A$A";
      Utility.methodTypeToSignature("$l$8b$I$A$A$A$A$A$A$A", stringArray0);
      Utility.methodSignatureToString("(L$l$8b$I$A$A$A$A$A$A$A;)L$l$8b$I$A$A$A$A$A$A$A;", ";l9FXix", ";l9FXix", true);
      String string0 = "void";
      boolean boolean0 = true;
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Utility.convertString("|`3ycVM3v;rl7<");
      int int0 = 40;
      Utility.setBit(4008, 40);
      Utility.isSet(2038, 42);
      Utility.clearBit(2237, 2038);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "|`3ycVM3v;rl7<";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "|`3ycVM3v;rl7<";
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("|`3ycVM3v;rl7<, java.lang.Object@3bf9e890, |`3ycVM3v;rl7<", "|`3ycVM3v;rl7<", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      ConstantInteger constantInteger0 = null;
      try {
        constantInteger0 = new ConstantInteger(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "k-lOSsX#}]'3+$6QYZ";
      String[] stringArray0 = new String[6];
      stringArray0[0] = ")";
      stringArray0[1] = "k-lOSsX#}]'3+$6QYZ";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[2] = "k-lOSsX#}]'3+$6QYZ";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[3] = "k-lOSsX#}]'3+$6QYZ";
      stringArray0[4] = "k-lOSsX#}]'3+$6QYZ";
      stringArray0[5] = "k-lOSsX#}]'3+$6QYZ";
      Utility.methodTypeToSignature("k-lOSsX#}]'3+$6QYZ", stringArray0);
      Utility.convertString("k-lOSsX#}]'3+$6QYZ");
      byte[] byteArray0 = null;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-212), (-212));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.searchOpcode("goto_w");
      Utility.compactClassName("");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.getSignature("~S%72\"<NdVH:Yv#]R");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)101;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)101, 1716);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Uf,~41fJ{R", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Uf,~41fJ{R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.accessToString(6);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-118);
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('H');
      Utility.equals(byteArray0, byteArray0);
      Utility.replace("private protected", "private protected", "e(lT<{A=h9S");
      Utility.clearBit((byte)0, (byte)1);
      Utility.encode(byteArray0, true);
      Utility.format((byte)0, (byte)0, true, 'H');
      // Undeclared exception!
      try { 
        Utility.signatureToString("e(lT<{A=h9S", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `e(lT<{A=h9S'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("T/eZq", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T/eZq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string0);
      
      Utility.compactClassName("impdep1", false);
      String string1 = Utility.compactClassName("long");
      assertEquals("long", string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-83);
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-40), 43);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-83));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[2] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-117), (int) (byte) (-117));
      assertEquals("0:    <illegal opcode>\n1:    f2i\n2:    lreturn\n", string2);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('9');
      Utility.accessToString((-2223), true);
      Utility.searchOpcode("\t\t<");
      Utility.accessToString(360);
      Utility.compactClassName("static synchronized volatile native", false);
      // Undeclared exception!
      try { 
        Utility.compactClassName("Byte code error: ", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Utility.classOrInterface((-3544));
      String string0 = "z`";
      // Undeclared exception!
      try { 
        Utility.signatureToString("z`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `z`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "? super ");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      String string0 = "char";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "char";
      Utility.methodTypeToSignature("char", stringArray0);
      int int0 = (-3291);
      LocalVariable[] localVariableArray0 = new LocalVariable[5];
      int int1 = 1811;
      int int2 = (-942);
      int int3 = 43;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)101;
      byteArray0[0] = (byte)101;
      byte byte1 = (byte)127;
      byteArray0[1] = (byte)127;
      byte byte2 = (byte) (-38);
      byteArray0[2] = (byte) (-38);
      CodeException[] codeExceptionArray0 = new CodeException[9];
      String string1 = "org.apache.bcel.classfile.Utility$JavaWriter";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("org.apache.bcel.classfile.Utility$JavaWriter", "? super ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"? super \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = "SAME_LOCALS_1_STACK";
      Utility.signatureToString("SAME_LOCALS_1_STACK", false);
      String string1 = "? extends ";
      // Undeclared exception!
      try { 
        Utility.signatureToString("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `? extends '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.signatureToString("Illegally nested brackets:");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)42;
      Utility.encode(byteArray0, true);
      Utility.methodSignatureReturnType("B2aY9V");
      Utility.signatureToString("B2aY9V", true);
      Utility.format((byte)42, (byte)69, false, 'N');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Illegally nested brackets:";
      objectArray0[1] = (Object) "int";
      objectArray0[2] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[3] = (Object) "byte";
      Utility.printArray(objectArray0, false, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\"Illegally nested brackets:\", \"int\", \"$l$8b$I$A$A$A$A$A$A$A\", \"byte\"", "knkG7X/l", "knkG7X/l", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"Illegally nested brackets:\", \"int\", \"$l$8b$I$A$A$A$A$A$A$A\", \"byte\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Utility.typeOfSignature("FX:mi<,");
      ByteSequence byteSequence0 = null;
      Constant[] constantArray0 = new Constant[5];
      ConstantInvokeDynamic constantInvokeDynamic0 = null;
      try {
        constantInvokeDynamic0 = new ConstantInvokeDynamic((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantInvokeDynamic", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Utility.accessToString(1520);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "final synchronized volatile transient native abstract";
      stringArray0[1] = "\t\t<";
      stringArray0[2] = "final synchronized volatile transient native abstract";
      stringArray0[3] = "final synchronized volatile transient native abstract";
      stringArray0[4] = "final synchronized volatile transient native abstract";
      stringArray0[5] = "final synchronized volatile transient native abstract";
      stringArray0[6] = "final synchronized volatile transient native abstract";
      Utility.methodTypeToSignature("final synchronized volatile transient native abstract", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("final synchronized volatile transient native abstract");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: final synchronized volatile transient native abstract
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Utility.typeOfSignature("I5");
      Utility.isJavaIdentifierPart('b');
      byte[] byteArray0 = null;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, "I5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"I5\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-92);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-92), 2123);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 20, (-2045), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "|P?'(-h[R#'OB\"_nR\"";
      boolean boolean0 = true;
      try { 
        Utility.decode("|P?'(-h[R#'OB\"_nR\"", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "X:+q%";
      // Undeclared exception!
      try { 
        Utility.signatureToString("X:+q%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X:+q%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      boolean boolean0 = Utility.isSet(151, 935);
      assertTrue(boolean0);
      
      String string0 = Utility.methodTypeToSignature("Z&a6?Y4D)6%#3", (String[]) null);
      assertEquals("()LZ&a6?Y4D)6%#3;", string0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "()LZ&a6?Y4D)6%#3;");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string1 = Utility.compactClassName("short", "Z&a6?Y4D)6%#3", false);
      assertEquals("short", string1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)74, 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.classOrInterface(14);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)13;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "CONSTANT_NameAndType";
      Utility.decode("CONSTANT_NameAndType", false);
      boolean boolean1 = true;
      int int0 = 0;
      int int1 = 34;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("class", ")13");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \")13\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.compactClassName("x F<TX=?D}JK-t|&", "9>", false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "x F<TX=?D}JK-t|&";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "x F<TX=?D}JK-t|&";
      objectArray0[3] = (Object) "Y. O";
      PrintStream printStream0 = mockPrintStream0.format("Y. O", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      assertEquals(107, pipedInputStream0.available());
      
      String string0 = Utility.getSignature("x F<TX=?D}JK-t|&");
      assertEquals("Lx;", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Illegal type: ");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "Illegal type: ";
      objectArray0[2] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "Illegal type: ";
      mockPrintStream0.printf("Illegal type: ", objectArray0);
      mockPrintStream0.println(572.0F);
      objectArray0[5] = (Object) "Illegal type: ";
      mockPrintStream0.flush();
      objectArray0[6] = (Object) "Illegal type: ";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      String string0 = Utility.convertString("w1k");
      assertEquals("w1k", string0);
      
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      
      String string2 = Utility.classOrInterface(65);
      assertEquals("class", string2);
      
      String string3 = Utility.accessToString((-2286), false);
      assertEquals("private final native interface abstract synthetic annotation enum", string3);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.isJavaIdentifierPart('@');
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      Utility.setBit(9, 9);
      String string0 = ")\t";
      boolean boolean0 = true;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Method method0 = null;
      try {
        method0 = new Method(dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature(":{ay*.?6vWt", stringArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-83);
      byte byte0 = (byte)47;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)87;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 188, 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.compactClassName("Vfe6H&X^OqA%ml7e", false);
      String string0 = Utility.format(3258, 1958, false, 't');
      String string1 = Utility.classOrInterface(125);
      Utility.compactClassName("'et;SliW", "gb;rL)RIKyC'@}{oA", true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Vfe6H&X^OqA%ml7e";
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "gb;rL)RIKyC'@}{oA";
      objectArray0[4] = (Object) string0;
      objectArray0[5] = (Object) "Vfe6H&X^OqA%ml7e";
      String string2 = Utility.printArray(objectArray0, false, true);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.accessToString(59, true);
      Utility.compactClassName("l%fkj0oLq\"h)**L0");
      Utility.classOrInterface(11);
      try { 
        Utility.typeOfSignature("l%fkj0oLq\"h)**L0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: l%fkj0oLq\"h)**L0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Utility.signatureToString("V");
          ByteSequence byteSequence0 = null;
          Constant[] constantArray0 = new Constant[8];
          ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
          constantArray0[0] = (Constant) constantFloat0;
          int int0 = 256;
          ConstantClass constantClass0 = new ConstantClass(256);
          ConstantClass constantClass1 = new ConstantClass(constantClass0);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor78.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Utility.compactClassName("long", "long", true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      Utility.printArray(objectArray0, true, false);
      Utility.signatureToString("F1OQ,CS$'0C1%W_", false);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, true);
      Utility.accessToString((-1388), true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("freturn", "{java.lang.Object@1ec81cca, java.lang.Object@7ddc388a, java.lang.Object@73231d59, java.lang.Object@3b60adc2, java.lang.Object@6590d828, java.lang.Object@7914a478, java.lang.Object@1236a7d6, java.lang.Object@2c8616ef}", "SimpleElementValue doesnt know how to write out type ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: freturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.classOrInterface((-952));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)97;
      Constant[] constantArray0 = new Constant[8];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(":", "j o-ErK:#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"j o-ErK:#\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      boolean boolean0 = true;
      Utility.format((-4133), (-4133), true, 'B');
      Utility.replace("-4133", "-4133", "-4133");
      try { 
        Utility.methodSignatureReturnType("-4133");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `-4133'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = "@";
      Utility.getSignature("@");
      String string1 = "V";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@");
      Utility.searchOpcode("V");
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("Eu:Nzo#", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Eu:Nzo#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Utility.replace("", "j0@y{11D3p:E%6RHic", "j0@y{11D3p:E%6RHic");
      Utility.isSet(199, 147);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      try { 
        constantPool0.getConstant(149, (byte) (-96));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 149. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      boolean boolean0 = true;
      Utility.format(170, 170, true, '?');
      Utility.compactClassName("170???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????", ":", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)14;
      Utility.equals(byteArray0, byteArray0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("o+!}#cI M6^*I<h", "170???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"170???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.printArray((Object[]) null, false, false);
      try { 
        Utility.typeOfMethodSignature("@ *&`EjUfsf|HufrJ8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @ *&`EjUfsf|HufrJ8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("^X/ab.=t4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^X/ab.=t4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Utility.accessToString(323);
      Utility.replace("org.apache.bcel.classfile.ConstantUtf8$1", "org.apache.bcel.classfile.ConstantUtf8$1", "");
      String string0 = "{>Z'c;=}]%-TET{\\v6";
      try { 
        Utility.typeOfSignature("{>Z'c;=}]%-TET{v6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {>Z'c;=}]%-TET{v6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("java.lang.Object@7e923b50, java.lang.Object@605ed725, java.lang.Object@736d2161, java.lang.Object@7659a7c8, java.lang.Object@197e5ae8, java.lang.Object@f8f411d, java.lang.Object@15730fa4, java.lang.Object@2eaf9d25", "java.lang.Object@7e923b50, java.lang.Object@605ed725, java.lang.Object@736d2161, java.lang.Object@7659a7c8, java.lang.Object@197e5ae8, java.lang.Object@f8f411d, java.lang.Object@15730fa4, java.lang.Object@2eaf9d25", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@7e923b50, java.lang.Object@605ed725, java.lang.Object@736d2161, java.lang.Object@7659a7c8, java.lang.Object@197e5ae8, java.lang.Object@f8f411d, java.lang.Object@15730fa4, java.lang.Object@2eaf9d25
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Utility.clearBit(64, 64);
      String string0 = "";
      Utility.compactClassName("");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)40;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, 1911);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "<";
      try { 
        Utility.methodSignatureArgumentTypes("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Utility.isSet((-562), 2232);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)0;
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte)8);
      Utility.compactClassName("\u0001ZDG;-at2", "\u0001ZDG;-at2", true);
      Utility.accessToString((-562), true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5d 02 08 22 00");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "\u0001ZDG;-at2";
      objectArray0[1] = (Object) (byte)93;
      objectArray0[2] = (Object) "static";
      objectArray0[3] = (Object) (byte)2;
      objectArray0[4] = (Object) (byte)8;
      objectArray0[5] = (Object) (byte)0;
      Utility.printArray(printWriter0, objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)40;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 187, 183, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte) (-65);
      byteArray0[8] = (byte) (-27);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-282), (int) (byte)76);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "0:    lmul\n1:    dup\n2:    if_icmpeq\t\t#-2306\n5:    lshr\n6:    astore_1\n7:    athrow\n8:    <illegal opcode>\n", 32, (-676));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(}{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (}{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8+9m-S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8+9m-S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('T');
      StringWriter stringWriter1 = stringWriter0.append('T');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      stringWriter0.append('g');
      objectArray0[1] = (Object) mockPrintWriter0;
      stringWriter1.write("breakpoint");
      objectArray0[2] = (Object) stringWriter1;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte)60;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.methodSignatureReturnType("Z3C", false);
      Utility.compactClassName("Z3C");
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-89), 5);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)40);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1089083374), (-1902));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 41639. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "->Ff`>X7)Ozght8(!<");
      Utility.compactClassName("org.apache.bcel.util.ByteSequence", false);
      String string0 = Utility.compactClassName("org.apache.bcel.util.ByteSequence");
      assertEquals("org.apache.bcel.util.ByteSequence", string0);
      
      int int0 = Utility.clearBit(49, 49);
      assertEquals(49, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-111);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("01 37 91", string1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java.lang.Byte";
      stringArray0[1] = "java.lang.Byte";
      stringArray0[2] = "java.lang.Byte";
      stringArray0[3] = "java.lang.Byte";
      stringArray0[4] = "java.lang.Byte";
      stringArray0[5] = "java.lang.Byte";
      Utility.methodTypeToSignature("java.lang.Byte", stringArray0);
      Utility.decode("byte", false);
      Utility.isJavaIdentifierPart('c');
      Utility.isSet(77, 77);
      Utility.setBit(74, 16384);
      Utility.compactClassName("java.lang.Byte");
      Utility.fillup("wide", 77, false, 'X');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("java.lang.Byte", "java.lang.Byte", "java.lang.Byte", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = "0?UY*4s";
      try { 
        Utility.methodSignatureReturnType("0?UY*4s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0?UY*4s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
