/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:31:50 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSListAxioms;
import umd.cs.shop.JSListLogicalAtoms;
import umd.cs.shop.JSListSubstitution;
import umd.cs.shop.JSOperator;
import umd.cs.shop.JSPlan;
import umd.cs.shop.JSPlanningDomain;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSState;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTaskAtom;
import umd.cs.shop.JSTasks;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSState_ESTest extends JSState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSTasks jSTasks0 = new JSTasks();
      JSState jSState1 = jSState0.apply((JSPlan) null);
      assertNotSame(jSState1, jSState0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q>b6GWw");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(bufferedReader0);
      JSState jSState0 = null;
      try {
        jSState0 = new JSState(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSListLogicalAtoms", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Function<JSPredicateForm, JSSubstitution> function0 = (Function<JSPredicateForm, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      System.setCurrentTimeMillis((-14L));
      JSPlan jSPlan0 = new JSPlan();
      JSListAxioms jSListAxioms1 = new JSListAxioms();
      JSState jSState0 = new JSState();
      jSPlan0.add((Object) jSListAxioms0);
      JSPlan jSPlan1 = new JSPlan();
      jSState0.addElementsToState(jSPlan0);
      jSState0.addElementsToState(jSPlan0);
      assertFalse(jSState0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      Function<JSPredicateForm, JSSubstitution> function0 = (Function<JSPredicateForm, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      System.setCurrentTimeMillis((-12L));
      JSPlan jSPlan0 = new JSPlan();
      JSState jSState0 = new JSState();
      jSPlan0.add((Object) jSListAxioms0);
      jSState0.addElementsToState(jSPlan0);
      // Undeclared exception!
      try { 
        jSState0.satisfiesTAm(jSTaskAtom0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSListAxioms cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSState", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSState jSState0 = new JSState();
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      jSState0.insertElementAt(jSTaskAtom0, 0);
      UnaryOperator<JSPredicateForm> unaryOperator0 = UnaryOperator.identity();
      Function<JSPredicateForm, Integer> function0 = (Function<JSPredicateForm, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<JSPredicateForm, Integer> function1 = unaryOperator0.andThen((Function<? super JSPredicateForm, ? extends Integer>) function0);
      Function<JSPredicateForm, JSSubstitution> function2 = (Function<JSPredicateForm, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.apply(jSTaskAtom0);
      unaryOperator0.andThen((Function<? super JSPredicateForm, ? extends JSSubstitution>) function2);
      jSState0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      boolean boolean0 = jSTaskAtom0.isPrimitive;
      System.setCurrentTimeMillis(0L);
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      JSTasks jSTasks0 = new JSTasks();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jSListAxioms0;
      jSTaskAtom0.add((Object) function1);
      JSTaskAtom jSTaskAtom1 = new JSTaskAtom();
      JSListLogicalAtoms jSListLogicalAtoms0 = jSState0.Cdr();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSListSubstitution jSListSubstitution0 = jSState0.satisfiesTAm(jSTaskAtom1, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.removeElements(jSSubstitution0);
      JSListSubstitution jSListSubstitution1 = jSState0.satisfiesAll(jSListLogicalAtoms0, jSSubstitution0, jSListAxioms0);
      assertFalse(jSListSubstitution1.equals((Object)jSListSubstitution0));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      jSState0.insertElementAt(jSTaskAtom0, 0);
      UnaryOperator<JSPredicateForm> unaryOperator0 = UnaryOperator.identity();
      Function<JSPredicateForm, JSSubstitution> function0 = (Function<JSPredicateForm, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super JSPredicateForm, ? extends JSSubstitution>) function0);
      jSState0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      jSListAxioms0.add((Object) "`=a[T('<n|jXaC");
      JSListSubstitution jSListSubstitution0 = jSState0.satisfiesAll(jSPlan0, jSSubstitution0, jSListAxioms0);
      System.setCurrentTimeMillis(0L);
      JSPlan jSPlan1 = new JSPlan();
      JSListAxioms jSListAxioms1 = new JSListAxioms();
      JSOperator jSOperator0 = new JSOperator();
      JSPlan jSPlan2 = new JSPlan();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jSListAxioms1;
      jSState0.toArray();
      jSTaskAtom0.add((Object) "`=a[T('<n|jXaC");
      JSTaskAtom jSTaskAtom1 = new JSTaskAtom();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSListAxioms1.add((Object) jSListSubstitution0);
      assertEquals("[[[]]]", jSListAxioms1.toString());
      
      JSListSubstitution jSListSubstitution1 = jSState0.satisfiesTAm(jSTaskAtom0, jSSubstitution0);
      assertTrue(jSListSubstitution1.equals((Object)jSListSubstitution0));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSState jSState0 = new JSState();
      JSJshopVars.flagLevel = 8;
      JSPlan jSPlan0 = new JSPlan();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UnaryOperator<JSPredicateForm> unaryOperator0 = UnaryOperator.identity();
      Function<JSPredicateForm, Integer> function0 = (Function<JSPredicateForm, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super JSPredicateForm, ? extends Integer>) function0);
      jSState0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSOperator jSOperator0 = new JSOperator();
      JSPlan jSPlan1 = new JSPlan();
      jSState0.toArray();
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSState0.containsAll(jSTaskAtom0);
      JSListLogicalAtoms jSListLogicalAtoms0 = jSState0.Cdr();
      jSState0.satisfiesTAm(jSTaskAtom0, jSSubstitution1);
      jSState0.addElementsToState(jSPlan1);
      jSListLogicalAtoms0.add((Object) jSState0);
      jSState0.applySubstitutionListLogicalAtoms(jSSubstitution1);
      System.setCurrentTimeMillis(8);
      jSState0.addElementsToState(jSPlan1);
      assertFalse(jSPlan1.isFailure());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSState jSState0 = new JSState();
      JSJshopVars.flagLevel = 43;
      JSPlan jSPlan0 = new JSPlan();
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSState0.insertElementAt(jSTaskAtom0, 0);
      Function<JSPredicateForm, Integer> function0 = (Function<JSPredicateForm, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      jSListAxioms0.add((Object) "`=a[T('<n|jXaC");
      jSState0.satisfiesAll(jSPlan0, jSSubstitution0, jSListAxioms0);
      System.setCurrentTimeMillis(0L);
      JSOperator jSOperator0 = new JSOperator();
      JSPlan jSPlan1 = new JSPlan();
      jSState0.toArray();
      jSTaskAtom0.add((Object) "`=a[T('<n|jXaC");
      JSTaskAtom jSTaskAtom1 = new JSTaskAtom();
      JSSubstitution jSSubstitution1 = jSState0.satisfies(jSPlan0, jSSubstitution0, jSListAxioms0);
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      JSListAxioms jSListAxioms1 = jSPlanningDomain0.axioms();
      jSListAxioms1.add((Object) jSPlanningDomain0);
      boolean boolean0 = jSTaskAtom1.isCompound;
      jSState0.satisfiesTAm(jSTaskAtom0, jSSubstitution1);
      jSState0.addElementsToState(jSPlan1);
      // Undeclared exception!
      try { 
        jSState0.applyOp(jSOperator0, jSSubstitution0, jSPlan1, jSPlan0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSState", e);
      }
  }
}
