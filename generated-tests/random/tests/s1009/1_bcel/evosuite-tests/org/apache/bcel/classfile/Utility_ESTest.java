/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 11:08:42 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.StreamCorruptedException;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte) (-108);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-126), (int) (byte)124, false);
      assertEquals("0:    land\n1:    nop\n2:    astore_0\n3:    iushr\n4:    astore_3\n5:    d2l\n6:    ixor\n7:    lcmp\n", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.searchOpcode("5j;2wE/S%e");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)86;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (short) (-1), (int) (byte)86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fdiv
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = Utility.isSet(67, 67);
      assertFalse(boolean0);
      
      Utility.fillup("VAWa`Cq)xr6g{/p*$ ", 67, false, 'g');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte)81;
      byteArray0[8] = (byte)77;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 67);
      assertEquals("0:    istore_1\n1:    nop\n2:    <illegal opcode>\n3:    lneg\n4:    lreturn\n5:    lstore_2\n6:    if_acmpeq\t\t#20819\n", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfMethodSignature("\\^H9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \\^H9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-109);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-109), (int) (byte) (-109));
      assertEquals("0:    i2s\n", string0);
      
      String string1 = Utility.getSignature("BootstrapMethods(");
      assertEquals("LBootstrapMethods(;", string1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.getSignature("*(W");
      assertEquals("L*(W;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte)25;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      byteSequence0.reset();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("i2f", string1);
      
      String string2 = Utility.signatureToString("L*(W;");
      assertEquals("*(W", string2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-78);
      byteArray1[1] = (byte) (-78);
      byteArray1[2] = (byte) (-78);
      byteArray1[3] = (byte) (-78);
      byteArray1[4] = (byte)35;
      byteArray1[5] = (byte) (-78);
      byteArray1[6] = (byte) (-78);
      Utility.equals(byteArray0, byteArray1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "008=$\"VU+g![qgmp#";
      try { 
        Utility.typeOfSignature("008=$\"VU+g![qgmp#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 008=$\"VU+g![qgmp#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.convertString(" j[DL]");
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature(" j[DL]", stringArray0);
      Utility.convertString(" j[DL]");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("double", ":", ",(47$vw_$", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "+=qxxkOBS^1f,";
      try { 
        Utility.typeOfSignature("+=qxxkOBS^1f,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =qxxkOBS^1f,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.accessToString(2641, true);
      Utility.compactClassName("multianewarray", "multianewarray", true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "CJ~^.*f";
      stringArray0[1] = "multianewarray";
      stringArray0[2] = "";
      stringArray0[3] = "";
      Utility.methodTypeToSignature("CJ~^.*f", stringArray0);
      Utility.classOrInterface(113);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)126;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte)56;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, (int) (byte)83, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.searchOpcode("<illegal opcode>");
      String string0 = Utility.classOrInterface((short)203);
      assertEquals("class", string0);
      
      String string1 = Utility.compactClassName("multianewarray", false);
      short short0 = Utility.searchOpcode("goto_w");
      assertEquals((short)200, short0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte) (-65);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)6, (int) (byte)6, false);
      assertEquals("8:    athrow\n", string2);
      
      String string3 = Utility.replace("multianewarray", "goto_w", "8:    athrow\n");
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Nf)jLP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Nf)jLP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)103;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2611, 85, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = Utility.classOrInterface(92);
      assertEquals("class", string0);
      
      String string1 = Utility.replace("\"", "\"", "E9~1Sd");
      assertEquals("E9~1Sd", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte) (-116);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-116), 11, false);
      assertEquals("0:    iconst_m1\n1:    fadd\n2:    dstore_2\n3:    frem\n4:    freturn\n5:    aload_0\n6:    f2l\n", string2);
      
      String string3 = Utility.classOrInterface(3872);
      assertEquals("interface", string3);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "if_acmpeq";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_acmpeq");
      stringArray0[1] = "if_acmpeq";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "t]1ee(2>1G";
      stringArray0[3] = "if_acmpeq";
      stringArray0[4] = "if_acmpeq";
      stringArray0[5] = "if_acmpeq";
      stringArray0[6] = "if_acmpeq";
      stringArray0[7] = "if_acmpeq";
      Utility.methodTypeToSignature("if_acmpeq", stringArray0);
      Utility.getSignature("):\n");
      Utility.convertString("):\n");
      // Undeclared exception!
      try { 
        Utility.signatureToString("}AZ2E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `}AZ2E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.isSet(184, 837);
      try { 
        Utility.typeOfSignature("4G#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4G#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)10;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)92, (int) (byte)50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false);
      String string0 = Utility.methodSignatureReturnType("S#_Xotm<ro;-", false);
      assertEquals("short", string0);
      
      String string1 = Utility.classOrInterface(89);
      assertEquals("class", string1);
      
      Utility.fillup("S#_Xotm<ro;-", 89, false, '(');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte) (-19);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-106), 60, true);
      assertEquals("0:    <illegal opcode>\n1:    fcmpl\n2:    fmul\n3:    fcmpg\n4:    ifne\t\t#9969\n", string2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(ID|Vt'HcG8[x", "ofzU=iY)IG,2{", "y'S06M,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `|Vt'HcG8[x'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "caload";
      boolean boolean0 = false;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "caload");
      Utility.fillup("caload", (-3251), false, '\"');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-95);
      boolean boolean1 = true;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 156, (int) (byte) (-95), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-75);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 217, (int) (byte)78, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Utility$1";
      boolean boolean0 = true;
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte) (-81);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-79), (int) (byte) (-81), false);
      try { 
        Utility.decode("ret", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)95;
      byteArray0[4] = (byte)92;
      String string0 = Utility.encode(byteArray0, false);
      Utility.classOrInterface((byte)95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.accessToString(2641, true);
      Utility.compactClassName("multianewarray", "multianewarray", true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "CJ~^.*f";
      stringArray0[1] = "multianewarray";
      stringArray0[2] = "";
      stringArray0[3] = "";
      Utility.methodTypeToSignature("CJ~^.*f", stringArray0);
      Utility.classOrInterface(113);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, (int) (byte)83, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte)56;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, 2, 2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.replace("7;Dc", "m%ga[~(", "m%ga[~(");
      Utility.format((-1679), (-1679), true, '0');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)63;
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(67, 67);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1409), 46);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantLong constantLong0 = new ConstantLong((-1409));
      constantArray0[2] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 95, (-1719), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-53), (int) (byte) (-53), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte) (-55);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)20);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-110), (byte) (-55));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1440530666), 1777);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("5>e6Bwk%>yMyFo@");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[4] = (Constant) constantUtf8_1;
      ConstantMethodType constantMethodType1 = new ConstantMethodType((byte)11);
      constantArray0[5] = (Constant) constantMethodType1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[6] = (Constant) constantFieldref0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(1777, (byte) (-110));
      constantArray0[7] = (Constant) constantNameAndType1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(117, (byte) (-48));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[8] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("tIN{$0m-+--99");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "new";
      objectArray0[1] = (Object) mockPrintStream1;
      mockPrintStream0.println(0L);
      objectArray0[2] = (Object) mockPrintStream1;
      objectArray0[3] = (Object) mockPrintStream1;
      PrintStream printStream0 = mockPrintStream1.printf(locale0, "new", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("aload\t\t%64", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "/=8:Z\\oQtVUv@O\\X\"&g";
      try { 
        Utility.typeOfSignature("/=8:ZoQtVUv@OX\"&g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /=8:ZoQtVUv@OX\"&g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)91;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 53, (int) (byte) (-111), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 10331. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*Yi4ZwmjUgeHZ!}mA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yi4ZwmjUgeHZ!}mA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Vr@$-z+G8_tK+CN6");
      Utility.format(194, 194, true, 'G');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-68), (-2926));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.isSet(129, 129);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte)52;
      byteArray0[8] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 129, (int) (byte) (-100));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.isSet(85, 42);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)2;
      byte byte0 = (byte)92;
      byteArray0[3] = (byte)92;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)2, (int) (byte)2);
      String string0 = "byte";
      try { 
        Utility.methodSignatureReturnType("byte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `byte'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("\t<", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)16;
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((byte)90);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantClass constantClass0 = new ConstantClass(743);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)41, (-75), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      Utility.accessToString(163);
      Utility.decode("4/jaf($)8_tp59m~", false);
      Utility.searchOpcode("4/jaf($)8_tp59m~");
      String string0 = "_x#H\"xf=3(m";
      // Undeclared exception!
      try { 
        Utility.signatureToString("_x#H\"xf=3(m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `_x#H\"xf=3(m'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)125;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte) (-123);
      byteArray0[7] = (byte)0;
      Utility.encode(byteArray0, false);
      Utility.getSignature("{}");
      MockFile mockFile0 = new MockFile("(Bh88 ihz,)");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Utility.printArray((PrintStream) mockPrintStream1, objectArray0);
      Utility.searchOpcode(">\t");
      Utility.compactClassName("Invalid type: ", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1310, 1246, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)73;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("QJI}Azy&_MoBms");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QJI}Azy&_MoBms
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(3070, (byte)65);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 120. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)73;
      byte byte0 = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-65);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("39 49 51 fa 52 bf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 39 49 51 fa 52 bf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)119;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte) (-20);
      byteArray0[8] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      byteSequence0.read();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("daload", true);
      Utility.classOrInterface(97);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)113, 154, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("y@vlcTA$ne");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[1] = (Constant) constantMethodHandle0;
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1984, (-1047), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte) (-99);
      byteArray0[8] = (byte) (-75);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("&Rzf9VtW5mYA7GxfJg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &Rzf9VtW5mYA7GxfJg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 58, 58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.accessToString(52);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)44;
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)29;
      byte byte1 = (byte)93;
      byteArray0[2] = (byte)93;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 78, (int) (byte)93, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)41;
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("XbgX9vq%}sXN}.");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-63));
      constantArray0[1] = (Constant) constantDouble0;
      ConstantClass constantClass0 = new ConstantClass(1115);
      constantArray0[2] = (Constant) constantClass0;
      ConstantString constantString0 = new ConstantString((byte) (-63));
      constantArray0[3] = (Constant) constantString0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)71, 177);
      constantArray0[4] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 8, 201, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 52439. Constant pool size is: 5
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":%+Pct6Bpd$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :%+Pct6Bpd$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "U5Qx0;7:[ekW";
      try { 
        Utility.typeOfSignature("U5Qx0;7:[ekW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U5Qx0;7:[ekW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.clearBit(76, 76);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)4;
      Utility.encode(byteArray0, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)32, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = Utility.setBit(823, 823);
      assertEquals(8389431, int0);
      
      String string0 = Utility.getSignature("areturn");
      assertEquals("Lareturn;", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)60;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-37), (int) (byte) (-117));
      assertEquals("0:    f2i\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    istore_1\n", string1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.classfile.Utility$JavaReader", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.Utility$JavaReader'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "4ECo5.";
      Utility.replace("4ECo5.", "4ECo5.", "P,t'`03%l9L");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-1);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-90), (-1890), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lmul
         // 1:    fconst_1
         // 2:    pop
         // 3:    iaload
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.setBit(442, 40);
      Utility.classOrInterface(442);
      Utility.getSignature("class");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Lclass;");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.print((-1909842763));
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) "Lclass;";
      Utility.printArray((PrintWriter) mockPrintWriter1, objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)88, (int) (byte)88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = Utility.typeOfSignature("J!N~t");
      assertEquals((byte)11, byte0);
      
      String string0 = Utility.convertString("5<Y9\"~");
      assertEquals("5<Y9\\\"~", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-101);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)47, 20, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-5);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)65, (int) (byte) (-121));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = Utility.clearBit(30, 6);
      assertEquals(30, int0);
      
      String string0 = Utility.compactClassName("getfield", "getfield", false);
      assertEquals("getfield", string0);
      
      boolean boolean0 = Utility.isSet(3494, 3494);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)89;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)1, (int) (byte) (-97), false);
      assertEquals("3:    sipush\t\t23226\n6:    aconst_null\n7:    dup\n", string1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)13;
      byte byte0 = (byte)9;
      byteArray0[2] = (byte)9;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)9);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 3337. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3927, (int) (byte)123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Utility.compactClassName("jsr", true);
      Utility.accessToString(1624, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "jsr";
      objectArray0[1] = (Object) "static final volatile interface abstract";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "jsr";
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-114);
      byte byte0 = (byte)23;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)57, 1624);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lload_2");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "lload_2";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)61;
      byteArray0[8] = (byte)76;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2942), 10);
      assertEquals("0:    iconst_3\n1:    lor\n2:    <illegal opcode>\n3:    lor\n4:    if_icmpne\t\t#-2297\n7:    istore_2\n8:    astore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.compactClassName("void");
      Utility.classOrInterface(31);
      int int0 = 2203;
      Utility.classOrInterface(2203);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-12);
      Constant[] constantArray0 = new Constant[6];
      ConstantFloat constantFloat0 = new ConstantFloat((-1586.9995F));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantString constantString0 = new ConstantString((byte)0);
      constantArray0[1] = (Constant) constantString0;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-12);
      byteArray1[2] = (byte) (-123);
      byteArray1[3] = (byte)34;
      byteArray1[4] = (byte) (-123);
      byteArray1[5] = (byte) (-12);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte) (-123);
      byteArray1[8] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-123), 217);
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantFloat constantFloat1 = new ConstantFloat(byteSequence0);
      constantArray0[4] = (Constant) constantFloat1;
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[5] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1095, (int) (byte) (-12));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("Z", "Invalid signature: `", "invokeinterface");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)64;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)64, 1251);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("aload_1", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.accessToString(16384);
      byte[] byteArray0 = Utility.decode("enum", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (-1728), 229, false);
      Utility.printArray((Object[]) null, false, false);
      Utility.accessToString(1024);
      Utility.equals(byteArray0, byteArray0);
      Utility.replace("arraylength", "0:    lsub\n1:    fdiv\n2:    lneg\n3:    ldiv\n", "0:    lsub\n1:    fdiv\n2:    lneg\n3:    ldiv\n");
      MockPrintStream mockPrintStream0 = new MockPrintStream("\tdefault = ");
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)96;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-103), 72);
      assertEquals("0:    ifeq\t\t#21626\n3:    dcmpg\n4:    dconst_1\n5:    <illegal opcode>\n6:    lsub\n7:    iadd\n", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-118);
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte)61;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 13, 48, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 16534. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Utility.accessToString(6494, true);
      assertEquals("private protected static final volatile native strictfp synthetic", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)12;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1007), 46, false);
      assertEquals("0:    iaload\n1:    lstore\t\t%12\n", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "private protected static final volatile native strictfp synthetic";
      stringArray0[1] = "U=Se9rem<88dQ=";
      stringArray0[2] = "iaload";
      stringArray0[3] = "0:    iaload\n1:    lstore\t\t%12\n";
      stringArray0[4] = "iaload";
      stringArray0[5] = "iaload";
      stringArray0[6] = "iaload";
      stringArray0[7] = "private protected static final volatile native strictfp synthetic";
      stringArray0[8] = "iaload";
      String string2 = Utility.methodTypeToSignature("0:    iaload\n1:    lstore\t\t%12\n", stringArray0);
      assertEquals("(Lprivate;LU=Se9rem<88dQ=;Liaload;L0:;Liaload;Liaload;Liaload;Lprivate;Liaload;)L0:;", string2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isJavaIdentifierPart('r');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)89;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("Y$ba$b6$e05Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y$ba$b6$e05Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utility.typeOfSignature("S");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.accessToString(97);
      String string0 = "\t\t";
      Utility.getSignature("\t\t");
      Utility.getSignature("public synchronized volatile");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      ConstantPool constantPool0 = null;
      int int0 = (-1270);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 60, (-1270), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = Utility.format(1, 1, true, 'E');
      assertEquals("1", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-32);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dsub", string1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "#j`4";
      try { 
        Utility.typeOfSignature("#j`4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #j`4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Utility.replace("static", "%vD2qWR~?6d", "MIBx8exZCJpw7Dq=(");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-77);
      Constant[] constantArray0 = new Constant[6];
      ConstantClass constantClass0 = new ConstantClass(153);
      constantArray0[1] = (Constant) constantClass0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)0, (-1459));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      Constant constant0 = constantClass0.copy();
      constantArray0[3] = constant0;
      ConstantLong constantLong0 = new ConstantLong((byte) (-77));
      constantArray0[5] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-77), (int) (byte)14, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    dload_1
         // 3:    dconst_0
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "k/uuz]~)-F%[\\t|B[l";
      // Undeclared exception!
      try { 
        Utility.getSignature("k/uuz]~)-F%[\t|B[l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[\t|B[l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "aM");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("aM");
      try { 
        Utility.typeOfSignature("8#^ yhw)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8#^ yhw)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true);
      try { 
        Utility.typeOfSignature("7$b9epmH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7$b9epmH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "Xg}";
      try { 
        Utility.typeOfSignature("Xg}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xg}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.accessToString(54);
      int int0 = 84;
      boolean boolean0 = true;
      Utility.format(54, 84, true, '^');
      String string0 = "\"h! @*CX+";
      Utility.replace("54^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "54^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "\"h! @*CX+");
      Utility.accessToString(54, true);
      try { 
        Utility.typeOfSignature("\"h! @*CX+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"h! @*CX+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = ")ByGe|W3wfXuyBT12_`";
      try { 
        Utility.typeOfSignature(")ByGe|W3wfXuyBT12_`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )ByGe|W3wfXuyBT12_`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byte byte0 = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-42);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 54, (int) (byte) (-42));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "void");
      Utility.convertString("void");
      int int0 = 82;
      Utility.clearBit(82, 82);
      char char0 = 'd';
      Utility.isJavaIdentifierPart('d');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-53);
      byte byte0 = (byte)58;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)58;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (int) (byte)126);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("void", "void");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // void
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit(67, 67);
      Utility.methodSignatureReturnType("V+");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte) (-75);
      byteArray0[8] = (byte)107;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, 247);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.format(1226, 4096, false, 'Z');
      short short0 = Utility.searchOpcode(string0);
      assertEquals((short) (-1), short0);
      
      byte byte0 = Utility.typeOfSignature(string0);
      assertEquals((byte)4, byte0);
      
      String string1 = Utility.classOrInterface(4096);
      assertEquals("class", string1);
      
      boolean boolean0 = Utility.isSet((-2305), 18);
      assertTrue(boolean0);
      
      Utility.compactClassName("monitorenter", "class", false);
      int int0 = Utility.setBit(18, 303);
      assertEquals(32786, int0);
      
      String string2 = Utility.compactClassName(" ", "O X'[", true);
      assertEquals(" ", string2);
      
      byte[] byteArray0 = Utility.decode("[]", false);
      assertArrayEquals(new byte[] {(byte)91, (byte)93}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.accessToString(36, true);
      assertEquals("protected", string0);
      
      short short0 = Utility.searchOpcode("=3wS)BXm*Dug}0MX");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("goto_w\t\t#-1666533180", string1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Unexpected element value kind in annotation: ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = (-746);
      Utility.isSet((-746), (-746));
      String string0 = "W2bh3e-9";
      // Undeclared exception!
      try { 
        Utility.signatureToString("W2bh3e-9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W2bh3e-9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Pesp&", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pesp&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      try { 
        Utility.typeOfSignature("E_k?c [I7+'>>Xd]<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E_k?c [I7+'>>Xd]<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utility.typeOfSignature("Type");
      Utility.classOrInterface((byte)14);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("Type");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Type
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("aload_2", string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)102;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "aload_2";
      objectArray0[4] = (Object) (byte)102;
      objectArray0[5] = (Object) "aload_2";
      String string1 = Utility.printArray(objectArray0);
      String string2 = Utility.printArray(objectArray0, false);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.searchOpcode("3s AN+p\"U4k:m4]^]-");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)119;
      Utility.toHexString(byteArray0);
      Utility.classOrInterface((byte)119);
      Utility.accessToString(66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)119, (-2680));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "%\\HSbc!tI~OMk1f;X";
      try { 
        Utility.typeOfSignature("%HSbc!tI~OMk1f;X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %HSbc!tI~OMk1f;X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3927, (int) (byte)123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        Utility.typeOfSignature("M$w>AP8J9VxhB$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M$w>AP8J9VxhB$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-73), 12, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte) (-69);
      byteArray0[8] = (byte)80;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-266), (int) (byte) (-47));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aconst_null
         // 1:    <illegal opcode>
         // 2:    <illegal opcode>
         // 3:    bastore
         // 4:    dload_2
         // 5:    fstore_3
         // 6:    astore_1
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-17);
      byte byte0 = (byte)20;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteArray0[6] = (byte)20;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-17), (int) (byte)90, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    dload_1
         // 2:    dup_x1
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SG))1=eL*]TkdqAe");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.bcel.classfile.Attribute";
      stringArray0[1] = "org.apache.bcel.classfile.Attribute";
      stringArray0[2] = "org.apache.bcel.classfile.Attribute";
      Utility.methodTypeToSignature("org.apache.bcel.classfile.Attribute", stringArray0);
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(Lorg/apache/bcel/classfile/Attribute;Lorg/apache/bcel/classfile/Attribute;Lorg/apache/bcel/classfile/Attribute;)Lorg/apache/bcel/classfile/Attribute;", false);
      Utility.accessToString(1687, false);
      MockFile mockFile0 = new MockFile("java.lang.\tdefault = ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1596), 59, true);
      assertEquals("0:    <illegal opcode>\n1:    areturn\n2:    iload_2\n3:    fstore_2\n4:    <illegal opcode>\n5:    fstore_1\n", string0);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-99);
      byteArray1[1] = (byte)68;
      byteArray1[2] = (byte)68;
      byteArray1[3] = (byte)28;
      byteArray1[4] = (byte)69;
      byteArray1[5] = (byte) (-23);
      byteArray1[6] = (byte)97;
      byteArray1[7] = (byte) (-23);
      byteArray1[8] = (byte) (-23);
      String string1 = Utility.toHexString(byteArray1);
      assertEquals("9d 44 44 1c 45 e9 61 e9 e9", string1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      Utility.printArray((Object[]) null, false, false);
      Utility.printArray((Object[]) null, false, false);
      Utility.compactClassName("\tdefault = ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)116;
      byteArray0[8] = (byte) (-60);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)8, (int) (byte)13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 9332. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      try { 
        Utility.typeOfSignature("WVQ1Q*`nz5paMgO6I ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WVQ1Q*`nz5paMgO6I 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'G^I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'G^I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.classOrInterface((-944));
      String string0 = "!/";
      Utility.convertString("!/");
      Utility.setBit((-944), (-944));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte) (-30);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)118, 210);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInterfaceMethodref0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)36, (int) (byte) (-35), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Utility.setBit(442, 40);
      assertEquals(442, int0);
      
      String string0 = Utility.classOrInterface(442);
      assertEquals("class", string0);
      
      String string1 = Utility.getSignature("class");
      assertEquals("Lclass;", string1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Lclass;");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) "Lclass;";
      Utility.printArray((PrintWriter) mockPrintWriter1, objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("aastore", string2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte) (-15);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)92);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      Constant constant0 = constantInteger0.copy();
      constantArray0[1] = constant0;
      ConstantLong constantLong0 = new ConstantLong((byte)49);
      constantArray0[2] = (Constant) constantLong0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)104);
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)115, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dup
         // 1:    ifnull\t\t#29441
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)71;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte)52;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1762, (-1690), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)78;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-19), 52, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "[7";
      // Undeclared exception!
      try { 
        Utility.signatureToString("[7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)65;
      byte byte0 = (byte)68;
      byteArray0[4] = (byte)68;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)41;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.fillup("org.apache.bcel.util.ClassPath$Zip", 3, false, '1');
      Utility.clearBit(3, 3);
      Utility.compactClassName("org.apache.bcel.util.ClassPath$Zip", "<illegal opcode>", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      Utility.toHexString(byteArray0);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("char", "ifgt", true);
      Utility.fillup("org.apache.bcel.util.ClassPath$Zip", 3766, true, '1');
      try { 
        Utility.methodSignatureReturnType("OeRb$a8SeZ4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OeRb$a8SeZ4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      byte byte0 = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte) (-77);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor1);
      constantPool0.accept(emptyVisitor0);
      constantPool0.setConstantPool((Constant[]) null);
      int int0 = 66;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 66, (int) (byte) (-77));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.clearBit(20, 20);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)73;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)42;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FPx=_kZB|s;L");
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), 44, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore_2
         // 1:    return
         // 2:    ishl
         // 3:    aload_0
         // 4:    lstore_3
         // 5:    fstore_2
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.LineNumberTable", false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "org.apache.bcel.classfile.LineNumberTable";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.LineNumberTable");
      objectArray0[1] = (Object) "org.apache.bcel.classfile.LineNumberTable";
      Utility.printArray(objectArray0, false, true);
      Utility.classOrInterface(1388);
      Utility.toHexString(byteArray0);
      Utility.replace("ixor", "org.apache.bcel.classfile.LineNumberTable", "int");
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-4);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)76;
      byteArray1[3] = (byte)84;
      byteArray1[4] = (byte)60;
      byteArray1[5] = (byte) (-118);
      byteArray1[6] = (byte) (-18);
      byteArray1[7] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)76, (-580));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Utility.setBit(78, 78);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)79;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)56, 81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "sOa#)ZH?;?n>.^";
      Utility.methodSignatureReturnType("sOa#)ZH?;?n>.^");
      String string1 = "f";
      String string2 = null;
      Utility.replace("f", "boolean", (String) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 1708;
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1708);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\"";
      stringArray0[1] = "\"";
      stringArray0[2] = "\"";
      Utility.methodTypeToSignature("\"", stringArray0);
      Utility.methodSignatureToString("(L\";L\";L\";)L\";", "(L\";L\";L\";)L\";", "");
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Utility.typeOfSignature("DV.&}jO");
      Utility.compactClassName("long", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)7, (int) (byte)7, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-6);
      byte byte0 = (byte)45;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-79);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.decode("$_$fa$z$3e$b1", false);
      File file0 = MockFile.createTempFile("$_$fa$z$3e$b1", "$_$fa$z$3e$b1");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      char char0 = '(';
      PrintStream printStream0 = mockPrintStream0.append('(');
      Utility.printArray(printStream0, objectArray0);
      try { 
        Utility.typeOfSignature("$_$fa$z$3e$b1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $_$fa$z$3e$b1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)115;
      byteArray0[8] = (byte)5;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)34;
      byteArray1[1] = (byte)126;
      byteArray1[2] = (byte) (-75);
      byteArray1[3] = (byte) (-29);
      byteArray1[4] = (byte) (-103);
      byteArray1[5] = (byte)115;
      byteArray1[6] = (byte)5;
      byteArray1[7] = (byte)34;
      byteArray1[8] = (byte) (-122);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "void");
      Utility.convertString("void");
      int int0 = 82;
      Utility.clearBit(82, 82);
      Utility.isJavaIdentifierPart('d');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (int) (byte)126);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    wide\t(wide)
         // 1:    <illegal opcode>
         // 2:    fstore\t\t%14974
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-118);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("@hJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @hJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Utility.accessToString((-930));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byte byte0 = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)123;
      Utility.toHexString(byteArray0);
      Utility.searchOpcode("/!DBqd?FQ|IdQlED");
      Utility.isSet(58, (byte) (-104));
      Utility.decode("3e f4 98 7b", false);
      String string0 = "H/BU~e]PN4hb`8&ASE:";
      try { 
        Utility.typeOfSignature("H/BU~e]PN4hb`8&ASE:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H/BU~e]PN4hb`8&ASE:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = ")\t";
      stringArray0[0] = ")\t";
      stringArray0[1] = "s4D;fV";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")\t");
      stringArray0[2] = "s4D;fV";
      Utility.methodTypeToSignature("s4D;fV", stringArray0);
      try { 
        Utility.typeOfSignature("5t8}_`d#z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5t8}_`d#z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = new Integer(927);
      try { 
        Utility.typeOfSignature("9h7/c[7m]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9h7/c[7m]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = (-459);
      Utility.format((-1227), (-459), false, ' ');
      String string0 = "Q'`+;VDl:?u";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q'`+;VDl:?u", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q'`+;VDl:?u'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "Ey Fqg4l :Gx3";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ey Fqg4l :Gx3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ey Fqg4l :Gx3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)57;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("92 71 51 39", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("i2c", string1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.searchOpcode("short");
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("short", stringArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, (int) (short) (-1), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)0;
      Utility.encode(byteArray0, true);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]3d|)v*[erE;,L:");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      constantPool1.dump(dataOutputStream0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)13, (int) (byte)125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "multianewarray");
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)83;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)91;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 53, (int) (byte) (-107), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byte byte0 = (byte)16;
      byteArray0[1] = (byte)16;
      ConstantPool constantPool0 = null;
      int int0 = 75;
      int int1 = 41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 75, 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.fillup("anewarray", (byte)68, true, '');
      Utility.convertString("Co5@kM?!\"O,p");
      Utility.typeOfSignature("B");
      Utility.isJavaIdentifierPart('F');
      Utility.clearBit((byte)68, (byte)8);
      try { 
        Utility.methodSignatureReturnType("U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)122;
      byte byte0 = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)66;
      byte byte1 = (byte)108;
      byteArray0[6] = (byte)108;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, 40, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "A";
      try { 
        Utility.typeOfSignature("A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-15);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1332, 1332, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)91;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 53, (int) (byte) (-111), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString(1621);
      try { 
        Utility.typeOfSignature("6Ls");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6Ls
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = Utility.convertString("G Kr:n}/o");
      assertEquals("G Kr:n}/o", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "G Kr:n}/o";
      stringArray0[1] = "G Kr:n}/o";
      String string1 = Utility.methodTypeToSignature("G Kr:n}/o", stringArray0);
      assertEquals("(LG;LG;)LG;", string1);
      
      byte byte0 = Utility.typeOfMethodSignature("(LG;LG;)LG;");
      assertEquals((byte)14, byte0);
      
      String string2 = Utility.methodSignatureToString("(LG;LG;)LG;", "gX@Xhk|;T'", "oi7u};N@-h8", true);
      assertEquals("oi7u};N@-h8 G gX@Xhk|;T'(G arg1, G arg2)", string2);
      
      Utility.methodSignatureReturnType("StackMapTable");
      String string3 = Utility.compactClassName("J)@!05|So", "oi7u};N@-h8 G gX@Xhk|;T'(G arg1, G arg2)", false);
      assertEquals("J)@!05|So", string3);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('`');
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("monitorenter", true);
      assertEquals("monitorenter", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("if_icmpge\t\t#2875", string1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("The filters must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The filters must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = " ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      int int0 = 4096;
      String string1 = Utility.format(1226, 4096, true, 'Z');
      Utility.searchOpcode(string1);
      try { 
        Utility.typeOfSignature(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1226ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      short short0 = Utility.searchOpcode(").jjt>");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('&');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("idiv", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-52);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte) (-29);
      byteArray0[8] = (byte) (-42);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-29), 15, false);
      Utility.accessToString(1118, false);
      Utility.isSet((byte)32, (byte)103);
      Utility.clearBit((byte) (-54), (-862));
      try { 
        Utility.methodSignatureReturnType("0:    <illegal opcode>\n1:    breakpoint\n2:    <illegal opcode>\n3:    iload_1\n4:    ifge\t\t#8299\n7:    <illegal opcode>\n8:    <illegal opcode>\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    <illegal opcode>
         // 1:    breakpoint
         // 2:    <illegal opcode>
         // 3:    iload_1
         // 4:    ifge\t\t#8299
         // 7:    <illegal opcode>
         // 8:    <illegal opcode>
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-101);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1202, (int) (byte) (-79));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "H1Rj+INr+`=\"9J8";
      // Undeclared exception!
      try { 
        Utility.signatureToString("H1Rj+INr+`=\"9J8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H1Rj+INr+`=\"9J8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)70);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[1] = (Constant) constantString0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-3918), (-2501));
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals("bipush\t\t109", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Utility.methodSignatureReturnType("F@\b_.3!yYG_mw06");
      Utility.convertString("float");
      byte[] byteArray0 = null;
      Constant[] constantArray0 = new Constant[7];
      int int0 = (-2590);
      MockFile mockFile0 = new MockFile("invokeinterface", "float");
      File file0 = MockFile.createTempFile("int", (String) null, (File) mockFile0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "int");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"int\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "<bRN\\(c$%&";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<bRN(c$%&";
      Utility.methodTypeToSignature("<bRN(c$%&", stringArray0);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("(L<bRN(c$%&;)L<bRN(c$%&;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<bRN(c$%&;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((-1L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantLong constantLong2 = new ConstantLong(constantLong1);
      constantArray0[1] = (Constant) constantLong2;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("DJvZ");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("astore_3", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)90;
      byte byte0 = (byte)68;
      byteArray0[2] = (byte)68;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-39);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-39), (-1));
      Utility.getSignature("0:    <illegal opcode>\n1:    dup_x1\n2:    fstore_1\n3:    dup_x1\n4:    <illegal opcode>\n");
      char char0 = 't';
      Utility.isJavaIdentifierPart('t');
      String string0 = "D:J^8h@";
      try { 
        Utility.methodSignatureArgumentTypes("D:J^8h@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: D:J^8h@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[]");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "[]";
      stringArray0[1] = "[]";
      stringArray0[2] = "[]";
      stringArray0[3] = "[]";
      stringArray0[4] = "[]";
      stringArray0[5] = "[]";
      stringArray0[6] = "[]";
      stringArray0[7] = "boolean";
      stringArray0[8] = "return";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[]", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-27);
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-117), 255);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)18);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ConstantClass constantClass0 = new ConstantClass(dataInputStream0);
      constantArray0[1] = (Constant) constantClass0;
      ConstantDouble constantDouble0 = new ConstantDouble((-1080.8));
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)18, (int) (byte) (-27));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 35761. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)67;
      byteArray0[0] = (byte)67;
      byte byte1 = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)35;
      ConstantPool constantPool0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2807), (-1), true);
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    fstore_0\n1:    iconst_1\n2:    fload_1\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    fstore_0
         // 1:    iconst_1
         // 2:    fload_1
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Utility$JavaReader";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Utility$JavaReader");
      String string1 = "d_r$Q5*v`B5}:l$";
      boolean boolean0 = true;
      try { 
        Utility.decode("d_r$Q5*v`B5}:l$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      String string0 = "KM.w";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KM.w");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("KM.w", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KM.w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = Utility.signatureToString("Cache hit ", true);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-29);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1364, 57);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("48N'|");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)91);
      constantArray0[3] = (Constant) constantFloat0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[4] = (Constant) constantFieldref1;
      ConstantDouble constantDouble2 = new ConstantDouble(constantDouble0);
      constantArray0[5] = (Constant) constantDouble2;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[6] = (Constant) constantUtf8_1;
      ConstantUtf8 constantUtf8_2 = ConstantUtf8.getCachedInstance("HY#&.1.L]QM20C5/(E%");
      constantArray0[7] = (Constant) constantUtf8_2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup_x2", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false);
      Utility.methodTypeToSignature("8}6WlW:aJ2", (String[]) null);
      Utility.accessToString(760, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("XXF", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XXF'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=?ZA'eV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =?ZA'eV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-110);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)3);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-9), (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "M-PK";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("M-PK", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M-PK'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Utility.accessToString((-423));
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "public static final volatile interface abstract strictfp synthetic annotation enum";
      objectArray0[1] = (Object) "public static final volatile interface abstract strictfp synthetic annotation enum";
      objectArray0[2] = (Object) "public static final volatile interface abstract strictfp synthetic annotation enum";
      objectArray0[3] = (Object) "public static final volatile interface abstract strictfp synthetic annotation enum";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "public static final volatile interface abstract strictfp synthetic annotation enum";
      objectArray0[6] = (Object) "public static final volatile interface abstract strictfp synthetic annotation enum";
      objectArray0[7] = (Object) "public static final volatile interface abstract strictfp synthetic annotation enum";
      Utility.printArray(objectArray0, true);
      Utility.convertString("r?DA8p(jBGz7k");
      Utility.getSignature("r?DA8p(jBGz7k");
      try { 
        Utility.typeOfSignature(";*4;,<2-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;*4;,<2-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("arraylength", string0);
      
      String string1 = Utility.compactClassName("l2i", "long", false);
      assertEquals("l2i", string1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Utility.clearBit(20, 20);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), 44, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore_2
         // 1:    return
         // 2:    ishl
         // 3:    lmul
         // 4:    lstore_3
         // 5:    fstore_2
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = null;
      Utility.methodTypeToSignature(",M;t", (String[]) null);
      Utility.format(256, 256, false, '%');
      Utility.methodSignatureToString("()L,M;t;", ",M;t", "()L,M;t;");
      Utility.format(256, 2491, false, '%');
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, false, false);
      Utility.setBit(83, 83);
      try { 
        Utility.typeOfSignature("O,F{F>y}}bf:iHPp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O,F{F>y}}bf:iHPp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "R<SU;+q>b 6/y.6WRM";
      try { 
        Utility.typeOfSignature("R<SU;+q>b 6/y.6WRM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R<SU;+q>b 6/y.6WRM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.searchOpcode(">YL^>]S w94{C");
      try { 
        Utility.typeOfSignature(">YL^>]S w94{C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >YL^>]S w94{C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = Utility.classOrInterface(23);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)38;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$a0$N$94$s", string1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)38;
      byteArray1[1] = (byte) (-96);
      byteArray1[2] = (byte) (-96);
      byteArray1[3] = (byte) (-108);
      byteArray1[4] = (byte)13;
      byteArray1[5] = (byte) (-108);
      byteArray1[6] = (byte)38;
      byteArray1[7] = (byte)38;
      byteArray1[8] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteSequence0, constantPool1);
      String string3 = Utility.classOrInterface((-889275714));
      assertEquals("interface", string3);
      
      String string4 = Utility.compactClassName("dload_0", "t)3;", true);
      assertTrue(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = "[M+*|u1uTKD{?4>,TPX";
      Utility.typeOfSignature("[M+*|u1uTKD{?4>,TPX");
      byte[] byteArray0 = null;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("kNrG?K YP(~^]nL/1", "{?#x!0y@Jp_HuR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"{?#x!0y@Jp_HuR\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.accessToString((-981), true);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)105, 88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.setBit((-195), (-195));
      Utility.signatureToString("B~@~", true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "byte";
      objectArray0[1] = (Object) "B~@~";
      objectArray0[2] = (Object) "B~@~";
      objectArray0[3] = (Object) "byte";
      objectArray0[4] = (Object) "byte";
      objectArray0[5] = (Object) "B~@~";
      Utility.printArray(objectArray0);
      try { 
        Utility.methodSignatureReturnType("{byte, B~@~, B~@~, byte, byte, B~@~}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{byte, B~@~, B~@~, byte, byte, B~@~}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = " = ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}A");
      stringArray0[1] = "}A";
      stringArray0[2] = "}A";
      stringArray0[3] = "}A";
      Utility.methodTypeToSignature("}A", stringArray0);
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.replace("}A", " = ", "}A");
      Utility.signatureToString("Sq INC%[sb!'@p\"", true);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "byte";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\r";
      stringArray0[1] = "\r";
      stringArray0[2] = "F5u?h2Dns/W";
      stringArray0[3] = "\r";
      Utility.methodTypeToSignature("\r", stringArray0);
      try { 
        Utility.typeOfSignature(",dmyv:L&{n|b],Fr/EC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,dmyv:L&{n|b],Fr/EC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)124;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, 74, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-125), (int) (byte) (-125));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Utility.getSignature("");
      Utility.searchOpcode("L;");
      Utility.methodSignatureReturnType("L;", true);
      Utility.searchOpcode("ifne");
      boolean boolean0 = true;
      Utility.fillup("", (-2079), true, '>');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte) (-37);
      byte byte0 = (byte) (-41);
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte) (-112);
      byteArray0[8] = (byte)104;
      Constant[] constantArray0 = new Constant[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantMethodref0;
      Constant constant0 = constantMethodref0.copy();
      constantArray0[1] = constant0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Utility.setBit(927, 927);
      try { 
        Utility.typeOfSignature(".a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Utility.fillup("org.apache.bcel.classfile.Utility$JavaReader", 14, false, ':');
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("org.apache.bcel.classfile.Utility$JavaReader", stringArray0);
      Utility.methodSignatureArgumentTypes("()Lorg/apache/bcel/classfile/Utility$JavaReader;");
      Utility.isJavaIdentifierPart(':');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1445662038));
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("org.apache.bcel.classfile.Utility$JavaReader");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-97));
      constantArray0[2] = (Constant) constantInteger0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantUtf8 constantUtf8_2 = ConstantUtf8.getCachedInstance("org.apache.bcel.classfile.Utility$JavaReader");
      constantArray0[4] = (Constant) constantUtf8_2;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 40219E2D
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = "G}Jr$X?+w?S|i>xN|[";
      Utility.convertString("G}Jr$X?+w?S|i>xN|[");
      boolean boolean0 = false;
      Utility.decode("G}Jr$X?+w?S|i>xN|[", false);
      try { 
        Utility.typeOfSignature("G}Jr$X?+w?S|i>xN|[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G}Jr$X?+w?S|i>xN|[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "V";
      stringArray0[1] = "V";
      stringArray0[2] = "V";
      Utility.methodTypeToSignature("V", stringArray0);
      Utility.searchOpcode("XJA/");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-26);
      Utility.toHexString(byteArray0);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.signatureToString("V");
      Utility.accessToString(11, true);
      byte[] byteArray1 = Utility.decode("ifnonnull", false);
      Utility.encode(byteArray1, false);
      Utility.typeOfSignature("V");
      String string0 = "oL?JPS*";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("\\", "oL?JPS*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((-1L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantLong constantLong2 = new ConstantLong(constantLong1);
      constantArray0[1] = (Constant) constantLong2;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("DJvZ");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("fmul", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte)95;
      byteArray0[8] = (byte)92;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$c2gB$A$85$f1$bb_$5c", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("YPdLo[YMf'r#sR#W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YPdLo[YMf'r#sR#W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = Utility.accessToString(1667, true);
      assertEquals("public private transient abstract", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("'", true);
      Utility.convertString("'");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = "? super ";
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.convertString("\"");
      byte[] byteArray0 = null;
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.methodSignatureReturnType("S", false);
      Utility.isSet((-2917), 83);
      Utility.searchOpcode(", high = ");
      Utility.format((short) (-1), 83, true, 'D');
      String string0 = Utility.accessToString(64, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "-1DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD";
      objectArray0[1] = (Object) "-1DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD";
      objectArray0[2] = (Object) "volatile";
      objectArray0[3] = (Object) "volatile";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) "short";
      objectArray0[7] = (Object) "short";
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = "Deprecated attribute with length > 0";
      Utility.methodSignatureReturnType("Deprecated attribute with length > 0", false);
      Utility.methodSignatureReturnType("Deprecated attribute with length > 0", false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("Deprecated attribute with length > 0", "double");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // double
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = "jz?XxagWf#CH#s0io.";
      Utility.replace("1Sr[Iu*34Uh5", "jz?XxagWf#CH#s0io.", "1Sr[Iu*34Uh5");
      // Undeclared exception!
      try { 
        Utility.getSignature("1Sr[Iu*34Uh5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[Iu*34Uh5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "!Kug";
      try { 
        Utility.typeOfSignature("!Kug");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Kug
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      try { 
        Utility.decode("Bam6NN>%Vz/#L$tv)v", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MockPrintStream mockPrintStream0 = new MockPrintStream("MIwKgWN~!");
      PrintStream printStream0 = mockPrintStream0.append('<');
      mockPrintStream0.println();
      mockPrintStream0.println();
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) stringArray0);
      assertSame(mockPrintStream0, printStream0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.convertString("\t");
      assertEquals("\t", string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\\t";
      objectArray0[1] = (Object) "\t";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string1 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"\\t\", \"\t\"", string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "+%rYt9D0Nf~rZ\"j>";
      stringArray0[1] = "\t";
      String string2 = Utility.methodTypeToSignature("invokespecial", stringArray0);
      assertEquals("(L+%rYt9D0Nf~rZ\"j>;L;)Linvokespecial;", string2);
      
      int int0 = Utility.clearBit(233, 233);
      assertEquals(233, int0);
      
      String string3 = Utility.printArray(objectArray0);
      assertEquals("{\\t, \t}", string3);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-34);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)93;
      byteArray1[1] = (byte)35;
      Utility.equals(byteArray0, byteArray1);
      Utility.setBit(474, (byte)35);
      try { 
        Utility.typeOfMethodSignature("r\u0006oY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: r\u0006oY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      boolean boolean0 = true;
      Utility.format((-651), (-651), true, 'C');
      String string0 = "JM\"$-p3Cc.dY=b";
      Utility.methodSignatureReturnType("JM\"$-p3Cc.dY=b", false);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-1);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v[%k}Dpv.J!-^d`");
      try { 
        Utility.methodSignatureReturnType("}h)NDIuR4J*N@r", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NDIuR4J*N@r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = new String[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "access flags\t\t";
      Utility.methodTypeToSignature("access flags\t\t", stringArray0);
      Utility.convertString("(Laccess;)Laccess;");
      Utility.searchOpcode("double");
      Utility.isSet(663, (short) (-1));
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)11;
      byteArray0[0] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      Utility.accessToString(1149, true);
      Utility.compactClassName("if_icmple", "if_icmple", true);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2@)qr_U+^");
      try { 
        Utility.typeOfSignature("2@)qr_U+^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2@)qr_U+^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.getSignature("Invalid type: ");
      int int0 = 3800;
      Utility.accessToString(3800);
      MockFile mockFile0 = new MockFile("Invalid type: ", "static final volatile transient interface abstract strictfp");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "LInvalid;");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // LInvalid;
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), (int) (byte)77, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "F$bK]h&v.d7X=";
      Utility.typeOfSignature("F$bK]h&v.d7X=");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.decode("F$bK]h&v.d7X=", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"bK\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "-iB\"GK0}?xw(]";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-iB\"GK0}?xw(]");
      try { 
        Utility.typeOfSignature("-iB\"GK0}?xw(]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -iB\"GK0}?xw(]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("byte", "RuntimeInvisibleAnnotations", true);
      Utility.format(9, 9, false, 'l');
      try { 
        Utility.methodSignatureReturnType("RuntimeInvisibleAnnotations", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeInvisibleAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("astore_0", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 84, 202, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Utility.signatureToString("Invalid StackMap frame_type");
      try { 
        Utility.methodSignatureReturnType("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.typeOfSignature("CONSTANT_Class");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-87);
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureReturnType("L$S$B$a9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L$S$B$a9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byte byte0 = (byte)58;
      byteArray0[1] = (byte)58;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)58, (byte)41);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType0;
      constantMethodref0.clone();
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-402), (byte)41);
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)89;
      byteArray0[0] = (byte)89;
      byte byte1 = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      Utility.toHexString(byteArray0);
      Utility.decode("|X9t.JL6", false);
      Utility.isJavaIdentifierPart('p');
      String string0 = "INSENSITIVE";
      boolean boolean0 = true;
      int int0 = 307;
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("INSENSITIVE", "59 f2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"59 f2\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte) (-108);
      Utility.encode(byteArray0, true);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("de 14 fb bf e7 ff 8d 94 00 00 00 00 00 00 00 00");
      MockPrintStream mockPrintStream0 = new MockPrintStream("de 14 fb bf e7 ff 8d 94 00 00 00 00 00 00 00 00");
      MockPrintStream mockPrintStream1 = new MockPrintStream("de 14 fb bf e7 ff 8d 94 00 00 00 00 00 00 00 00");
      mockPrintStream1.flush();
      Utility.printArray((PrintStream) mockPrintStream1, (Object[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$l$8b$I$A$A$A$A$A$A$A", ")", "=N6@TgY/O3y:9", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-515), (-515));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-124);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\t\t#");
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, true);
      Utility.replace("{java.lang.Object@25a89e49, java.lang.Object@70a4d04e, java.lang.Object@2148b84d, java.lang.Object@4f2e0ca6, java.lang.Object@2e1599dc, java.lang.Object@78e50af0, java.lang.Object@1c8b5f71, java.lang.Object@237f3b7a}", "{java.lang.Object@25a89e49, java.lang.Object@70a4d04e, java.lang.Object@2148b84d, java.lang.Object@4f2e0ca6, java.lang.Object@2e1599dc, java.lang.Object@78e50af0, java.lang.Object@1c8b5f71, java.lang.Object@237f3b7a}", "{java.lang.Object@25a89e49, java.lang.Object@70a4d04e, java.lang.Object@2148b84d, java.lang.Object@4f2e0ca6, java.lang.Object@2e1599dc, java.lang.Object@78e50af0, java.lang.Object@1c8b5f71, java.lang.Object@237f3b7a}");
      Utility.searchOpcode("new");
      Utility.accessToString((int) (short)187);
      Utility.replace("public private static final synchronized transient", "{java.lang.Object@25a89e49, java.lang.Object@70a4d04e, java.lang.Object@2148b84d, java.lang.Object@4f2e0ca6, java.lang.Object@2e1599dc, java.lang.Object@78e50af0, java.lang.Object@1c8b5f71, java.lang.Object@237f3b7a}", "{java.lang.Object@25a89e49, java.lang.Object@70a4d04e, java.lang.Object@2148b84d, java.lang.Object@4f2e0ca6, java.lang.Object@2e1599dc, java.lang.Object@78e50af0, java.lang.Object@1c8b5f71, java.lang.Object@237f3b7a}");
      Utility.classOrInterface((-1662));
      Utility.accessToString((int) (short)187);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.typeOfSignature("$8V`YPLH;4|s,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $8V`YPLH;4|s,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)90;
      byte byte0 = (byte)68;
      byteArray0[2] = (byte)68;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-91);
      ConstantPool constantPool0 = null;
      int int0 = (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_acmpeq\t\t#23108
         // 3:    dup_x1
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)90;
      byte byte0 = (byte)68;
      byteArray0[2] = (byte)68;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)64;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)64, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("A+}dD~9)Gt[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Gt['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, false);
      String string0 = Utility.accessToString(1867);
      assertEquals("public private static volatile native interface abstract", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-5);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(1867);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[1] = constant0;
      Constant constant1 = constantFloat0.copy();
      constantArray0[2] = constant1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-5), 133);
      assertEquals("0:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte) (-108);
      Utility.encode(byteArray0, true);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("de 14 fb bf e7 ff 8d 94");
      MockPrintStream mockPrintStream0 = new MockPrintStream("de 14 fb bf e7 ff 8d 94");
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(mockPrintStream0, false, "de 14 fb bf e7 ff 8d 94");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // de 14 fb bf e7 ff 8d 94
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = "A}>CdH!d'\\@/L<WHWr";
      try { 
        Utility.methodSignatureReturnType("A}>CdH!d'@/L<WHWr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `A}>CdH!d'@/L<WHWr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-59);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 759, (-1364));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      try { 
        Utility.decode("^X", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.replace("org.apache.commons.io.IOCase", "org.apache.commons.io.IOCase", "org.apache.commons.io.IOCase");
      boolean boolean0 = false;
      int int0 = (-1309);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.classOrInterface(1785);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "interface";
      objectArray0[1] = (Object) "interface";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "interface");
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, false);
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "return";
      Utility.methodTypeToSignature("return", stringArray0);
      Utility.compactClassName("return", "(Lreturn;)Lreturn;", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("MIwKgWN~!");
      mockPrintStream0.println();
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "return");
      mockPrintStream0.println();
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) stringArray0);
      assertSame(mockPrintStream0, printStream0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Utility.getSignature("fcmpg");
      Utility.accessToString(90, true);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("private static final volatile", "fcmpg", "private static final volatile", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private static final volatile
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Utility.getSignature("");
      Utility.convertString("");
      Utility.searchOpcode("iUs+EscdpbY");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.clearBit((-1955), 198);
      String string0 = Utility.compactClassName("n0n");
      Utility.getSignature("r");
      Utility.format(198, (-1955), false, 's');
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "n0n";
      objectArray0[3] = (Object) "n0n";
      objectArray0[4] = (Object) "";
      String string1 = Utility.printArray(objectArray0, false, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Utility.compactClassName("java.lang.Object@7abdc39a, java.lang.Object@186586c9, java.lang.Object@7c882614, java.lang.Object@329d2ee8", true);
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) "java.lang.Object@7abdc39a, java.lang.Object@186586c9, java.lang.Object@7c882614, java.lang.Object@329d2ee8";
      Utility.printArray(objectArray1, false, false);
      Utility.accessToString((-1655));
      String string0 = "new";
      // Undeclared exception!
      try { 
        Utility.signatureToString("new", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `new'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"", "\"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('(');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockFile0;
      mockPrintWriter0.flush();
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) "\"";
      mockPrintWriter0.append((CharSequence) "\"");
      objectArray0[6] = (Object) "\"";
      Object object0 = new Object();
      objectArray0[7] = object0;
      Object object1 = new Object();
      objectArray0[8] = object1;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      Utility.compactClassName("\"", "\"", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "\"", "lookupswitch");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("getfield", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("%$vth/f7WG2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `%$vth/f7WG2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ZV5@YvVvZ/");
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0);
      try { 
        Utility.methodSignatureArgumentTypes("{java.lang.Object@1a077a37, java.lang.Object@2f527fca, java.lang.Object@42b2377f, java.lang.Object@7a3a26ca, java.lang.Object@5b4d3d78, java.lang.Object@67dda5f4, java.lang.Object@34877fbf, java.lang.Object@1f201393, java.lang.Object@2d344bf2}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {java.lang.Object@1a077a37, java.lang.Object@2f527fca, java.lang.Object@42b2377f, java.lang.Object@7a3a26ca, java.lang.Object@5b4d3d78, java.lang.Object@67dda5f4, java.lang.Object@34877fbf, java.lang.Object@1f201393, java.lang.Object@2d344bf2}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = "jsr_w";
      // Undeclared exception!
      try { 
        Utility.signatureToString("jsr_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `jsr_w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = Utility.classOrInterface(85);
      assertEquals("class", string0);
      
      String string1 = Utility.compactClassName("class", "class", true);
      String string2 = Utility.replace("", "class", "|7h]l0");
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = Utility.isJavaIdentifierPart('I');
      assertTrue(boolean0);
      
      Utility.classOrInterface(204);
      short short0 = Utility.searchOpcode("class");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Utility.convertString("SwFbRVL");
      MockPrintStream mockPrintStream0 = new MockPrintStream("boolean");
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Utility.compactClassName("float", true);
      Utility.accessToString(8);
      File file0 = MockFile.createTempFile("float", "float");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 8);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "static";
      objectArray0[1] = (Object) bufferedOutputStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "float";
      objectArray0[5] = (Object) file0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) "static";
      PrintWriter printWriter0 = mockPrintWriter0.format("float", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.getSignature("oK;O6OWAee)");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("LoK;O6OWAee);", "+z.E/", "oK;O6OWAee)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LoK;O6OWAee);
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      int int0 = 1459;
      Utility.setBit(1459, 1459);
      String string0 = "f;ff|/;lXN";
      try { 
        Utility.methodSignatureReturnType("f;ff|/;lXN", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `f;ff|/;lXN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("_**^;R.:n;T", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `_**^;R.:n;T'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.replace("static", "%vD2qWR~?6d", "MIBx8exZCJpw7Dq=(");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)10;
      byte byte1 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-77);
      Constant[] constantArray0 = new Constant[6];
      DataInput dataInput0 = null;
      ConstantInteger constantInteger0 = null;
      try {
        constantInteger0 = new ConstantInteger((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "";
      int int0 = 3279;
      boolean boolean0 = true;
      char char0 = '(';
      String string1 = Utility.fillup("", 3279, true, '(');
      try { 
        Utility.typeOfMethodSignature(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Utility.accessToString(0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-70);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = " is no interface";
      try { 
        Utility.methodSignatureArgumentTypes(" is no interface", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  is no interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.compactClassName("");
      Utility.accessToString(3, true);
      Utility.convertString("S^QoKn");
      byte[] byteArray1 = new byte[1];
      byte byte0 = (byte)81;
      byteArray1[0] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Utility.accessToString(1834);
      byte[] byteArray0 = Utility.decode("private static synchronized native interface abstract", false);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (-1728), 229, false);
      Utility.printArray((Object[]) null, false, false);
      Utility.accessToString(1024);
      Utility.equals(byteArray0, byteArray0);
      Utility.replace("arraylength", "0:    irem\n1:    frem\n2:    lmul\n3:    fneg\n4:    ladd\n5:    ineg\n6:    lsub\n7:    lload_2\n8:    drem\n9:    ineg\n10:   ladd\n11:   ineg\n12:   lmul\n13:   dadd\n14:   lload_2\n15:   drem\n16:   lshl\n17:   fdiv\n18:   dadd\n19:   imul\n20:   frem\n21:   ddiv\n22:   fdiv\n23:   lmul\n24:   ishr\n25:   lsub\n26:   isub\n27:   lload_2\n28:   fdiv\n29:   ladd\n30:   ineg\n31:   lmul\n32:   fneg\n33:   lsub\n34:   lload_2\n35:   lmul\n36:   fdiv\n37:   ineg\n38:   lsub\n39:   frem\n40:   fsub\n41:   ladd\n42:   dadd\n43:   lsub\n44:   lload_2\n45:   ladd\n46:   fadd\n47:   drem\n48:   ineg\n49:   frem\n50:   ladd\n51:   dadd\n52:   ineg\n", "0:    irem\n1:    frem\n2:    lmul\n3:    fneg\n4:    ladd\n5:    ineg\n6:    lsub\n7:    lload_2\n8:    drem\n9:    ineg\n10:   ladd\n11:   ineg\n12:   lmul\n13:   dadd\n14:   lload_2\n15:   drem\n16:   lshl\n17:   fdiv\n18:   dadd\n19:   imul\n20:   frem\n21:   ddiv\n22:   fdiv\n23:   lmul\n24:   ishr\n25:   lsub\n26:   isub\n27:   lload_2\n28:   fdiv\n29:   ladd\n30:   ineg\n31:   lmul\n32:   fneg\n33:   lsub\n34:   lload_2\n35:   lmul\n36:   fdiv\n37:   ineg\n38:   lsub\n39:   frem\n40:   fsub\n41:   ladd\n42:   dadd\n43:   lsub\n44:   lload_2\n45:   ladd\n46:   fadd\n47:   drem\n48:   ineg\n49:   frem\n50:   ladd\n51:   dadd\n52:   ineg\n");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("abstract", "abstract");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // abstract
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = "if_icmpeq";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("if_icmpeq", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_icmpeq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      int int0 = 258;
      Utility.isSet(258, 258);
      Utility.getSignature("puLP}=,;A]g");
      char char0 = '%';
      Utility.isJavaIdentifierPart('%');
      Utility.typeOfSignature("Insensitive");
      Utility.setBit((byte)10, (-3214));
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("LpuLP}=,;A]g;", stringArray0);
      boolean boolean0 = false;
      Utility.format((-1718070704), (byte)10, false, '%');
      Utility.compactClassName("()LLpuLP}=,;A]g;;", "ZHn", false);
      String string0 = "1wide";
      try { 
        Utility.typeOfMethodSignature("1wide");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1wide
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Utility.compactClassName("qJM5VT6H>GM");
      byte[] byteArray0 = Utility.decode("qJM5VT6H>GM", false);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("KKW", stringArray0);
      Utility.printArray((Object[]) stringArray0);
      int int0 = (-5015);
      int int1 = 40;
      Utility.clearBit((-5015), 40);
      Utility.compactClassName("()LKKW;");
      Utility.printArray((Object[]) stringArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 100, (-5015), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = (byte)40;
      byteArray0[0] = (byte)40;
      Utility.equals(byteArray0, byteArray0);
      char char0 = '1';
      Utility.isJavaIdentifierPart('1');
      String string0 = "instanceof";
      try { 
        Utility.typeOfSignature("instanceof");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: instanceof
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureReturnType("impdep2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `impdep2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
