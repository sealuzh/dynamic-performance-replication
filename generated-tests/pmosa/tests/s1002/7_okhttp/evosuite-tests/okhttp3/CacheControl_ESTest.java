/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 20:45:14 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import okhttp3.CacheControl;
import okhttp3.Headers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheControl_ESTest extends CacheControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.onlyIfCached();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      cacheControl_Builder0.maxStale(3, timeUnit0);
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.onlyIfCached();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noStore();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder0.maxStale(1083, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      cacheControl_Builder3.noTransform();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder2.maxAge(1, timeUnit1);
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder4);
      cacheControl0.FORCE_CACHE.toString();
      cacheControl0.maxStaleSeconds();
      TimeUnit timeUnit2 = TimeUnit.MICROSECONDS;
      cacheControl_Builder2.maxAge(1, timeUnit2);
      CacheControl cacheControl1 = cacheControl_Builder3.build();
      cacheControl_Builder1.noCache();
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.noStore();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl.parse(headers0);
      CacheControl.parse(headers0);
      cacheControl0.isPrivate();
      cacheControl1.noTransform();
      cacheControl0.toString();
      TimeUnit timeUnit3 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        cacheControl_Builder5.minFresh((-830), timeUnit3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -830
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      String string0 = cacheControl0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.onlyIfCached();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.minFresh(4, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.maxAge(4, timeUnit1);
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.maxStale(4, timeUnit0);
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.noStore();
      assertSame(cacheControl_Builder1, cacheControl_Builder5);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      CacheControl cacheControl0 = cacheControl_Builder1.build();
      cacheControl0.headerValue = "f,RO3_- ";
      int int0 = cacheControl0.minFreshSeconds();
      assertEquals((-1), int0);
      
      String string0 = cacheControl0.toString();
      assertEquals("f,RO3_- ", string0);
      
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("uBS8", "uBS8");
      Headers.Builder headers_Builder2 = headers_Builder1.addLenient("");
      Headers headers0 = new Headers(headers_Builder2);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl0.headerValue = "Qi>o";
      boolean boolean0 = cacheControl0.noStore();
      cacheControl0.onlyIfCached();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxAge(1387, timeUnit0);
      cacheControl_Builder2.noStore();
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      cacheControl_Builder2.maxAge(0, timeUnit1);
      cacheControl0.onlyIfCached();
      cacheControl0.onlyIfCached();
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      
      boolean boolean1 = cacheControl1.isPublic();
      assertFalse(cacheControl1.onlyIfCached());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.isPrivate());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(boolean1 == boolean0);
      assertFalse(cacheControl1.noStore());
      assertFalse(cacheControl1.mustRevalidate());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.onlyIfCached();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      cacheControl_Builder2.build();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder0.noStore();
      cacheControl_Builder1.maxAge(0, timeUnit0);
      CacheControl cacheControl0 = cacheControl_Builder2.build();
      cacheControl0.FORCE_CACHE.headerValue = "";
      cacheControl0.onlyIfCached();
      cacheControl_Builder1.onlyIfCached();
      cacheControl0.isPrivate();
      CacheControl cacheControl1 = cacheControl_Builder1.build();
      cacheControl1.sMaxAgeSeconds();
      cacheControl1.sMaxAgeSeconds();
      cacheControl1.sMaxAgeSeconds();
      CacheControl cacheControl2 = cacheControl_Builder0.build();
      cacheControl2.noStore();
      cacheControl_Builder3.onlyIfCached();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      // Undeclared exception!
      try { 
        headers_Builder0.set("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name is empty
         //
         verifyException("okhttp3.Headers$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.toString();
      cacheControl0.isPublic();
      cacheControl0.maxAgeSeconds();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxAge((-1), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(1, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noCache();
      CacheControl cacheControl0 = cacheControl_Builder2.build();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noTransform();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.onlyIfCached();
      CacheControl cacheControl1 = cacheControl_Builder4.build();
      cacheControl1.FORCE_NETWORK.toString();
      cacheControl1.toString();
      cacheControl1.minFreshSeconds();
      cacheControl1.minFreshSeconds();
      cacheControl1.toString();
      cacheControl_Builder4.onlyIfCached();
      CacheControl cacheControl2 = cacheControl_Builder1.build();
      cacheControl0.FORCE_NETWORK.toString();
      cacheControl1.toString();
      cacheControl2.FORCE_NETWORK.headerValue = "no-cache";
      cacheControl0.noCache();
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder2.noTransform();
      cacheControl1.noCache();
      cacheControl_Builder0.build();
      cacheControl0.minFreshSeconds();
      cacheControl0.maxAgeSeconds();
      cacheControl_Builder5.minFresh(1, timeUnit0);
      CacheControl.Builder cacheControl_Builder6 = cacheControl_Builder5.maxAge(1, timeUnit0);
      assertSame(cacheControl_Builder5, cacheControl_Builder6);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      boolean boolean0 = cacheControl_Builder1.onlyIfCached;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.build();
      Headers.Builder headers_Builder1 = headers_Builder0.add("cache-control", "[text=");
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      boolean boolean1 = cacheControl1.mustRevalidate();
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(boolean1);
      assertFalse(cacheControl1.noTransform());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.isPublic());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.noCache());
      assertFalse(cacheControl1.onlyIfCached());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.noStore());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      CacheControl cacheControl0 = cacheControl_Builder1.build();
      cacheControl0.mustRevalidate();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("|;'9[?", " [XCUIko(_WZV|q");
      String string0 = "s-maxage=";
      Headers.Builder headers_Builder2 = headers_Builder1.set("s-maxage=", "cache-control");
      Headers.Builder headers_Builder3 = headers_Builder1.add("cache-control", "T>BeT%");
      headers_Builder3.addLenient(" (to read code point prefixed 0x");
      Headers headers0 = headers_Builder2.build();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl1.toString();
      cacheControl_Builder0.minFresh(59, timeUnit0);
      cacheControl0.toString();
      // Undeclared exception!
      try { 
        CacheControl.parse((Headers) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.CacheControl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      CacheControl cacheControl0 = cacheControl_Builder1.build();
      cacheControl0.FORCE_NETWORK.toString();
      cacheControl0.mustRevalidate();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      cacheControl_Builder1.noCache();
      Headers.Builder headers_Builder1 = headers_Builder0.set("s-maxage=", "cache-control");
      Headers.Builder headers_Builder2 = headers_Builder0.add("cache-control", "in == null");
      headers_Builder2.addLenient(" (to read code point prefixed 0x");
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl1.toString();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder0.minFresh(59, timeUnit0);
      cacheControl1.mustRevalidate();
      cacheControl1.noStore();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noCache();
      assertSame(cacheControl_Builder3, cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("|;'9[?", " [XCUIko(_WZV|q");
      headers_Builder1.set("cache-control", "s-maxage=");
      headers_Builder0.add("|;'9[?", "s-maxage=");
      headers_Builder1.addLenient("H~,A0Y|");
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.toString();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(59, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.onlyIfCached();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noCache();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.maxStale(34, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        cacheControl_Builder4.minFresh((-837), timeUnit1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -837
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      cacheControl0.mustRevalidate();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      Headers.Builder headers_Builder1 = headers_Builder0.set("s-maxage=", "cache-control");
      Headers.Builder headers_Builder2 = headers_Builder0.add("cache-control", ":j,#g\"7)&@");
      headers_Builder2.addLenient(" (to read code point prefixed 0x");
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Headers headers1 = Headers.of((Map<String, String>) hashMap0);
      boolean boolean0 = cacheControl2.mustRevalidate();
      assertFalse(boolean0);
      
      cacheControl0.noStore();
      int int0 = cacheControl1.sMaxAgeSeconds();
      cacheControl_Builder1.noCache();
      int int1 = cacheControl0.minFreshSeconds();
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertTrue(int1 == int0);
      
      CacheControl cacheControl3 = CacheControl.parse(headers1);
      assertEquals((-1), cacheControl3.maxStaleSeconds());
      assertEquals((-1), cacheControl3.maxAgeSeconds());
      assertFalse(cacheControl3.isPublic());
      assertEquals((-1), cacheControl3.minFreshSeconds());
      assertFalse(cacheControl3.noTransform());
      assertFalse(cacheControl3.noStore());
  }
}
