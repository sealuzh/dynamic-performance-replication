/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 16:16:34 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(class0);
      Integer integer0 = new Integer((-1300));
      Object object0 = doubleKeyMap0.put(integer0, "0foTyu9JkQiLz", (Object) "us.codecraft.webmagic.utils.DoubleKeyMap");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, Integer>, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, Object, Object>((Map<Map<Object, Integer>, Map<Object, Object>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<String, Object>, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, Object>, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<String, Integer, Map<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Map<Object, Integer>>();
      Map<Integer, Map<Object, Integer>> map0 = doubleKeyMap0.get("");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<String, String>, Map<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<String, String>, Map<Integer, Object>>();
      Integer integer0 = new Integer(1021);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Map<Integer, Object> map0 = doubleKeyMap0.remove(integer0, hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<Integer, Map<Object, Object>> hashMap0 = new HashMap<Integer, Map<Object, Object>>();
      Integer integer0 = new Integer(0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put(integer0, hashMap1);
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>(hashMap0);
      doubleKeyMap0.remove(integer0, (Object) hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<HashMap<Integer, Map<Object, Integer>>, Map<HashMap<String, Object>, HashMap<Integer, String>>> hashMap0 = new HashMap<HashMap<Integer, Map<Object, Integer>>, Map<HashMap<String, Object>, HashMap<Integer, String>>>();
      DoubleKeyMap<HashMap<Integer, Map<Object, Integer>>, HashMap<String, Object>, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Map<Object, Integer>>, HashMap<String, Object>, HashMap<Integer, String>>(hashMap0);
      HashMap<Integer, Map<Object, Integer>> hashMap1 = new HashMap<Integer, Map<Object, Integer>>(0, 1021);
      HashMap<HashMap<String, Object>, HashMap<Integer, String>> hashMap2 = new HashMap<HashMap<String, Object>, HashMap<Integer, String>>();
      hashMap0.put(hashMap1, hashMap2);
      HashMap<String, Object> hashMap3 = new HashMap<String, Object>();
      HashMap<Integer, String> hashMap4 = new HashMap<Integer, String>();
      HashMap<Integer, String> hashMap5 = doubleKeyMap0.put(hashMap1, hashMap3, hashMap4);
      assertNull(hashMap5);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HashMap<HashMap<String, Integer>, Map<HashMap<Integer, Object>, Object>> hashMap0 = new HashMap<HashMap<String, Integer>, Map<HashMap<Integer, Object>, Object>>();
      DoubleKeyMap<HashMap<String, Integer>, HashMap<Integer, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, HashMap<Integer, Object>, Object>(hashMap0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      HashMap<HashMap<Integer, Object>, Object> hashMap2 = new HashMap<HashMap<Integer, Object>, Object>();
      hashMap0.put(hashMap1, hashMap2);
      HashMap<Integer, Object> hashMap3 = new HashMap<Integer, Object>();
      Object object0 = doubleKeyMap0.get(hashMap1, hashMap3);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(class0);
      Map<String, Object> map0 = doubleKeyMap0.remove("us.codecraft.webmagic.utils.DoubleKeyMap");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HashMap<HashMap<String, Integer>, Map<HashMap<Integer, Object>, Object>> hashMap0 = new HashMap<HashMap<String, Integer>, Map<HashMap<Integer, Object>, Object>>();
      DoubleKeyMap<HashMap<String, Integer>, HashMap<Integer, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, HashMap<Integer, Object>, Object>(hashMap0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      Object object0 = doubleKeyMap0.get(hashMap1, hashMap2);
      assertNull(object0);
  }
}
