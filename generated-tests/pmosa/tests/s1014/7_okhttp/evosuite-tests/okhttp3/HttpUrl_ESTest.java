/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 04:52:17 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("wyDy4lrQ%s5V~EX&");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setPathSegment((-396), "wyDy4lrQ%s5V~EX&");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegment("/");
      httpUrl_Builder0.encodedUsername = "/";
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery("");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("\n");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(51, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment = "pEG>6s}G";
      httpUrl_Builder0.fragment("%0A");
      String string0 = "::";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername("\r");
      try { 
        MockURI.URI("\r", "[]", "cP<f1B@^eH", "[]", "7xpB,^!v<Tm{");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: \r://[]cP%3Cf1B@%5EeH?[]#7xpB,%5E!v%3CTm%7B
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment("/q%");
      String string0 = "::";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPassword("O;A");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("%2e.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: %2e.
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.username("/");
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl.decodeHexDigit('~');
      HttpUrl.Builder.ParseResult.values();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removeAllQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "=Fr_$eCL?u.`\\Ys~@";
      HttpUrl.percentEncoded("=Fr_$eCL?u.`Ys~@", (-367), (-367));
      try { 
        HttpUrl.getChecked("+8V;");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for +8V;
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "@^4c/WRzeB";
      int int0 = 4;
      HttpUrl.percentEncoded("@^4c/WRzeB", 4, 4);
      try { 
        HttpUrl.getChecked("@^4c/WRzeB");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for @^4c/WRzeB
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(":");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "Content-Length (";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("Content-Length (");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("wqdL");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query(":");
      String string0 = "/";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: /
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpUrl.parse("i(F~xJtZp8r{8J7");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("i(F~xJtZp8r{8J7", "i(F~xJtZp8r{8J7");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(37);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.query("");
      httpUrl_Builder3.addEncodedPathSegment("");
      httpUrl_Builder4.addPathSegment("data == null");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.removeAllEncodedQueryParameters("UTF-32LE");
      String string0 = "38MY;o`o9C,a6P]R:p(";
      String string1 = "Z**ZK<lSizMy";
      HttpUrl.queryStringToNamesAndValues("");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.host("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPassword = "[7>:vJ|Xs";
      httpUrl_Builder0.port(7);
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      try { 
        HttpUrl.getChecked("D'Ii'8r.yW-Vz7H\"");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for D'Ii'8r.yW-Vz7H\"
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removeAllEncodedQueryParameters("%2e.");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("\n", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addEncodedQueryParameter((String) null, "UNSUPPORTED_SCHEME");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("`pWF");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("`pWF");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("he*na:)lopjdsjx5sc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: he*na:)lopjdsjx5sc
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      List<String> list0 = httpUrl_Builder0.encodedPathSegments;
      httpUrl_Builder0.encodedQueryNamesAndValues = list0;
      httpUrl_Builder0.removeAllQueryParameters("::2A2.Yj_Cl");
      String string0 = "::";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("e:");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder2.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("\r", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedQueryParameter("[text=", "q[n(U}%{a~o6");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      httpUrl_Builder0.encodedUsername("%2e");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ")dnI)D";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter(")dnI)D", ")dnI)D");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("VEp2lIT#nf|'Qx,uls5");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("VEp2lIT#nf|'Qx,uls5");
      String string1 = "d`G'Je";
      httpUrl_Builder1.query("d`G'Je");
      String string2 = "!-";
      httpUrl_Builder3.setPathSegment(0, "!-");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setPathSegment(0, "https");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedUsername("https");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.scheme("encodedPassword == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "@>\"l#XWuO6S.Kef";
      String string1 = "";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("@>\"l#XWuO6S.Kef", "");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder4.setEncodedPathSegment((-499), "4V");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpUrl.percentDecode((Buffer) null, "", 0, 0, true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("", "");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegment("Ot1A)&_Xh\"`=}&q");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setEncodedQueryParameter("lf3", "4w~\"");
      httpUrl_Builder4.setEncodedQueryParameter("", "&yA)|i)0/,]");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.setEncodedPathSegment(0, "\"I9ht3k");
      httpUrl_Builder5.addQueryParameter("", "4w~\"");
      httpUrl_Builder1.encodedPassword("");
      httpUrl_Builder3.setEncodedPathSegment(0, "Gk%X9Z$gh04");
      StringBuilder stringBuilder0 = new StringBuilder(1474);
      StringBuilder stringBuilder1 = stringBuilder0.delete(0, 0);
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[1] = 's';
      charArray0[2] = 'S';
      charArray0[3] = 'm';
      charArray0[4] = 'd';
      int int0 = 2149;
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-1056), charArray0, (-1898), 2149);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1056
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      mockFile0.getCanonicalPath();
      MockFile mockFile1 = new MockFile(mockFile0, "x");
      mockFile1.toURL();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("https:", "");
      httpUrl_Builder1.setEncodedPathSegment(0, "3Y+YeJm08Z");
      String string0 = "%20for%20";
      try { 
        MockURL.URL("c0o+24+%~Zt(U 8Q", "45", "%20for%20");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: c0o+24+%~zt(u 8q
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HttpUrl httpUrl0 = HttpUrl.parse("h:[/;Dgb>Xg");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      try { 
        HttpUrl.getChecked("j^E");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for j^E
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment((String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.fragment(":");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("*SW6&|GP~OfZX7{%");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("*SW6&|GP~OfZX7{%");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.query("pathSegments == null");
      String string0 = "4tG J#H<@YC%*6;k6jY";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedPassword("4tG J#H<@YC%*6;k6jY");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.scheme("IQ\b>7^HWHuW8:D9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: IQ\b>7^HWHuW8:D9
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpUrl.parse("%s: actual 0x%08x != expected 0x%08x");
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("%s: actual 0x%08x != expected 0x%08x");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments(":");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("pu*$n#,'4");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addQueryParameter("pu*$n#,'4", "pu*$n#,'4");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setQueryParameter("pu*$n#,'4", "");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.username("");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.encodedFragment("$V>>*G6*");
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "77=pnCc 60]gH,jwR";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("77=pnCc 60]gH,jwR");
      String string1 = "";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("");
      httpUrl_Builder2.username("zE(qfqBDF%G@U~");
      String string2 = "";
      httpUrl_Builder2.reencodeForUri();
      httpUrl_Builder3.encodedFragment("");
      int int0 = 3094;
      httpUrl_Builder2.query("");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.removePathSegment((-882));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("");
      httpUrl_Builder1.fragment("");
      String string0 = "\\\\";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("", "\\");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("\\", "");
      String string1 = "";
      httpUrl_Builder3.addQueryParameter("", "");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegment("\\");
      httpUrl_Builder4.fragment("\\");
      httpUrl_Builder4.username("");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.host("\\");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: \\
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("+kh|/%^");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("Z8>^j", "Z8>^j");
      String string0 = "Gs ;";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("Gs ;");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.host("Z8>^j");
      int int0 = (-3311);
      // Undeclared exception!
      try { 
        httpUrl_Builder4.port(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -3311
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "8w]LRn:,m8dH2jiF";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("8w]LRn:,m8dH2jiF");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("8w]LRn:,m8dH2jiF", "8w]LRn:,m8dH2jiF");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPassword("8w]LRn:,m8dH2jiF");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.removePathSegment(2047);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2047, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.query("vGHZ/?Q+W76T^O");
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      httpUrl_Builder0.addQueryParameter("@khc/v!KSB+$0-#.I", "'bU2Ci=2$p");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addQueryParameter((String) null, "'bU2Ci=2$p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "Z]1=>\\aL/1AVFri";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = "1avfri";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("1avfri");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: 1avfri
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "FqVM;ClXvSI(,U{XL[+";
      int int0 = (-1440);
      HttpUrl.percentEncoded("FqVM;ClXvSI(,U{XL[+", (-1440), (-1440));
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("FqVM;ClXvSI(,U{XL[+");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpUrl.percentEncoded("=Fr_$eCL?u.`Ys~@", (-367), (-367));
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("=Fr_$eCL?u.`Ys~@");
      httpUrl_Builder1.encodedPassword("=Fr_$eCL?u.`Ys~@");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("wyDy4lrQ%s5V~EX&");
      String string0 = "'j;.dj,cDXrBtvJG$.A";
      HttpUrl.decodeHexDigit('U');
      httpUrl_Builder0.addEncodedQueryParameter("KAd-D", "wyDy4lrQ%s5V~EX&");
      httpUrl_Builder0.addEncodedPathSegment("fS(AZ");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("+");
      linkedList0.removeLast();
      HttpUrl.canonicalize("_r2kz4&(%7big;", "+", true, true, true, true);
      try { 
        HttpUrl.getChecked("_r2kz4&(%7big;");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for _r2kz4&(%7big;
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("pu*$n#,'4");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addQueryParameter("pu*$n#,'4", "pu*$n#,'4");
      httpUrl_Builder3.setQueryParameter("pu*$n#,'4", "");
      httpUrl_Builder2.setQueryParameter("),|uB%-~", "wG");
      httpUrl_Builder3.reencodeForUri();
      String string0 = HttpUrl.canonicalize("wG", "", false, false, false, false);
      assertEquals("wG", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment(")Xy-A[EXHc!z-YL.");
      httpUrl_Builder1.reencodeForUri();
      httpUrl_Builder1.addPathSegment("8ek>=nS5");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("c/Za>nd&zpqn", 2, 146);
      assertFalse(boolean0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("c/Za>nd&zpqn");
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpUrl.parse("YY!,2x(O7\"rvV");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addQueryParameter("YY!,2x(O7\"rvV", "YY!,2x(O7\"rvV");
      String string0 = "\u2026]";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("}_!<i8BF", "\u2026]");
      String string1 = "Hpu1";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.host("Hpu1");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.scheme("Hpu1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: Hpu1
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "\u2026]";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("\u2026]");
      String string1 = ")";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-85);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = httpUrl_Builder1.encodedQueryNamesAndValues;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      httpUrl_Builder0.encodedQueryNamesAndValues = list1;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = false;
      boolean boolean1 = true;
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange((String) null, (-2846.88));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "=Fr_$eCL?u.`\\Ys~@";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.username("=Fr_$eCL?u.`Ys~@");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("=Fr_$eCL?u.`Ys~@", "=Fr_$eCL?u.`Ys~@");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername(",C3*;g^xb");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("I!)`_`");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.reencodeForUri();
      String string1 = "";
      httpUrl_Builder4.encodedFragment("");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.addEncodedPathSegment("A9E*3d;:QK");
      httpUrl_Builder5.addQueryParameter("Q", "\n");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("%40");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: %40
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("#%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: #%
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "=Fr_$eCL?u.`\\Ys~@";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = "https:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("https:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: https:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      String string0 = "::";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpUrl.percentDecode("]\"1,cz$Y>1{C7lx", false);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("]\"1,cz$Y>1{C7lx");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.encodedPath("]\"1,cz$Y>1{C7lx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: ]\"1,cz$Y>1{C7lx
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "=Fr_$eCL?u.`\\Ys~@";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("=Fr_$eCL?u.`Ys~@");
      String string1 = "u8qWO";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("u8qWO");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegments("Stream closed");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.removePathSegment((-243));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("wqdL");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("/?EVmK");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.queryParameterValues("+kh%7C%2F%%5E");
      httpUrl0.queryParameterValues("ht");
      try { 
        HttpUrl.getChecked("}g}=ph");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for }g}=ph
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "DLfpt");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterValues("DLfpt");
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/DLfpt", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:%");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:%
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      String string0 = "zdVr";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.host("zdVr");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.port(7);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(85);
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded(":", 2929, (-56321));
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("% ud'F6oRT`c'I]u+J", (String) null);
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter(":", "[https:");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("I ");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedQuery("BZrV+K-Gl9d");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.query("I ");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder5.scheme("XV3AKQJILn].$by");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: XV3AKQJILn].$by
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query((String) null);
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment((String) null);
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setEncodedPathSegment((-1298), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("{^]_be1|\".TKi");
      assertNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("{^]_be1|\".TKi");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.host("}5|+*X^;!A");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      int int0 = (-1214);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.removePathSegment((-1214));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      try { 
        HttpUrl.getChecked("SHA-256");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for SHA-256
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.pathSegments();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      List<String> list1 = httpUrl0.queryParameterValues("c3]ht");
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      
      try { 
        HttpUrl.getChecked("o}g=h");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for o}g=h
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("O$4kW&s[*j_E!%A_>");
      assertNull(httpUrl0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, "O$4kW&s[*j_E!%A_>", 12, 69, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      try { 
        HttpUrl.getChecked("Prw-:");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for Prw-:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNotNull(httpUrl0);
      
      Set<String> set0 = httpUrl0.queryParameterNames();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string0 = httpUrl0.encodedUsername();
      assertEquals("", string0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("%2e.");
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("+kh%7C%2F%%5E");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/+kh%7C%2F%%5E", httpUrl1.toString());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      
      List<String> list0 = httpUrl1.queryParameterValues("%22EUp[w:BNO%2FyPFb");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/+kh%7C%2F%%5E", httpUrl1.toString());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("%22EUp[w:BNO%2FyPFb");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("+kh%7C%2F%%5E");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("/1avfri");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder3.scheme("/1avfri");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: /1avfri
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.encodedPathSegments();
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      List<String> list1 = httpUrl0.queryParameterValues("https:/www.somefakebutwellformedurl.org/fooexample");
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("h:ttp:");
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("O$4kW&s[*j_E!%A_>");
      assertNull(httpUrl0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = ")N^JY7*b";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery(")N^JY7*b");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("O$4kW&s[*j_E!%A_>", "O$4kW&s[*j_E!%A_>");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegment("/1avfri");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.query("7G:;N");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.fragment((String) null);
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.removeAllEncodedQueryParameters("7G:;N");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.scheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("O$4kW&s[*j_E!%A_>");
      assertNull(httpUrl0);
      
      HttpUrl httpUrl1 = HttpUrl.parse("O$4kW&s[*j_E!%A_>");
      assertNull(httpUrl1);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("O$4kW&s[*j_E!%A_>");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("O$4kW&s[*j_E!%A_>");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments("2pI(|6d=j|t0i$/)`%.");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.reencodeForUri();
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.password("okhttp3.HttpUrl");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.query("O$4kW&s[*j_E!%A_>");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder2.setEncodedQueryParameter("encodedPassword == null", "Prw-:");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder7.fragment("47NfN.e3!*azLK");
      assertNotNull(httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder8);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      
      HttpUrl.Builder httpUrl_Builder9 = httpUrl_Builder8.setEncodedQueryParameter("%22EUp[w:BNO%2FyPFb", "%22EUp[w:BNO%2FyPFb");
      assertNotNull(httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder9);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder8);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder8, httpUrl_Builder9);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder9, httpUrl_Builder4);
      assertSame(httpUrl_Builder9, httpUrl_Builder6);
      assertSame(httpUrl_Builder9, httpUrl_Builder2);
      assertSame(httpUrl_Builder9, httpUrl_Builder3);
      assertSame(httpUrl_Builder9, httpUrl_Builder1);
      assertSame(httpUrl_Builder9, httpUrl_Builder7);
      assertSame(httpUrl_Builder9, httpUrl_Builder5);
      assertSame(httpUrl_Builder9, httpUrl_Builder0);
      assertSame(httpUrl_Builder9, httpUrl_Builder8);
      
      HttpUrl.Builder httpUrl_Builder10 = httpUrl_Builder0.addPathSegment("Expected leading [0-9] or '-' character but was 0x");
      assertNotNull(httpUrl_Builder10);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder10);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder10, httpUrl_Builder7);
      assertSame(httpUrl_Builder10, httpUrl_Builder1);
      assertSame(httpUrl_Builder10, httpUrl_Builder2);
      assertSame(httpUrl_Builder10, httpUrl_Builder0);
      assertSame(httpUrl_Builder10, httpUrl_Builder9);
      assertSame(httpUrl_Builder10, httpUrl_Builder6);
      assertSame(httpUrl_Builder10, httpUrl_Builder4);
      assertSame(httpUrl_Builder10, httpUrl_Builder8);
      assertSame(httpUrl_Builder10, httpUrl_Builder5);
      assertSame(httpUrl_Builder10, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder11 = httpUrl_Builder8.reencodeForUri();
      assertNotNull(httpUrl_Builder11);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder10);
      assertSame(httpUrl_Builder0, httpUrl_Builder11);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder10);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder11);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder10);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder11);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder10);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder9);
      assertSame(httpUrl_Builder7, httpUrl_Builder11);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder8);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder8, httpUrl_Builder9);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder10);
      assertSame(httpUrl_Builder8, httpUrl_Builder11);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder11, httpUrl_Builder5);
      assertSame(httpUrl_Builder11, httpUrl_Builder9);
      assertSame(httpUrl_Builder11, httpUrl_Builder7);
      assertSame(httpUrl_Builder11, httpUrl_Builder10);
      assertSame(httpUrl_Builder11, httpUrl_Builder4);
      assertSame(httpUrl_Builder11, httpUrl_Builder6);
      assertSame(httpUrl_Builder11, httpUrl_Builder2);
      assertSame(httpUrl_Builder11, httpUrl_Builder0);
      assertSame(httpUrl_Builder11, httpUrl_Builder3);
      assertSame(httpUrl_Builder11, httpUrl_Builder8);
      assertSame(httpUrl_Builder11, httpUrl_Builder1);
      
      HttpUrl httpUrl2 = null;
      try {
        httpUrl2 = new HttpUrl(httpUrl_Builder4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("2pI(|6d=j|t0i$/)`%.");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("k5#Sr*,:%n+/uuwQ)");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.setEncodedQueryParameter("k5#Sr*,:%n+/uuwQ)", "k5#Sr*,:%n+/uuwQ)");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegment("+>\u2026");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder0.reencodeForUri();
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("k5#Sr*,:%n+/uuwQ)");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("+kh%7C%2F%%5E");
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/+kh%7C%2F%%5E", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNull(httpUrl1.fragment());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      
      List<String> list0 = httpUrl1.queryParameterValues("%22EUp[w:BNO%2FyPFb");
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/+kh%7C%2F%%5E", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNull(httpUrl1.fragment());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("%22EUp[w:BNO%2FyPFb");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("+kh%7C%2F%%5E");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.setEncodedQueryParameter("%22EUp[w:BNO%2FyPFb", (String) null);
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("%22EUp[w:BNO%2FyPFb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: %22EUp[w:BNO%2FyPFb
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("O$4kW&s[*j_E!%A_>");
      assertNull(httpUrl0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("O$4kW&s[*j_E!%A_>", "O$4kW&s[*j_E!%A_>");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("O$4kW&s[*j_E!%A_>", "/SP: Ih");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.port(12);
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedQuery((String) null);
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addPathSegment("O$4kW&s[*j_E!%A_>");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.setEncodedQueryParameter("Z&s[_2JJ<r", "Z&s[_2JJ<r");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder4.addPathSegment("http:");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder2.reencodeForUri();
      assertNotNull(httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      
      HttpUrl httpUrl1 = null;
      try {
        httpUrl1 = new HttpUrl(httpUrl_Builder7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("O$4kW&s[*j_E!%A_>");
      assertNull(httpUrl0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HttpUrl httpUrl1 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex < beginindex:");
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(11, httpUrl1.pathSize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("mnt", httpUrl1.host());
      assertNotNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("okhttp3.HttpUrl");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery(" \"'<>#&=");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addQueryParameter("6W)CBuF9*", "okhttp3.HttpUrl");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedUsername("6W)CBuF9*");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.encodedQuery(" \"'<>#&=");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder2.addEncodedPathSegments("http");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder7 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder7);
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder5));
      
      // Undeclared exception!
      try { 
        httpUrl_Builder7.host("::Up[w:BNO/yPFb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::Up[w:BNO/yPFb
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("-");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setEncodedQueryParameter("]F.;=q)", "2");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("gLO{v=(I1QNpyl9DGAM");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegment("-");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder3.port(2088);
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.reencodeForUri();
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("O$4kW&s[*j_E!%A_>");
      assertNull(httpUrl0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("O$4kW&s[*j_E!%A_>", "O$4kW&s[*j_E!%A_>");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("O$4kW&s[*j_E!%A_>", "/SP: Ih");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.port(12);
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedQuery((String) null);
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addPathSegment("O$4kW&s[*j_E!%A_>");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.setEncodedQueryParameter("Z&s[_2JJ<r", "Z&s[_2JJ<r");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder4.addPathSegment("http:");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder2.reencodeForUri();
      assertNotNull(httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      
      try { 
        HttpUrl.getChecked("http:");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("O$4kW&s[*j_E!%A_>");
      assertNull(httpUrl0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("O$4kW&s[*j_E!%A_>", "O$4kW&s[*j_E!%A_>");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("O$4kW&s[*j_E!%A_>", "/SP: Ih");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.port(12);
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.setEncodedQueryParameter("O$4kW&s[*j_E!%A_>", "O$4kW&s[*j_E!%A_>");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addPathSegment("O$4kW&s[*j_E!%A_>");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder3.addPathSegment("0}[Z5");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder6.reencodeForUri();
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder7);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      
      HttpUrl httpUrl1 = null;
      try {
        httpUrl1 = new HttpUrl(httpUrl_Builder7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("+kh%7C%2F%%5E");
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/+kh%7C%2F%%5E", httpUrl1.toString());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.password());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.username());
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      
      List<String> list0 = httpUrl1.queryParameterValues("%22EUp[w:BNO%2FyPFb");
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/+kh%7C%2F%%5E", httpUrl1.toString());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.password());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.username());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "H6:'gr";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("H6:'gr", "H6:'gr");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("(D'ud\u0007U");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      int int0 = httpUrl0.pathSize();
      assertEquals(1, int0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertNotSame(httpUrl0, httpUrl1);
      
      try { 
        HttpUrl.getChecked("H6:'gr");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for H6:'gr
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("Prw-:");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("Unexpected code point: ");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPassword("ttR8t8y.");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegments("Prw-:");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder0.encodedPassword("ttR8t8y.");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder2.host("3BI0.isf");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder6.setEncodedQueryParameter("ttR8t8y.", "ttR8t8y.");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder7);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::2A2s$Yj_Cl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::2A2s$Yj_Cl
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "6s:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("6s:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 6s:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "#=%J[,R#+G5uD";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("#=%J[,R#+G5uD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: #=%J[,R#+G5uD
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("bek6z,^xhLaMu+1bg7");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.port(12);
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("O$4kW&s[*j_E!%A_>", "bek6z,^xhLaMu+1bg7");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.addPathSegment("O$4kW&s[*j_E!%A_>");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.password("O$4kW&s[*j_E!%A_>");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder4.reencodeForUri();
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters(".");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query(".");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegment(".");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.password(".");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.setQueryParameter("N*UMJX", "UE");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder6.encodedQuery("UE");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder7);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder2.username(".");
      assertNotNull(httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      
      HttpUrl.Builder httpUrl_Builder9 = httpUrl_Builder8.addPathSegments(" \"'<>#");
      assertNotNull(httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder9);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder9, httpUrl_Builder1);
      assertSame(httpUrl_Builder9, httpUrl_Builder0);
      assertSame(httpUrl_Builder9, httpUrl_Builder2);
      assertSame(httpUrl_Builder9, httpUrl_Builder4);
      assertSame(httpUrl_Builder9, httpUrl_Builder3);
      assertSame(httpUrl_Builder9, httpUrl_Builder8);
      assertSame(httpUrl_Builder9, httpUrl_Builder6);
      assertSame(httpUrl_Builder9, httpUrl_Builder5);
      assertSame(httpUrl_Builder9, httpUrl_Builder7);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setPathSegment(65, "INVALID_PORT");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("okhttp3.HttpUrl");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      String string0 = "https";
      String string1 = "Unexpected code point: ";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addQueryParameter("https", "Unexpected code point: ");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.encodedUsername(" \"'<>#&=");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.encodedQuery("@$4TI6HNieE?@e&");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder3.addEncodedPathSegments("9)n{,s&:;;\nQ");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      
      String string2 = "-cC%f";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("-cC%f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: -cC%f
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("#NX&a@");
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("NX&a@", httpUrl1.fragment());
      assertEquals("NX&a@", httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample#NX&a@", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      
      String string0 = httpUrl1.username();
      assertEquals("", string0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("NX&a@", httpUrl1.fragment());
      assertEquals("NX&a@", httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample#NX&a@", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertNotNull(string0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "As<^(|q", uRLStreamHandler0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      URL uRL2 = MockURL.URL(uRL1, "A?}lK");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("}lK", uRL2.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertEquals((-1), uRL2.getDefaultPort());
      assertNull(uRL2.getRef());
      assertEquals((-1), uRL2.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/A?}lK", uRL2.toString());
      assertEquals("http", uRL2.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/A?}lK", uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertNotNull(uRL2);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL2, uRL1);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL2);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("}lK", uRL2.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertEquals((-1), uRL2.getDefaultPort());
      assertNull(uRL2.getRef());
      assertEquals((-1), uRL2.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/A?}lK", uRL2.toString());
      assertEquals("http", uRL2.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/A?}lK", uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/A?}lK", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      assertFalse(uRL0.equals((Object)uRL2));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL2));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL2, uRL1);
      
      String string0 = httpUrl0.queryParameter("Prw-:");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("}lK", uRL2.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertEquals((-1), uRL2.getDefaultPort());
      assertNull(uRL2.getRef());
      assertEquals((-1), uRL2.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/A?}lK", uRL2.toString());
      assertEquals("http", uRL2.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/A?}lK", uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/A?}lK", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(string0);
      assertFalse(uRL0.equals((Object)uRL2));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL2));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL2, uRL1);
      
      Set<String> set0 = httpUrl0.queryParameterNames();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("}lK", uRL2.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertEquals((-1), uRL2.getDefaultPort());
      assertNull(uRL2.getRef());
      assertEquals((-1), uRL2.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/A?}lK", uRL2.toString());
      assertEquals("http", uRL2.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/A?}lK", uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/A?}lK", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      assertFalse(uRL0.equals((Object)uRL2));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL2));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL2, uRL1);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("Prw-:");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("}lK", uRL2.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertEquals((-1), uRL2.getDefaultPort());
      assertNull(uRL2.getRef());
      assertEquals((-1), uRL2.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/A?}lK", uRL2.toString());
      assertEquals("http", uRL2.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/A?}lK", uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/A?}lK", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl_Builder0);
      assertFalse(uRL0.equals((Object)uRL2));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL2));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL2, uRL1);
      
      String string1 = "::";
      try { 
        HttpUrl.getChecked("::");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ::
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("#NX&a@");
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("NX&a@", httpUrl1.fragment());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample#NX&a@", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("NX&a@", httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      
      List<String> list0 = httpUrl0.queryParameterValues("+kh%7C%2F%%5E");
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertNotSame(httpUrl0, httpUrl1);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("gaiagpfs", "H6:'gr");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("'i$>El&TM1d&bt");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        HttpUrl.getChecked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedQuery();
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(string0);
      
      List<String> list0 = httpUrl0.queryParameterValues("DLfpt");
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex < beginindex:");
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("mnt", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex < beginindex:");
      assertEquals("", httpUrl1.password());
      assertEquals("mnt", httpUrl1.host());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(11, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl1.toString());
      assertNotNull(httpUrl1);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl1, httpUrl0);
      
      String string0 = httpUrl0.username();
      assertEquals("", string0);
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("mnt", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNotNull(string0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertNotSame(httpUrl0, httpUrl1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("Prw-:");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setEncodedQueryParameter("s.limit == s.pos", "Unexpected code point: ");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setEncodedPathSegment(0, "%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: %2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "%2e.";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("%2e.");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("Prw-:");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername("/?EVmK");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.encodedQuery("%2e.");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.addEncodedPathSegments("%2e.");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder5 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder5);
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder2));
      
      // Undeclared exception!
      try { 
        httpUrl_Builder5.host("Prw-:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: Prw-:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("Prw-:");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      String string0 = "Unexpected code point: ";
      String string1 = "https";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("h", "- ]W)eRt}9^2_Fdu7*");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.encodedUsername("gordon_scripts_adaptive");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.host("https");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        HttpUrl.getChecked("https:");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: https:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HttpUrl.namesAndValuesToQueryString((StringBuilder) null, linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = "#5uN);&Mf)";
      boolean boolean0 = true;
      String string1 = HttpUrl.percentDecode("#5uN);&Mf)", true);
      assertEquals("#5uN);&Mf)", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "?AEh";
      int int0 = HttpUrl.defaultPort("?AEh");
      assertEquals((-1), int0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("?AEh");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = "=ku_^Zs>3J0$wa~9d\\";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removePathSegment((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("#NX&a@");
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("NX&a@", httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample#NX&a@", httpUrl1.toString());
      assertEquals("NX&a@", httpUrl1.fragment());
      assertEquals(0, httpUrl1.querySize());
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      
      List<String> list0 = httpUrl0.queryParameterValues("+kh%7C%2F%%5E");
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertNotSame(httpUrl0, httpUrl1);
      
      URL uRL1 = httpUrl0.url();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toString());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getHost());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getAuthority());
      assertNotNull(uRL1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(uRL1, uRL0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("EslP", "^zh{#!Y;uUDf");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedUsername("okhttp3.HttpUrl");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("::2A2.$Yj_Cl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::2A2.$Yj_Cl
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "::2.YhCl";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::2.YhCl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::2.YhCl
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      URI uRI0 = httpUrl0.uri();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getRawAuthority());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI0.toString());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getHost());
      assertNotNull(uRI0);
      
      String string0 = httpUrl0.queryParameter("http:");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(string0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("http:", "://");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebutwellformedurl.org/fooexample");
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(443, httpUrl0.port());
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedFragment();
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(443, httpUrl0.port());
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("projects");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedUsername("/?EVmK");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.setEncodedQueryParameter("%2e.", "%2e.");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.addEncodedPathSegments("%2e.");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder0.encodedUsername("/?EVmK");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder0.reencodeForUri();
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      
      try { 
        HttpUrl.getChecked("%2e.");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for %2e.
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNotNull(httpUrl0);
      
      boolean boolean0 = httpUrl0.isHttps();
      assertFalse(boolean0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("Vajps}*l&yT>YQbPI");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(43);
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      assertEquals("https", httpUrl0.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertNotNull(httpUrl0);
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue((-163));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex < beginindex:");
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex < beginindex:");
      assertEquals(0, httpUrl1.querySize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl1.toString());
      assertEquals(11, httpUrl1.pathSize());
      assertEquals(80, httpUrl1.port());
      assertEquals("mnt", httpUrl1.host());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertNotNull(httpUrl1);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl1, httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex < beginindex:");
      assertEquals(0, httpUrl1.querySize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl1.toString());
      assertEquals(11, httpUrl1.pathSize());
      assertEquals(80, httpUrl1.port());
      assertEquals("mnt", httpUrl1.host());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertNotNull(httpUrl_Builder0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl1, httpUrl0);
      
      String string0 = httpUrl0.fragment();
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(string0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertNotSame(httpUrl0, httpUrl1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.queryParameter("http:");
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertNull(string0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("%2e%2e");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      httpUrl0.hashCode();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addQueryParameter("http:", "://");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      try { 
        HttpUrl.getChecked("://");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ://
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("/?EVmK");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex < beginindex:");
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      URI uRI0 = httpUrl0.uri();
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", uRI0.getRawPath());
      assertEquals("mnt", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("mnt", uRI0.getRawAuthority());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      URI uRI1 = MockURI.resolve(uRI0, "0*");
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", uRI0.getRawPath());
      assertEquals("mnt", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("mnt", uRI0.getRawAuthority());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertEquals("mnt", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertEquals("mnt", uRI1.getRawAuthority());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawQuery());
      assertEquals("http", uRI1.getScheme());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/0*", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertTrue(uRI1.isAbsolute());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/0*", uRI1.toString());
      assertNotNull(uRI1);
      assertFalse(uRI1.equals((Object)uRI0));
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      
      HttpUrl httpUrl1 = HttpUrl.get(uRI1);
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", uRI0.getRawPath());
      assertEquals("mnt", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("mnt", uRI0.getRawAuthority());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertEquals("mnt", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertEquals("mnt", uRI1.getRawAuthority());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawQuery());
      assertEquals("http", uRI1.getScheme());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/0*", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertTrue(uRI1.isAbsolute());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/0*", uRI1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("mnt", httpUrl1.host());
      assertEquals(80, httpUrl1.port());
      assertNull(httpUrl1.fragment());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/0*", httpUrl1.toString());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(11, httpUrl1.pathSize());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(0, httpUrl1.querySize());
      assertNotNull(httpUrl1);
      assertFalse(uRI0.equals((Object)uRI1));
      assertFalse(uRI1.equals((Object)uRI0));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      assertNotSame(httpUrl1, httpUrl0);
      
      String string0 = httpUrl1.redact();
      assertEquals("http://mnt/...", string0);
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", uRI0.getRawPath());
      assertEquals("mnt", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("mnt", uRI0.getRawAuthority());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertEquals("mnt", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertEquals("mnt", uRI1.getRawAuthority());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawQuery());
      assertEquals("http", uRI1.getScheme());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/0*", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertTrue(uRI1.isAbsolute());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/0*", uRI1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("mnt", httpUrl1.host());
      assertEquals(80, httpUrl1.port());
      assertNull(httpUrl1.fragment());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/0*", httpUrl1.toString());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(11, httpUrl1.pathSize());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(0, httpUrl1.querySize());
      assertNotNull(string0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(uRI0.equals((Object)uRI1));
      assertFalse(uRI1.equals((Object)uRI0));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      assertNotSame(httpUrl1, httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("4$S1BGof<uE");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("0*", "http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex < beginindex:");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      String string1 = "2mkh[_fL$s[Y'.@3";
      // Undeclared exception!
      try { 
        httpUrl_Builder2.scheme("2mkh[_fL$s[Y'.@3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: 2mkh[_fL$s[Y'.@3
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex < beginindex:");
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(11, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(httpUrl0);
      
      URI uRI0 = httpUrl0.uri();
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(11, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals("mnt", uRI0.getRawAuthority());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("mnt", uRI0.getHost());
      assertNotNull(uRI0);
      
      String string0 = httpUrl0.encodedPath();
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", string0);
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(11, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(string0);
      
      URI uRI1 = MockURI.resolve(uRI0, "0*");
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(11, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals("mnt", uRI0.getRawAuthority());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("mnt", uRI0.getHost());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/0*", uRI1.toString());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/0*", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertTrue(uRI1.isAbsolute());
      assertEquals("mnt", uRI1.getRawAuthority());
      assertNull(uRI1.getRawQuery());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawFragment());
      assertEquals("http", uRI1.getScheme());
      assertEquals((-1), uRI1.getPort());
      assertEquals("mnt", uRI1.getHost());
      assertNotNull(uRI1);
      assertFalse(uRI1.equals((Object)uRI0));
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      
      HttpUrl httpUrl1 = HttpUrl.get(uRI1);
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(11, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals("mnt", uRI0.getRawAuthority());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("mnt", uRI0.getHost());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/0*", uRI1.toString());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/0*", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertTrue(uRI1.isAbsolute());
      assertEquals("mnt", uRI1.getRawAuthority());
      assertNull(uRI1.getRawQuery());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawFragment());
      assertEquals("http", uRI1.getScheme());
      assertEquals((-1), uRI1.getPort());
      assertEquals("mnt", uRI1.getHost());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("mnt", httpUrl1.host());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(11, httpUrl1.pathSize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/0*", httpUrl1.toString());
      assertNotNull(httpUrl1);
      assertFalse(uRI0.equals((Object)uRI1));
      assertFalse(uRI1.equals((Object)uRI0));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      assertNotSame(httpUrl1, httpUrl0);
      
      String string1 = httpUrl1.redact();
      assertEquals("http://mnt/...", string1);
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(11, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals("mnt", uRI0.getRawAuthority());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("mnt", uRI0.getHost());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/0*", uRI1.toString());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/0*", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertTrue(uRI1.isAbsolute());
      assertEquals("mnt", uRI1.getRawAuthority());
      assertNull(uRI1.getRawQuery());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawFragment());
      assertEquals("http", uRI1.getScheme());
      assertEquals((-1), uRI1.getPort());
      assertEquals("mnt", uRI1.getHost());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("mnt", httpUrl1.host());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(11, httpUrl1.pathSize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/0*", httpUrl1.toString());
      assertNotNull(string1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(uRI0.equals((Object)uRI1));
      assertFalse(uRI1.equals((Object)uRI0));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      assertNotSame(httpUrl1, httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("0*", "http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex < beginindex:");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme("2mkh[_fL$s[Y'.@3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: 2mkh[_fL$s[Y'.@3
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "[::";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[::");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [::
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("okhttp3.HttpUrl");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      String string0 = "N*UMJX/#Y\\ G'hJuc1";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("okhttp3.HttpUrl");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.setEncodedQueryParameter("[Z7cq~oSobxMr;~`8:$L", (String) null);
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder3.host("[Z7cq~oSobxMr;~`8:$L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [Z7cq~oSobxMr;~`8:$L
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutw{llformedurlorg/fooexample");
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutw{llformedurlorg", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https://www.somefakebutw{llformedurlorg/fooexample", httpUrl0.toString());
      assertNotNull(httpUrl0);
      
      Set<String> set0 = httpUrl0.queryParameterNames();
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutw{llformedurlorg", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https://www.somefakebutw{llformedurlorg/fooexample", httpUrl0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "okhttp3.HttpUrl";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("okhttp3.HttpUrl");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addPathSegments("N*UMJX/#Y G'hJuc1");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("25.39'!B:7 7J<Wv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 25.39'!B:7 7J<Wv
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("Prw-:", "Prw-:");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedUsername("Prw-:");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("Kco/.m3E");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.encodedFragment("Prw-:");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.fragment("Kco/.m3E");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder0.addPathSegments("..");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder4.reencodeForUri();
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okkttp/okhttp3.httpurl/endindex < beginindex:");
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okkttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedQuery();
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okkttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertNull(string0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("");
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okkttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl0.newBuilder();
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okkttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertNotNull(httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder1);
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okkttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okkttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl1.toString());
      assertEquals(11, httpUrl1.pathSize());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("mnt", httpUrl1.host());
      assertNotNull(httpUrl1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okkttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertNotNull(httpUrl_Builder2);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl httpUrl2 = httpUrl_Builder2.build();
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okkttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("", httpUrl2.password());
      assertEquals("mnt", httpUrl2.host());
      assertNull(httpUrl2.fragment());
      assertFalse(httpUrl2.isHttps());
      assertEquals(11, httpUrl2.pathSize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okkttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl2.toString());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(80, httpUrl2.port());
      assertEquals("", httpUrl2.username());
      assertEquals(0, httpUrl2.querySize());
      assertEquals("", httpUrl2.encodedPassword());
      assertNotNull(httpUrl2);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertTrue(httpUrl2.equals((Object)httpUrl0));
      assertTrue(httpUrl2.equals((Object)httpUrl1));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutw{llformedurlorg/fooexample");
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://www.somefakebutw{llformedurlorg/fooexample", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutw{llformedurlorg", httpUrl0.host());
      assertNotNull(httpUrl0);
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(49);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("#NX&a@");
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("NX&a@", httpUrl1.encodedFragment());
      assertEquals("NX&a@", httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample#NX&a@", httpUrl1.toString());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(1, httpUrl1.pathSize());
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNotNull(uRI0);
      
      String string0 = httpUrl1.fragment();
      assertEquals("NX&a@", string0);
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("NX&a@", httpUrl1.encodedFragment());
      assertEquals("NX&a@", httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample#NX&a@", httpUrl1.toString());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(1, httpUrl1.pathSize());
      assertNotNull(string0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder();
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("NX&a@", httpUrl1.encodedFragment());
      assertEquals("NX&a@", httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample#NX&a@", httpUrl1.toString());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(1, httpUrl1.pathSize());
      assertNotNull(httpUrl_Builder0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("Prw-:");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername("Prw-:");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "As<^(|q", uRLStreamHandler0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      URL uRL2 = MockURL.URL(uRL1, "byteCount > Integer.MAX_VALUE: ");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL2.getQuery());
      assertNull(uRL2.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/byteCount > Integer.MAX_VALUE:", uRL2.toExternalForm());
      assertEquals("http", uRL2.getProtocol());
      assertEquals((-1), uRL2.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals((-1), uRL2.getDefaultPort());
      assertNull(uRL2.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/byteCount > Integer.MAX_VALUE:", uRL2.toString());
      assertNotNull(uRL2);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL2, uRL1);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL2);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL2.getQuery());
      assertNull(uRL2.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/byteCount > Integer.MAX_VALUE:", uRL2.toExternalForm());
      assertEquals("http", uRL2.getProtocol());
      assertEquals((-1), uRL2.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals((-1), uRL2.getDefaultPort());
      assertNull(uRL2.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/byteCount > Integer.MAX_VALUE:", uRL2.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/byteCount%20%3E%20Integer.MAX_VALUE:", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotNull(httpUrl0);
      assertFalse(uRL0.equals((Object)uRL2));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL2));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL2, uRL1);
      
      String string0 = httpUrl0.queryParameter("Prw-:");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL2.getQuery());
      assertNull(uRL2.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/byteCount > Integer.MAX_VALUE:", uRL2.toExternalForm());
      assertEquals("http", uRL2.getProtocol());
      assertEquals((-1), uRL2.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals((-1), uRL2.getDefaultPort());
      assertNull(uRL2.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/byteCount > Integer.MAX_VALUE:", uRL2.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/byteCount%20%3E%20Integer.MAX_VALUE:", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(string0);
      assertFalse(uRL0.equals((Object)uRL2));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL2));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL2, uRL1);
      
      Set<String> set0 = httpUrl0.queryParameterNames();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL2.getQuery());
      assertNull(uRL2.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/byteCount > Integer.MAX_VALUE:", uRL2.toExternalForm());
      assertEquals("http", uRL2.getProtocol());
      assertEquals((-1), uRL2.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals((-1), uRL2.getDefaultPort());
      assertNull(uRL2.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/byteCount > Integer.MAX_VALUE:", uRL2.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/byteCount%20%3E%20Integer.MAX_VALUE:", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(uRL0.equals((Object)uRL2));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL2));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL2, uRL1);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("Prw-:");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL2.getQuery());
      assertNull(uRL2.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/byteCount > Integer.MAX_VALUE:", uRL2.toExternalForm());
      assertEquals("http", uRL2.getProtocol());
      assertEquals((-1), uRL2.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals((-1), uRL2.getDefaultPort());
      assertNull(uRL2.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/byteCount > Integer.MAX_VALUE:", uRL2.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/byteCount%20%3E%20Integer.MAX_VALUE:", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl_Builder0);
      assertFalse(uRL0.equals((Object)uRL2));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL2));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL2, uRL1);
      
      String string1 = "::";
      try { 
        HttpUrl.getChecked("::");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ::
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutw{llformedurlorg/fooexample");
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutw{llformedurlorg", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https://www.somefakebutw{llformedurlorg/fooexample", httpUrl0.toString());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.query();
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutw{llformedurlorg", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https://www.somefakebutw{llformedurlorg/fooexample", httpUrl0.toString());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNotNull(httpUrl0);
      
      int int0 = httpUrl0.port();
      assertEquals(80, int0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "%2e.";
      String string1 = "\n";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("", "\n");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex < beginindex:");
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
      
      URI uRI0 = httpUrl0.uri();
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", uRI0.getHost());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("mnt", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      String string0 = httpUrl0.password();
      assertEquals("", string0);
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNotNull(string0);
      
      URL uRL0 = httpUrl0.url();
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("mnt", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("mnt", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", uRL0.toExternalForm());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = HttpUrl.get(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.isHttps());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.password());
      assertEquals(0, httpUrl1.querySize());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("http", httpUrl1.scheme());
      assertNotNull(httpUrl1);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl1, httpUrl0);
      
      String string0 = httpUrl0.scheme();
      assertEquals("http", string0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotNull(string0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertNotSame(httpUrl0, httpUrl1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedQuery();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(string0);
      
      String string1 = MockURL.getPath(uRL0);
      assertEquals("/fooExample", string1);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(string1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve(".%2e");
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.username());
      assertEquals("http://www.somefakebutwellformedurl.org/", httpUrl1.toString());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.encodedPassword());
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.query();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertNull(string0);
      
      boolean boolean0 = httpUrl0.equals(uRL0);
      assertFalse(boolean0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "size < 4: ");
      assertFalse(boolean0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("pathSegment == null");
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://www.somefakebutwellformedurl.org/pathSegment%20==%20null", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(0, httpUrl1.querySize());
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      boolean boolean2 = httpUrl0.equals("size < 4: ");
      assertFalse(boolean2);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(httpUrl0, httpUrl1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("prw-:");
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl1);
      
      String string0 = httpUrl0.query();
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(string0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " mP.s~'1e4]%5Q@?A");
      assertFalse(boolean0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex < beginindex:");
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("mnt", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("#NX&a@");
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("mnt", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl1.password());
      assertEquals("mnt", httpUrl1.host());
      assertEquals("NX&a@", httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:#NX&a@", httpUrl1.toString());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals("NX&a@", httpUrl1.fragment());
      assertEquals(11, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      
      boolean boolean1 = httpUrl0.equals(httpUrl1);
      assertFalse(boolean1);
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("mnt", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl1.password());
      assertEquals("mnt", httpUrl1.host());
      assertEquals("NX&a@", httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:#NX&a@", httpUrl1.toString());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals("NX&a@", httpUrl1.fragment());
      assertEquals(11, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.encodedPathSegments();
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = httpUrl0.host();
      assertEquals("www.somefakebutwellformedurl.org", string0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.effectivePort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("O4)\"Ki6<!");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("O4)\"Ki6<!");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      String string0 = ".";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("O4)\"Ki6<!", ".");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedUsername("cGP^*Ii&r/2f5");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder4.setPathSegment(1450, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex < beginindex:");
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("%2e.");
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl1.password());
      assertEquals("mnt", httpUrl1.host());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.fragment());
      assertFalse(httpUrl1.isHttps());
      assertEquals(10, httpUrl1.pathSize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/", httpUrl1.toString());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      
      try { 
        HttpUrl.getChecked("WMn_/");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for WMn_/
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex < beginindex:");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex < beginindex:");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("|Q7wWMx", "timeout < 0: ");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedUsername("http:%2Fmnt%2Fgaiagpfs%2Fusers%2Fhomedirs%2Fapanichella%2Fevosuite_performance%2Fdataset%2Fgordon_scripts_adaptive%2Fprojects%2F7_okhttp%2Fokhttp3.httpurl%2Fendindex%20%3C%20beginindex:");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.encodedUsername("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex < beginindex:");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder4.query("/...");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder6.removePathSegment(0);
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder7);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      try { 
        HttpUrl.getChecked("http:%2Fmnt%2Fgaiagpfs%2Fusers%2Fhomedirs%2Fapanichella%2Fevosuite_performance%2Fdataset%2Fgordon_scripts_adaptive%2Fprojects%2F7_okhttp%2Fokhttp3.httpurl%2Fendindex%20%3C%20beginindex:");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:%2Fmnt%2Fgaiagpfs%2Fusers%2Fhomedirs%2Fapanichella%2Fevosuite_performance%2Fdataset%2Fgordon_scripts_adaptive%2Fprojects%2F7_okhttp%2Fokhttp3.httpurl%2Fendindex%20%3C%20beginindex:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuiUe_performance/dataset/gomdon_scripts_adaptive/projects/7_okht?p/okhttp3.httpurl/endind8x < beginindex:");
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("mnt", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.scheme());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(9, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuiUe_performance/dataset/gomdon_scripts_adaptive/projects/7_okht?p/okhttp3.httpurl/endind8x%20%3C%20beginindex:", httpUrl0.toString());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.query();
      assertEquals("p/okhttp3.httpurl/endind8x < beginindex:", string0);
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("mnt", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.scheme());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(9, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuiUe_performance/dataset/gomdon_scripts_adaptive/projects/7_okht?p/okhttp3.httpurl/endind8x%20%3C%20beginindex:", httpUrl0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      int int0 = httpUrl0.querySize();
      assertEquals(0, int0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scr|pts_adaptive/projects/7_okhttp/okhttp3.ht^purl/endindex < beginindex:");
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scr%7Cpts_adaptive/projects/7_okhttp/okhttp3.ht%5Epurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.queryParameterValues("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scr|pts_adaptive/projects/7_okhttp/okhttp3.ht^purl/endindex < beginindex:");
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scr%7Cpts_adaptive/projects/7_okhttp/okhttp3.ht%5Epurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      int int0 = httpUrl0.querySize();
      assertEquals(0, int0);
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scr%7Cpts_adaptive/projects/7_okhttp/okhttp3.ht%5Epurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scr|pts_adaptive/projects/7_okhttp/okhttp3.ht^purl/endindex < beginindex:", "http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scr|pts_adaptive/projects/7_okhttp/okhttp3.ht^purl/endindex < beginindex:");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scr|pts_adaptive/projects/7_okhttp/okhttp3.ht^purl/endindex < beginindex:");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.encodedQuery("C*b5<aUznJQuvp+");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setQueryParameter("C*b5<aUznJQuvp+", "bytes is empty");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "deadline reached");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("http:%2Fmnt%2Fgaiagpfs%2Fusers%2Fhomedirs%2Fapanichella%2Fevosuite_performanc%2Fdataset%2Fgordon_scripts_adaptive%2Fproject?%2F7_okhttp%2Fokhttp3.httpurl%2Fendidex%20%3C%20beginindex:");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "http:/mnt/giagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex < beginindex:";
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/giagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex < beginindex:");
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http://mnt/giagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("mnt", httpUrl0.host());
      assertNotNull(httpUrl0);
      
      String string1 = " conteSnr=";
      List<String> list0 = httpUrl0.encodedPathSegments();
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http://mnt/giagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(11, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = HttpUrl.percentEncoded("http:/mnt/giagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex < beginindex:", 40, 43);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(" conteSnr=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host:  conteSnr=
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex < beginindex:";
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex < beginindex:");
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.queryParameterValues("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex < beginindex:");
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/okhttp3.httpurl/endindex%20%3C%20beginindex:", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("e:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: e:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaigpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script0_adaptie/prolects7_okhtp/okSttp3.httprl/endindvx < beginndex:");
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("http://mnt/gaigpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script0_adaptie/prolects7_okhtp/okSttp3.httprl/endindvx%20%3C%20beginndex:", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertNotNull(httpUrl0);
      
      try { 
        HttpUrl.getChecked("http:et:https:2fmnt%252fgaiagpfs%252fusers%252fhomedirs%252fapanichella%252fevosuite_performance%252fdataset%252fgordon_scripts_adaptive%252fprojects%252f7_okhttp%252fokhttp3.httpurl%252fendindex%2520%253c%2520beginindex:#https:2fmnt%252fgaiagpfs%252fusers%252fhomedirs%252fapanichella%252fevosuite_performance%252fdataset%252fgordon_scripts_adaptive%252fprojects%252f7_okhttp%252fokhttp3.httpurl%252fendindex%2520%253c%2520beginindex:");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: INVALID_PORT for http:et:https:2fmnt%252fgaiagpfs%252fusers%252fhomedirs%252fapanichella%252fevosuite_performance%252fdataset%252fgordon_scripts_adaptive%252fprojects%252f7_okhttp%252fokhttp3.httpurl%252fendindex%2520%253c%2520beginindex:#https:2fmnt%252fgaiagpfs%252fusers%252fhomedirs%252fapanichella%252fevosuite_performance%252fdataset%252fgordon_scripts_adaptive%252fprojects%252f7_okhttp%252fokhttp3.httpurl%252fendindex%2520%253c%2520beginindex:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("bv?e?\"g-");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/bv?e?%22g-", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterValue(5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
