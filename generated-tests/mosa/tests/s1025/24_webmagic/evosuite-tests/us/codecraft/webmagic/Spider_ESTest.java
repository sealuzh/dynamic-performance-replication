/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 16:20:22 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.AndSelector;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.ReplaceSelector;
import us.codecraft.webmagic.selector.Selector;
import us.codecraft.webmagic.selector.SmartContentSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("downloading page success {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.uuid = "downloading page success {}";
      Spider spider1 = spider0.setDownloader((Downloader) null);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider2 = spider1.pipeline(consolePipeline0);
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.Spider$Status";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = new Spider(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.addPipeline(consolePipeline0);
      // Undeclared exception!
      try { 
        spider1.thread((-554));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HTtD:k}aEptfshT");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("HTtD:k}aEptfshT");
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("");
      Request request0 = new Request("J>]t|nbfkbV^|,~");
      request0.getExtras();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.setExitWhenComplete(true);
      Spider spider2 = spider1.addPipeline(resultItemsCollectorPipeline0);
      spider2.clearPipeline();
      String string0 = spider0.getUUID();
      assertEquals(0L, spider0.getPageCount());
      assertNull(string0);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page status code error, page {} , code: {}");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.pipeline((Pipeline) null);
      Spider spider2 = spider1.setUUID("page status code error, page {} , code: {}");
      Spider spider3 = spider2.addPipeline((Pipeline) null);
      Spider spider4 = spider3.setExecutorService((ExecutorService) null);
      Spider spider5 = spider4.setPipelines((List<Pipeline>) null);
      spider5.checkIfRunning();
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.addPipeline(resultItemsCollectorPipeline0);
      spider1.clearPipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.clearPipeline();
      Request[] requestArray0 = new Request[5];
      Request request0 = new Request();
      requestArray0[0] = request0;
      requestArray0[1] = request0;
      Request request1 = request0.setUrl("_cycle_tried_times");
      requestArray0[2] = request1;
      Request request2 = request0.setUrl("");
      requestArray0[3] = request2;
      Request request3 = new Request();
      requestArray0[4] = request3;
      // Undeclared exception!
      try { 
        spider2.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/ ");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#c(O4@v]K4");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "#c(O4@v]K4";
      stringArray0[1] = "#c(O4@v]K4";
      stringArray0[2] = "#c(O4@v]K4";
      stringArray0[3] = "#c(O4@v]K4";
      stringArray0[4] = "#c(O4@v]K4";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/ ");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Cg[M4g<E-y");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.addPipeline(resultItemsCollectorPipeline0);
      Spider spider2 = spider1.setUUID("");
      Spider spider3 = spider2.setPipelines((List<Pipeline>) null);
      Request[] requestArray0 = new Request[0];
      Spider spider4 = spider3.addRequest(requestArray0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider5 = spider4.setScheduler(priorityScheduler0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider5);
      // Undeclared exception!
      try { 
        spider5.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.setUUID("");
      Spider spider2 = spider1.clearPipeline();
      Spider spider3 = spider2.thread(1905);
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("G@(<Rl5tQpVCb@!L");
      Spider spider0 = new Spider(simplePageProcessor0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1297);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 229);
      Spider spider2 = spider1.clearPipeline();
      List<SpiderListener> list0 = spider2.getSpiderListeners();
      assertNull(list0);
      
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      Spider spider4 = spider3.setExecutorService(scheduledThreadPoolExecutor0);
      Spider spider5 = spider4.setUUID("G@(<Rl5tQpVCb@!L");
      spider5.getStatus();
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.scheduler.PriorityScheduler";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.scheduler.PriorityScheduler");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider2 = spider1.addPipeline(jsonFilePipeline0);
      ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        spider2.thread((ExecutorService) null, (-2511));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&/#pbma,~|lK");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("init cache scheduler success");
      spider0.scheduler(fileCacheQueueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider0.addPipeline(resultItemsCollectorPipeline0);
      System.setCurrentTimeMillis(415L);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Spider.Status.fromValue(3006);
      String string0 = "";
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.addPipeline(resultItemsCollectorPipeline0);
      Spider spider2 = spider1.clearPipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider1);
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      AndSelector andSelector0 = new AndSelector(linkedList0);
      List<String> list0 = andSelector0.selectList("");
      Spider spider3 = spider2.startUrls(list0);
      PriorityScheduler priorityScheduler1 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "_cycle_tried_times");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(0);
      Spider spider4 = spider3.downloader(phantomJSDownloader1);
      Spider spider5 = spider4.startUrls(list0);
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("~/8");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request(";;2>ew%i\"T~U\"F9");
      Request request1 = request0.addHeader(", headers=", ", headers=");
      request1.setCharset("us.codecraft.webmagic.monitor.SpiderMonitor");
      request0.setPriority(1013L);
      String string0 = "1~(`Oa(_C9F*\"e";
      request0.addCookie(", headers=", "1~(`Oa(_C9F*\"e");
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = new Spider(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider0.addPipeline(consolePipeline0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.Spider$Status", "us.codecraft.webmagic.Spider$Status");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider2.setUUID("us.codecraft.webmagic.Spider$Status");
      spider3.sleep(125);
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.addPipeline(resultItemsCollectorPipeline0);
      spider1.clearPipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Page page0 = new Page();
      Json json0 = page0.getJson();
      Class<Request> class0 = Request.class;
      json0.toList(class0);
      Spider spider2 = spider1.startRequest((List<Request>) null);
      assertTrue(spider2.isSpawnUrl());
      
      Spider spider3 = spider0.setSpawnUrl(false);
      FilePipeline filePipeline0 = new FilePipeline();
      spider2.pipeline(filePipeline0);
      spider3.pipeline(filePipeline0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      spider1.thread((ExecutorService) forkJoinPool0, 5);
      assertFalse(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/ ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request("/ ");
      Request request1 = request0.addHeader((String) null, "");
      Request request2 = request1.putExtra("_}fR,T1%!CIG", "_}fR,T1%!CIG");
      request2.addCookie("_}fR,T1%!CIG", "");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider1 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("_}fR,T1%!CIG", "");
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      Request request3 = request2.setCharset("v#m(|H, Lp^'hI7hDQ@");
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader((String) null, "_cycle_tried_times");
      spider0.setDownloader(phantomJSDownloader1);
      fileCacheQueueScheduler0.push(request3, spider1);
      Request request4 = fileCacheQueueScheduler0.poll(spider2);
      fileCacheQueueScheduler0.push(request4, spider1);
      fileCacheQueueScheduler0.getDuplicateRemover();
      System.setCurrentTimeMillis((-2128L));
      spider0.run();
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("cBEI$");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(">z$y07'\u0001go$w");
      Request request0 = new Request();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_cycle_tried_times");
      request0.getExtras();
      Request request1 = request0.setExtras((Map<String, Object>) null);
      ForkJoinPool.commonPool();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2706);
      spider0.setExecutorService(forkJoinPool0);
      Request request2 = request1.setCharset("url:\t");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("J>]t|nbfkbV^|,~", "_cycle_tried_times");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      fileCacheQueueScheduler0.push(request2, spider1);
      Request request3 = fileCacheQueueScheduler0.poll(spider0);
      fileCacheQueueScheduler0.push(request3, spider1);
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      Spider spider2 = spider0.setScheduler(fileCacheQueueScheduler0);
      Spider spider3 = spider1.setUUID((String) null);
      spider3.clearPipeline();
      String[] stringArray0 = new String[0];
      spider2.test(stringArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.addPipeline(resultItemsCollectorPipeline0);
      Spider spider2 = spider1.clearPipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider1.clearPipeline();
      spider2.getThreadAlive();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Request request0 = new Request("");
      request0.getExtras();
      Request request1 = request0.setExtras((Map<String, Object>) null);
      request1.setCharset(".html");
      request1.setBinaryContent(true);
      request0.addCookie("", "url:\t");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("_cycle_tried_times");
      fileCacheQueueScheduler0.poll(spider1);
      fileCacheQueueScheduler0.push(request1, spider1);
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("AWXI}hHh3mqG");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler1.getDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedList0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("cBEI$");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(">z$y07'\u0001go$w");
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("]");
      Request request0 = new Request((String) null);
      request0.getExtras();
      Request request1 = request0.setExtras((Map<String, Object>) null);
      Request request2 = request1.setCharset("allText");
      Request request3 = request2.setBinaryContent(true);
      request1.addCookie("url:\t", "S6tA8");
      fileCacheQueueScheduler0.push(request2, spider0);
      fileCacheQueueScheduler0.poll(spider0);
      fileCacheQueueScheduler0.push(request3, spider0);
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler1.getDuplicateRemover();
      fileCacheQueueScheduler1.setDuplicateRemover(duplicateRemover0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedList0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Request request0 = new Request("");
      request0.getExtras();
      request0.setExtras((Map<String, Object>) null);
      Request request1 = request0.setCharset("url:\t");
      request1.setBinaryContent(false);
      request0.addCookie("rB&]=UvyG&ac~QI", "");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_cycle_tried_times");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("XSRy;E%P", "_cycle_tried_times");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider1.setUUID("");
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<String> list0 = spider1.getAll((Collection<String>) linkedBlockingDeque0);
      Spider spider3 = spider2.startUrls(list0);
      fileCacheQueueScheduler0.poll(spider3);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("_cycle_tried_times");
      fileCacheQueueScheduler1.setDuplicateRemover(duplicateRemover0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider2.getAll((Collection<String>) linkedBlockingDeque0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.addPipeline(resultItemsCollectorPipeline0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Spider spider2 = spider1.pipeline((Pipeline) null);
      spider2.getStartTime();
      spider1.getCollectorPipeline();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>(linkedTransferQueue0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(5, 2, 5, timeUnit0, linkedBlockingQueue0, threadFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HTtD:k}aEptfshT");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("HTtD:k}aEptfshT");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte) (-2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Request request0 = new Request("J>]t|nbfkbV^|,~");
      request0.getExtras();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.setExitWhenComplete(true);
      spider1.runAsync();
      spider1.addPipeline(resultItemsCollectorPipeline0);
      spider0.getUUID();
      // Undeclared exception!
      try { 
        spider1.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Request request0 = new Request("");
      request0.getExtras();
      request0.setExtras((Map<String, Object>) null);
      Request request1 = request0.setCharset("url:\t");
      request1.setBinaryContent(false);
      request0.addCookie("rB&]=UvyG&ac~QI", "");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_cycle_tried_times");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("XSRy;E%P", "_cycle_tried_times");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<String> list0 = spider1.getAll((Collection<String>) linkedBlockingDeque0);
      Spider spider2 = spider1.startUrls(list0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.clearPipeline();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "_cycle_tried_times";
      stringArray0[1] = "XSRy;E%P";
      stringArray0[2] = "";
      stringArray0[3] = "_cycle_tried_times";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Request request0 = new Request("");
      request0.getExtras();
      request0.setExtras((Map<String, Object>) null);
      Request request1 = request0.setCharset("url:\t");
      request1.setBinaryContent(false);
      request0.addCookie("rB&]=UvyG&ac~QI", "");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_cycle_tried_times");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("XSRy;E%P", "_cycle_tried_times");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<String> list0 = spider1.getAll((Collection<String>) linkedBlockingDeque0);
      spider1.startUrls(list0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.clearPipeline();
      spider1.getThreadAlive();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " stop success!";
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(", url=");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      MockThread.getDefaultUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(3, forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, true);
      Spider spider3 = spider2.setExecutorService(forkJoinPool0);
      Spider spider4 = spider3.thread((ExecutorService) forkJoinPool0, 688);
      hashSetDuplicateRemover0.resetDuplicateCheck(spider4);
      spider3.stop();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      // Undeclared exception!
      try { 
        spider3.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Request request0 = new Request("");
      request0.getExtras();
      Request request1 = request0.setExtras((Map<String, Object>) null);
      request1.setBinaryContent(false);
      Request request2 = request0.addCookie("rB&]=UvyG&ac~QI", "");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_cycle_tried_times");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("XSRy;E%P", "_cycle_tried_times");
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      request0.setCharset("_cycle_tried_times");
      forkJoinPool0.shutdownNow();
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("write file error", "");
      Spider spider2 = spider0.setDownloader(phantomJSDownloader1);
      fileCacheQueueScheduler0.push(request2, spider0);
      fileCacheQueueScheduler0.poll(spider2);
      fileCacheQueueScheduler0.push(request1, spider2);
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      spider1.setScheduler(duplicateRemovedScheduler0);
      Spider spider3 = spider0.setUUID((String) null);
      spider3.destroyWhenExit = false;
      Spider spider4 = spider0.clearPipeline();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "_cycle_tried_times";
      stringArray0[1] = null;
      stringArray0[2] = "rB&]=UvyG&ac~QI";
      // Undeclared exception!
      try { 
        spider4.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }
}
