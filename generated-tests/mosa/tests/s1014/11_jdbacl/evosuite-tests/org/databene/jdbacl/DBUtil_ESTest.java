/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:04:04 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.lang.reflect.Proxy;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Properties;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.impl.services.monitor.FileMonitor;
import org.databene.commons.ErrorHandler;
import org.databene.commons.Level;
import org.databene.jdbacl.DBUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.GDSException;
import org.firebirdsql.jdbc.FBArray;
import org.h2.Driver;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.tools.Csv;
import org.h2.tools.Recover;
import org.h2.tools.SimpleResultSet;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.jdbcDriver;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DBUtil.assertAllDbResourcesClosed(false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = DBUtil.escape("n!d&");
      assertEquals("n!d&", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "org.hsqldb.Library.user", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: org.hsqldb.Library.user
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      try { 
        DBUtil.runScript("", "", (Connection) null, false, (ErrorHandler) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Error getting statement from result set");
      TableContainer tableContainer0 = new TableContainer(".env.properties");
      DBUtil.dependencyOrderedTables(tableContainer0);
      int int0 = DBUtil.executeUpdate("", (Connection) null);
      assertEquals(0, int0);
      
      boolean boolean0 = DBUtil.available("Error getting statement from result set", "Database query failed: ", "Database query failed: ", ",.bTG0Mh`X@$GD o");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer(".env.properties");
      DBUtil.dependencyOrderedTables(tableContainer0);
      // Undeclared exception!
      try { 
        DBUtil.connect(".env.properties", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '.env.properties.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileMonitor fileMonitor0 = new FileMonitor();
      fileMonitor0.getApplicationProperties();
      Driver driver0 = new Driver();
      driver0.connect("PK", (Properties) null);
      // Undeclared exception!
      try { 
        DBUtil.queryAndSimplify("PK", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBUtil.getOpenStatementCount();
      Connection connection0 = null;
      DBUtil.close((Connection) null);
      FBArray fBArray0 = new FBArray();
      fBArray0.getResultSet();
      // Undeclared exception!
      try { 
        DBUtil.closeResultSetAndStatement((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DBUtil.resetMonitors();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DBUtil.assertAllDbResourcesClosed(true);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      int int0 = DBUtil.getOpenResultSetCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Level level0 = Level.trace;
      ErrorHandler.setDefaultLevel(level0);
      ErrorHandler.setDefaultLevel(level0);
      Class<String> class0 = String.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("PK", (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DBUtil.getOpenPreparedStatementCount();
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("There are unclosed database resources", dBSchema0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "There are unclosed database resources";
      stringArray0[2] = "";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "hsqldb.cache_version";
      stringArray0[6] = null;
      stringArray0[7] = "There are unclosed database resources";
      stringArray0[8] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        DBUtil.equivalent(dBUniqueConstraint0, (DBPrimaryKeyConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Connection connection0 = null;
      String string0 = "No JDBC driver class name specified";
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "No JDBC driver class name specified", false, 268435456, 1443, 268435456);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DBUtil.executeUpdate((String) null, (Connection) null);
      DBUtil.getOpenConnectionCount();
      // Undeclared exception!
      try { 
        DBUtil.logMetaData((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Level level0 = Level.trace;
      ErrorHandler.setDefaultLevel(level0);
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBUtil.close((Connection) null);
      DBUtil.wrapWithPooledConnection((Connection) null, true);
      // Undeclared exception!
      try { 
        DBUtil.logMetaData((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileMonitor fileMonitor0 = new FileMonitor();
      fileMonitor0.getApplicationProperties();
      Driver driver0 = new Driver();
      driver0.connect("--", (Properties) null);
      Object object0 = new Object();
      DBUtil.close((Connection) null);
      try { 
        DBUtil.getMetaData((Connection) null, "--", "EkT~#&&239>Yl", false, false, true, true, "EkT~#&&239>Yl", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Driver.load();
      Object object0 = new Object();
      DBUtil.assertAllDbResourcesClosed(true);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      DBUtil.getOpenPreparedStatementCount();
      DBUtil.existsEnvironment("<aCO");
      HsqlProperties hsqlProperties0 = HsqlProperties.delimitedArgPairsToProps("<aCO", "<aCO", "RG*Mk#x8YJ-", "<aCO");
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DBUtil.getOpenResultSetCount();
      String string0 = "' found";
      jdbcDriver jdbcDriver0 = new jdbcDriver();
      jdbcDriver0.connect("' found", (Properties) null);
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata("' found", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Proxy proxy0 = (Proxy)DBUtil.createLoggingResultSet(errorMessages0, (Statement) null);
      try { 
        DBUtil.parseAndSimplifyResultSet((ResultSet) proxy0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<DBSchema> class0 = DBSchema.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      errorHandler0.setLoggingStackTrace(true);
      DBUtil.runScript("", (Connection) null, true, errorHandler0);
      Level level0 = Level.info;
      ErrorHandler.setDefaultLevel(level0);
      // Undeclared exception!
      try { 
        DBUtil.query("iFcOgwkbv6=! ", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      Object object0 = DBUtil.parseAndSimplifyResultSet(simpleResultSet0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("No JDBC driver class name specified");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      tableContainer0.addTable(defaultDBTable0);
      tableContainer0.getComponents();
      List<DBTable> list0 = DBUtil.dependencyOrderedTables(tableContainer0);
      assertEquals(1, list0.size());
  }
}
