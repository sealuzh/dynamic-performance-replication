/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:33:41 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      ByteString byteString0 = realBufferedSource0.buffer.readByteString();
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.writableSegment(2932);
      realBufferedSink0.buffer.inputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      realBufferedSink0.buffer();
      HashingSink.md5(realBufferedSink0);
      realBufferedSink0.writeIntLe(2147450880);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      realBufferedSource0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer1.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Segment segment0 = new Segment();
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-76);
      byteArray0[0] = (byte)51;
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Pipe pipe0 = new Pipe(916L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      Buffer buffer1 = buffer0.readFrom(inputStream0);
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong((-2312L));
      buffer1.readLong();
      Buffer buffer2 = buffer0.writeUtf8("");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      // Undeclared exception!
      try { 
        buffer0.snapshot(8192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=8192
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      ByteString byteString0 = buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(9223372036854775807L);
      buffer0.readIntLe();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.writeDecimalLong((-9223372036854775784L));
      buffer1.indexOfElement(byteString0);
      Charset.defaultCharset();
      long long0 = buffer0.readLong();
      assertEquals(16L, buffer0.size());
      assertEquals((-553292058062L), long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Pipe pipe0 = new Pipe(997L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer buffer1 = buffer0.writeUtf8("aXF2Po8\"");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)22;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)59;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.indexOfElement(byteString0, 183L);
      buffer1.snapshot();
      assertEquals(8L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer1.writeUtf8("&W1*2.7*)", (-3076), (-3076));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -3076
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Pipe pipe0 = new Pipe(84L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = true;
      buffer0.outputStream();
      buffer0.md5();
      byte byte0 = (byte)0;
      Buffer buffer1 = buffer0.writeUtf8("|epAn<N{t");
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      hashingSource0.hash();
      // Undeclared exception!
      try { 
        buffer1.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.outputStream();
      long long0 = 9223372036854775807L;
      Buffer buffer1 = buffer0.writeLongLe((-2658L));
      buffer1.readIntLe();
      ByteString byteString0 = new ByteString((byte[]) null);
      buffer0.writeDecimalLong((-2658));
      // Undeclared exception!
      try { 
        buffer0.write((Source) buffer1, 533L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      String string0 = "#`\\#x?1Hz&%F'rsP\"";
      buffer1.sha256();
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[2] = (byte)63;
      byteArray0[5] = (byte)85;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong((byte)63);
      buffer_UnsafeCursor0.next();
      buffer2.readUtf8();
      // Undeclared exception!
      try { 
        buffer1.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = true;
      buffer0.outputStream();
      buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(9223372036854775807L);
      buffer1.readIntLe();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(2147483647L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=2147483647 > size=4
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.timeout();
      Buffer buffer1 = buffer0.writeLongLe(255L);
      ByteString byteString0 = buffer1.sha512();
      buffer1.readUtf8();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer1.hmacSha512(byteString0);
      // Undeclared exception!
      try { 
        options0.get((-2147483646));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483646
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer.sha512();
      ByteString byteString1 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        byteString0.hmacSha256(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Pipe pipe0 = new Pipe(542L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = false;
      Buffer buffer1 = buffer0.writeByte(68);
      // Undeclared exception!
      try { 
        buffer1.readAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong((-14L));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.readWrite = true;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-14L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -14
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      Inflater inflater0 = new Inflater(true);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-1));
      // Undeclared exception!
      try { 
        buffer0.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OutputStream outputStream0 = buffer0.outputStream();
      buffer0.md5();
      buffer0.copyTo(outputStream0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(1688L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jnT{PMh5i9=O'o");
      buffer0.outputStream();
      buffer0.md5();
      // Undeclared exception!
      try { 
        buffer0.readUtf8((-2693L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2693
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      Inflater inflater0 = new Inflater(false);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer.writeDecimalLong(1469L);
      buffer0.segmentSizes();
      buffer1.writeHexadecimalUnsignedLong(2914L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe0 = new Pipe(100L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(hashingSource0, inflater0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.rangeEquals(863L, byteString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.readByteArray();
      Buffer buffer1 = buffer0.writeShortLe(127);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x7f
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha1();
      long long0 = (-1308L);
      // Undeclared exception!
      try { 
        buffer0.readByteString((-1308L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1308
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Pipe pipe0 = new Pipe(103L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = true;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      pipe0.sourceClosed = true;
      ByteString byteString0 = buffer0.md5();
      buffer0.writeUtf8CodePoint(127);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byteString0.base64();
      Buffer buffer1 = realBufferedSink0.buffer;
      HashingSource.md5(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      realBufferedSink0.buffer.hmacSha256(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(127);
      buffer_UnsafeCursor0.close();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Pipe pipe0 = new Pipe(32L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.request((-1564L));
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        buffer1.hmacSha256(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((byte)38);
      buffer_UnsafeCursor0.next();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      realBufferedSource0.buffer.write(buffer_UnsafeCursor0.data);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLong((byte)38);
      buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong(3L);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.rangeEquals(2191L, byteString0, 2, Integer.MAX_VALUE);
      buffer_UnsafeCursor0.buffer.rangeEquals(10L, byteString0);
      buffer1.read(buffer_UnsafeCursor0.data);
      HashingSink.sha1(buffer0);
      realBufferedSource0.buffer.select(options0);
      realBufferedSource0.buffer.writeShort(9);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink1.buffer;
      buffer0.writeDecimalLong((-755L));
      Segment segment0 = new Segment();
      byte byte0 = (byte)0;
      ByteString byteString0 = new ByteString((byte[]) null);
      realBufferedSink0.writeUtf8CodePoint((byte)103);
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer0.read(buffer2, (long) (byte)103);
      // Undeclared exception!
      try { 
        buffer1.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Pipe pipe0 = new Pipe(997L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer buffer1 = buffer0.writeUtf8("aXF2Po8\"");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-21);
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer2 = buffer1.writeLong(176L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte((byte) (-21));
      buffer2.readAll(bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Pipe pipe0 = new Pipe(12L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      inflaterSource0.timeout();
      inflaterSource0.refill();
      buffer1.emitCompleteSegments();
      int int0 = 2139786573;
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.snapshot(2139786573);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=2139786573
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Pipe pipe0 = new Pipe(16L);
      pipe0.sinkClosed = false;
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      buffer0.writableSegment(1814);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.indexOf((byte)53);
      pipe0.sourceClosed = true;
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.segmentSizes();
      buffer0.writeHexadecimalUnsignedLong(2596L);
      buffer0.writeHexadecimalUnsignedLong(9918129152L);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      buffer_UnsafeCursor0.next();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = true;
      buffer0.outputStream();
      buffer0.md5();
      Buffer buffer1 = buffer0.writeDecimalLong(105L);
      Segment segment0 = new Segment();
      byte[] byteArray0 = null;
      ByteString byteString0 = new ByteString((byte[]) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer2.indexOfElement(byteString0, (-395L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Pipe pipe0 = new Pipe(1385L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D&5Nm%|bD");
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong((-2312L));
      Inflater inflater0 = new Inflater(true);
      Buffer buffer2 = buffer1.clone();
      buffer2.readByte();
      InflaterSource inflaterSource0 = new InflaterSource(buffer1, inflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer3 = realBufferedSink1.buffer;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.rangeEquals((long) (byte) (-1), byteString0, (int) (byte)38, (int) (byte) (-9));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeString("!v\"Wm3[xN()Fh$agRY", 517, (-2181), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -2181 < 517
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Pipe pipe0 = new Pipe(10L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Segment segment0 = buffer1.head;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)77;
      realBufferedSink0.buffer.writeInt((byte) (-125));
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)65;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.indexOfElement(byteString0, (-5223L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(100L);
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.md5(gzipSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      int int0 = 517;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("RV*O!tdBXU4G!0L1", 517, 517, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 517 > 17
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Pipe pipe0 = new Pipe(9L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      try { 
        buffer1.skip(338L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Pipe pipe0 = new Pipe(103L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      pipe0.sourceClosed = true;
      buffer0.outputStream();
      buffer0.md5();
      buffer0.writeUtf8CodePoint(1810);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.writeInt(8075);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)12;
      realBufferedSink0.write(byteArray0);
      Buffer buffer1 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        Options.of((ByteString[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Pipe pipe0 = new Pipe(122L);
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(9223372036854775807L);
      buffer1.readIntLe();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = buffer1.writeDecimalLong(9223372036854775807L);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      HashingSource hashingSource2 = HashingSource.sha256(hashingSource1);
      hashingSource2.delegate();
      HashingSource.sha1(buffer2);
      // Undeclared exception!
      try { 
        buffer1.writeAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(432L);
      Buffer buffer1 = new Buffer();
      buffer1.md5();
      Buffer buffer2 = buffer1.writeLongLe((-1263L));
      buffer1.readIntLe();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer1.size = (-3283L);
      Buffer buffer3 = buffer2.writeDecimalLong(1000000L);
      buffer3.skip((-1263));
      buffer2.readAll(buffer3);
      // Undeclared exception!
      try { 
        Charset.forName("_P{jPw.nk$ N$LC7}[");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // _P{jPw.nk$ N$LC7}[
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      Inflater inflater0 = new Inflater(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j-");
      Pipe pipe0 = new Pipe(8L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeUtf8("");
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.writeDecimalLong(10000000L);
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      Segment segment0 = new Segment();
      Buffer buffer2 = realBufferedSource0.buffer;
      HashingSource.sha256(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer2.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Pipe pipe0 = new Pipe(1385L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong(1385L);
      buffer0.readLong();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)70;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      realBufferedSource0.buffer.writeDecimalLong((byte)0);
      Buffer buffer3 = new Buffer();
      RealBufferedSink realBufferedSink0 = null;
      try {
        realBufferedSink0 = new RealBufferedSink((Sink) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Pipe pipe1 = new Pipe(1217L);
      int int0 = 0;
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer0.readByteArray();
      buffer1.writeLong(167116L);
      try { 
        buffer1.skip(32L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = true;
      buffer0.outputStream();
      buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(9223372036854775807L);
      buffer1.readByteString();
      // Undeclared exception!
      try { 
        buffer1.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Pipe pipe0 = new Pipe(997L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.writeUtf8("XF9PO8");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XF9PO8");
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-35);
      buffer0.indexOf((byte)88, 98L, (long) (byte)114);
      realBufferedSource0.buffer.writeIntLe((byte)114);
      byteArray0[4] = (byte)59;
      buffer0.readFully(byteArray0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer0 = realBufferedSource1.buffer;
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource2.buffer();
      Buffer buffer2 = buffer1.writeUtf8("aXF2Po8\"");
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSource0.buffer.writeLong((-2564L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      realBufferedSink0.writeByte((byte)22);
      buffer0.readAll(realBufferedSource2.buffer);
      realBufferedSource0.buffer.toString();
      // Undeclared exception!
      try { 
        buffer2.writeTo((OutputStream) null, 98L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.readByteArray();
      Buffer buffer1 = buffer0.writeShortLe(127);
      buffer0.close();
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.writeHexadecimalUnsignedLong(936L);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      buffer1.copyTo(outputStream0);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1217L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1217
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Pipe pipe0 = new Pipe(1381L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong((-2312L));
      buffer0.readLong();
      buffer0.inputStream();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer2 = realBufferedSink1.buffer();
      HashingSink hashingSink0 = HashingSink.sha512(realBufferedSink1);
      hashingSink0.delegate();
      HashingSink.md5(realBufferedSink0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer2);
      Buffer buffer3 = new Buffer();
      buffer3.toString();
      Buffer buffer4 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.write((Source) buffer3, (-2312L));
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.size();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      buffer_UnsafeCursor0.start = 110;
      // Undeclared exception!
      try { 
        buffer2.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = true;
      buffer0.outputStream();
      buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(9223372036854775807L);
      buffer1.readIntLe();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ByteString byteString0 = new ByteString((byte[]) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeHexadecimalUnsignedLong(65536L);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      Buffer buffer2 = realBufferedSource0.buffer;
      Integer integer0 = new Integer((-1));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Pipe pipe1 = new Pipe(4L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.buffer.writeUtf8("EuCUD");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSource0.buffer.writeLong(4L);
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe((-3156));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[3] = byteStringArray0[2];
      Options options0 = Options.of(byteStringArray0);
      HashingSink.sha1(realBufferedSource0.buffer);
      Buffer buffer0 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer0.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Pipe pipe0 = new Pipe(16L);
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      buffer0.writableSegment(1814);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = buffer1.writeLong(1814);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      ByteString byteString0 = buffer0.md5();
      buffer2.writeHexadecimalUnsignedLong(1L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong(1L);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSink0.buffer.select(options0);
      Buffer buffer3 = realBufferedSource0.buffer;
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer2.readUtf8LineStrict((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2932);
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0, (-1737L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1737
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer0.readUnsafe();
      realBufferedSink0.buffer.writeDecimalLong((-1L));
      Segment segment0 = new Segment();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSink0.buffer.readByte();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.snapshot((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.outputStream();
      ByteString byteString0 = buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(9223372036854775807L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      realBufferedSource0.buffer.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSink0.buffer.writeAll(buffer1);
      realBufferedSink0.writeIntLe((byte)110);
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      buffer2.indexOfElement(byteString0);
      try { 
        realBufferedSource0.buffer.require(2147483647L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[2] = (byte)63;
      byteArray0[5] = (byte)85;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong((byte)63);
      buffer_UnsafeCursor0.next();
      buffer2.readUtf8();
      long long0 = new Integer((byte)63);
      InputStream inputStream0 = null;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      try { 
        buffer0.readFrom((InputStream) pushbackInputStream0, (long) 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((byte)85);
      buffer_UnsafeCursor0.next();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      long long0 = buffer_UnsafeCursor0.offset;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      Buffer buffer1 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[pa(");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Buffer buffer3 = buffer2.writeDecimalLong((-1L));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[pa(");
      Segment segment0 = new Segment();
      Buffer buffer4 = new Buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      HashingSink.sha1(realBufferedSink0);
      OutputStream outputStream0 = realBufferedSink1.outputStream();
      buffer0.hashCode();
      buffer3.copyTo(outputStream0);
      Buffer buffer5 = realBufferedSink1.buffer;
      ByteString byteString0 = new ByteString((byte[]) null);
      realBufferedSink0.buffer.indexOfElement(byteString0, 1000000L);
      // Undeclared exception!
      try { 
        buffer5.read(buffer2, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      realBufferedSource0.close();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[2] = (byte)63;
      byteArray0[5] = (byte)85;
      realBufferedSource0.buffer.md5();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeHexadecimalUnsignedLong((byte)63);
      Buffer buffer2 = realBufferedSource0.buffer.writeHexadecimalUnsignedLong((byte)0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(inflaterSource0);
      MockFile mockFile0 = new MockFile("H{!V^8+gy>Q Tq", "H{!V^8+gy>Q Tq");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      // Undeclared exception!
      try { 
        buffer2.copyTo((OutputStream) mockFileOutputStream0, (-1L), 24L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=-1 byteCount=24
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Pipe pipe0 = new Pipe(997L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.writeUtf8("aXF2Po8\"");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "aXF2Po8\"");
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-35);
      buffer0.indexOf((byte)97, 98L, (long) (byte)114);
      buffer0.writeIntLe((byte)114);
      int int0 = ObjectStreamConstants.baseWireHandle;
      Buffer buffer1 = pipe0.buffer;
      buffer1.clear();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      long long0 = 1309L;
      Pipe pipe0 = new Pipe(1309L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = buffer0.sha512();
      int int0 = 12;
      buffer0.writeUtf8CodePoint(12);
      buffer0.hmacSha256(byteString0);
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=0c\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      realBufferedSource0.close();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha1(realBufferedSource0.buffer, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer1, byteString1);
      ByteString byteString2 = hashingSource0.hash();
      Buffer buffer2 = realBufferedSource0.buffer;
      realBufferedSink0.buffer.hmacSha256(byteString2);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer((byte)0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(hashingSource0, inflater0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.buffer.writeDecimalLong((byte)51);
      Segment segment0 = new Segment();
      Buffer buffer2 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      hashingSink0.hash();
      ByteString byteString0 = hashingSink0.hash();
      realBufferedSource0.buffer();
      buffer2.hmacSha1(byteString0);
      // Undeclared exception!
      try { 
        buffer1.snapshot((int) (byte)51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=0 byteCount=51
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Pipe pipe0 = new Pipe(1267L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byte byte0 = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)35;
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.outputStream();
      buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(98L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      buffer1.snapshot(4);
      byteArray0[1] = (byte)110;
      buffer1.readIntLe();
      SegmentPool.byteCount = (long) 98;
      buffer0.readShort();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4, 2048);
      try { 
        realBufferedSink0.buffer.readFrom((InputStream) byteArrayInputStream0, (long) 2048);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      InputStream inputStream0 = buffer0.inputStream();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)68;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.delegate();
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer1, byteString0);
      hashingSource0.hash();
      HashingSink.md5(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(hashingSink0);
      realBufferedSink1.buffer.toString();
      Buffer buffer2 = realBufferedSink0.buffer;
      try { 
        buffer2.readFrom(inputStream0, 1000000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long long0 = 4L;
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      pipe0.sinkClosed = true;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.writeDecimalLong(4L);
      Segment segment0 = new Segment();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      Buffer buffer3 = realBufferedSink1.buffer();
      Buffer buffer4 = new Buffer();
      Buffer buffer5 = buffer3.writeLong(15L);
      HashingSource.sha256(buffer0);
      Buffer buffer6 = new Buffer();
      HashingSource.sha256(realBufferedSink0.buffer);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer5);
      Buffer buffer7 = realBufferedSource0.buffer;
      try { 
        buffer7.write((Source) buffer2, 4L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)85;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SHA-1");
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSource0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink.hmacSha1(realBufferedSource0.buffer, byteString0);
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      HashingSource.hmacSha256(inflaterSource0, byteString1);
      buffer0.writeIntLe((byte)85);
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong((-2312L));
      buffer1.readLong();
      buffer0.writeUtf8("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-21);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)3;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Buffer buffer2 = realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      InputStream inputStream0 = buffer1.inputStream();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer2);
      BufferedSink bufferedSink0 = realBufferedSink2.writeLong((byte) (-66));
      HashingSink hashingSink0 = HashingSink.sha512(bufferedSink0);
      hashingSink0.delegate();
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer2, byteString0);
      hashingSource0.hash();
      HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink0.buffer.toString();
      Buffer buffer3 = realBufferedSink2.buffer;
      buffer3.readFrom(inputStream0, (long) (byte)0);
      realBufferedSink0.buffer.readUtf8Line();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      InputStream inputStream0 = buffer1.inputStream();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.writeDecimalLong(4L);
      Segment segment0 = new Segment();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      realBufferedSink1.buffer.md5();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink2.buffer);
      Buffer buffer3 = realBufferedSource0.buffer;
      buffer2.readAndWriteUnsafe();
      Buffer buffer4 = realBufferedSource0.buffer;
      buffer4.readFrom(inputStream0);
      // Undeclared exception!
      try { 
        buffer4.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.outputStream();
      buffer0.md5();
      ByteString byteString0 = buffer0.md5();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(100000000L);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.selectPrefix(options0);
      buffer1.readUtf8CodePoint();
      buffer1.writeHexadecimalUnsignedLong(1000000000000L);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Pipe pipe0 = new Pipe(997L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.writeUtf8("XF9PO8");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XF9PO8");
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-35);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.indexOf((byte)114, (-1258L), 997L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=6 fromIndex=-1258 toIndex=997
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("", (-1), (-1), charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Segment segment0 = new Segment();
      ByteString byteString0 = realBufferedSink1.buffer.md5();
      buffer0.indexOf(byteString0);
      buffer1.indexOfElement(byteString0);
      Charset.defaultCharset();
      realBufferedSink0.buffer.writeLong((-1L));
      HashingSource hashingSource0 = HashingSource.hmacSha256(realBufferedSink0.buffer, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      buffer1.write(byteString1);
      buffer1.readByteString();
      buffer0.flush();
      realBufferedSink1.buffer.hmacSha1(byteString1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.inputStream();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      buffer0.writeDecimalLong(4L);
      Segment segment0 = new Segment();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSink1.buffer.writeHexadecimalUnsignedLong((byte)56);
      ByteString byteString0 = realBufferedSink1.buffer.md5();
      buffer0.indexOf(byteString0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      realBufferedSink2.writeLong((byte)56);
      HashingSink.md5(realBufferedSink1);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink1.buffer;
      realBufferedSink2.buffer.read(buffer1, 4L);
      buffer2.readShort();
      buffer1.readUtf8();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Pipe pipe0 = new Pipe(103L);
      Pipe pipe1 = new Pipe(103L);
      Buffer buffer0 = pipe1.buffer;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.outputStream();
      buffer0.md5();
      ByteString byteString0 = buffer0.md5();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(100000000L);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      buffer1.readHexadecimalUnsignedLong();
      buffer1.writeLong(103L);
      buffer0.readLong();
      buffer0.completeSegmentByteCount();
      buffer0.flush();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Pipe pipe0 = new Pipe(997L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer buffer1 = buffer0.writeUtf8("aXF2Po8\"");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)22;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer2 = realBufferedSource0.buffer();
      ByteString byteString0 = buffer2.md5();
      realBufferedSink1.buffer.writeHexadecimalUnsignedLong(2349L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.buffer.writeHexadecimalUnsignedLong((-1152921504606846976L));
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      Buffer buffer3 = new Buffer();
      buffer3.select(options0);
      Buffer buffer4 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        realBufferedSource1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Number too large: f000000000000000a
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(hashingSource0, inflater0);
      hashingSource0.hash();
      Buffer buffer1 = buffer0.writeLongLe(18L);
      buffer0.readIntLe();
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Charset charset0 = Charset.defaultCharset();
      BufferedSink bufferedSink0 = realBufferedSink0.writeString("", charset0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      ByteString byteString1 = hashingSource0.hash();
      HashingSink.hmacSha256(buffer1, byteString0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer1, byteString1);
      realBufferedSink0.buffer.writableSegment(18);
      hashingSink0.hash();
      hashingSink0.hash();
      buffer1.readInt();
      buffer0.completeSegmentByteCount();
      buffer1.writeAll(realBufferedSink1.buffer);
      realBufferedSink1.buffer.indexOf((byte)8, 4278190080L);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = true;
      buffer0.outputStream();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.inputStream();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      realBufferedSink0.buffer.md5();
      Buffer buffer3 = buffer1.writeHexadecimalUnsignedLong(98L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      Buffer buffer4 = buffer1.writeHexadecimalUnsignedLong(7263L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer4.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      realBufferedSource1.buffer.readUtf8();
      realBufferedSource1.buffer();
      realBufferedSource1.buffer.toString();
      realBufferedSource0.buffer.writeAll(realBufferedSink0.buffer);
      buffer1.exhausted();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Pipe pipe0 = new Pipe(1381L);
      Buffer buffer0 = pipe0.buffer;
      int int0 = 1814;
      // Undeclared exception!
      try { 
        buffer0.writableSegment(2112278998);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Pipe pipe0 = new Pipe(5L);
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      buffer0.require((-800L));
      buffer0.readAndWriteUnsafe();
      int int0 = 99;
      // Undeclared exception!
      try { 
        buffer0.snapshot(99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=99
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Pipe pipe0 = new Pipe(103L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.md5();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      byte byte0 = (byte)88;
      long long0 = 98L;
      buffer1.writeIntLe((byte) (-35));
      byte[] byteArray1 = new byte[5];
      byteArray1[1] = (byte)107;
      byteArray1[3] = (byte)88;
      byteArray1[4] = (byte) (-35);
      Buffer buffer2 = realBufferedSource0.buffer;
      realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer2.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xffffffdd
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Pipe pipe0 = new Pipe(32L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      realBufferedSource0.buffer.writeUtf8("aXF2Po8\"");
      buffer1.readHexadecimalUnsignedLong();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)22;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer2 = buffer0.writeLong((byte)54);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      realBufferedSink0.writeByte((byte)22);
      realBufferedSink0.buffer.readAll(buffer1);
      buffer1.toString();
      // Undeclared exception!
      try { 
        buffer2.writeTo((OutputStream) null, (long) (byte)40);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[pa(");
      HashingSink.md5(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte)15, 280375465082880L, 527L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=280375465082880 toIndex=527
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Pipe pipe1 = new Pipe(4L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong(338L);
      Segment segment0 = new Segment();
      Buffer buffer2 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)51;
      HashingSink hashingSink0 = HashingSink.sha1(buffer2);
      ByteString byteString0 = hashingSink0.hash();
      hashingSink0.hash();
      buffer1.indexOf(byteString0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = true;
      buffer0.outputStream();
      ByteString byteString0 = buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(9223372036854775807L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-75);
      buffer1.read(byteArray0);
      buffer1.readIntLe();
      ByteString byteString1 = new ByteString((byte[]) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer.writeLong((byte)45);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      byteStringArray0[6] = byteString0;
      byteStringArray0[4] = byteString1;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString0;
      byteStringArray0[8] = byteString1;
      Options.of(byteStringArray0);
      realBufferedSink0.buffer.readIntLe();
      buffer2.indexOf((byte)1, 98L, 593L);
      buffer1.indexOf((byte) (-1));
      buffer1.writeShortLe((-2147483646));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Unexpected hex digit: ");
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      Options.of(byteStringArray0);
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      int int0 = (-1362);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      buffer0.writeTo((OutputStream) filterOutputStream0);
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) filterOutputStream0, 1044L, 1044L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=1044 byteCount=1044
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Pipe pipe0 = new Pipe(1385L);
      Buffer buffer0 = pipe0.buffer;
      OutputStream outputStream0 = buffer0.outputStream();
      buffer0.md5();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer0.writeDecimalLong((-1625L));
      Segment segment0 = new Segment();
      long long0 = 10000L;
      Buffer buffer3 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer4 = realBufferedSink0.buffer();
      HashingSource.sha256(buffer2);
      HashingSource.sha256(buffer4);
      MockFile mockFile0 = new MockFile("okio.Okio", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      buffer2.writeTo((OutputStream) filterOutputStream0);
      // Undeclared exception!
      try { 
        buffer1.copyTo(outputStream0, (long) (-1), 10000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1 byteCount=10000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Pipe pipe0 = new Pipe(997L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)114;
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-35);
      buffer0.indexOf((byte)114, 98L, (long) (byte)114);
      Buffer buffer1 = new Buffer();
      byteArray0[4] = (byte)59;
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Pipe pipe0 = new Pipe(5881L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      pipe_PipeSink0.close();
      // Undeclared exception!
      try { 
        buffer1.write((byte[]) null, 1148, 44);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)25;
      String string0 = "in == null";
      buffer0.writeUtf8("in == null");
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)108;
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer1.readLong();
      try { 
        buffer0.require((byte)25);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Pipe pipe0 = new Pipe(103L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = true;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      pipe0.sourceClosed = true;
      ByteString byteString0 = buffer0.md5();
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byteString0.base64();
      Buffer buffer2 = realBufferedSink0.buffer;
      HashingSource.md5(buffer2);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      realBufferedSink0.buffer.hmacSha256(byteString0);
      Buffer buffer3 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(127);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Unexpected hex digit: ");
      Pipe pipe1 = new Pipe(4L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer.writeUtf8("Unexpected hex digit: ");
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSource0.buffer.writeLong(4L);
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe((-3156));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      Options.of(byteStringArray0);
      buffer0.rangeEquals(8L, byteString0);
      ((RealBufferedSink) bufferedSink0).buffer.read(byteArray0);
      HashingSink.sha1(realBufferedSource0.buffer);
      Buffer buffer1 = pipe0.buffer;
      buffer0.buffer();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Unexpected hex digit: ");
      Pipe pipe1 = new Pipe(4L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer.writeUtf8("EuCUD");
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSource0.buffer.writeLong(4L);
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe((-3156));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      Options.of(byteStringArray0);
      buffer0.rangeEquals(8L, byteString0);
      ((RealBufferedSink) bufferedSink0).buffer.read(byteArray0);
      HashingSink.sha1(realBufferedSource0.buffer);
      Buffer buffer1 = pipe0.buffer;
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Buffer buffer0 = pipe0.buffer;
      OutputStream outputStream0 = buffer0.outputStream();
      ByteString byteString0 = buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(9223372036854775807L);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-78);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString1 = new ByteString(byteArray0);
      buffer1.readUtf8CodePoint();
      Buffer buffer2 = pipe0.buffer;
      ByteString byteString2 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      ByteString byteString3 = hashingSink0.hash();
      byteString3.toAsciiUppercase();
      ByteString byteString4 = new ByteString(byteArray0);
      byteString3.write(outputStream0);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString3;
      buffer1.readUtf8();
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-3075L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-3075 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      realBufferedSource0.close();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.outputStream();
      buffer0.md5();
      byte byte0 = (byte)0;
      try { 
        buffer0.readUtf8LineStrict((long) (byte)0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Pipe pipe1 = new Pipe(4L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong(338L);
      Segment segment0 = new Segment();
      buffer0.writeHexadecimalUnsignedLong(4L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSource0.buffer.md5();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Buffer buffer3 = buffer1.writeHexadecimalUnsignedLong(338L);
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(inflaterSource0);
      Buffer buffer4 = realBufferedSource1.buffer.writeHexadecimalUnsignedLong((-1));
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer5 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer3.readUtf8();
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(buffer_UnsafeCursor1.buffer);
      Buffer buffer6 = realBufferedSource2.buffer();
      HashingSink.md5(buffer6);
      HashingSink hashingSink0 = HashingSink.md5(buffer4);
      ByteString byteString0 = hashingSink0.hash();
      HashingSink hashingSink1 = HashingSink.md5(realBufferedSource1.buffer);
      hashingSink1.hash();
      buffer4.indexOf(byteString0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Pipe pipe0 = new Pipe(103L);
      pipe0.sourceClosed = true;
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeIntLe((byte) (-38));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)22;
      Charset charset0 = Charset.defaultCharset();
      buffer1.readString(charset0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer2.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long long0 = 103L;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(103L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.outputStream();
      Buffer buffer1 = buffer0.writeLongLe(103L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer0.writeDecimalLong(2005L);
      Segment segment0 = new Segment();
      buffer1.head = segment0;
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteString byteString1 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        buffer1.md5();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Pipe pipe0 = new Pipe(117L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.outputStream();
      buffer0.md5();
      buffer0.writeLongLe(9223372036854775807L);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ByteString byteString0 = new ByteString((byte[]) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      int int1 = (-168);
      // Undeclared exception!
      try { 
        buffer1.writableSegment((-168));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-119);
      byte byte0 = (byte)114;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(121);
      // Undeclared exception!
      try { 
        buffer1.readFully(buffer0, (-3065L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.outputStream();
      buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(98L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      ByteString byteString0 = buffer1.snapshot(4);
      byteArray0[1] = (byte)110;
      buffer1.readIntLe();
      SegmentPool.byteCount = (long) 98;
      buffer0.readShort();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer1.indexOfElement(byteString0, 3711L);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = pipe0.buffer;
      buffer0.outputStream();
      buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(98L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      buffer1.snapshot(4);
      byteArray0[1] = (byte)110;
      buffer1.readIntLe();
      SegmentPool.byteCount = (long) 98;
      buffer0.readShort();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4, (short)0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readFrom((InputStream) null, (long) (byte)110);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(hashingSource0, inflater0);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer1 = buffer0.writeLongLe(4294967295L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      buffer0.readIntLe();
      byte[] byteArray0 = null;
      ByteString byteString1 = new ByteString((byte[]) null);
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      hashingSource0.hash();
      HashingSink.md5(buffer0);
      ByteString byteString2 = hashingSink0.hash();
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString2;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString1;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      realBufferedSink1.buffer();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Pipe pipe0 = new Pipe(10L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readFully((Buffer) null, 1472L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Pipe pipe0 = new Pipe(103L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.writeDecimalLong((-72057594037927936L));
      Segment segment0 = new Segment();
      // Undeclared exception!
      try { 
        Options.of((ByteString[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Pipe pipe0 = new Pipe(1929L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeHexadecimalUnsignedLong((-1));
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x66
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Buffer buffer3 = buffer2.writeDecimalLong((-1L));
      realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      HashingSink hashingSink1 = HashingSink.sha1(realBufferedSink0);
      OutputStream outputStream0 = realBufferedSink1.outputStream();
      buffer0.hashCode();
      hashingSink0.hash();
      Buffer buffer4 = buffer3.copyTo(outputStream0);
      buffer4.readDecimalLong();
      buffer3.readByteString();
      Integer integer0 = new Integer((-1));
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      hashingSink1.hash();
      hashingSink1.hash();
      realBufferedSink1.buffer.completeSegmentByteCount();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer0.inputStream();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = buffer1.writeDecimalLong((-2720L));
      Segment segment0 = new Segment();
      buffer3.writeHexadecimalUnsignedLong((-2210L));
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource.sha256(inflaterSource0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-35);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(realBufferedSink0, byteString0);
      buffer1.require((-2210L));
      hashingSink0.hash();
      realBufferedSink0.emitCompleteSegments();
      buffer0.readByteArray();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      HashingSink.sha1(hashingSink0);
      hashingSink0.hash();
      Integer integer0 = new Integer(2);
      buffer3.readDecimalLong();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = true;
      OutputStream outputStream0 = buffer0.outputStream();
      buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(9223372036854775807L);
      buffer1.readIntLe();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ByteString byteString0 = new ByteString((byte[]) null);
      Buffer buffer2 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = buffer2.writeHexadecimalUnsignedLong(9223372036854775807L);
      Integer integer0 = new Integer((-1));
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0, 74);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer3);
      realBufferedSource2.readDecimalLong();
      buffer3.readAndWriteUnsafe();
      Pipe pipe1 = new Pipe(9223372036854775807L);
      Buffer buffer4 = pipe1.buffer;
      buffer4.equals(outputStream0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(10L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.readUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer1.request(10L);
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.hmacSha256(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Pipe pipe0 = new Pipe(7L);
      Pipe pipe1 = new Pipe(7L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong(7L);
      Segment segment0 = new Segment();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      buffer0.md5();
      byte[] byteArray0 = new byte[3];
      realBufferedSink0.writeLongLe((byte)0);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.readUtf8Line(7L);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      Buffer buffer3 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer3.snapshot(30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=30
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Pipe pipe0 = new Pipe(103L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = true;
      buffer0.outputStream();
      ByteString byteString0 = buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(103L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer1.indexOf((byte) (-35), (long) (byte)7, (long) (byte)88);
      Buffer buffer3 = pipe0.buffer;
      Buffer buffer4 = buffer3.writeIntLe((byte) (-35));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)7;
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      HashingSink.hmacSha512(buffer4, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      realBufferedSource0.readByteString((long) (byte)7);
      byteString1.asByteBuffer();
      Charset charset0 = Charset.defaultCharset();
      buffer4.readString(charset0);
      realBufferedSource0.buffer.indexOf(byteString1);
      HashingSink.hmacSha512(buffer4, byteString1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer4);
      Buffer buffer5 = realBufferedSink0.buffer;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-35);
      buffer1.read(byteArray1);
      try { 
        buffer5.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Pipe pipe0 = new Pipe(103L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.outputStream();
      ByteString byteString0 = buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(103L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer1.writeDecimalLong(72057594037L);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer2, byteString0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      buffer2.indexOfElement(byteString0);
      Buffer buffer3 = realBufferedSource1.buffer;
      Buffer buffer4 = new Buffer();
      HashingSink.sha1(buffer2);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer4, byteString0);
      hashingSink0.hash();
      hashingSource0.hash();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(922337203L);
      Pipe pipe1 = new Pipe(7L);
      Buffer buffer1 = pipe1.buffer;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.outputStream();
      buffer0.md5();
      buffer1.writeLongLe(922337203L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = pipe1.buffer;
      buffer3.writeDecimalLong(922337203L);
      Segment segment0 = new Segment();
      Buffer buffer4 = new Buffer();
      HashingSource.sha256(buffer3);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        buffer1.readByteString(922337203L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=17 offset=0 byteCount=922337203
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong((-2312L));
      buffer1.readLong();
      Buffer buffer2 = buffer0.writeUtf8("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)3;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer3 = buffer2.writeDecimalLong(7205759403L);
      Segment segment0 = new Segment();
      Buffer buffer4 = realBufferedSink0.buffer;
      HashingSource.sha256(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer3);
      Buffer buffer5 = realBufferedSource0.buffer;
      try { 
        buffer5.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 2932;
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2932);
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1000000L);
      // Undeclared exception!
      try { 
        buffer1.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Pipe pipe0 = new Pipe(103L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = true;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      pipe0.sourceClosed = true;
      ByteString byteString0 = buffer0.md5();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(127);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byteString0.base64();
      Buffer buffer2 = realBufferedSink0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer2);
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)43;
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer2, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      ByteString byteString2 = hashingSource0.hash();
      HashingSink hashingSink1 = HashingSink.hmacSha256(hashingSink0, byteString0);
      hashingSink1.close();
      buffer1.indexOf(byteString2);
      buffer0.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer1.indexOf(byteString1, (-1651L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.outputStream();
      buffer0.md5();
      byte byte0 = (byte)0;
      buffer0.writeUtf8("|epAn<N{t");
      try { 
        buffer0.readUtf8LineStrict((long) (byte)0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=7c6570416e3c4e7b74\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Pipe pipe0 = new Pipe(103L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      pipe0.sourceClosed = false;
      buffer0.outputStream();
      buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(103L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = buffer0.writeDecimalLong(2005L);
      Segment segment0 = new Segment();
      buffer1.head = segment0;
      Buffer buffer4 = new Buffer();
      HashingSource.md5(buffer3);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      HashingSink hashingSink0 = HashingSink.md5(buffer3);
      ByteString byteString0 = hashingSink0.hash();
      realBufferedSource0.buffer.indexOf(byteString0);
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      // Undeclared exception!
      try { 
        buffer0.segmentSizes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Unexpected hex digit: ");
      Pipe pipe1 = new Pipe(4L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.buffer.writeUtf8("EuCUD");
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.readHexadecimalUnsignedLong();
      buffer0.writeLong(4L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.writeByte(8);
      Buffer buffer1 = realBufferedSink0.buffer;
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(3768L);
      // Undeclared exception!
      try { 
        buffer1.readAll(bufferedSink0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.outputStream();
      ByteString byteString0 = buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(98L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      ByteString byteString1 = buffer1.snapshot(4);
      byteArray0[1] = (byte) (-75);
      ByteString byteString2 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = buffer1.writeLong((byte)110);
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe((byte)110);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options.of(byteStringArray0);
      realBufferedSink0.buffer.rangeEquals((long) 4, byteString1);
      realBufferedSink0.buffer.read(byteArray0);
      HashingSink.sha1(bufferedSink0);
      Buffer buffer3 = pipe0.buffer;
      buffer1.equals(buffer0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      pipe0.sinkClosed = true;
      InputStream inputStream0 = buffer1.inputStream();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = buffer2.writeDecimalLong(4L);
      Segment segment0 = new Segment();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSink1.buffer.md5();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      realBufferedSink2.writeLong((byte)56);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer1, byteString0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      realBufferedSink2.buffer.writeTo((OutputStream) byteArrayOutputStream0, 4L);
      hashingSink0.delegate();
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer3, byteString0);
      hashingSource0.hash();
      HashingSink.md5(realBufferedSink1);
      HashingSink.md5(hashingSink0);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(buffer0);
      Buffer buffer4 = realBufferedSink1.buffer;
      Buffer buffer5 = buffer1.readFrom(inputStream0, (long) (byte)56);
      ByteString byteString1 = new ByteString(byteArray0);
      realBufferedSink2.buffer.indexOfElement(byteString1, (long) (byte)56);
      realBufferedSink2.buffer.read(buffer5, 4L);
      realBufferedSink2.buffer.md5();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = 1929L;
      Pipe pipe0 = new Pipe(1929L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong((-1));
      buffer2.inputStream();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      Buffer buffer3 = realBufferedSink0.buffer;
      Buffer buffer4 = buffer3.writeDecimalLong(100000000000000000L);
      Segment segment0 = new Segment();
      Segment segment1 = new Segment();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer3.writeHexadecimalUnsignedLong(380L);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer5 = realBufferedSink1.buffer();
      buffer2.writeDecimalLong(1929L);
      Segment segment2 = new Segment();
      Buffer buffer6 = new Buffer();
      HashingSource.sha256(buffer6);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer4);
      realBufferedSink1.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink2.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer5);
      Buffer buffer7 = realBufferedSource1.buffer;
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=20 content=6666666666666666666666666666666631393239\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Pipe pipe0 = new Pipe(1385L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D&5Nm%|bD");
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong((-2312L));
      Segment segment0 = new Segment();
      SegmentPool.next = segment0;
      Inflater inflater0 = new Inflater(true);
      Buffer buffer2 = buffer1.clone();
      buffer2.readByte();
      InflaterSource inflaterSource0 = new InflaterSource(buffer1, inflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer3 = realBufferedSink1.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-1);
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer2);
      realBufferedSink2.buffer.write(byteString0);
      realBufferedSink1.writeLong((byte)0);
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSink1);
      hashingSink0.hash();
      buffer3.indexOf(byteString0);
      HashingSink.hmacSha512(hashingSink0, byteString0);
      buffer3.hmacSha1(byteString0);
      try { 
        buffer1.writeAll(inflaterSource0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: invalid block type
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Pipe pipe0 = new Pipe(1385L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D&5Nm%|bD");
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong((-2312L));
      Segment segment0 = buffer0.head;
      SegmentPool.next = segment0;
      Inflater inflater0 = new Inflater(true);
      Buffer buffer2 = buffer1.clone();
      buffer2.readByte();
      InflaterSource inflaterSource0 = new InflaterSource(buffer1, inflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer3 = realBufferedSink1.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer2);
      realBufferedSink1.writeLong((byte)0);
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSink1);
      hashingSink0.hash();
      buffer3.indexOf(byteString0);
      HashingSink.hmacSha512(hashingSink0, byteString0);
      buffer3.hmacSha1(byteString0);
      // Undeclared exception!
      try { 
        buffer1.writeAll(inflaterSource0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Pipe pipe0 = new Pipe(103L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      pipe0.sourceClosed = true;
      buffer0.outputStream();
      ByteString byteString0 = buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(103L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = buffer0.writeDecimalLong(2005L);
      Segment segment0 = new Segment();
      buffer1.head = segment0;
      Buffer buffer4 = new Buffer();
      HashingSource.sha256(buffer3);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      Buffer buffer5 = realBufferedSource0.buffer;
      byteString0.base64Url();
      // Undeclared exception!
      try { 
        buffer1.readUtf8CodePoint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[pa(");
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[pa(");
      Segment segment0 = new Segment();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      realBufferedSink1.buffer.skip((-72057594037927936L));
      ByteString byteString0 = hashingSink0.hash();
      buffer1.hmacSha512(byteString0);
      HashingSink.sha1(realBufferedSink0);
      realBufferedSink1.outputStream();
      buffer0.hashCode();
      realBufferedSink1.buffer.emit();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Pipe pipe0 = new Pipe(103L);
      Buffer buffer0 = pipe0.buffer;
      OutputStream outputStream0 = buffer0.outputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.outputStream();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      int int0 = 8192;
      realBufferedSource0.buffer.writeUtf8CodePoint(8192);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "x<gO~2Wq2C]`?5xn");
      Segment segment0 = new Segment();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink0.outputStream();
      int int1 = ObjectStreamConstants.baseWireHandle;
      Buffer buffer1 = realBufferedSink0.buffer.copyTo(outputStream0);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = 4L;
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      pipe0.sinkClosed = false;
      buffer0.inputStream();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Segment segment0 = new Segment();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSink1.buffer.writeHexadecimalUnsignedLong(4L);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0.buffer);
      // Undeclared exception!
      try { 
        realBufferedSink2.buffer.writeUtf8((String) null, (-1762), (-1762));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[pa(");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Buffer buffer3 = buffer2.writeDecimalLong((-1L));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[pa(");
      Segment segment0 = new Segment();
      Buffer buffer4 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      HashingSink.sha1(realBufferedSink0);
      OutputStream outputStream0 = realBufferedSink1.outputStream();
      buffer0.hashCode();
      Buffer buffer5 = buffer3.copyTo(outputStream0);
      buffer5.readDecimalLong();
      ByteString byteString0 = hashingSink0.hash();
      HashingSink hashingSink1 = HashingSink.hmacSha256(buffer5, byteString0);
      hashingSink1.close();
      buffer2.indexOf(byteString0);
      buffer3.readUtf8Line();
      Buffer buffer6 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer6.indexOf(byteString0, (-2297L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = (-1173L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong((-1173L));
      buffer1.readLong();
      buffer0.writeUtf8("");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.writeHexadecimalUnsignedLong((-1173L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("", 17, 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 17 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      pipe0.sinkClosed = false;
      buffer0.inputStream();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = realBufferedSink1.buffer.writeHexadecimalUnsignedLong(4L);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0.buffer);
      realBufferedSink1.buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S=,K)HX0zr?<kdF/7SE");
      realBufferedSink0.writeShortLe((-678));
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[17];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      realBufferedSink3.buffer.segmentSizes();
      buffer1.write((Source) realBufferedSink0.buffer, (long) (-678));
      Buffer buffer2 = realBufferedSink1.buffer;
      RealBufferedSink realBufferedSink4 = (RealBufferedSink)realBufferedSink1.emitCompleteSegments();
      realBufferedSink1.writeDecimalLong(4L);
      RealBufferedSink realBufferedSink5 = new RealBufferedSink(buffer1);
      realBufferedSink5.buffer.readByteArray();
      realBufferedSink5.buffer.readUnsafe();
      Buffer buffer3 = realBufferedSink4.buffer;
      realBufferedSink0.buffer();
      realBufferedSink0.buffer.indexOf(byteString1, 4L);
      ByteString byteString2 = new ByteString(byteArray0);
      realBufferedSink5.buffer.sha1();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Buffer buffer0 = pipe0.buffer;
      OutputStream outputStream0 = buffer0.outputStream();
      ByteString byteString0 = buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(9223372036854775807L);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-78);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString1 = new ByteString(byteArray0);
      buffer1.readUtf8CodePoint();
      Buffer buffer2 = pipe0.buffer;
      ByteString byteString2 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      ByteString byteString3 = hashingSink0.hash();
      byteString3.toAsciiUppercase();
      ByteString byteString4 = new ByteString(byteArray0);
      byteString3.write(outputStream0);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString3;
      buffer1.readUtf8();
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString1;
      byteStringArray0[5] = byteString2;
      Options.of(byteStringArray0);
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      ByteString byteString5 = new ByteString(byteArray0);
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(9223372036854775807L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Unexpected hex digit: ");
      Pipe pipe1 = new Pipe(4L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer.writeUtf8("EuCUD");
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer.writeLong(4L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(pipe_PipeSource0);
      buffer0.indexOfElement(byteString0);
      Buffer buffer2 = realBufferedSource1.buffer;
      realBufferedSource1.buffer();
      buffer1.toString();
      Buffer buffer3 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSink0);
      ByteString byteString1 = hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSource1);
      ByteString byteString2 = hashingSource0.hash();
      HashingSink.hmacSha256(buffer2, byteString0);
      hashingSink0.close();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      buffer4.indexOf(byteString2);
      buffer3.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer2.indexOf(byteString1, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = new Buffer();
      pipe0.source();
      Segment segment0 = new Segment();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLongLe(4L);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.readUtf8Line(4L);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0.buffer);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(realBufferedSink2);
      realBufferedSink3.buffer();
      realBufferedSink0.buffer.writeDecimalLong(4L);
      ((RealBufferedSink) bufferedSink0).buffer.readAndWriteUnsafe();
      ByteString byteString0 = null;
      // Undeclared exception!
      try { 
        realBufferedSink3.buffer.writeUtf8("a r^3", 1997, 36);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 36 < 1997
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      pipe0.sinkClosed = false;
      buffer1.inputStream();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.writeDecimalLong(4L);
      Segment segment0 = new Segment();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = realBufferedSink1.buffer.md5();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      realBufferedSink2.writeLong((byte)56);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer1, byteString0);
      hashingSink0.delegate();
      HashingSink.md5(realBufferedSink1);
      HashingSink.hmacSha512(realBufferedSink2, byteString1);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(buffer0);
      Buffer buffer3 = realBufferedSink1.buffer;
      pipe0.sinkClosed = false;
      ByteString byteString2 = new ByteString(byteArray0);
      realBufferedSink2.buffer.indexOfElement(byteString2, (long) (byte)0);
      realBufferedSink2.buffer.read(buffer1, 4L);
      // Undeclared exception!
      try { 
        buffer3.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      pipe0.sinkClosed = false;
      buffer0.inputStream();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Segment segment0 = new Segment();
      realBufferedSink1.buffer.writeUtf8("7k9A]jQW (Hb");
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer0);
      realBufferedSink2.buffer.writeLong(863L);
      realBufferedSink1.writeIntLe((-3156));
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(realBufferedSink0);
      // Undeclared exception!
      try { 
        realBufferedSink3.buffer.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = true;
      buffer0.outputStream();
      Buffer buffer1 = buffer0.writeLongLe(9223372036854775807L);
      buffer1.readIntLe();
      ByteString byteString0 = new ByteString((byte[]) null);
      long long0 = 1000000L;
      buffer0.writeDecimalLong(1000000L);
      Buffer buffer2 = new Buffer();
      // Undeclared exception!
      try { 
        buffer2.writeString("", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Pipe pipe0 = new Pipe(103L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      pipe0.sourceClosed = true;
      buffer0.outputStream();
      ByteString byteString0 = buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(103L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = buffer0.writeDecimalLong(2005L);
      Segment segment0 = new Segment();
      buffer1.head = segment0;
      Buffer buffer4 = new Buffer();
      HashingSource.sha256(buffer3);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)43;
      ByteString byteString1 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink1.buffer();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)43;
      byteArray1[1] = (byte)43;
      byteArray1[2] = (byte)43;
      buffer2.write(byteArray1);
      // Undeclared exception!
      try { 
        buffer0.hmacSha256(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      pipe0.sinkClosed = false;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = buffer1.writeDecimalLong(100000L);
      Segment segment0 = new Segment();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer3.readByte();
      realBufferedSink1.writeUtf8CodePoint((byte)49);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+j[SDTqYoa|<Z(\"");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSource0.buffer();
      realBufferedSink1.buffer.segmentSizes();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer4 = realBufferedSink0.buffer();
      buffer4.toString();
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink0.buffer);
      hashingSource0.hash();
      ByteString byteString0 = new ByteString((byte[]) null);
      Buffer buffer5 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer5.indexOf(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.outputStream();
      buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(9223372036854775756L);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)110;
      byte byte0 = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.readUtf8CodePoint();
      Buffer buffer2 = pipe0.buffer;
      ByteString byteString1 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      hashingSink0.hash();
      hashingSink0.hash();
      ByteString byteString2 = new ByteString(byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Pipe pipe0 = new Pipe(103L);
      Buffer buffer0 = pipe0.buffer;
      OutputStream outputStream0 = buffer0.outputStream();
      buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(42L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-78);
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.readUtf8CodePoint();
      Buffer buffer2 = pipe0.buffer;
      ByteString byteString1 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.md5(buffer2);
      ByteString byteString2 = hashingSink0.hash();
      hashingSink0.hash();
      ByteString byteString3 = new ByteString(byteArray0);
      byteString2.write(outputStream0);
      buffer2.readUtf8();
      ByteString byteString4 = new ByteString(byteArray0);
      ByteString byteString5 = new ByteString(byteArray0);
      buffer0.indexOf(byteString5, 8192L);
      buffer0.writeUtf8("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\u001D\uFFFD\u064F\u0000\uFFFD\u0004\uFFFD\t\uFFFD\uFFFD\uFFFDB~");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer3 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer3.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long long0 = 103L;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(103L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.outputStream();
      buffer0.md5();
      buffer0.writeLongLe(103L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer0.writeDecimalLong(103L);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      pipe0.sinkClosed = false;
      buffer1.inputStream();
      Buffer buffer2 = realBufferedSink0.buffer.writeUtf8CodePoint(2048);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.hmacSha256(realBufferedSink1, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      byteString1.base64();
      Buffer buffer3 = realBufferedSink1.buffer;
      HashingSource.md5(buffer3);
      byte[] byteArray0 = new byte[0];
      ByteString byteString2 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(hashingSink0);
      realBufferedSink1.buffer();
      Buffer buffer4 = new Buffer();
      buffer4.write(byteArray0);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(buffer2);
      buffer3.hmacSha256(byteString0);
      realBufferedSink0.buffer.readUtf8CodePoint();
      buffer4.read(byteArray0);
      HashingSink.sha1(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer5 = buffer_UnsafeCursor0.buffer;
      buffer4.buffer();
      realBufferedSink3.buffer.read(realBufferedSink0.buffer, (long) 2048);
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Pipe pipe0 = new Pipe(720575940379L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.clone();
      Buffer buffer1 = buffer0.writeDecimalLong(720575940379L);
      buffer1.emitCompleteSegments();
      ByteString byteString0 = null;
      // Undeclared exception!
      try { 
        buffer0.indexOfElement((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      realBufferedSink0.buffer.writeDecimalLong((-1));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Segment segment0 = new Segment();
      Buffer buffer3 = new Buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      HashingSink.sha1(buffer3);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      Buffer buffer4 = realBufferedSink0.buffer.copyTo(outputStream0);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe();
      buffer4.readDecimalLong();
      buffer1.readByteString();
      int int0 = buffer_UnsafeCursor1.start;
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      pipe0.sinkClosed = false;
      buffer1.inputStream();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Segment segment0 = buffer1.head;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = realBufferedSink1.buffer.writeHexadecimalUnsignedLong(4L);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(buffer1);
      byte[] byteArray0 = new byte[28];
      realBufferedSink1.buffer.sha1();
      byteArray0[1] = (byte) (-35);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer1, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      realBufferedSink3.buffer.segmentSizes();
      realBufferedSink1.buffer.write(byteString1);
      realBufferedSink1.writeLong(4L);
      HashingSink.md5(realBufferedSink2);
      BufferedSink bufferedSink0 = realBufferedSink1.writeIntLe(63);
      RealBufferedSink realBufferedSink4 = new RealBufferedSink(bufferedSink0);
      Buffer buffer3 = realBufferedSink3.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer2.read((Buffer) null, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Unexpected hex digit: ");
      Pipe pipe1 = new Pipe(4L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer.writeUtf8("EuCUD");
      pipe0.sourceClosed = true;
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSource0.buffer.writeLong(4L);
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe((-3156));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.rangeEquals(8L, byteString0);
      ((RealBufferedSink) bufferedSink0).buffer.writeInt((-3156));
      ((RealBufferedSink) bufferedSink0).buffer.read(byteArray0);
      HashingSink.sha1(realBufferedSource0.buffer);
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = buffer0.buffer();
      buffer1.writeLong(0L);
      buffer2.readLong();
      buffer0.completeSegmentByteCount();
      ByteString byteString1 = options0.get(2);
      ((RealBufferedSink) bufferedSink0).buffer.indexOfElement(byteString1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long long0 = 4L;
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      pipe0.sinkClosed = true;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer1.copyTo((Buffer) null, 4L, 32L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Segment segment0 = new Segment();
      Buffer buffer2 = new Buffer();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "buffer(");
      HashingSource.sha256(buffer1);
      realBufferedSink0.writeIntLe(246);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(buffer1);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer1.rangeEquals((long) (-3156), byteString0);
      realBufferedSink2.toString();
      buffer0.writeInt((-3156));
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource1.readByteString();
      buffer0.rangeEquals(327L, byteString1, 4664, (-686));
      realBufferedSink2.buffer.outputStream();
      realBufferedSink3.buffer.clone();
      Buffer buffer3 = realBufferedSink3.buffer;
      Buffer buffer4 = pipe0.buffer;
      buffer2.readAndWriteUnsafe();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      pipe0.sinkClosed = false;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = buffer1.writeDecimalLong(99991L);
      Segment segment0 = new Segment();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ByteString byteString0 = new ByteString((byte[]) null);
      Buffer buffer4 = realBufferedSink1.buffer.writeHexadecimalUnsignedLong(99991L);
      HashingSource hashingSource0 = HashingSource.sha1(buffer2);
      hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.md5(buffer3);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      realBufferedSink2.buffer();
      Buffer buffer5 = new Buffer();
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(hashingSink0);
      ByteString byteString1 = hashingSink0.hash();
      realBufferedSink1.buffer.hmacSha256(byteString1);
      buffer4.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        realBufferedSink3.buffer.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Pipe pipe0 = new Pipe(98L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.outputStream();
      buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(9223372036854775795L);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-78);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.readUtf8CodePoint();
      Buffer buffer2 = pipe0.buffer;
      HashingSource.md5(buffer1);
      ByteString byteString1 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      // Undeclared exception!
      try { 
        Charset.forName("[7FL{");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // [7FL{
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Pipe pipe0 = new Pipe(103L);
      Buffer buffer0 = pipe0.buffer;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteString byteString0 = buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(103L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.indexOf((byte)0, 1310L);
      boolean boolean0 = realBufferedSource0.closed;
      Buffer buffer3 = buffer0.writeDecimalLong(2005L);
      Segment segment0 = new Segment();
      buffer1.head = segment0;
      Buffer buffer4 = new Buffer();
      HashingSource.hmacSha256(realBufferedSource0, byteString0);
      HashingSink.sha1(buffer2);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.outputStream();
      // Undeclared exception!
      try { 
        buffer3.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(hashingSource0, inflater0);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer1 = buffer0.writeLongLe(18L);
      buffer0.readIntLe();
      ByteString byteString1 = hashingSource0.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Charset charset0 = Charset.defaultCharset();
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeString("", charset0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      ByteString byteString2 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer1, byteString1);
      HashingSink hashingSink1 = HashingSink.hmacSha256(buffer1, byteString2);
      HashingSource.hmacSha256(buffer1, byteString2);
      realBufferedSink0.buffer.writableSegment(18);
      hashingSink1.hash();
      realBufferedSink0.buffer.outputStream();
      Buffer buffer2 = buffer0.clone();
      Buffer buffer3 = realBufferedSink1.buffer;
      buffer3.segmentSizes();
      Buffer buffer4 = buffer2.write(byteString0);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(realBufferedSink1);
      realBufferedSink1.writeLong(720575L);
      realBufferedSink1.writeIntLe(2425);
      RealBufferedSink realBufferedSink4 = new RealBufferedSink(hashingSink0);
      realBufferedSink4.buffer.hmacSha512(byteString2);
      Buffer buffer5 = realBufferedSink1.buffer;
      buffer4.require(20L);
      realBufferedSink0.buffer.exhausted();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = buffer1.writeDecimalLong((-2340L));
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.indexOfElement(byteString0, 4L);
      Pipe pipe0 = new Pipe(3329L);
      Buffer buffer3 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      realBufferedSink0.buffer.readAndWriteUnsafe();
      Buffer buffer4 = realBufferedSource0.buffer;
      buffer1.readUnsafe();
      long long0 = (-1688L);
      // Undeclared exception!
      try { 
        Charset.forName("aG{|s1ZKdk");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // aG{|s1ZKdk
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = buffer0.writeDecimalLong(4L);
      Segment segment0 = new Segment();
      Buffer buffer3 = realBufferedSink1.buffer.writeHexadecimalUnsignedLong((byte)56);
      ByteString byteString0 = realBufferedSink1.buffer.md5();
      buffer0.indexOf(byteString0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(buffer2);
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSink1);
      RealBufferedSink realBufferedSink4 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8CodePoint(65);
      Buffer buffer4 = realBufferedSink1.buffer;
      realBufferedSink2.buffer.read(buffer1, 4L);
      Buffer buffer5 = pipe0.buffer;
      buffer5.writeInt((-482));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink2.buffer);
      realBufferedSource0.readByteString();
      Buffer buffer6 = realBufferedSource0.buffer;
      buffer6.writeAll(realBufferedSink3.buffer);
      ((RealBufferedSink) bufferedSink0).buffer.exhausted();
      ByteString byteString1 = hashingSink0.hash();
      realBufferedSink4.buffer.indexOfElement(byteString1);
      ByteString byteString2 = hashingSink0.hash();
      buffer3.rangeEquals(2075L, byteString2, (-482), 61);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((byte)38);
      buffer_UnsafeCursor0.next();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer.write(buffer_UnsafeCursor0.data);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeLong((byte)38);
      realBufferedSink0.writeIntLe(0);
      buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong(3L);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.rangeEquals(2191L, byteString0, 2, Integer.MAX_VALUE);
      buffer_UnsafeCursor0.buffer.rangeEquals(10L, byteString0);
      buffer2.read(buffer_UnsafeCursor0.data);
      HashingSink.sha1(buffer0);
      realBufferedSink0.buffer.writeUtf8("GE*S!N)pWv");
      Buffer buffer3 = realBufferedSink0.buffer;
      realBufferedSource0.buffer.select(options0);
      buffer1.readAll(realBufferedSink0);
      realBufferedSource0.buffer.writeShort(9);
      // Undeclared exception!
      try { 
        buffer3.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }
}
