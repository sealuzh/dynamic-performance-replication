/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 04:47:14 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.util.regex.Pattern;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ArrayInstruction;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.SWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2048, 2048);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInvokeDynamic1, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = 2048, name_and_type_index = 2048)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2858, 2858);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addFloat(0.0F);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1554, 1554);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(5018, 5018);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger(165);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantLong constantLong0 = new ConstantLong(5018);
      constantArray0[2] = (Constant) constantLong0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.getFinalConstantPool();
      String string0 = "%";
      constantPoolGen0.lookupNameAndType("%", "%");
      // Undeclared exception!
      try { 
        constantPoolGen0.getConstant(5018);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5018
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "";
      constantPoolGen0.addFieldref("", "", "(YV3bW");
      constantPoolGen0.lookupFieldref("{68eq7itl", "]4.q @^Mk", "]4.q @^Mk");
      constantPoolGen0.addMethodref("{68eq7itl", "'M$", " IDnt>6x|8M/N>4<9");
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getReturnType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = 0;
      constantPoolGen0.size = 0;
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref("Unknown constant type ", "Unknown constant type ", "Unknown constant type ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addFieldref("", "", "");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-214), (-214));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-214), (-214));
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -214
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("'k");
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      int int0 = 0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 3022);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(2357, 0);
      constantArray0[1] = (Constant) constantMethodHandle2;
      ConstantString constantString0 = new ConstantString(3022);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[2] = (Constant) constantString1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3022
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = ":!2t6A1HEni2_i^[";
      constantPoolGen0.addInterfaceMethodref("", "", ":!2t6A1HEni2_i^[");
      constantPoolGen0.lookupInterfaceMethodref("BnZ@`>O(6cY@:PZY{2", "Fg<XhF [c3@", (String) null);
      constantPoolGen0.lookupInterfaceMethodref("Fg<XhF [c3@", "Fg<XhF [c3@", "Fg<XhF [c3@");
      String string1 = "";
      String string2 = "vfWUK1y$W";
      constantPoolGen0.size = 0;
      ArrayType arrayType0 = null;
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addInterfaceMethodref("i}~K|iV3@lY", "i}~K|iV3@lY", "i}~K|iV3@lY");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addClass("org.apache.bcel.generic.ConstantPoolGen");
      String string0 = "K2|iU5iL=URkui_9";
      constantPoolGen0.lookupNameAndType("", "K2|iU5iL=URkui_9");
      constantPoolGen0.addDouble((-1));
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.getConstant(64);
      constantPoolGen0.addInteger(0);
      constantPoolGen0.getConstant(64);
      constantPoolGen0.addFieldref("", "K2|iU5iL=URkui_9", "K2|iU5iL=URkui_9");
      constantPoolGen0.addInteger(0);
      String string1 = "";
      String string2 = "";
      constantPoolGen0.lookupMethodref("", "", "");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant((Constant) null, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen0);
      int int0 = constantPoolGen0.lookupInteger(1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(232);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
      
      constantPoolGen0.getConstantPool();
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(1007.0F);
      int int0 = constantPoolGen0.lookupDouble(0.0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = (-1301);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1301), 0);
      constantNameAndType0.setNameIndex((-1301));
      Constant.setComparator((BCELComparator) null);
      Constant constant0 = constantNameAndType0.copy();
      constant0.copy();
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant((-1301), constant0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1301
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2858, 2858);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2858, (-791));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2858
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("g&z!\"BKToBLl");
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantLong constantLong0 = new ConstantLong(1L);
      constantArray0[5] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      assertEquals(6, constantPoolGen1.getSize());
      
      ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(256, constantPool1.getLength());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(87);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupLong(0);
      assertEquals((-1), int0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(":");
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen0);
      int int0 = constantPoolGen0.lookupLong(1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("[;p+)-Eb`FxW8l");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantString constantString0 = new ConstantString(0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantString constantString2 = new ConstantString(0);
      constantArray0[2] = (Constant) constantString2;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(constantUtf8_1);
      constantArray0[3] = (Constant) constantUtf8_2;
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      constantArray0[4] = (Constant) constantInteger0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(0, 0);
      constantArray0[5] = (Constant) constantFieldref0;
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[6] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantUtf8 cannot be cast to org.apache.bcel.classfile.ConstantClass
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addLong(1L);
      constantPoolGen0.getConstantPool();
      constantPoolGen0.toString();
      constantPoolGen0.lookupFloat(419.0F);
      constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
      constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(64);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("e4XpgTK^yVV$V");
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.getConstantPool();
      assertEquals(5, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupMethodref("6uPr2h+h>3t/0A5", "6uPr2h+h>3t/0A5", "#");
      constantPoolGen0.addLong((-4616189618054758400L));
      int int0 = constantPoolGen0.addLong(1L);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      constantPoolGen0.addLong((-1L));
      constantPoolGen0.addString("8");
      constantPoolGen0.addLong(4);
      constantPoolGen0.addLong(0L);
      constantPoolGen0.lookupInterfaceMethodref("8", (String) null, "E=}>!0d<M}w");
      MethodGen methodGen0 = null;
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(26, (-1));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantMethodref constantMethodref2 = new ConstantMethodref((-1036), 131);
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.getSize();
      constantPoolGen1.addClass("");
      assertEquals(3, constantPoolGen1.getSize());
      
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen2.lookupString((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRING;
      constantPoolGen0.addClass(objectType0);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addClass("org.apache.bcel.generic.ConstantPoolGen");
      constantPoolGen0.lookupNameAndType("", "K2|iU5iL=URkui_9");
      int int0 = ObjectStreamConstants.baseWireHandle;
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.getConstant(64);
      constantPoolGen0.addInteger(0);
      constantPoolGen0.getConstant(64);
      constantPoolGen0.lookupMethodref("", "", "");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant((Constant) null, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1174), 26);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1174), (-3327));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantFieldref constantFieldref2 = new ConstantFieldref(constantFieldref1);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(16384, 16384);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[0], constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1174
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantString constantString0 = new ConstantString(0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantMethodHandle cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1223), 22);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1223
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addClass("org.apache.bcel.generic.ConstantPoolGen");
      constantPoolGen0.addMethodref("", "", "org.apache.bcel.generic.ConstantPoolGen");
      constantPoolGen0.lookupNameAndType("", "K2|iU5iL=URkui_9");
      int int0 = ObjectStreamConstants.baseWireHandle;
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.getConstant(64);
      constantPoolGen0.addInteger(0);
      constantPoolGen0.getConstant(64);
      constantPoolGen0.lookupMethodref("", "", "");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int1 = Pattern.DOTALL;
      int int2 = constantPoolGen0.addDouble(0.0);
      assertEquals(11, constantPoolGen0.getSize());
      assertEquals(9, int2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("", "", "");
      int int0 = Double.MIN_EXPONENT;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      assertEquals(5, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("wide");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(5, 5);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(224, 5);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2601, 3);
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(173, 5);
      constantArray0[4] = (Constant) constantFieldref0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("d`#Z%b:^3'");
      constantArray0[5] = (Constant) constantUtf8_1;
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[6] = (Constant) constantInvokeDynamic2;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(constantUtf8_1);
      constantArray0[7] = (Constant) constantUtf8_2;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantUtf8 cannot be cast to org.apache.bcel.classfile.ConstantNameAndType
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupMethodref(",I7M[9K,@|Qk M@4", "-Gc$lfn]i&Eriho3TzI", "-Gc$lfn]i&Eriho3TzI");
      constantPoolGen0.addMethodref("~r8kdnPU/", "~r8kdnPU/", "e4XpgTK^yVV$V");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1), 5);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addLong(1L);
      constantPoolGen0.getConstantPool();
      constantPoolGen0.toString();
      constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
      constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
      constantPoolGen0.getFinalConstantPool();
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(64);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("e4XpgTK^yVV$V");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen2.addConstant(constantUtf8_0, constantPoolGen0);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantDouble constantDouble0 = new ConstantDouble(1.0F);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantDouble0, constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addLong(1L);
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addMethodref("&b])9Dd", "&b])9Dd", "il.append(InstructionConst.");
      constantPoolGen0.addFloat(1);
      constantPoolGen0.addFloat(8);
      int int0 = constantPoolGen0.addInteger(8);
      assertEquals(11, constantPoolGen0.getSize());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.addFloat((-4701.03F));
      int int0 = constantPoolGen0.lookupFloat((-1.0F));
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addFieldref("Stack top size should be 1 but stack top is '", "Stack top size should be 1 but stack top is '", "org.apache.bcel.generic.ConstantPoolGen");
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addClass("Cache hit ");
      constantPoolGen0.lookupNameAndType("org.apache.bcel.generic.ConstantPoolGen", "K2|iU5iL=URkui_9");
      constantPoolGen0.addDouble((-2452.1501));
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addInteger((-1729));
      constantPoolGen0.getConstant(5);
      constantPoolGen0.addFieldref("org.apache.bcel.generic.ConstantPoolGen", "~2Sb", "org.apache.bcel.generic.ConstantPoolGen");
      constantPoolGen0.addInteger((-3760));
      constantPoolGen0.lookupMethodref("Smp:(name_index = :UxD%]F", "~2Sb", "<O</JpmUB=QxE\"*t$4");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      constantPoolGen2.getConstantPool();
      constantPoolGen2.adjustSize();
      constantPoolGen1.lookupMethodref("HHV#:4MX\"0)FPV#<", "K2|iU5iL=URkui_9", (String) null);
      int int0 = constantPoolGen1.lookupFieldref("HHV#:4MX\"0)FPV#<", "org.apache.bcel.generic.ConstantPoolGen", "!");
      assertEquals(13, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2126), (-2126));
      Constant constant0 = constantNameAndType0.copy();
      constantArray0[0] = constant0;
      ConstantLong constantLong0 = new ConstantLong((-2126));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen2.addConstant(constantArray0[1], constantPoolGen1);
      constantPoolGen2.getConstantPool();
      assertEquals(3, constantPoolGen2.getSize());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":");
      constantPoolGen0.addClass("org.apache.bcel.generic.ConstantPoolGen");
      constantPoolGen0.size = 2;
      ConstantString constantString0 = new ConstantString(2);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantString0;
      constantPoolGen0.lookupFloat(2);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      Type type0 = aCONST_NULL0.getType(constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, 2);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2, type0, type0.NO_ARGS, (String[]) null, ":", ":", instructionList0, constantPoolGen0);
      constantPoolGen0.lookupInterfaceMethodref(methodGen0);
      int int0 = constantPoolGen0.addClass(type0.OBJECT);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantDouble constantDouble0 = new ConstantDouble(3169.0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen1.addConstant(constantArray0[1], constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(3, constantPoolGen1.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      constantPoolGen0.addString("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat2 = new ConstantFloat(constantFloat0);
      ConstantFloat constantFloat3 = new ConstantFloat(constantFloat2);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.addConstant(constantFloat2, constantPoolGen0);
      D2F d2F0 = new D2F();
      Type type0 = d2F0.getType(constantPoolGen1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      InstructionHandle instructionHandle0 = new InstructionHandle(d2F0);
      IFGT iFGT0 = new IFGT(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFGT0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      MethodGen methodGen0 = new MethodGen(4, type0, (Type[]) null, stringArray0, ":", "", instructionList0, constantPoolGen2);
      int int0 = constantPoolGen0.addMethodref(methodGen0);
      assertEquals(10, constantPoolGen1.getSize());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantClass constantClass0 = new ConstantClass(47);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addClass("i}~KNiV3@lY");
      constantPoolGen0.lookupNameAndType("K2|iU5iL=URkui_9", "Signature: ");
      constantPoolGen0.addDouble(2);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addInteger((-1));
      Constant constant0 = constantPoolGen0.getConstant(5);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen2.addConstant(constant0, constantPoolGen1);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantPool1);
      constantPoolGen1.lookupDouble(1);
      Method method0 = new Method();
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(method0, "Duplicating value: ", constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }
}
