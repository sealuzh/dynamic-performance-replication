/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 06:01:37 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMindApplet;
import freemind.modes.MindIcon;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeListener;
import java.io.StringReader;
import java.sql.Timestamp;
import java.text.DateFormatSymbols;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import javax.help.ForwardAction;
import javax.help.JHelpContentViewer;
import javax.swing.DebugGraphics;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.TransferHandler;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.synth.SynthInternalFrameUI;
import javax.swing.plaf.synth.SynthMenuUI;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.dom.GenericDocument;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.pdf.PDFObject;
import org.apache.html.dom.HTMLDocumentImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.hsqldb.rowio.RowInputBinary;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.DocumentType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getY();
      DefaultEditorKit.CopyAction defaultEditorKit_CopyAction0 = new DefaultEditorKit.CopyAction();
      JButton jButton0 = new JButton(defaultEditorKit_CopyAction0);
      jDayChooser0.selectedDay = jButton0;
      jDayChooser0.doLayout();
      jDayChooser0.init();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2185, 0L, (-1062), (-2148), 't', 0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyTyped(keyEvent0);
      jButton0.getHierarchyListeners();
      jDayChooser0.getDaysInMonth();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(969);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 969
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.weekOfYearVisible = true;
      int int0 = 479;
      int int1 = 3;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 479, 479, 3, 3, 'e');
      jDayChooser0.setDecorationBackgroundVisible(true);
      keyEvent0.getExtendedKeyCode();
      keyEvent0.setKeyChar('K');
      keyEvent0.paramString();
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.keyReleased(keyEvent0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getBaseline(0, 0);
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.getDayPanel();
      jDayChooser0.keyTyped(keyEvent0);
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(zoneId0);
      Timestamp timestamp0 = Timestamp.valueOf(localDateTime0);
      jDayChooser0.setSelectableDateRange(date0, timestamp0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setForeground(color0);
      // Undeclared exception!
      try { 
        HsqlProperties.argArrayToProps((String[]) null, "Metal");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.persist.HsqlProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "7");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      Dimension dimension0 = new Dimension(1311, 1311);
      Dimension dimension1 = new Dimension(dimension0);
      BufferedImage bufferedImage0 = imageHandlerBase64Encoder0.buildBufferedImage(dimension1);
      Graphics graphics0 = bufferedImage0.getGraphics();
      jDayChooser0.getGraphicsConfiguration();
      bufferedImage0.getCapabilities((GraphicsConfiguration) null);
      DebugGraphics debugGraphics0 = new DebugGraphics(graphics0);
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      jDayChooser0.setYear(1311);
      jDayChooser0.setYear((-768));
      Color color0 = Color.PINK;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-768);
      floatArray0[1] = (-2102.6296F);
      floatArray0[2] = (float) 1311;
      floatArray0[3] = (float) 1311;
      floatArray0[4] = 348.13F;
      color0.getComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.init();
      jDayChooser0.updateUI();
      jDayChooser0.setDay(1239);
      jDayChooser0.setMonth(1311);
      assertEquals(30, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Insets insets0 = jDayChooser0.getInsets();
      insets0.bottom = 431;
      jDayChooser0.getInsets(insets0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInheritsPopupMenu();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      long long0 = (-1L);
      System.setCurrentTimeMillis((-1L));
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setFocus();
      jDayChooser0.setMinSelectableDate((Date) null);
      jDayChooser0.getAlignmentY();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.getTransferHandler();
      jDayChooser0.setMaxSelectableDate((Date) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.init();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.init();
      int int0 = 980;
      char char0 = 'I';
      MenuElement[] menuElementArray0 = new MenuElement[6];
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getDisabledSelectedIcon();
      JMenuItem jMenuItem0 = new JMenuItem("w)=x}>6=", (Icon) null);
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      JMenuItem jMenuItem1 = new JMenuItem();
      menuElementArray0[1] = (MenuElement) jMenuItem1;
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      SystemColor systemColor0 = SystemColor.windowBorder;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 8929;
      floatArray0[1] = (float) 8929;
      systemColor0.getColorComponents(floatArray0);
      jDayChooser0.requestFocus(false);
      floatArray0[2] = (float) 8929;
      Color.RGBtoHSB(8929, 8929, 8929, floatArray0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      Locale locale0 = Locale.ITALIAN;
      Locale.getISOCountries();
      locale0.getScript();
      locale0.hasExtensions();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.initDecorations();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setDay(28);
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(true);
      jDayChooser0.setFocus();
      jDayChooser0.setWeekOfYearVisible(true);
      Date date0 = jDayChooser0.setMinSelectableDate((Date) null);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.isDecorationBackgroundVisible();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle("day", styleContext_NamedStyle0);
      AttributeSet attributeSet0 = styleContext_NamedStyle1.getResolveParent();
      Font font0 = styleContext0.getFont(attributeSet0);
      font0.deriveFont(0.8F);
      jDayChooser0.setFont(font0);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setMaxSelectableDate(date0);
      ForwardAction forwardAction0 = new ForwardAction(styleContext0);
      jDayChooser0.removeMouseListener(forwardAction0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1583, true, jDayChooser0);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setWeekdayForeground(color0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        jDayChooser0.getInputMap(768);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must be one of JComponent.WHEN_IN_FOCUSED_WINDOW, JComponent.WHEN_FOCUSED or JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getY();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.isPaintingForPrint();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, (-2539L), 0, 2, ' ', 2);
      jDayChooser0.keyPressed(keyEvent0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 65793, true, jDayChooser0);
      focusEvent0.getOppositeComponent();
      keyEvent0.setKeyChar(' ');
      jDayChooser0.focusGained(focusEvent0);
      // Undeclared exception!
      try { 
        MockCalendar.getInstance((TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.requestFocus();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 941);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.isDecorationBackgroundVisible();
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMImplementation dOMImplementation0 = hTMLDocumentImpl0.getImplementation();
      GenericDocument genericDocument0 = new GenericDocument((DocumentType) null, dOMImplementation0);
      genericDocument0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getToolkit();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isDoubleBuffered();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.getDayPanel();
      int int0 = (-1839);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-1839));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1839
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.getLocale();
      Date date0 = jDayChooser0.getMinSelectableDate();
      SystemColor systemColor0 = SystemColor.textText;
      Color.getColor("Metal", (Color) systemColor0);
      Color.getColor("day", 8944);
      Color.getColor("(<%3K &{,FXWAw<", 8944);
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.drawDays();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.getMaxSelectableDate();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jDayChooser0.isFocusOwner();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setMonth(9);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-593), "day", (-593), 13);
      actionEvent0.paramString();
      actionEvent0.setSource(jDayChooser0);
      jDayChooser0.dispatchEvent(actionEvent0);
      jDayChooser0.getHierarchyBoundsListeners();
      jDayChooser0.setYear(1195);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals((-16754012), color0.getRGB());
      
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      jDayChooser0.getToolTipText();
      MenuSelectionManager.defaultManager();
      jDayChooser0.repaint(0L);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 2331, 262L, 90, 2331, '\'', (MenuElement[]) null, menuSelectionManager0);
      int int0 = 12;
      menuKeyEvent0.consume();
      menuSelectionManager0.getSelectedPath();
      menuKeyEvent0.setKeyChar('\'');
      InputEvent.getModifiersExText(12);
      menuKeyEvent0.getPath();
      jDayChooser0.keyReleased(menuKeyEvent0);
      jDayChooser0.isDayBordersVisible();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 12, (-1153L), (-1117), 969, '3', (-1117));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.isDayBordersVisible();
      Color color0 = jDayChooser0.sundayForeground;
      jDayChooser0.setSundayForeground(color0);
      JSplitPane jSplitPane0 = null;
      try {
        jSplitPane0 = new JSplitPane(100, true, jDayChooser0, jDayChooser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot create JSplitPane, orientation must be one of JSplitPane.HORIZONTAL_SPLIT or JSplitPane.VERTICAL_SPLIT
         //
         verifyException("javax.swing.JSplitPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      boolean boolean0 = false;
      jDayChooser0.drawWeeks();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Locale locale0 = Locale.KOREAN;
      locale0.getDisplayName();
      jDayChooser1.setLocale(locale0);
      jDayChooser1.getVetoableChangeListeners();
      JMonthChooser jMonthChooser0 = jDayChooser1.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      int int0 = 36;
      int int1 = 2581;
      int int2 = 29;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(36, 36, 36, 2581, 29, 36);
      mockGregorianCalendar0.getGregorianChange();
      JHelpContentViewer jHelpContentViewer0 = new JHelpContentViewer();
      int int3 = 25;
      jHelpContentViewer0.getGraphics();
      int int4 = 31;
      int int5 = (-2481);
      int int6 = 30;
      int int7 = 1768;
      TitledBorder titledBorder0 = null;
      try {
        titledBorder0 = new TitledBorder((Border) null, "day", (-2481), (-249));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2481 is not a valid title justification.
         //
         verifyException("javax.swing.border.TitledBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-:e|FC7L");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getComponentListeners();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setDay((-454));
      jDayChooser0.initDecorations();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-454), 0L, (-454), (-454), 'd');
      keyEvent0.setSource((Object) null);
      jDayChooser0.keyTyped(keyEvent0);
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      jDayChooser0.setWeekdayForeground(systemColor0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Class<SynthInternalFrameUI> class0 = SynthInternalFrameUI.class;
      jDayChooser0.getListeners(class0);
      jDayChooser0.repaint();
      int int0 = 14;
      jDayChooser0.setMonth(14);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 14, "day", 14);
      actionEvent0.setSource(class0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.initialized = false;
      jDayChooser0.setFocusCycleRoot(false);
      jDayChooser0.transferFocusDownCycle();
      jDayChooser0.drawWeeks();
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      Color.getColor("Windows", (Color) systemColor0);
      systemColor0.getColorSpace();
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.initDecorations();
      jDayChooser0.drawWeeks();
      jDayChooser0.getDecorationBackgroundColor();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jMonthChooser0.getGraphics();
      jMonthChooser0.setToolTipText("day");
      jDayChooser0.setMonthChooser(jMonthChooser0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 808);
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      PDFDocument pDFDocument0 = new PDFDocument("day");
      pDFDocument0.getInfo();
      PDFObject.encode("ISO-8859-1");
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setEnabled(true);
      int int0 = 784;
      jDayChooser0.setMonth(784);
      String string0 = null;
      DateFormatSymbols.getInstance();
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      PDFObject.encode("");
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.getSundayForeground();
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSundayForeground((Color) null);
      try { 
        jDayChooser0.getMousePosition();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getInputMap(0);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getLocale();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      boolean boolean1 = jDayChooser_DecoratorButton0.isFocusable();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getAutoscrolls();
      TransferHandler.getPasteAction();
      String string0 = "Windows";
      ImageIcon imageIcon0 = new ImageIcon();
      MindIcon mindIcon0 = MindIcon.factory(", name.hashCode()=", imageIcon0);
      StyleContext styleContext0 = new StyleContext();
      int int0 = 160;
      Font font0 = styleContext0.getFont("Windows", (-1), 160);
      Font.getFont("Mm,gi3z!}:dKZU.U3", font0);
      RowInputBinary rowInputBinary0 = new RowInputBinary();
      mindIcon0.getIconBaseFileName();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        rowInputBinary0.readFully(byteArray0, 160, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.lib.HsqlByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.createVolatileImage(2147, 2147);
      jDayChooser0.getAlignmentY();
      jDayChooser0.drawWeeks();
      jDayChooser0.setMaxDayCharacters((-3125));
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.weekPanel = (JPanel) jYearChooser0;
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jYearChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.isDecorationBordersVisible();
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals((-16754012), color0.getRGB());
      
      jDayChooser0.setYear(2147);
      jDayChooser0.setMaxDayCharacters(2147);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.getMinSelectableDate();
      EvoSuiteFile evoSuiteFile0 = null;
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSize((-2667), (-6977));
      jDayChooser0.getMaxSelectableDate();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-87), (-87), 15, 682, 'm');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SynthMenuUI synthMenuUI0 = new SynthMenuUI();
      synthMenuUI0.getMinimumSize(jDayChooser0);
      synthMenuUI0.contains(jDayChooser0, 236, 721);
      jDayChooser0.addPropertyChangeListener((PropertyChangeListener) synthMenuUI0);
      jDayChooser0.maxDayCharacters = 721;
      jDayChooser0.getSundayForeground();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMaxDayCharacters(2);
      String string0 = "gEw0`DmP";
      Result result0 = Result.newRollbackToSavepointRequest("gEw0`DmP");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "day", 8222);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // java.lang.String@0000000063
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }
}
