/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:55:10 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.lang.annotation.Annotation;
import java.lang.reflect.Proxy;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.databene.commons.ErrorHandler;
import org.databene.commons.bean.TypedPropertyMutator;
import org.databene.jdbacl.DBExecutionResult;
import org.databene.jdbacl.DBUtil;
import org.databene.jdbacl.JDBCConnectData;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.FBArray;
import org.firebirdsql.jdbc.FBBlob;
import org.firebirdsql.jdbc.FBConnection;
import org.h2.jdbc.JdbcPreparedStatement;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.tools.Csv;
import org.h2.tools.Recover;
import org.h2.tools.SimpleResultSet;
import org.hsqldb.jdbcDriver;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DBUtil.resetMonitors();
      DBUtil.available("", "", "", "");
      Recover recover0 = new Recover();
      assertNull(recover0.getDatabasePath());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DBUtil.assertAllDbResourcesClosed(true);
      Connection connection0 = null;
      ErrorHandler errorHandler0 = new ErrorHandler("y\"AiBB/M]-x2]fk%");
      // Undeclared exception!
      try { 
        DBUtil.runScript("y\"AiBB/M]-x2]fk%", (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DBUtil.assertAllDbResourcesClosed(true);
      DBUtil.checkReadOnly("y\"AiBB/M]-x2]fk%", false);
      ErrorHandler errorHandler0 = new ErrorHandler("A7.5VDddn}5lF=(8i");
      // Undeclared exception!
      try { 
        DBUtil.runScript("s$l@\"1cipx", '@', (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DBUtil.checkReadOnly("SIN", false);
      // Undeclared exception!
      try { 
        DBUtil.connect("SIN", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'SIN.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DBUtil.assertAllDbResourcesClosed(false);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<TypedPropertyMutator> class0 = TypedPropertyMutator.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("oPM(", class0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow("9)!6ed?=HW'>C_v", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBUtil.getOpenPreparedStatementCount();
      FromVTI fromVTI0 = new FromVTI();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TEMPORARY ");
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      Class<Annotation> class0 = Annotation.class;
      Csv.getInstance();
      DBUtil.getOpenConnectionCount();
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("TEMPORARY ");
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        DBUtil.equivalent((DBUniqueConstraint) null, (DBPrimaryKeyConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        DBUtil.getMetaData((Connection) null, "M(", "M(", false, false, false, false, " statement(s)", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        DBUtil.escape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DBUtil.getOpenPreparedStatementCount();
      DBUtil.wrapWithPooledConnection((Connection) null, true);
      // Undeclared exception!
      try { 
        DBUtil.getMetaData("DUMMY", false, true, false, false, "DUMMY", false, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'DUMMY.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "TgU0 %$]v.id}RR";
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      ErrorHandler errorHandler0 = new ErrorHandler("TgU0 %$]v.id}RR");
      // Undeclared exception!
      try { 
        DBUtil.runScript("TgU0 %$]v.id}RR", "TgU0 %$]v.id}RR", (Connection) null, false, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: TgU0 %$]v.id}RR
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Connection connection0 = null;
      // Undeclared exception!
      try { 
        DBUtil.logMetaData((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DBUtil.getOpenPreparedStatementCount();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      DBUtil.parseAndSimplifyResultSet(simpleResultSet0);
      simpleResultSet0.getStatement();
      FromVTI fromVTI0 = new FromVTI();
      SimpleResultSet simpleResultSet1 = new SimpleResultSet();
      DBUtil.closeResultSetAndStatement(simpleResultSet1);
      assertTrue(simpleResultSet1.isClosed());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("PXOpwjSc,s;", "0c#kyr. o<1!8~ZpO+", "Error getting statement from result set", "0c#kyr. o<1!8~ZpO+");
      try { 
        DBUtil.connect(jDBCConnectData0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting 0c#kyr. o<1!8~ZpO+ failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DBUtil.assertAllDbResourcesClosed(true);
      Connection connection0 = null;
      DBUtil.checkReadOnly("y\"AiBB/M]-x2]fk%", false);
      // Undeclared exception!
      try { 
        DBUtil.queryAndSimplify("cm%7:]A", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.query("--s$l@\"1cipx", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = FBBlob.SEGMENTED;
      byte[] byteArray0 = new byte[1];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.format(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = Dependable.SCHEMA;
      jdbcDriver jdbcDriver0 = new jdbcDriver();
      HsqlProperties hsqlProperties0 = new HsqlProperties();
      Properties properties0 = hsqlProperties0.getProperties();
      jdbcDriver0.connect("C", properties0);
      DBUtil.close((Connection) null);
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("+Ws", "+Ws", "+Ws", "Schema");
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection((FBManagedConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "j[7h6(Rwa*a";
      Connection connection0 = null;
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, ";)BE15q;Y", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: ;)BE15q;Y
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      DBUtil.wrapWithPooledConnection((Connection) null, true);
      String string0 = "bwoEmr5Or{&D#n\\{{";
      // Undeclared exception!
      try { 
        DBUtil.assertAllDbResourcesClosed(true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // There are unclosed database resources: 1 connection(s)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = DBUtil.getOpenPreparedStatementCount();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      TableContainer tableContainer0 = new TableContainer("{ ");
      DBUtil.dependencyOrderedTables(tableContainer0);
      int int1 = DBUtil.getOpenConnectionCount();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = File.pathSeparator;
      DBUtil.wrapWithPooledConnection((Connection) null, false);
      String string1 = "=d0DhN%A";
      int int0 = 505;
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "=d0DhN%A", false, 698, 505, 505);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DBUtil.wrapWithPooledConnection((Connection) null, false);
      DBUtil.getOpenConnectionCount();
      DBUtil.existsEnvironment("setWidth");
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) pGConnectionPoolDataSource0);
      assertEquals(0, jdbcConnectionPool0.getActiveConnections());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "YI0YZh");
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("COS", "-l'd/o,`^Yg0z'*g4", "COS", "-lP@akv^9zum");
      DBSchema dBSchema0 = new DBSchema("-l'd/o,`^Yg0z'*g4");
      System.setCurrentTimeMillis(0L);
      DBUtil.dependencyOrderedTables(dBSchema0);
      DBUtil.getOpenConnectionCount();
      // Undeclared exception!
      try { 
        DBUtil.countRows("--''", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = FBBlob.SEGMENTED;
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      DBUtil.wrapWithPooledConnection((Connection) null, true);
      DBUtil.assertAllDbResourcesClosed(false);
      DBSchema dBSchema0 = new DBSchema("");
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      Recover recover1 = new Recover();
      recover0.getLobConnection();
      Class<JdbcPreparedStatement> class0 = JdbcPreparedStatement.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      DBExecutionResult dBExecutionResult0 = DBUtil.runScript("", (Connection) null, false, errorHandler0);
      assertNotNull(dBExecutionResult0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBUtil.getOpenConnectionCount();
      System.setCurrentTimeMillis(0);
      FBArray fBArray0 = new FBArray();
      fBArray0.getResultSet((long) 0, (-1205));
      Proxy proxy0 = (Proxy)DBUtil.createLoggingResultSet((ResultSet) null, (Statement) null);
      assertNotNull(proxy0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DBSchema dBSchema0 = new DBSchema("OpwSc,s;");
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      Recover recover0 = new Recover();
      Recover recover1 = new Recover();
      recover1.getLobConnection();
      Class<JdbcPreparedStatement> class0 = JdbcPreparedStatement.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("OpwSc,s;", (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = FBBlob.SEGMENTED;
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      DBUtil.wrapWithPooledConnection((Connection) null, true);
      DBUtil.assertAllDbResourcesClosed(false);
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData((String) null, "", "Error getting statement from result set", "--y\"AiBB/M]-x2]fk%");
      // Undeclared exception!
      try { 
        DBUtil.connect(jDBCConnectData0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC URL specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBUtil.wrapWithPooledConnection((Connection) null, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/11_jdbacl/setWidth.env.properties");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      DBUtil.getOpenConnectionCount();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setTcpKeepAlive(false);
      JdbcConnectionPool.create((ConnectionPoolDataSource) pGConnectionPoolDataSource0);
      JDBCConnectData jDBCConnectData0 = DBUtil.getConnectData("setWidth");
      assertNotNull(jDBCConnectData0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = FBBlob.SEGMENTED;
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      DBUtil.wrapWithPooledConnection((Connection) null, true);
      DBUtil.assertAllDbResourcesClosed(false);
      DBSchema dBSchema0 = new DBSchema("");
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      Recover recover1 = new Recover();
      recover0.getLobConnection();
      ErrorHandler errorHandler0 = new ErrorHandler("");
      DBUtil.runScript("", (Connection) null, false, errorHandler0);
      int int0 = DBUtil.executeUpdate("", (Connection) null);
      assertEquals(0, int0);
  }
}
