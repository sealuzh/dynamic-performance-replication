/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:23:49 GMT 2018
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.linear.GaussianSolver;
import org.la4j.matrix.DenseMatrix;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GaussianSolver_ESTest extends GaussianSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2295.008585911367);
      doubleArray0[1] = (-1761.2);
      doubleArray0[2] = (-295.480068828);
      doubleArray0[3] = 1578.926468;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      SparseVector.fromCSV("");
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-295.480068828);
      doubleArray1[1] = (-1761.2);
      GaussianSolver gaussianSolver0 = new GaussianSolver(matrix0);
      gaussianSolver0.applicableTo(matrix0);
      // Undeclared exception!
      try { 
        gaussianSolver0.solve(sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system is singular.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2295.008585911367);
      doubleArray0[1] = (-1761.2);
      doubleArray0[2] = (-295.480068828);
      doubleArray0[3] = 1578.926468;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      SparseVector sparseVector1 = SparseVector.fromCSV("");
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-295.480068828);
      doubleArray1[1] = (-1761.2);
      doubleArray1[2] = (-295.480068828);
      doubleArray1[3] = (-2295.008585911367);
      SparseVector.fromArray(doubleArray1);
      Matrix matrix0 = sparseVector1.toDiagonalMatrix();
      GaussianSolver gaussianSolver0 = new GaussianSolver(matrix0);
      gaussianSolver0.applicableTo(matrix0);
      Vector vector0 = gaussianSolver0.solve(sparseVector1);
      double[][] doubleArray2 = new double[6][4];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-2295.008585911367);
      doubleArray3[1] = 1578.926468;
      doubleArray2[4] = doubleArray3;
      doubleArray2[5] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray2);
      boolean boolean0 = gaussianSolver0.applicableTo(denseMatrix0);
      assertNotSame(sparseVector1, vector0);
      assertFalse(boolean0);
      assertTrue(sparseVector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2295.008585911367);
      doubleArray0[1] = (-1761.2);
      doubleArray0[0] = (-295.480068828);
      doubleArray0[3] = 1578.926468;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      SparseVector.fromCSV("");
      GaussianSolver gaussianSolver0 = new GaussianSolver(matrix0);
      gaussianSolver0.applicableTo(matrix0);
      // Undeclared exception!
      try { 
        gaussianSolver0.solve(sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system can't be solved.
         //
         verifyException("org.la4j.linear.GaussianSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1112.61;
      DenseVector denseVector0 = DenseVector.unit(16);
      DenseVector denseVector1 = DenseVector.zero(16);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      GaussianSolver gaussianSolver0 = new GaussianSolver(matrix0);
      Vector.zero(16);
      gaussianSolver0.solve(denseVector1);
      matrix0.copy();
      Random.setNextRandom(16);
      gaussianSolver0.unknowns = 16;
      gaussianSolver0.applicableTo(matrix0);
      Vector vector0 = gaussianSolver0.solve(denseVector1);
      gaussianSolver0.solve(vector0);
      gaussianSolver0.solve(denseVector1);
      // Undeclared exception!
      try { 
        Vector.fromCSV("B+'w CKP\"j*].m@NW($");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }
}
