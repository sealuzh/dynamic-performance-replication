/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:51:51 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.lang.reflect.Array;
import java.lang.reflect.Member;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.verifier.structurals.ExecutionVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("if_icmpne&#&if_icmpne");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(253, 253);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.toString();
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(0.0);
      // Undeclared exception!
      try { 
        constantPoolGen0.getConstant((-687));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -687
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1066), (-1066));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantLong constantLong0 = new ConstantLong((-1066));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1066), (-1066));
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1066
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      int int0 = Short.BYTES;
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addLong(2);
      constantPoolGen0.addUtf8("");
      int int1 = constantPoolGen0.addString("");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupLong((-399L));
      constantPoolGen0.addUtf8("Wi");
      int int0 = constantPoolGen0.addFloat(1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      constantPoolGen0.addDouble(435.0);
      constantPoolGen0.getConstantPool();
      int int0 = constantPoolGen0.addLong(1);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(127, 127);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantClass constantClass0 = new ConstantClass(127);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-15));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantDouble constantDouble0 = new ConstantDouble(2382);
      ConstantLong constantLong0 = new ConstantLong(2382);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantDouble constantDouble2 = new ConstantDouble(constantDouble1);
      ConstantLong constantLong2 = new ConstantLong((-15));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(8, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "qJBN%qJBN";
      constantPoolGen0.lookupFieldref("qJBN%qJBN", "qJBN%qJBN", "qJBN%qJBN");
      constantPoolGen0.lookupLong(771L);
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant((-1), (Constant) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(127, 127);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantClass constantClass0 = new ConstantClass(127);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.adjustSize();
      int int0 = constantPoolGen0.addDouble(0.0);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(2828);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2828, 2828);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2828
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1503, 238);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantInteger constantInteger0 = new ConstantInteger(131);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addInteger(131);
      assertEquals(1, int0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantString constantString0 = new ConstantString(3);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[4] = (Constant) constantString1;
      ConstantString constantString2 = new ConstantString(constantString0);
      ConstantClass constantClass0 = new ConstantClass(189);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupString((String) null);
      constantPoolGen0.size = (-1);
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass("Y.&K1N(H$vzsH'_");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(617);
      String string0 = "\nAttribute(s) = ";
      MethodGen methodGen0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantPoolGen0.lookupMethodref("\nAttribute(s) = ", "\nAttribute(s) = ", "\nAttribute(s) = ");
      constantPoolGen0.getFinalConstantPool();
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.addMethodref("nQd", "nQd", "nQd");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "oqgur{,M]x%IWHTS&o";
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1996, 1996);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantLong constantLong0 = new ConstantLong(1996);
      constantLong0.copy();
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      constantPool1.setConstantPool(constantArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((String) null, "lstore_0", "7.o)l,H9FB1O");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong(1L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantDouble constantDouble0 = new ConstantDouble(1L);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantLong constantLong2 = new ConstantLong(constantLong1);
      constantArray0[2] = (Constant) constantLong2;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addLong(817L);
      int int0 = Float.SIZE;
      int int1 = constantPoolGen0.addDouble(3);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1996, 1996);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantLong constantLong0 = new ConstantLong(1996);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      constantPool1.setConstantPool(constantArray0);
      ConstantString constantString0 = new ConstantString(1996);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-3033), 121);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantLong0, constantPoolGen1);
      assertEquals(1, int0);
      assertEquals(3, constantPoolGen0.getSize());
      
      int int1 = constantPoolGen1.lookupLong(184);
      assertEquals((-1), int1);
      assertEquals(1, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupNameAndType("Zi;o,i.#`?", "p");
      ConstantLong constantLong0 = new ConstantLong(1921L);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantLong0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addConstant(constantLong0, constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LCMP lCMP0 = new LCMP();
      Type type0 = lCMP0.getType(constantPoolGen0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = new MethodGen((-2612), type0, type0.NO_ARGS, (String[]) null, "fneg", "fneg", instructionList0, constantPoolGen0);
      constantPoolGen0.addMethodref(methodGen0);
      int int0 = constantPoolGen0.lookupMethodref(methodGen0);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(213, 248);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("7@", "7@", "7@");
      ObjectType objectType0 = ObjectType.getInstance("7@");
      constantPoolGen0.addClass(objectType0);
      int int0 = Member.PUBLIC;
      int int1 = constantPoolGen0.index;
      // Undeclared exception!
      try { 
        constantPoolGen0.addUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(213);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(213, (-1572));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = Member.PUBLIC;
      int int1 = constantPoolGen0.index;
      constantPoolGen1.addConstant(constantInteger0, constantPoolGen0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addFieldref((String) null, ")", ")");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("T#&");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantPoolGen0.lookupFieldref("o1;h%k#0`#", "7@%7@", "7@%7@");
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantUtf8_1, constantPoolGen1);
      assertEquals(2, constantPoolGen0.getSize());
      
      int int0 = constantPoolGen1.getSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      String string0 = "";
      constantPoolGen0.lookupMethodref("Backwards branch with an uninitialized object on the stack detected.", "Backwards branch with an uninitialized object on the stack detected.", "");
      Integer integer0 = new Integer((-1));
      constantPoolGen0.addLong((-1));
      constantPoolGen0.addFloat((-1));
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY();
      constantPoolGen0.addFloat(3);
      int int0 = Byte.BYTES;
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      // Undeclared exception!
      try { 
        aNEWARRAY0.accept(executionVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.ExecutionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addMethodref(" [{OA[%sH7uifjQCd", " [{OA[%sH7uifjQCd", " [{OA[%sH7uifjQCd");
      constantPoolGen0.lookupNameAndType(" [{OA[%sH7uifjQCd", " [{OA[%sH7uifjQCd");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType("The offset cannot be negative", (-2461));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: -2461
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantDouble constantDouble0 = new ConstantDouble(3567.19);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3260, 3260);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3260);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodType1;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addLong((-2966L));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = Float.SIZE;
      constantPoolGen0.addNameAndType("%", "%");
      constantPoolGen0.addFieldref("%", "%", "%");
      assertEquals(7, constantPoolGen0.getSize());
      
      int int1 = Character.MIN_CODE_POINT;
      assertFalse(int1 == int2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.addInteger((-2409));
      constantPoolGen0.addConstant(constantArray0[0], constantPoolGen1);
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType("C-`", (-5467));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: -5467
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Constant[] constantArray1 = new Constant[6];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(20);
      constantArray1[3] = (Constant) constantMethodType0;
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantInteger constantInteger0 = new ConstantInteger(223);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(223, (-1566));
      ConstantString constantString0 = new ConstantString(223);
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1566), 201);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(223, 201);
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType((-1566), 235);
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(235, 1849);
      constantMethodHandle0.setReferenceIndex(235);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1566
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(2196);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantFloat constantFloat0 = new ConstantFloat((-1774.448F));
      constantFloat0.toString();
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInteger1;
      constantArray0[1] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupLong(755L);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ObjectType objectType0 = Type.OBJECT;
      ConstantString constantString0 = new ConstantString(863);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(863, 1);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantFieldref1.copy();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.lookupNameAndType("Wf_mQN]0y", "CONSTANT_Float[4](bytes = -1774.448)");
      constantPoolGen1.lookupFieldref((String) null, "<M<`!mzZF\"", "<M<`!mzZF\"");
      constantPoolGen2.addUtf8("Wf_mQN]0y");
      ConstantFieldref constantFieldref2 = new ConstantFieldref(constantFieldref1);
      ConstantFieldref constantFieldref3 = new ConstantFieldref(constantFieldref1);
      ConstantFieldref constantFieldref4 = new ConstantFieldref(constantFieldref1);
      int int0 = constantPoolGen2.addConstant(constantFloat1, constantPoolGen1);
      assertEquals(3, constantPoolGen2.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(254, 1345);
      constantArray0[0] = (Constant) constantNameAndType0;
      constantNameAndType0.setSignatureIndex(1345);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[0], constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1345
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger((-2203));
      constantPoolGen0.lookupString((String) null);
      constantPoolGen0.lookupFieldref("    il.append(", "xNSTANT_MMthodref", "L_N]C)sx}wYC ?T?^;");
      constantPoolGen0.addDouble((-1));
      constantPoolGen0.addDouble((-1));
      int int0 = constantPoolGen0.lookupInteger(2518);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantString constantString0 = new ConstantString((-2434));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2434
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Indexing a constant that's not a CONSTANT_Fieldref but a '");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.addInteger(229);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3260, 3260);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant[] constantArray0 = new Constant[12];
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(constantMethodHandle1);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = Pattern.COMMENTS;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodHandle2, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = 3260, reference_index = 3260)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      int int0 = 226;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(226);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("if_icmpne&#&if_icmpne");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(256, 256);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 256
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "U8p~Sd";
      ObjectType objectType0 = Type.STRING;
      constantPoolGen0.addClass(objectType0);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(235, 346);
      constantFieldref0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      int int0 = Pattern.MULTILINE;
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantFieldref constantFieldref2 = new ConstantFieldref(constantFieldref1);
      ConstantFieldref constantFieldref3 = new ConstantFieldref(constantFieldref1);
      constantPoolGen1.addLong(1332L);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 346
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3251, 3251);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      int int0 = Pattern.CANON_EQ;
      String string0 = Constants.ILLEGAL_OPCODE;
      constantPoolGen0.toString();
      ObjectType objectType0 = Type.THROWABLE;
      constantPoolGen0.addInterfaceMethodref("", "d_2.'xz}{u[;s", "7@%Only element values of type enum can be built with this ctor - type specified: ");
      ObjectType.getInstance("");
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(128, 128);
      constantMethodHandle0.toString();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(3251, 6);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.lookupNameAndType("CONSTANT_MethodHandle[15](reference_kind = 3251, reference_index = 3251)", (String) null);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("lstore_3");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      try { 
        ConstantUtf8.getInstance((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = Character.BYTES;
      ObjectType objectType0 = ObjectType.getInstance("*n`<BQK p4_s\")n8");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(223);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(223, (-1571));
      ConstantMethodref constantMethodref1 = new ConstantMethodref((-1571), (-1571));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("7@", "7@", "7@");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = Pattern.COMMENTS;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1571), 4);
      constantFieldref0.setNameAndTypeIndex(12);
      ConstantFieldref constantFieldref1 = (ConstantFieldref)constantFieldref0.copy();
      ConstantString constantString0 = new ConstantString(4);
      ConstantFieldref constantFieldref2 = new ConstantFieldref(4, 1845);
      ConstantFieldref constantFieldref3 = new ConstantFieldref(constantFieldref1);
      JavaClass.getComparator();
      constantFieldref3.copy();
      int int1 = Byte.BYTES;
      constantPoolGen1.lookupFieldref("jb SCBMUuB%B`D%jb SCBMUuB%B`D", "7@", "P6*.Q/4X=@%$gep");
      Method method0 = new Method();
      Method method1 = new Method(method0);
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(method1, "Hm552=<<#MV|X);\"", constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupInterfaceMethodref("-s'DBw7,", "RIxCi", "RIxCi");
      ObjectType objectType0 = Type.STRING;
      Class<ConstantMethodType> class0 = ConstantMethodType.class;
      Class<ConstantDouble>[] classArray0 = (Class<ConstantDouble>[]) Array.newInstance(Class.class, 2);
      Class<ConstantDouble> class1 = ConstantDouble.class;
      classArray0[0] = class1;
      Class<ConstantDouble> class2 = ConstantDouble.class;
      classArray0[1] = class2;
      Type.getTypes(classArray0);
      Type.getType(class0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      constantPoolGen0.getConstantPool();
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(235, 346);
      constantFieldref0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int1 = Pattern.MULTILINE;
      ConstantFieldref constantFieldref1 = new ConstantFieldref((-1), 68);
      ConstantFieldref constantFieldref2 = new ConstantFieldref(constantFieldref1);
      ConstantFieldref constantFieldref3 = new ConstantFieldref(constantFieldref1);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 346
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupMethodref("d_2/'xz}{u[;s", "d_2/'xz}{u[;s", "d_2/'xz}{u[;s");
      constantPoolGen0.toString();
      constantPoolGen0.addString("Bd?+O\"\"|aWR{{%9s");
      constantPoolGen0.toString();
      int int0 = constantPoolGen0.addString("Bd?+O\"\"|aWR{{%9s");
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(77, (-140));
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -140
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("");
      GETFIELD gETFIELD0 = new GETFIELD(2);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      int int0 = Double.MIN_EXPONENT;
      constantPool0.toString();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ObjectType objectType0 = Type.STRINGBUFFER;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen1.lookupString((String) null);
      String string0 = "' is a class, but not an interface as expected.";
      constantPoolGen1.lookupInterfaceMethodref("' is a class, but not an interface as expected.", "5MC_HdG9g]-W+", "q;&D dVw");
      ObjectType objectType1 = Type.THROWABLE;
      ConstantString constantString0 = new ConstantString(2);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1908874352), (-1908874352));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantClass constantClass0 = new ConstantClass(2);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantString cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(9, 9);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(9, 9);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3260, 3260);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3260);
      constantPoolGen0.addString("d_2.'z}{u[;s");
      String string0 = Constants.ILLEGAL_TYPE;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ObjectType objectType0 = Type.STRINGBUFFER;
      constantPoolGen0.lookupString((String) null);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addInterfaceMethodref("<illegal type>", "d_2.'z}{u[;s", "Unexpected constant type: ");
      Constant[] constantArray0 = new Constant[16];
      constantArray0[0] = (Constant) constantMethodHandle0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unexpected constant type: ");
      constantArray0[1] = (Constant) constantMethodHandle1;
      constantArray0[2] = (Constant) constantMethodType0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen();
      ObjectType objectType1 = Type.THROWABLE;
      ConstantString constantString0 = new ConstantString(3260);
      constantPoolGen0.addInterfaceMethodref("<illegal type>", "d_2.'z}{u[;s", "Unexpected constant type: ");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2, 2);
      ConstantPoolGen constantPoolGen4 = new ConstantPoolGen();
      int int0 = Float.BYTES;
      ConstantUtf8 constantUtf8_0 = null;
      try {
        constantUtf8_0 = new ConstantUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(250);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(250, (-1579));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.CASE_INSENSITIVE;
      String string0 = "j4Io";
      constantPoolGen0.addFieldref("j4Io", "j4Io", "j4Io");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      constantPoolGen0.lookupDouble(325.7351871312089);
      ObjectType objectType0 = Type.THROWABLE;
      ConstantString constantString0 = new ConstantString(250);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1579), 250);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("j4Io", "j4Io", "j4Io");
      constantPoolGen2.getFinalConstantPool();
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantPool0);
      int int1 = Float.SIZE;
      ConstantPoolGen constantPoolGen4 = new ConstantPoolGen();
      int int2 = Pattern.DOTALL;
      int int3 = Short.SIZE;
      ConstantFieldref constantFieldref1 = new ConstantFieldref(250, (-1579));
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref1, constantPoolGen4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1579
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "EniW0 i");
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3260, 3260);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("($Lf>PY}12ug");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      Constant.setComparator((BCELComparator) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = constantPoolGen0.lookupFieldref("|&;co`r<", "The 'objectref' is not of a ReferenceTy?e or of ReturnaddressType but of ", "($Lf>PY}12ug");
      assertEquals((-1), int0);
      
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantUtf8_1;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantArray0[4] = (Constant) constantUtf8_1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      int int1 = Character.MAX_CODE_POINT;
      constantPoolGen1.getSize();
      constantPoolGen2.adjustSize();
      assertEquals(256, constantPoolGen2.getSize());
      assertEquals(1, constantPoolGen0.getSize());
  }
}
