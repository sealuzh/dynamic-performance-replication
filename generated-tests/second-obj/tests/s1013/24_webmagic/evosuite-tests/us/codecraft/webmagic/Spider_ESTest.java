/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:13:16 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Logger;
import java.io.LineNumberReader;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.model.HttpRequestBody;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.thread.CountableThreadPool;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.fromValue((-3));
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.Running;
      spider_Status0.getValue();
      Spider.Status.fromValue(1);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider {} started!");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.Running;
      spider_Status0.getValue();
      Spider.Status spider_Status1 = Spider.Status.Stopped;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider {} started!");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.setPipelines(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("F/SVB-");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader((Downloader) null);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider2 = spider1.pipeline(filePipeline0);
      spider2.stop();
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      spider0.sleep(393);
      Spider spider1 = spider0.thread(393);
      spider1.clearPipeline();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("6=@GN(");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request("6=@GN(");
      Request request1 = request0.setPriority((-3522L));
      Request request2 = request1.addHeader("6=@GN(", "6=@GN(");
      requestArray0[0] = request2;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("6L,xS$?-Y3V/r");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "6L,xS$?-Y3V/r";
      stringArray0[1] = "6L,xS$?-Y3V/r";
      stringArray0[2] = "6L,xS$?-Y3V/r";
      stringArray0[3] = "Spider is already running!";
      stringArray0[4] = "6L,xS$?-Y3V/r";
      stringArray0[5] = "6L,xS$?-Y3V/r";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("CUwM%04+IYK");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("threadNum should be more than one!");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("threadNum should be more than one!");
      spider1.scheduler(fileCacheQueueScheduler0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      scheduledThreadPoolExecutor0.getQueue();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      // Undeclared exception!
      try { 
        threadPoolExecutor_CallerRunsPolicy0.rejectedExecution(spider0, scheduledThreadPoolExecutor0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("init cache scheduler success");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      
      Spider spider1 = spider0.setExitWhenComplete(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("init cache scheduler success", "");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(972);
      Spider spider2 = spider1.downloader(phantomJSDownloader1);
      spider2.getSite();
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("!-'");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("!-'");
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.stop();
      Spider spider2 = spider1.startRequest(linkedList0);
      CountableThreadPool countableThreadPool0 = spider2.threadPool;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("!-'", "!-'");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      phantomJSDownloader0.setRetryNum((-1774));
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) linkedHashSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("init cache scheduler success");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((-982));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("TC.-L{>y[0~CL");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "TC.-L{>y[0~CL");
      Spider spider1 = spider0.setUUID("TC.-L{>y[0~CL");
      Spider spider2 = spider1.thread(880);
      spider2.spawnUrl = true;
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider2.pipeline(jsonFilePipeline0);
      spider1.getSpiderListeners();
      ResultItems resultItems0 = new ResultItems();
      // Undeclared exception!
      try { 
        spider2.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("0B[R2+8L?Hir~\"tM");
      Spider spider2 = spider1.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider3 = spider2.pipeline(multiPagePipeline0);
      ExecutorService executorService0 = null;
      int int0 = (-1061);
      // Undeclared exception!
      try { 
        spider3.thread((ExecutorService) null, (-1061));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("6=@GN(");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      Spider spider1 = spider0.clearPipeline();
      spider0.getThreadAlive();
      HttpRequestBody httpRequestBody0 = new HttpRequestBody();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedHashSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 762);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      Spider spider3 = spider2.thread(880);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider4 = spider0.pipeline(jsonFilePipeline0);
      spider4.getSpiderListeners();
      ResultItems resultItems0 = new ResultItems();
      // Undeclared exception!
      try { 
        spider3.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("IEYoz[c7t$QoYJr0}r!,");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider0.startUrls(linkedList0);
      ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("6=@GN(");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\n");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      Spider spider1 = spider0.clearPipeline();
      spider1.getScheduler();
      spider1.getThreadAlive();
      Request[] requestArray0 = new Request[8];
      Request request0 = new Request();
      requestArray0[0] = request0;
      spider0.thread(880);
      HttpRequestBody httpRequestBody0 = new HttpRequestBody();
      // Undeclared exception!
      try { 
        spider0.sleep((-3165));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, ":");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(5);
      Spider spider2 = spider1.setExecutorService(scheduledThreadPoolExecutor0);
      spider2.setEmptySleepTime(447);
      // Undeclared exception!
      try { 
        spider2.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, ":");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.thread(880);
      HttpRequestBody httpRequestBody0 = new HttpRequestBody();
      spider2.sleep(1);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider3 = spider1.addPipeline(jsonFilePipeline0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider4 = spider3.clearPipeline();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = ":";
      // Undeclared exception!
      try { 
        spider4.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, ":");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      int int0 = 880;
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider2 = spider0.pipeline(jsonFilePipeline0);
      spider1.getSpiderListeners();
      HttpRequestBody httpRequestBody0 = new HttpRequestBody();
      spider1.sleep(880);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("Thread interrupted when sleep", "");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<Pipeline> list0 = spider0.getAll((Collection<String>) linkedHashSet0);
      Spider spider3 = spider2.setPipelines(list0);
      Logger logger0 = (Logger)spider1.logger;
      spider3.logger = (org.slf4j.Logger) logger0;
      String[] stringArray0 = new String[2];
      spider3.clearPipeline();
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("6=@GN(");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(891);
      Spider spider2 = spider1.thread(891);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider1.getSpiderListeners();
      spider1.sleep(891);
      spider1.setSpiderListeners((List<SpiderListener>) null);
      spider2.clearPipeline();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "6=@GN(";
      stringArray0[1] = "";
      stringArray0[2] = "6=@GN(";
      stringArray0[3] = "";
      stringArray0[4] = "";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = true;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Owq?");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(200);
      spider0.setExecutorService(forkJoinPool0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, ":");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.thread(880);
      HttpRequestBody httpRequestBody0 = new HttpRequestBody();
      spider2.sleep(1);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider1.addPipeline(jsonFilePipeline0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider0.startUrls(linkedList0);
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      spider1.clearPipeline();
      // Undeclared exception!
      try { 
        spider0.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("]|");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "]|");
      HttpRequestBody httpRequestBody0 = new HttpRequestBody();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HttpRequestBody httpRequestBody1 = new HttpRequestBody();
      Spider spider1 = spider0.thread(41);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider0.pipeline(resultItemsCollectorPipeline0);
      Page page0 = Page.fail();
      spider0.extractAndAddRequests(page0, false);
      spider1.getSpiderListeners();
      spider1.getSite();
      Request request0 = new Request("Of/y2|33Mcd iA");
      // Undeclared exception!
      try { 
        spider0.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, ":");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.thread(880);
      spider2.spawnUrl = true;
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider2.pipeline(jsonFilePipeline0);
      spider1.getSpiderListeners();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = ":\\";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string1 = "";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "h{4!fKu");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("]");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider2 = spider1.setScheduler(fileCacheQueueScheduler0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      linkedList0.pollLast();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("]");
      spider1.initComponent();
      Spider spider3 = spider1.pipeline(jsonFilePipeline0);
      spider2.getSpiderListeners();
      jsonFilePipeline0.checkAndMakeParentDirecotry("");
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      spider0.setPipelines(linkedList1);
      spider1.downloader(phantomJSDownloader0);
      spider3.isSpawnUrl();
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\n");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "");
      Spider spider2 = spider0.downloader(phantomJSDownloader0);
      spider2.thread(5);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader((String) null, "");
      Spider spider3 = spider1.setDownloader(phantomJSDownloader1);
      HttpRequestBody httpRequestBody0 = new HttpRequestBody();
      spider1.sleep(880);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider0.startUrls(linkedList0);
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      String[] stringArray0 = new String[0];
      spider3.test(stringArray0);
      System.setCurrentTimeMillis(5);
      spider2.addUrl(stringArray0);
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.sleep(404);
      String[] stringArray0 = new String[8];
      spider0.getStatus();
      spider0.isExitWhenComplete();
      Spider spider1 = spider0.setSpawnUrl(true);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque1.add("");
      spider0.getSpiderListeners();
      spider1.getUUID();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider0.pipeline(resultItemsCollectorPipeline0);
      spider2.getStartTime();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      String[] stringArray0 = new String[2];
      Request[] requestArray1 = new Request[6];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/24_webmagic/_cycle_tried_times/null.cursor.txt");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      Request request0 = new Request("TUXAD>CtG BL");
      requestArray1[0] = request0;
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_cycle_tried_times");
      // Undeclared exception!
      try { 
        fileCacheQueueScheduler0.poll(spider0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/io/IOUtils
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\n");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      Spider spider1 = spider0.clearPipeline();
      String string0 = null;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "6");
      Spider spider2 = spider0.downloader(phantomJSDownloader0);
      spider2.run();
      spider2.setUUID("6");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HttpRequestBody httpRequestBody0 = new HttpRequestBody();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider0.getThreadAlive();
      ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        spider1.get("]M'[ VBMS=Yn5]J");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", ":");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider2 = spider1.setScheduler(duplicateRemovedScheduler0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      linkedList0.pollLast();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider0.initComponent();
      spider0.addPipeline(jsonFilePipeline0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      spider2.startUrls(linkedList1);
      LinkedList<Request> linkedList2 = new LinkedList<Request>();
      Spider spider3 = spider1.clearPipeline();
      String[] stringArray0 = new String[0];
      spider3.test(stringArray0);
      spider0.downloader(phantomJSDownloader0);
      boolean boolean0 = spider3.isSpawnUrl();
      assertTrue(boolean0);
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = ":\\";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.start();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("CuJ");
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      LinkedHashSet<LineNumberReader> linkedHashSet0 = new LinkedHashSet<LineNumberReader>();
      spider0.getSpiderListeners();
      spider0.addPipeline((Pipeline) null);
      linkedList0.retainAll(linkedHashSet0);
      linkedList0.pollLast();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      spider1.pageProcessor = (PageProcessor) simplePageProcessor0;
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<Request> linkedList2 = new LinkedList<Request>();
      String[] stringArray0 = new String[3];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder(evoSuiteFile0);
      stringArray0[0] = jsonFilePipeline0.PATH_SEPERATOR;
      stringArray0[1] = jsonFilePipeline0.PATH_SEPERATOR;
      stringArray0[2] = string0;
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      int int0 = 195;
      spider0.sleep(int0);
      spider0.getScheduler();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\n");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      spider0.stop();
      spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "6");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.run();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HttpRequestBody httpRequestBody0 = new HttpRequestBody();
      Spider spider2 = spider0.setExitWhenComplete(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        spider2.get("]M'[ VBMS=Yn5]J");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor(":");
      Spider spider0 = new Spider(simplePageProcessor1);
      spider0.stop();
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(":", ":");
      Spider spider2 = spider0.setUUID("q?*ad8TEvYfL3~vOn");
      Spider spider3 = spider1.setDownloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("q?*ad8TEvYfL3~vOn");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("(?is)<style.*?>.*?</style>");
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler1.setDuplicateRemover(hashSetDuplicateRemover0);
      spider3.setScheduler(duplicateRemovedScheduler0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      linkedList0.pollLast();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("(?is)<style.*?>.*?</style>");
      spider0.initComponent();
      spider2.addPipeline(jsonFilePipeline0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":");
      HttpRequestBody httpRequestBody0 = new HttpRequestBody();
      spider3.getPageCount();
      Spider.Status.values();
      spider0.setExitWhenComplete(false);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        spider0.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("l");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("(", "l");
      spider0.downloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("(");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider1 = spider0.clearPipeline();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      linkedList0.pollLast();
      HttpRequestBody httpRequestBody0 = new HttpRequestBody();
      spider0.thread(974);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider2 = spider0.pipeline(multiPagePipeline0);
      Page.fail();
      spider2.downloader(phantomJSDownloader0);
      spider0.run();
      phantomJSDownloader0.setThread(640);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`PA*J!K\"g5oXa@N");
      HttpRequestBody httpRequestBody1 = new HttpRequestBody();
      spider2.getPageCount();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(";
      stringArray0[1] = "`PA*J!K\"g5oXa@N";
      stringArray0[2] = "_cycle_tried_times";
      stringArray0[3] = "l";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }
}
