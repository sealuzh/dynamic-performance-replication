/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 20:59:27 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.AndSelector;
import us.codecraft.webmagic.selector.Html;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.RegexSelector;
import us.codecraft.webmagic.selector.ReplaceSelector;
import us.codecraft.webmagic.selector.Selector;
import us.codecraft.webmagic.thread.CountableThreadPool;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("8");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "k[F4";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("k[F4");
      Spider spider0 = new Spider(simplePageProcessor0);
      ExecutorService executorService0 = null;
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      int int0 = (-508);
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) null, (-508));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("8");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) null, (-3288));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("d{");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((-3472));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("8");
      Spider spider0 = new Spider(simplePageProcessor0);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      spider0.getStatus();
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.clearPipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider2.scheduler = (Scheduler) priorityScheduler0;
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("<0SAR]8AvuhtV'KE");
      fileCacheQueueScheduler0.setDuplicateRemover((DuplicateRemover) null);
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover((DuplicateRemover) null);
      priorityScheduler0.getLeftRequestsCount(spider2);
      Spider spider3 = spider2.setScheduler(duplicateRemovedScheduler0);
      spider3.downloader = (Downloader) phantomJSDownloader0;
      long long0 = spider3.getPageCount();
      assertEquals(0L, long0);
      
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider4 = spider0.setSpiderListeners(linkedList0);
      spider4.start();
      spider0.getStatus();
      spider1.start();
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0$");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("0$");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      int int0 = spider1.getThreadAlive();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0, int0);
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ej5iI&g<\"h>>n%oR?n");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.pipeline(multiPagePipeline0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(31, 31, 31, timeUnit0, linkedTransferQueue0, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
      Spider spider2 = spider1.thread((ExecutorService) threadPoolExecutor0, 31);
      Spider spider3 = spider2.setExecutorService(threadPoolExecutor0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ej5iI&g<\"h>>n%oR?n";
      // Undeclared exception!
      try { 
        spider3.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("q\"skPF9`jg");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(837, threadFactory0);
      scheduledThreadPoolExecutor0.getPoolSize();
      spider0.setExecutorService(scheduledThreadPoolExecutor0);
      spider0.extractAndAddRequests((Page) null, false);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" KC(!Xjq6BZ}t}Y");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("m)O<OWgsz[Yv4OL=j");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("m)O<OWgsz[Yv4OL=j");
      Spider spider2 = spider1.setSpawnUrl(false);
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      AndSelector andSelector0 = new AndSelector(linkedList0);
      andSelector0.selectList("m)O<OWgsz[Yv4OL=j");
      List<Request> list0 = new LinkedList<Request>();
      Spider spider3 = spider2.startRequest(list0);
      Spider spider4 = spider3.setExitWhenComplete(false);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("m)O<OWgsz[Yv4OL=j");
      spider4.pipeline(jsonFilePipeline0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        spider2.sleep((-1341));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("%9 ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("`~eVr;`/xM_0n15J");
      Spider spider2 = spider1.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("VfK_zA*EkQ$Bu}", "%9 ");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(125);
      Spider spider3 = spider2.downloader(phantomJSDownloader1);
      Spider spider4 = spider3.setSpawnUrl(false);
      Page page0 = new Page();
      Json json0 = page0.getJson();
      Class<Request> class0 = Request.class;
      json0.toList(class0);
      spider4.startRequest((List<Request>) null);
      assertFalse(spider3.isSpawnUrl());
      
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      List<Pipeline> list1 = spider0.getAll((Collection<String>) list0);
      spider3.pipelines = list1;
      Request request0 = new Request();
      Request request1 = request0.addHeader("`~eVr;`/xM_0n15J", "");
      request1.setCharset("AQe^w;x");
      spider3.clearPipeline();
      Spider.Status spider_Status0 = Spider.Status.Stopped;
      Spider.Status spider_Status1 = Spider.Status.Running;
      int int0 = spider_Status1.getValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.clearPipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider2.scheduler = (Scheduler) priorityScheduler0;
      assertTrue(spider2.isExitWhenComplete());
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("<0SAR]8AvuhtV'KE");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      spider2.getAll((Collection<String>) linkedHashSet0);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" KC(UXjq6BZ}t}Y");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      // Undeclared exception!
      try { 
        spider0.get(" KC(UXjq6BZ}t}Y");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"M!aJ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("\"M!aJ");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.setScheduler(priorityScheduler0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\"M!aJ";
      stringArray0[1] = "R;=(";
      stringArray0[2] = "\"M!aJ";
      stringArray0[3] = "\"M!aJ";
      stringArray0[4] = "\"M!aJ";
      stringArray0[5] = "\"M!aJ";
      String string0 = "F@:8A/xkBe1";
      Request[] requestArray0 = new Request[5];
      Request request0 = new Request();
      Request request1 = request0.putExtra("R;=(", simplePageProcessor0);
      Request request2 = request1.addHeader("Spider {} closed! {} pages downloaded.", "\"M!aJ");
      Request request3 = request2.setMethod("S:Qp|Blcb?~ PjSuN");
      Request request4 = request3.setBinaryContent(true);
      requestArray0[0] = request4;
      Request request5 = new Request();
      requestArray0[1] = request5;
      priorityScheduler0.poll(spider1);
      requestArray0[2] = null;
      Request request6 = new Request();
      requestArray0[3] = request6;
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider2);
      requestArray0[4] = null;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      Request[] requestArray0 = new Request[0];
      spider1.addRequest(requestArray0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a//=");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      spider1.thread(125);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider1.setExitWhenComplete(false);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2, threadFactory0);
      scheduledThreadPoolExecutor0.getPoolSize();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider0.startRequest(linkedList0);
      spider2.setExecutorService(scheduledThreadPoolExecutor0);
      boolean boolean0 = false;
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Spider.Status.fromValue(125);
      String string0 = "Spider ";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider ");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.addPipeline(resultItemsCollectorPipeline0);
      Spider spider2 = spider1.setSpawnUrl(false);
      spider2.pipeline(resultItemsCollectorPipeline0);
      RegexSelector regexSelector0 = null;
      try {
        regexSelector0 = new RegexSelector("Spider ");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.selector.RegexSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      Request request0 = new Request();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      Request[] requestArray0 = new Request[3];
      requestArray0[0] = null;
      requestArray0[1] = null;
      requestArray0[2] = request0;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String[] stringArray0 = new String[2];
      spider0.getStartTime();
      stringArray0[0] = "";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(?is)<!DOCTYPE.*?>");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      queueScheduler0.poll(spider1);
      queueScheduler0.getTotalRequestsCount(spider0);
      Spider spider2 = spider0.scheduler(queueScheduler0);
      spider2.setPipelines((List<Pipeline>) null);
      Spider.Status spider_Status0 = Spider.Status.Running;
      spider0.getSite();
      spider1.getCollectorPipeline();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "/";
      stringArray0[2] = "/";
      stringArray0[3] = "/";
      stringArray0[4] = "QqP>G [XCUIko(_WZV|";
      stringArray0[5] = "_cycle_tried_times";
      stringArray0[6] = "_cycle_tried_times";
      stringArray0[7] = "/";
      stringArray0[8] = "/";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      spider1.stop();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("8");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      boolean boolean0 = spider1.isSpawnUrl();
      assertTrue(boolean0);
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2, threadFactory0);
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      Spider spider1 = spider0.thread(2);
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" KC(!Xjq6BZ}t}Y");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getScheduler();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", " stop fail!");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      Spider spider2 = spider1.addUrl(stringArray0);
      Spider spider3 = spider2.setSpawnUrl(false);
      spider3.getSpiderListeners();
      Spider spider4 = spider3.setSpiderListeners((List<SpiderListener>) null);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider5 = spider4.setScheduler(queueScheduler0);
      spider5.test(stringArray0);
      assertFalse(spider2.isSpawnUrl());
      
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor(" stop fail!");
      Spider spider6 = new Spider(simplePageProcessor1);
      assertTrue(spider6.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" KC(UXjq6BZ}t}Y");
      Request request0 = new Request();
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("}-3%!_LL$.", "_cycle_tried_times");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<Pipeline> list0 = spider0.getAll((Collection<String>) linkedHashSet0);
      Spider spider2 = spider1.setPipelines(list0);
      Spider spider3 = spider2.scheduler((Scheduler) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("cN\"np.NYjK");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider4 = spider3.setScheduler(duplicateRemovedScheduler0);
      // Undeclared exception!
      try { 
        spider4.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" KC(!Xjq6BZ}t}Y");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" KC(!Xjq6BZ}t}Y", " KC(!Xjq6BZ}t}Y");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setExitWhenComplete(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = " KC(!Xjq6BZ}t}Y";
      spider2.initComponent();
      spider2.getStatus();
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" KC(UXjq6BZ}t}Y");
      Request request0 = new Request();
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string0 = "}-3%!_LL$.";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("}-3%!_LL$.", "_cycle_tried_times");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<Pipeline> list0 = spider0.getAll((Collection<String>) linkedHashSet0);
      Spider spider2 = spider1.setPipelines(list0);
      spider2.scheduler((Scheduler) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("cN\"np.NYjK");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider2.getStartTime();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider3 = spider1.pipeline(resultItemsCollectorPipeline0);
      // Undeclared exception!
      try { 
        spider3.getAll((Collection<String>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Request[] requestArray0 = new Request[7];
      Request request0 = new Request();
      ForkJoinPool.commonPool();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isExitWhenComplete();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Nbk");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Nbk");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      Request request0 = new Request();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3, threadFactory0);
      Spider spider2 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 3);
      spider2.clearPipeline();
      spider2.checkIfRunning();
      spider1.setExitWhenComplete(false);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider3 = spider2.thread((ExecutorService) forkJoinPool0, 2287);
      long long0 = spider3.getPageCount();
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.clearPipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider2.scheduler = (Scheduler) priorityScheduler0;
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("<0SAR]8AvuhtV'KE");
      fileCacheQueueScheduler0.setDuplicateRemover((DuplicateRemover) null);
      fileCacheQueueScheduler0.setDuplicateRemover((DuplicateRemover) null);
      Integer integer0 = new Integer(5);
      Spider spider3 = spider2.setUUID("");
      Spider spider4 = spider3.clearPipeline();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "<0SAR]8AvuhtV'KE";
      stringArray0[1] = "ZX]:Z6`*Nn0:>xi6";
      stringArray0[2] = "<0SAR]8AvuhtV'KE";
      spider4.setEmptySleepTime(5);
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4~*V3)<%R*;#G");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("page status code error, page {} , code: {}", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.run();
      Spider spider2 = new Spider(simplePageProcessor0);
      spider1.getThreadAlive();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", downloadSuccess=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("init cache scheduler success", "zset_");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      int int0 = 1526;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1526, 1526, 1526, timeUnit0, linkedTransferQueue0, threadPoolExecutor_CallerRunsPolicy0);
      Spider spider2 = spider1.setExecutorService(threadPoolExecutor0);
      Spider spider3 = spider2.setSpawnUrl(true);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      List<Pipeline> list1 = spider2.getAll((Collection<String>) list0);
      spider3.setPipelines(list1);
      Page page0 = new Page();
      Page page1 = page0.setRawText("\"u)8kOfI>?");
      // Undeclared exception!
      try { 
        page1.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" KC(!Xjq6BZ}t}Y", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadPoolExecutor_DiscardPolicy0);
      Spider spider2 = spider1.setExecutorService(scheduledThreadPoolExecutor0);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("", "%20");
      spider2.downloader(phantomJSDownloader0);
      spider2.run();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider3 = new Spider(simplePageProcessor1);
      spider1.getThreadAlive();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "%20";
      stringArray0[1] = "%20";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = " KC(!Xjq6BZ}t}Y";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }
}
