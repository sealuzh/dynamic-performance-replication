/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:24:08 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.StreamTokenizer;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSListAxioms;
import umd.cs.shop.JSListLogicalAtoms;
import umd.cs.shop.JSOperator;
import umd.cs.shop.JSPlan;
import umd.cs.shop.JSPlanningDomain;
import umd.cs.shop.JSState;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTasks;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSState_ESTest extends JSState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JSState jSState0 = null;
      try {
        jSState0 = new JSState((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      JSState jSState1 = jSState0.apply(jSPlan0);
      assertNotSame(jSState1, jSState0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JSState jSState0 = new JSState();
      jSState0.parallelStream();
      JSPlan jSPlan0 = new JSPlan();
      jSPlan0.add((Object) jSState0);
      jSState0.addElementsToState(jSPlan0);
      jSState0.containsAll(jSPlan0);
      jSState0.addElementsToState(jSPlan0);
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      JSOperator jSOperator0 = new JSOperator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSOperator0.standarizerOp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      jSState0.print();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Comparator<InputStream> comparator0 = (Comparator<InputStream>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSPlan0.add((Object) jSTerm0);
      JSPlan jSPlan1 = new JSPlan();
      JSJshopVars.flagLevel = 1463;
      Object object0 = new Object();
      jSState0.addElementsToState(jSPlan0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSState0);
      jSState0.satisfiesTAm(jSTerm1, jSSubstitution0);
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      jSPlanningDomain0.axioms();
      JSListLogicalAtoms jSListLogicalAtoms0 = new JSListLogicalAtoms();
      // Undeclared exception!
      try { 
        jSState0.standarizerListLogicalAtoms();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      Object object0 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      PipedReader pipedReader0 = new PipedReader();
      jSPlan0.add((Object) jSTerm0);
      Object object1 = new Object();
      jSState0.addElementsToState(jSPlan0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) "ZS)d");
      JSListAxioms jSListAxioms1 = new JSListAxioms();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSState0.satisfies(jSPlan0, jSSubstitution0, jSListAxioms0);
      Object object2 = new Object();
      jSSubstitution0.add(object2);
      JSListLogicalAtoms jSListLogicalAtoms0 = new JSListLogicalAtoms();
      JSListLogicalAtoms jSListLogicalAtoms1 = new JSListLogicalAtoms();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      JSTasks jSTasks0 = null;
      try {
        jSTasks0 = new JSTasks(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      Object object0 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      JSSubstitution jSSubstitution1 = jSState0.satisfies(jSPlan0, jSSubstitution0, jSListAxioms0);
      jSSubstitution0.addElements(jSSubstitution1);
      PipedReader pipedReader0 = new PipedReader();
      jSListAxioms0.add((Object) jSSubstitution0);
      jSPlan0.add((Object) jSTerm0);
      JSPlan jSPlan1 = new JSPlan();
      SystemInUtil.addInputLine("");
      Object object1 = new Object();
      jSState0.addElementsToState(jSPlan0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) "M3y+");
      jSSubstitution0.ensureCapacity(1463);
      jSState0.satisfiesTAm(jSTerm0, jSSubstitution1);
      JSListAxioms jSListAxioms1 = new JSListAxioms();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSState0.satisfies(jSPlan1, jSSubstitution2, jSListAxioms0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSListLogicalAtoms jSListLogicalAtoms0 = new JSListLogicalAtoms();
      Object object2 = new Object();
      jSState0.satisfiesAll(jSPlan0, jSSubstitution1, jSListAxioms1);
      JSOperator jSOperator0 = new JSOperator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution2.add((Object) jSListAxioms1);
      JSState jSState1 = new JSState();
      JSState jSState2 = new JSState();
      jSState1.satisfiesAll(jSListLogicalAtoms0, jSSubstitution0, jSListAxioms1);
      jSState1.satisfies(jSPlan0, jSSubstitution3, jSListAxioms1);
      assertEquals("[[M3y+]]", jSState0.toString());
      assertFalse(jSState0.equals((Object)jSState1));
  }
}
