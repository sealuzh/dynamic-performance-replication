/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 09:34:50 GMT 2018
 */

package org.javathena.login;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.function.BiFunction;
import javolution.util.FastComparator;
import javolution.util.FastMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.ACO;
import org.javathena.login.Login;
import org.javathena.login.UserManagement;
import org.javathena.login.parse.FromChar;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Login_ESTest extends Login_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Login login0 = new Login();
      Login.End login_End0 = login0.new End();
      FastMap<Integer, Auth_data> fastMap0 = new FastMap<Integer, Auth_data>();
      FastMap<Integer, Auth_data> fastMap1 = new FastMap<Integer, Auth_data>(fastMap0);
      FastMap<Integer, Auth_data> fastMap2 = fastMap1.setShared(false);
      UserManagement.setAuth_dats(fastMap2);
      login_End0.run();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("error_20", 30);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      mockInetSocketAddress0.getHostName();
      FromClient fromClient0 = new FromClient();
      Socket_data socket_data0 = new Socket_data(mockSocket0, fromClient0);
      // Undeclared exception!
      try { 
        Login.version(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      login_ConnectionListener0.run();
      login0.do_initTXT();
      login_ConnectionListener0.run();
      Login.login_log("conf/subnet_athena.conf");
      // Undeclared exception!
      try { 
        login0.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Login login0 = new Login();
      ConfigurationManagement.setAccess_allownum(10);
      login0.save_config_in_log();
      // Undeclared exception!
      try { 
        login0.check_auth_sync();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Login login0 = new Login();
      Login.getDbManagemtType();
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Login login0 = new Login();
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Login login0 = new Login();
      int int0 = Login.mmo_auth_initTXT();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Login login0 = new Login();
      String string0 = "- to create new accounts with a limited time: time of creation %d second(s).";
      byte[] byteArray0 = new byte[2];
      String string1 = "p<yV8";
      ConfigurationManagement.setAccess_deny("p<yV8");
      Login.setPASSWORDENC(100000000);
      login0.setAuth_max(0);
      // Undeclared exception!
      try { 
        login0.parse_console("Initializing md5key...");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Login login0 = new Login();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("6cxZ>6bTeGBAp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Login login0 = new Login();
      Socket_data socket_data0 = new Socket_data((Socket) null);
      // Undeclared exception!
      try { 
        Login.codingKeyAdministration(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Login login0 = new Login();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      // Undeclared exception!
      try { 
        login_Timer_interval_check_auth_sync0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Login login0 = new Login();
      login0.auth_max = 2000;
      login0.do_final();
      login0.setAuth_max(2000);
      Login.getPASSWORDENC();
      InetAddress inetAddress0 = MockInetAddress.getByName("conf/subnet_athena.conf");
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("conf/subnet_athena.conf", 30, inetAddress0, 100000000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:100000000
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Login login0 = new Login();
      int[] intArray0 = new int[2];
      intArray0[0] = 10;
      intArray0[1] = 100000000;
      ConfigurationManagement.setSubneti(intArray0);
      ConfigurationManagement.setAuth_before_save_file(4323);
      login0.getOut();
      UserManagement.addAccountIdCount(1764);
      Login.getDbManagemtType();
      login0.check_ip((InetAddress) null);
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Login login0 = new Login();
      Login.setPASSWORDENC(0);
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)6;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("conf/subnet_athena.conf");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Login.loginLogOut = (PrintWriter) mockPrintWriter0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-118);
      Login.showTab(byteArray0);
      login0.getAuth_num();
      // Undeclared exception!
      try { 
        login0.check_auth_sync();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Login login0 = new Login();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      Login.showTab(byteArray0);
      int int0 = login0.check_ipmask((byte) (-73), "YR9F4SY]");
      assertEquals(0, int0);
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Login.display_title();
      Login login0 = new Login();
      String string0 = ")r,";
      Login.auth_num = (-38);
      // Undeclared exception!
      try { 
        Login.login_log(")r,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Login login0 = new Login();
      FromClient fromClient0 = new FromClient();
      Socket_data socket_data0 = new Socket_data((Socket) null);
      // Undeclared exception!
      try { 
        login0.parse_admin(2000000, socket_data0, login0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_max());
      
      int int0 = Login.mmo_auth_initXML();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Login login0 = new Login();
      Login.setPASSWORDENC((-614));
      login0.getAuth_max();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte) (-43);
      try { 
        MockInetAddress.getByAddress(byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [-38, 0, 50, 4, 84, 87, 78, -43]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Login login0 = new Login();
      ConfigurationManagement.setAccess_deny("conf/subnet_athena.conf");
      login0.check_ipmask((-1857), "");
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      login0.check_ip(inetAddress0);
      Login.setPASSWORDENC(100000000);
      login0.do_initXML();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, 1052, inetAddress0, 10);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@96ccf2ab
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncXML();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.close();
      login_ConnectionListener0.run();
      int int0 = 1213;
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("conf/subnet_athena.conf", 1213);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@80d24384
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      login0.yesNoOnOffToBoolean("YES");
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, 30);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@96cc76e9
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Login login0 = new Login();
      int[] intArray0 = login0.getServer_fd();
      assertNotNull(intArray0);
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      FastMap<Integer, Auth_data> fastMap0 = new FastMap<Integer, Auth_data>();
      FastComparator<Object> fastComparator0 = (FastComparator<Object>) mock(FastComparator.class, new ViolatedAssumptionAnswer());
      FastMap<Integer, Auth_data> fastMap1 = fastMap0.setKeyComparator(fastComparator0);
      FastComparator<Object> fastComparator1 = (FastComparator<Object>) mock(FastComparator.class, new ViolatedAssumptionAnswer());
      FastMap<Integer, Auth_data> fastMap2 = fastMap1.setKeyComparator(fastComparator1);
      FastComparator<Object> fastComparator2 = (FastComparator<Object>) mock(FastComparator.class, new ViolatedAssumptionAnswer());
      FastMap<Integer, Auth_data> fastMap3 = fastMap2.setValueComparator(fastComparator2);
      UserManagement.setAuth_dats(fastMap3);
      MySQLConfig.setLogin_server_ip("admin");
      login0.getLog_fp();
      login0.getLog_fp();
      Login.logUnknownPackets((Socket_data) null);
      Login.setPASSWORDENC(5825);
      Login.mmo_auth_syncTXT();
      Login login1 = new Login();
      // Undeclared exception!
      try { 
        login0.parse_admin(2788, (Socket_data) null, login1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      int[] intArray0 = new int[2];
      MySQLConfig.setLogin_server_port(48);
      intArray0[0] = 2;
      login0.setServer_fd(intArray0);
      login0.save_config_in_log();
      Login.mmo_auth_syncXML();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Login login0 = new Login();
      boolean boolean0 = login0.yesNoOnOffToBoolean("NO");
      assertEquals(0, login0.getAuth_max());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_max());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/12_javathena/save/account.xml");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FastMap<Integer, Auth_data> fastMap0 = new FastMap<Integer, Auth_data>();
      FastComparator<Object> fastComparator0 = (FastComparator<Object>) mock(FastComparator.class, new ViolatedAssumptionAnswer());
      FastMap<Integer, Auth_data> fastMap1 = fastMap0.setKeyComparator(fastComparator0);
      FastMap<Integer, Auth_data> fastMap2 = new FastMap<Integer, Auth_data>(fastMap1);
      Auth_data auth_data0 = mock(Auth_data.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null, (Integer) null).when(auth_data0).getAccount_id();
      doReturn((String) null).when(auth_data0).getUserid();
      BiFunction<Auth_data, Object, Auth_data> biFunction0 = (BiFunction<Auth_data, Object, Auth_data>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      fastMap2.merge((Integer) 30, auth_data0, biFunction0);
      UserManagement.setAuth_dats(fastMap2);
      int int0 = Login.mmo_auth_initXML();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Login login0 = new Login();
      Socket_data socket_data0 = new Socket_data((Socket) null);
      // Undeclared exception!
      try { 
        Login.codingKey(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Login login0 = new Login();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      login0.check_ip(inetAddress0);
      login0.do_initXML();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("conf/subnet_athena.conf");
      mockPrintWriter0.println((Object) login0);
      int[] intArray0 = new int[9];
      intArray0[0] = 2000000;
      intArray0[1] = 100000000;
      intArray0[2] = 30;
      intArray0[3] = 10;
      intArray0[4] = 2000000;
      intArray0[5] = 10;
      intArray0[6] = 30;
      intArray0[7] = 2;
      intArray0[8] = 2;
      login0.setServer_fd(intArray0);
      login0.setOut(mockPrintWriter0);
      login0.do_initTXT();
      login0.do_initTXT();
      ConfigurationManagement.setAccess_deny("conf/subnet_athena.conf");
      login0.check_ip(inetAddress0);
      Login.setPASSWORDENC(100000000);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initXML();
      login0.parse_console("HBjg");
      // Undeclared exception!
      try { 
        login0.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-29);
      byte byte0 = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)111;
      Login.showTab(byteArray0);
      Login login0 = new Login();
      Login.mmo_auth_syncXML();
      login0.check_auth_sync();
      MySQLConfig.setLogin_server_port(2);
      login0.do_final();
      try { 
        MockInetAddress.getByAddress("conf/subnet_athena.conf", byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [-29, 12, -17, 76, 79, 111]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Login.login_log((String) null);
      Login login0 = new Login();
      Login.auth_num = 3135;
      int int0 = login0.check_ipmask((-880), (String) null);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initXML();
      login0.parse_console(" of type ");
      MySQLConfig.setLogin_server_port(0);
      login0.getServer_fd();
      // Undeclared exception!
      try { 
        login0.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      login0.do_initTXT();
      // Undeclared exception!
      try { 
        login0.parse_console("shutdown");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Login login0 = new Login();
      Auth_data auth_data0 = UserManagement.addUserTXT("Ua^h\"g1%wa", "0", "The login-server starting...", '.');
      assertEquals(2000000, (int)auth_data0.getAccount_id());
      
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Login login0 = new Login();
      int[] intArray0 = new int[9];
      intArray0[0] = 50;
      intArray0[1] = 30;
      intArray0[2] = 50;
      intArray0[3] = 50;
      intArray0[4] = 2;
      intArray0[5] = 100000000;
      intArray0[6] = 10;
      intArray0[7] = 50;
      intArray0[8] = 30;
      login0.server_fd = intArray0;
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Login login0 = new Login();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initXML();
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_num());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Login login0 = new Login();
      ConfigurationManagement.setAccess_denynum(1082);
      login0.do_initXML();
      login0.do_initTXT();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.close();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      int[] intArray0 = new int[5];
      intArray0[0] = 2000000;
      intArray0[1] = 2000000;
      intArray0[2] = 2000000;
      intArray0[3] = 21;
      intArray0[4] = 2000000;
      login0.setServer_fd(intArray0);
      UserManagement.addUserTXT("conf/subnet_athena.conf", "  Refused IP are:", "oAbj,}g&s:fJ", ')');
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Login login0 = new Login();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_allownum((-826));
      ConfigurationManagement.setAccess_order(aCO0);
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Login login0 = new Login();
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_allownum(2);
      ConfigurationManagement.setAccess_order(aCO0);
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Login login0 = new Login();
      UserManagement.setAccountIdCount((-2705));
      int[] intArray0 = new int[5];
      intArray0[0] = (-2705);
      intArray0[1] = 10;
      intArray0[2] = 50;
      intArray0[3] = 50;
      intArray0[4] = 2000000;
      ConfigurationManagement.setSubnetmaski(intArray0);
      UserManagement.addUserTXT((String) null, "conf/subnet_athena.conf", "configs/", '2');
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Login login0 = new Login();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      login0.do_initXML();
      // Undeclared exception!
      try { 
        login0.parse_console("exit");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
