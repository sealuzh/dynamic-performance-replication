/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 00:50:46 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FilterOutputStream;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.model.HttpRequestBody;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.RegexSelector;
import us.codecraft.webmagic.selector.ReplaceSelector;
import us.codecraft.webmagic.selector.Selector;
import us.codecraft.webmagic.selector.SmartContentSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,eg']:rEE]Y?$.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("[bg%,eg']:rEE]Y?$.", "[bg%,eg']:rEE]Y?$.");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      spider0.initComponent();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      
      // Undeclared exception!
      try { 
        spider2.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,g']:rEEpi]Y?$");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.sleep(3);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = ".html";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".html");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setSpiderListeners((List<SpiderListener>) null);
      String string1 = "0Kgb<Y0[8&,0Kbh3>s";
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector("0Kgb<Y0[8&,0Kbh3>s");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("xes=", "xes=");
      spider0.downloader(phantomJSDownloader0);
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = spider0.getAll((Collection<String>) set0);
      spider0.getAll((Collection<String>) list0);
      Spider spider1 = spider0.clearPipeline();
      spider1.getThreadAlive();
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("xes=", "xes=");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      ReplaceSelector replaceSelector0 = new ReplaceSelector("xes=", "");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "xes=";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      Spider spider3 = spider1.clearPipeline();
      Spider spider4 = spider3.thread(6);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider4.pipeline(consolePipeline0);
      spider1.getStatus();
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList0);
      List<String> list0 = orSelector0.selectList("");
      spider2.getAll((Collection<String>) list0);
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[2] = "";
      spider0.setSpawnUrl(true);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      spider1.thread((ExecutorService) null, 1);
      String string0 = "us.codecraft.webmagic.scheduler.PriorityScheduler";
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.scheduler.PriorityScheduler");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(1000);
      long long0 = spider1.getPageCount();
      assertEquals(0L, long0);
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("xes=", "xes=");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      spider2.setSpawnUrl(false);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider2.getAll((Collection<String>) linkedBlockingDeque0);
      spider0.clearPipeline();
      spider1.getThreadAlive();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,yg']:rgE]Y?$.");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      
      spider0.start();
      Page.fail();
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, spider0, "[bg%,yg']:rgE]Y?$.", 526);
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(526, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, false);
      // Undeclared exception!
      try { 
        spider0.setExecutorService(forkJoinPool0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "[bg%,eg']:rEE]Y?$.";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("q)e;2#])>WWG,<su");
      Spider spider0 = new Spider(simplePageProcessor0);
      List<Pipeline> list0 = null;
      spider0.setPipelines((List<Pipeline>) null);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.setSpawnUrl(false);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        spider1.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-30);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`A W");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      // Undeclared exception!
      try { 
        spider1.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_mN)w/7o$/0TE5mZ");
      Spider spider0 = new Spider(simplePageProcessor0);
      List<String> list0 = null;
      Json json0 = new Json((List<String>) null);
      Class<Pipeline> class0 = Pipeline.class;
      json0.toList(class0);
      spider0.setPipelines((List<Pipeline>) null);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor((-1460), (-1460), (-1L), timeUnit0, priorityBlockingQueue0, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Spider.Status.fromValue((-1693));
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = null;
      try {
        simplePageProcessor0 = new SimplePageProcessor((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Spider.Status.fromValue(0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      FilePipeline filePipeline0 = new FilePipeline();
      Request request0 = new Request();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("waitNewUrl - interrupted, error {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" ", "waitNewUrl - interrupted, error {}");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(0);
      Spider spider2 = spider1.downloader(phantomJSDownloader1);
      linkedList0.add(request0);
      spider2.setDownloader(phantomJSDownloader0);
      spider0.setScheduler(queueScheduler0);
      Request request1 = new Request();
      // Undeclared exception!
      try { 
        spider2.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,eg']:rEE]Y?$.");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.sleep((-939));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Request request0 = new Request();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("us.codecraft.webmagic.downloader.AbstractDownloader");
      Spider spider1 = spider0.addPipeline(filePipeline0);
      spider1.getScheduler();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader(",Iz?z%E\".L'8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#/\"6}p9");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("kvOPS*\n8:GHDg");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider1.setScheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider0.get("_cycle_tried_times");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider.Status.fromValue(3113);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      FilePipeline filePipeline0 = new FilePipeline("");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      Spider spider2 = spider1.addPipeline(filePipeline0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider3 = spider2.setSpiderListeners(linkedList0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider4 = spider3.startUrls(list0);
      Spider spider5 = spider4.pipeline(filePipeline0);
      // Undeclared exception!
      try { 
        spider5.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".html");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor(".html");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(".html", ".html");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.setExecutorService((ExecutorService) null);
      String string0 = "sX(fdg\"4Q";
      ReplaceSelector replaceSelector0 = new ReplaceSelector("].7l m6]", ".html");
      int int0 = 0;
      Spider spider2 = spider0.setUUID((String) null);
      Spider spider3 = spider2.setSpawnUrl(false);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<Request> list0 = spider3.getAll((Collection<String>) linkedBlockingDeque0);
      spider0.startRequest(list0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      // Undeclared exception!
      try { 
        replaceSelector0.select((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,yg']:rgE]Y?$.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("[bg%,yg']:rgE]Y?$.");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      Spider spider1 = spider0.setScheduler(duplicateRemovedScheduler0);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Spider.Status.fromValue(0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ResultItems{fields=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = new Spider(simplePageProcessor0);
      spider1.getThreadAlive();
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "xes=";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("xes=", "xes=");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider0.getCollectorPipeline();
      spider1.thread((ExecutorService) null, 1);
      PhantomJSDownloader phantomJSDownloader1 = null;
      try {
        phantomJSDownloader1 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Spider.Status.fromValue(0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      QueueScheduler queueScheduler0 = new QueueScheduler();
      FilePipeline filePipeline0 = new FilePipeline();
      Page.fail();
      String string0 = "us.codecraft.webmagic.selector.AndSelector";
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.setUUID("");
      Spider spider3 = spider2.scheduler((Scheduler) null);
      Spider spider4 = spider3.clearPipeline();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0, threadPoolExecutor_AbortPolicy0);
      // Undeclared exception!
      try { 
        spider4.thread((ExecutorService) scheduledThreadPoolExecutor0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("xes=", "xes=");
      Spider spider1 = spider0.setUUID("xes=");
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      spider2.setSpawnUrl(false);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider2.setExecutorService((ExecutorService) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("(SDXvcdghJZ;");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Request[] requestArray0 = new Request[0];
      FilePipeline filePipeline0 = new FilePipeline();
      boolean boolean0 = true;
      String string0 = "(?is)<script.*?>.*?</script>";
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("(?is)<script.*?>.*?</script>");
      String string1 = "11-g";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("waitNewUrl - interrupted, error {}");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.addRequest(requestArray0);
      Spider spider2 = spider1.downloader((Downloader) null);
      Spider spider3 = spider2.addPipeline(filePipeline0);
      Spider spider4 = spider3.scheduler(fileCacheQueueScheduler0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(?is)<script.*?>.*?</script>";
      spider1.getUUID();
      spider0.downloader((Downloader) null);
      stringArray0[1] = "(?is)<script.*?>.*?</script>";
      stringArray0[2] = "(?is)<script.*?>.*?</script>";
      // Undeclared exception!
      try { 
        spider4.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5);
      spider1.setExecutorService(forkJoinPool0);
      spider1.setScheduler((Scheduler) null);
      spider0.scheduler((Scheduler) null);
      FilePipeline filePipeline0 = new FilePipeline();
      spider1.addPipeline(filePipeline0);
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("xes=", "xes=");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider0.setScheduler(priorityScheduler0);
      Page page0 = Page.fail();
      spider2.extractAndAddRequests(page0, false);
      spider1.setUUID("xes=");
      spider0.initComponent();
      Request request0 = new Request("Spider is already running!");
      // Undeclared exception!
      try { 
        spider2.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = true;
      Spider spider1 = spider0.setExitWhenComplete(true);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider1.startUrls(linkedList0);
      int int0 = 0;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      MockThread mockThread0 = new MockThread(spider1, "");
      String string0 = "";
      linkedList0.add("");
      linkedList0.pollFirst();
      mockThread0.getUncaughtExceptionHandler();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "[bg%,eg']:rEE]Y?$.";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,eg']:rEE]Y?$.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.startRequest(linkedList0);
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,yg']:rgE]Y?$.");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page.fail();
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertNotNull(list0);
      
      Spider spider2 = spider1.clearPipeline();
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      Spider spider2 = spider1.thread((ExecutorService) null, 1);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider.create(simplePageProcessor0);
      Spider spider3 = spider0.addPipeline(jsonFilePipeline0);
      PriorityScheduler priorityScheduler1 = new PriorityScheduler();
      Spider spider4 = spider0.setScheduler(priorityScheduler1);
      spider4.uuid = "";
      Page page0 = Page.fail();
      spider3.extractAndAddRequests(page0, false);
      // Undeclared exception!
      try { 
        spider2.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      linkedList0.addFirst(jsonFilePipeline0);
      Spider spider1 = spider0.setPipelines(linkedList0);
      String[] stringArray0 = new String[3];
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        spider1.sleep((-1767));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        spider0.thread((-1693));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,g']:rEEpi]Y?$");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(5417);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = spider0.getAll((Collection<String>) set0);
      List<Locale.LanguageRange> list1 = spider0.getAll((Collection<String>) list0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags(list1, (Collection<String>) list0, locale_FilteringMode0);
      List<FilterOutputStream> list2 = new LinkedList<FilterOutputStream>();
      ReplaceSelector replaceSelector0 = new ReplaceSelector("a`N;yv:=i9NN", "xes=");
      spider1.close();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(md8ug6JbHBM*");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider1.setSpawnUrl(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "(md8ug6JbHBM*";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider.Status spider_Status0 = Spider.Status.fromValue(1);
      assertEquals(Spider.Status.Running, spider_Status0);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Request request0 = new Request();
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getStatus();
      Spider.Status spider_Status1 = spider0.getStatus();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider_Status1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("rM!`9,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.addPipeline(filePipeline0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider1.pipelines = (List<Pipeline>) linkedList0;
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector("VuM");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      boolean boolean0 = spider1.isSpawnUrl();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.getUUID();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()";
      stringArray0[2] = null;
      stringArray0[3] = "Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("xes=", "xes=");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = spider0.getAll((Collection<String>) set0);
      List<Locale.LanguageRange> list1 = spider0.getAll((Collection<String>) list0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list2 = Locale.filterTags(list1, (Collection<String>) list0, locale_FilteringMode0);
      spider0.getAll((Collection<String>) list2);
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      Spider spider3 = spider2.setSpawnUrl(false);
      spider3.getStartTime();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider2.getAll((Collection<String>) linkedBlockingDeque0);
      spider0.clearPipeline();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      // Undeclared exception!
      try { 
        spider1.sleep((-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,eg']:rEE]Y?$.");
      Spider spider0 = new Spider(simplePageProcessor0);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("uPi|M-");
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "uPi|M-");
      Spider spider2 = spider0.setDownloader(phantomJSDownloader0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(51);
      Spider spider3 = spider1.setExecutorService(forkJoinPool0);
      spider3.setExitWhenComplete(false);
      spider2.initComponent();
      assertFalse(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      spider0.thread(3);
      spider0.setEmptySleepTime(3);
      Spider spider2 = spider0.thread(3);
      spider2.pageProcessor = (PageProcessor) simplePageProcessor0;
      spider0.getSpiderListeners();
      spider2.start();
      Request[] requestArray0 = new Request[2];
      Request request0 = new Request("");
      requestArray0[0] = request0;
      Request request1 = new Request("_cycle_tried_times");
      requestArray0[1] = request1;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,eg']:rEE]Y?$.");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("%}Aq]u~", "%}Aq]u~");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Site site0 = simplePageProcessor0.getSite();
      spider2.site = site0;
      spider0.setExitWhenComplete(false);
      spider2.initComponent();
      spider2.getSpiderListeners();
      assertFalse(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=XUU(if6]@>nH|");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.scheduler(priorityScheduler0);
      spider0.getThreadAlive();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-1169), threadFactory0, threadPoolExecutor_DiscardPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.getUUID();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()");
      Spider spider1 = spider0.clearPipeline();
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[2] = null;
      stringArray0[2] = "Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()";
      // Undeclared exception!
      try { 
        spider1.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider.Status.fromValue(3113);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      FilePipeline filePipeline0 = new FilePipeline();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      spider0.getThreadAlive();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(5);
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, (-316));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 0;
      Spider.Status.fromValue(0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Spider.Status.fromValue(0);
      String[] stringArray0 = new String[23];
      QueueScheduler queueScheduler0 = new QueueScheduler();
      FilePipeline filePipeline0 = new FilePipeline();
      Request request0 = new Request();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("waitNewUrl - interrupted, error {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" ", "waitNewUrl - interrupted, error {}");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(0);
      Spider spider2 = spider1.downloader(phantomJSDownloader1);
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      spider3.setDownloader(phantomJSDownloader0);
      Spider spider4 = spider3.setExitWhenComplete(false);
      spider4.scheduler(queueScheduler0);
      spider4.initComponent();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      spider3.setExecutorService(scheduledThreadPoolExecutor0);
      assertFalse(spider3.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      int int0 = (-552);
      Spider.Status.fromValue((-552));
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = false;
      Spider spider1 = spider0.setExitWhenComplete(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      spider1.downloader(phantomJSDownloader0);
      Json json0 = new Json("VL");
      Class<Pipeline> class0 = Pipeline.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = new Spider(simplePageProcessor0);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      spider0.stop();
      Spider spider2 = spider0.setExitWhenComplete(true);
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      spider1.sleep(2483);
      long long0 = spider1.getPageCount();
      assertEquals(0L, long0);
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("?a\".jaEqc\"\"X^");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
      assertEquals(0L, spider0.getPageCount());
      
      spider0.getSite();
      spider0.getCollectorPipeline();
      Spider spider1 = Spider.create(simplePageProcessor0);
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.startRequest((List<Request>) null);
      Spider spider2 = spider1.setUUID("a");
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertNull(list0);
      
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      Spider spider4 = spider3.setSpawnUrl(true);
      Spider spider5 = spider4.thread(3);
      Spider spider6 = spider5.clearPipeline();
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("9*uNC*]wK!z");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setSpawnUrl(true);
      Request request0 = new Request();
      assertNull(request0.getMethod());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList1);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      spider1.setDownloader(phantomJSDownloader0);
      spider1.setScheduler((Scheduler) null);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".I*,@0kX82h&qhd+");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.clearPipeline();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList0);
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page.fail();
      spider0.setExitWhenComplete(false);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("queue_");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("queue_");
      Spider spider2 = spider1.addPipeline(jsonFilePipeline0);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1, forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, false);
      Spider spider3 = spider2.thread((ExecutorService) forkJoinPool0, 1);
      Spider spider4 = spider3.setUUID("waitNewUrl - interrupted, error {}");
      Request[] requestArray0 = new Request[9];
      Request request0 = new Request();
      requestArray0[0] = request0;
      Request request1 = request0.setMethod("threadNum should be more than one!");
      Request request2 = request1.addCookie("abs:href", "abs:href");
      requestArray0[1] = request2;
      Request request3 = request1.setBinaryContent(true);
      requestArray0[2] = request3;
      Request request4 = request0.setMethod("threadNum should be more than one!");
      requestArray0[3] = request4;
      Request request5 = request0.setUrl("waitNewUrl - interrupted, error {}");
      Request request6 = request5.setMethod("abs:href");
      Request request7 = request6.addCookie("", (String) null);
      requestArray0[4] = request7;
      Request request8 = request6.setBinaryContent(false);
      requestArray0[5] = request8;
      Request request9 = new Request();
      requestArray0[6] = request9;
      Request request10 = request2.setPriority(1);
      requestArray0[7] = request10;
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider0);
      requestArray0[8] = null;
      // Undeclared exception!
      try { 
        spider4.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("k&Ou)p");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      Spider spider2 = spider1.setPipelines((List<Pipeline>) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-47);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-36);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      spider2.clearPipeline();
      Spider spider3 = spider2.thread((ExecutorService) forkJoinPool0, 2212);
      Spider spider4 = spider3.thread(2);
      Spider spider5 = spider4.setExecutorService(forkJoinPool0);
      Spider spider6 = spider5.thread(2);
      spider6.setExecutorService(forkJoinPool0);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("xes=", "xes=");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      List<String> list0 = spider0.getAll((Collection<String>) set0);
      List<Locale.LanguageRange> list1 = spider0.getAll((Collection<String>) list0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list2 = Locale.filterTags(list1, (Collection<String>) list0, locale_FilteringMode0);
      spider0.getAll((Collection<String>) list2);
      spider1.close();
      spider1.getAll((Collection<String>) list0);
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      ExecutorService executorService0 = null;
      Spider spider2 = spider1.thread((ExecutorService) null, 1);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FilePipeline filePipeline0 = new FilePipeline();
      Downloader downloader0 = null;
      String string0 = "(?is)<script.*?>.*?</script>";
      String string1 = "11-g";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("waitNewUrl - interrupted, error {}");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("11-g");
      spider1.addPipeline(filePipeline0);
      spider0.start();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(?is)<script.*?>.*?</script>";
      spider0.getUUID();
      // Undeclared exception!
      try { 
        spider0.downloader((Downloader) null);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("W?a\".jaEqc\"\"^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("W?a\".jaEqc\"\"^");
      fileCacheQueueScheduler0.getDuplicateRemover();
      spider0.setScheduler(fileCacheQueueScheduler0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$VALUES");
      Spider spider0 = Spider.create(simplePageProcessor0);
      boolean boolean0 = false;
      Spider spider1 = spider0.setExitWhenComplete(false);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider1.addPipeline(resultItemsCollectorPipeline0);
      Spider spider3 = spider2.thread(1000);
      Spider spider4 = spider3.clearPipeline();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "$VALUES";
      stringArray0[1] = "$VALUES";
      stringArray0[2] = "$VALUES";
      // Undeclared exception!
      try { 
        spider4.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.runAsync();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      assertEquals(0L, spider0.getPageCount());
      
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider2 = spider1.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      // Undeclared exception!
      try { 
        spider2.setScheduler(queueScheduler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".html");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("Y4B8kX/^%?%");
      Spider spider0 = Spider.create(simplePageProcessor1);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.setPipelines(linkedList0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".html";
      stringArray0[1] = "";
      stringArray0[2] = ".html";
      stringArray0[3] = "Y4B8kX/^%?%";
      stringArray0[4] = "Y4B8kX/^%?%";
      stringArray0[5] = ".html";
      stringArray0[6] = ".html";
      Spider spider1 = spider0.setUUID(".html");
      Spider spider2 = spider0.thread(2212);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider2.pipeline(consolePipeline0);
      spider1.getStatus();
      LinkedList<Selector> linkedList1 = new LinkedList<Selector>();
      LinkedList<Selector> linkedList2 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList2);
      List<String> list0 = orSelector0.selectList("");
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) list0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getThreadAlive();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.clearPipeline();
      spider1.isExitWhenComplete();
      Request request0 = new Request();
      Spider spider2 = Spider.create(simplePageProcessor0);
      spider2.start();
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("/YFck");
      Spider spider0 = new Spider(simplePageProcessor1);
      spider0.getThreadAlive();
      Page page0 = Page.fail();
      Json json0 = page0.getJson();
      Class<Request> class0 = Request.class;
      json0.toList(class0);
      spider0.startRequest((List<Request>) null);
      Spider spider1 = Spider.create(simplePageProcessor1);
      // Undeclared exception!
      try { 
        spider1.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("xes=", "xes=");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      spider1.setSpawnUrl(false);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider0.getAll((Collection<String>) linkedBlockingDeque0);
      spider0.clearPipeline();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("waitNewUrl - interrupted, error {}");
      Spider spider3 = new Spider(simplePageProcessor1);
      spider3.setExecutorService((ExecutorService) null);
      spider2.sleep(28);
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor1);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.scheduler(priorityScheduler0);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xmIesQ");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("xmIesQ", "xmIesQ");
      spider0.downloader(phantomJSDownloader0);
      Spider spider1 = spider0.thread((ExecutorService) null, 1599);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Spider.Status.fromValue(0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      String[] stringArray0 = new String[23];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      QueueScheduler queueScheduler0 = new QueueScheduler();
      FilePipeline filePipeline0 = new FilePipeline();
      Request request0 = new Request();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("wi|f,Mg");
      Spider spider0 = new Spider(simplePageProcessor1);
      Spider spider1 = spider0.scheduler(queueScheduler0);
      Spider spider2 = spider1.setSpawnUrl(false);
      Spider spider3 = spider2.pipeline(filePipeline0);
      Spider spider4 = spider3.clearPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(" D ^L,()");
      Spider spider5 = spider4.setScheduler(fileCacheQueueScheduler0);
      // Undeclared exception!
      try { 
        spider5.get("-MZ^1&ych6");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("W?a\".jaEqc\"\"^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,yg']:rgE]Y?$.");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = Page.fail();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.startRequest((List<Request>) null);
      Spider spider1 = spider0.setUUID("Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()");
      spider1.getSpiderListeners();
      Spider spider2 = spider0.setSpiderListeners((List<SpiderListener>) null);
      assertTrue(spider2.isSpawnUrl());
      
      spider0.setSpawnUrl(false);
      Spider spider3 = spider0.thread(3);
      spider3.clearPipeline();
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setExecutorService((ExecutorService) null);
      Spider spider1 = spider0.thread((ExecutorService) null, 522);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,eg']:rEE]Y?$.");
      Spider spider0 = new Spider(simplePageProcessor0);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("xes=", "xes=");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      ExecutorService executorService0 = null;
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      ReplaceSelector replaceSelector0 = new ReplaceSelector("xes=", "sX(fdg\"4Q");
      spider2.setSpawnUrl(false);
      String string0 = "";
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<Request> list0 = spider2.getAll((Collection<String>) linkedBlockingDeque0);
      spider2.startRequest(list0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      // Undeclared exception!
      try { 
        replaceSelector0.select((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("LAlJxYc(0p $g&k");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setPipelines((List<Pipeline>) null);
      Spider spider2 = spider1.setSpawnUrl(false);
      // Undeclared exception!
      try { 
        spider2.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(10);
      spider0.thread(10);
      spider0.setExitWhenComplete(true);
      spider1.run();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.downloader.HttpClientDownloader", "us.codecraft.webmagic.downloader.HttpClientDownloader");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.downloader.HttpClientDownloader");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2613, threadFactory0);
      Spider spider1 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      Spider spider3 = spider2.setUUID("v(?cz6,Tkn)iYTN");
      Spider spider4 = spider3.setSpawnUrl(false);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("jHtEOT6t=z-b");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider5 = spider4.setScheduler(duplicateRemovedScheduler0);
      spider5.run();
      assertEquals(Spider.Status.Stopped, spider5.getStatus());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$9-)+,#k7U");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setUUID("$9-)+,#k7U");
      Page page0 = Page.fail();
      boolean boolean0 = true;
      Page page1 = page0.setSkip(true);
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "xes=";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("xes=", "xes=");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setUUID("xes=");
      ReplaceSelector replaceSelector0 = new ReplaceSelector("xes=", "sX(fdg\"4Q");
      spider2.setSpawnUrl(false);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<Request> list0 = spider2.getAll((Collection<String>) linkedBlockingDeque0);
      spider2.startRequest(list0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      // Undeclared exception!
      try { 
        replaceSelector0.select((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      spider0.thread(3);
      spider0.setEmptySleepTime(0);
      Spider spider2 = spider1.clearPipeline();
      spider2.pageProcessor = (PageProcessor) simplePageProcessor0;
      spider0.getSpiderListeners();
      spider2.start();
      Request[] requestArray0 = new Request[2];
      Request request0 = new Request("");
      requestArray0[0] = request0;
      Request request1 = new Request("_cycle_tried_times");
      requestArray0[1] = request1;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,eg']:rEE]Y?$.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[bg%,eg']:rEE]Y?$.";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "html";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("html");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3);
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()");
      Spider spider0 = new Spider(simplePageProcessor1);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,eg']:rEE]Y?$.");
      Spider.create(simplePageProcessor0);
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      Request request0 = new Request("[bg%,eg']:rEE]Y?$.");
      Request request1 = request0.setPriority(4457L);
      Request request2 = request1.setCharset("[bg%,eg']:rEE]Y?$.");
      // Undeclared exception!
      try { 
        spider1.onSuccess(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("cfHpToHYK?eB");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = true;
      Spider spider1 = spider0.setExitWhenComplete(true);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      spider1.startRequest(list0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Request[] requestArray0 = new Request[0];
      FilePipeline filePipeline0 = new FilePipeline();
      boolean boolean0 = true;
      String string0 = "(?is)<script.*?>.*?</script>";
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("(?is)<script.*?>.*?</script>");
      String string1 = "11-g";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("waitNewUrl - interrupted, error {}");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader((Downloader) null);
      Spider spider2 = spider1.downloader((Downloader) null);
      Spider spider3 = spider2.addPipeline(filePipeline0);
      Spider spider4 = spider3.scheduler(fileCacheQueueScheduler0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(?is)<script.*?>.*?</script>";
      spider1.getUUID();
      spider0.downloader((Downloader) null);
      stringArray0[1] = "(?is)<script.*?>.*?</script>";
      stringArray0[2] = "(?is)<script.*?>.*?</script>";
      // Undeclared exception!
      try { 
        spider4.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      String[] stringArray0 = new String[3];
      int int0 = 2212;
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      LinkedList<Selector> linkedList1 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList1);
      orSelector0.selectList("48^?");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xnU8zycQ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      MockThread.getDefaultUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2212, forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, false);
      spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("yes");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque0);
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) list0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[b1%,eg']:rEE]Y?$.");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2, threadPoolExecutor_CallerRunsPolicy0);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 2);
      Spider spider2 = spider1.setUUID("");
      spider2.getThreadAlive();
      spider2.getCollectorPipeline();
      Page page0 = new Page();
      Page page1 = page0.setSkip(true);
      // Undeclared exception!
      try { 
        spider2.extractAndAddRequests(page1, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertNull(list0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("allText");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.addPipeline(consolePipeline0);
      spider1.setEmptySleepTime((-147));
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,eg']:rEE]Y?$.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Scheduler scheduler0 = null;
      spider0.setScheduler((Scheduler) null);
      int int0 = 0;
      int int1 = (-190);
      long long0 = 2814L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-2552), threadFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.scheduler(priorityScheduler0);
      spider0.getThreadAlive();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(5);
      Spider spider1 = spider0.thread(5);
      Pipeline pipeline0 = null;
      Spider spider2 = spider1.pipeline((Pipeline) null);
      String string0 = ")Z)=iEj\\dcvDn_cS";
      spider2.setUUID(")Z)=iEjdcvDn_cS");
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("_#Xvji\")yR4YG");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[2];
      Request request0 = new Request();
      Request request1 = request0.setUrl("Init");
      requestArray0[0] = request1;
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      requestArray0[1] = null;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5);
      spider1.setExecutorService(forkJoinPool0);
      spider0.setExitWhenComplete(true);
      spider1.initComponent();
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "xes=";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("xes=", "xes=");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      Spider spider3 = spider2.setExitWhenComplete(false);
      spider3.thread((ExecutorService) null, 4);
      // Undeclared exception!
      try { 
        phantomJSDownloader0.download("xes=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("xes=", "xes=");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      Spider spider3 = spider2.setSpawnUrl(false);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider2.getAll((Collection<String>) linkedBlockingDeque0);
      spider0.clearPipeline();
      spider3.setDownloader(phantomJSDownloader0);
      Spider spider4 = spider3.setPipelines((List<Pipeline>) null);
      spider4.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.Spider";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_mN)w/7o$/0TE5mZ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Json json0 = new Json((List<String>) null);
      Class<Pipeline> class0 = Pipeline.class;
      json0.toList(class0);
      spider0.setPipelines((List<Pipeline>) null);
      int int0 = (-1460);
      long long0 = (-1L);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      json0.all();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      // Undeclared exception!
      try { 
        spider0.pipeline(consolePipeline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = new Spider(simplePageProcessor0);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      MockThread mockThread0 = new MockThread();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(3178, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, true);
      Spider spider2 = spider0.setExecutorService(forkJoinPool0);
      spider0.setSpawnUrl(false);
      spider1.stop();
      spider2.setExitWhenComplete(true);
      // Undeclared exception!
      try { 
        spider2.sleep((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,yg']:rgE]Y?$.");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("uPi|M-");
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.startRequest(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      spider2.setDownloader(phantomJSDownloader0);
      spider2.setExitWhenComplete(false);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("uPi|M-");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      Spider spider3 = spider1.scheduler(duplicateRemovedScheduler0);
      spider3.initComponent();
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'T`>eF");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("[bg%,yg']:rgE]Y?$.", "[bg%,yg']:rgE]Y?$.");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      spider0.initComponent();
      spider2.setExecutorService((ExecutorService) null);
      Request request0 = new Request();
      Request request1 = request0.addHeader("", "'T`>eF");
      // Undeclared exception!
      try { 
        spider0.onError(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.startRequest((List<Request>) null);
      Spider spider1 = spider0.setUUID("Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()");
      spider1.getSpiderListeners();
      spider0.setSpiderListeners((List<SpiderListener>) null);
      Spider spider2 = Spider.create(simplePageProcessor0);
      assertTrue(spider2.isSpawnUrl());
      
      spider0.setSpawnUrl(false);
      Spider spider3 = spider0.thread(3);
      spider3.clearPipeline();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()");
      spider3.pipeline(jsonFilePipeline0);
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "xes=";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("xes=", "xes=");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      spider2.setExitWhenComplete(false);
      spider0.setUUID("xes=");
      // Undeclared exception!
      try { 
        phantomJSDownloader0.download("xes=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,g']:rEEpi]Y?$");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider0.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.runAsync();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("xes=", "xes=");
      Spider spider1 = spider0.clearPipeline();
      spider1.setDownloader(phantomJSDownloader0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      Spider spider2 = spider1.clearPipeline();
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.setScheduler(priorityScheduler0);
      Collection<String> collection0 = null;
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.runAsync();
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      FilePipeline filePipeline0 = new FilePipeline();
      // Undeclared exception!
      try { 
        spider1.addPipeline(filePipeline0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,eg']:rEE]Y?$.");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.isExitWhenComplete();
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor1);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      Spider spider1 = spider0.addPipeline((Pipeline) null);
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(42);
      Spider spider2 = spider0.setUUID("");
      spider0.destroyWhenExit = false;
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider3 = spider2.setScheduler(queueScheduler0);
      assertEquals(Spider.Status.Init, spider3.getStatus());
      
      spider1.run();
      spider1.getStatus();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Request request0 = new Request();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("hl(");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(875, 875, 5, timeUnit0, priorityBlockingQueue0, threadFactory0);
      spider0.executorService = (ExecutorService) threadPoolExecutor0;
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      spider0.getThreadAlive();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      spider1.setScheduler(fileCacheQueueScheduler0);
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider1.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Request[] requestArray0 = new Request[0];
      FilePipeline filePipeline0 = new FilePipeline();
      boolean boolean0 = true;
      String string0 = "(?is)<script.*?>.*?</script>";
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("(?is)<script.*?>.*?</script>");
      String string1 = "11-g";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("waitNewUrl - interrupted, error {}");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.addRequest(requestArray0);
      Spider spider2 = spider1.downloader((Downloader) null);
      Spider spider3 = spider2.addPipeline(filePipeline0);
      Spider spider4 = spider3.scheduler(fileCacheQueueScheduler0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(?is)<script.*?>.*?</script>";
      stringArray0[1] = "(?is)<script.*?>.*?</script>";
      stringArray0[2] = "(?is)<script.*?>.*?</script>";
      // Undeclared exception!
      try { 
        spider4.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,eg']:rEE]Y?$.");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor1);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) null, (-536));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.startRequest(linkedList0);
      // Undeclared exception!
      try { 
        spider0.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,eg']:rEE]Y?$.");
      Spider spider0 = null;
      try {
        spider0 = new Spider((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider.Status spider_Status0 = Spider.Status.Running;
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("--pN+fwFYC6.:T");
      spider0.addPipeline(jsonFilePipeline0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      spider1.thread((ExecutorService) null, 1);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Spider.Status.fromValue(0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string0 = "";
      Spider spider1 = spider0.setUUID("");
      // Undeclared exception!
      try { 
        spider1.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      Spider spider2 = spider1.thread((ExecutorService) null, 1);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      String string0 = ".bty /l\"vle";
      // Undeclared exception!
      try { 
        spider2.get("waitNewUrl - interrupted, error {}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "select text error! ";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("select text error! ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      LinkedBlockingQueue<JsonFilePipeline> linkedBlockingQueue0 = new LinkedBlockingQueue<JsonFilePipeline>();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>(linkedBlockingQueue0);
      spider1.setPipelines(linkedList0);
      RegexSelector regexSelector0 = null;
      try {
        regexSelector0 = new RegexSelector("!3`^Xx");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.selector.RegexSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "hm";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("hm");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(28);
      spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 28);
      Spider.create(simplePageProcessor0);
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      // Undeclared exception!
      try { 
        smartContentSelector0.selectList((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.SmartContentSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.utils.MultiKeyMapBase");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(",pW5'_1_Pz-/&", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ",pW5'_1_Pz-/&";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = ",pW5'_1_Pz-/&";
      stringArray0[4] = ",pW5'_1_Pz-/&";
      stringArray0[5] = "us.codecraft.webmagic.utils.MultiKeyMapBase";
      stringArray0[6] = "";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,eg']:rEE]Y?$.");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[3];
      Request request0 = new Request("Stopped");
      requestArray0[0] = request0;
      Request request1 = request0.addHeader("uPi|M-", "JI /]ZCh<bLU=D9");
      requestArray0[1] = request1;
      Request request2 = request0.setCharset("/");
      requestArray0[2] = request2;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".I*,@0kX82h&qhd+");
      Spider.create(simplePageProcessor0);
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getThreadAlive();
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("46AH~Ox");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(125);
      Spider spider2 = spider1.setExitWhenComplete(false);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider2.setPipelines(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("xes=", "xes=");
      spider0.downloader(phantomJSDownloader0);
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      Spider spider1 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.addPipeline(filePipeline0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.setScheduler(priorityScheduler0);
      Page.fail();
      spider0.extractAndAddRequests((Page) null, false);
      spider1.setUUID("xes=");
      spider0.initComponent();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,eg']:rEE]Y?$.");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.destroyWhenExit = false;
      spider0.isExitWhenComplete();
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider0.get("_cycle_tried_times");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[~nmV~@");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getStatus();
      Spider.Status spider_Status0 = spider0.getStatus();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("kvOPS*\n8:GHDg");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.clearPipeline();
      Spider spider1 = spider0.setExitWhenComplete(false);
      Downloader downloader0 = null;
      String[] stringArray0 = new String[5];
      spider0.checkIfRunning();
      stringArray0[0] = "9AnL1v4j!w8);J";
      stringArray0[2] = "kvOPS*\n8:GHDg";
      stringArray0[3] = "kvOPS*\n8:GHDg";
      stringArray0[4] = "kvOPS*\n8:GHDg";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor1);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("xes=", "xes=");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertTrue(spider1.isSpawnUrl());
      
      Locale locale0 = Locale.TAIWAN;
      locale0.getUnicodeLocaleKeys();
      Spider spider2 = spider1.setSpawnUrl(false);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      List<SpiderListener> list0 = new LinkedList<SpiderListener>();
      spider2.setSpiderListeners(list0);
      assertFalse(spider1.isSpawnUrl());
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider is already running!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      Spider spider2 = spider1.setExitWhenComplete(false);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider2.pipeline(multiPagePipeline0);
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("b");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.setUUID("b");
      boolean boolean0 = spider1.isSpawnUrl();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((-436));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.startRequest((List<Request>) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider3 = spider2.scheduler(duplicateRemovedScheduler0);
      Spider spider4 = spider3.setScheduler(fileCacheQueueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider5 = spider4.downloader(phantomJSDownloader0);
      spider5.getUUID();
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("", "");
      Spider spider6 = spider5.downloader(phantomJSDownloader1);
      spider6.checkIfRunning();
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = null;
      Request[] requestArray0 = new Request[1];
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider6);
      requestArray0[0] = null;
      // Undeclared exception!
      try { 
        spider6.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      FilePipeline filePipeline0 = new FilePipeline();
      Request request0 = new Request();
      spider0.clearPipeline();
      spider0.getStartTime();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("xes=", "xes=");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider2.getAll((Collection<String>) linkedBlockingDeque0);
      spider0.clearPipeline();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider3 = spider2.setExecutorService((ExecutorService) null);
      spider3.setSpawnUrl(false);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("xes=");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      spider0.scheduler(duplicateRemovedScheduler0);
      spider1.getScheduler();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        spider0.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("W?a\".jaEqc\"\"^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("W?a\".jaEqc\"\"^", "W?a\".jaEqc\"\"^");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,yg']:rgE]Y?$.");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = Page.fail();
      spider0.extractAndAddRequests(page0, false);
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      spider1.stop();
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,eg']:rEE]Y?$.");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("[bg%,eg']:rEE]Y?$.", "[bg%,eg']:rEE]Y?$.");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setUUID("[bg%,eg']:rEE]Y?$.");
      spider2.setSpawnUrl(false);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider0.setScheduler(priorityScheduler0);
      Spider spider4 = spider3.downloader(phantomJSDownloader0);
      Spider spider5 = spider4.scheduler(priorityScheduler0);
      Spider spider6 = spider5.thread((ExecutorService) null, 5);
      spider6.getAll((Collection<String>) linkedBlockingDeque0);
      spider0.clearPipeline();
      spider1.getThreadAlive();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider2 = spider1.addPipeline(filePipeline0);
      Spider spider3 = spider2.setExitWhenComplete(true);
      spider3.setUUID("waitNewUrl - interrupted, error {}");
      ExecutorService executorService0 = null;
      int int0 = 5000;
      List<String> list0 = null;
      Json json0 = new Json((List<String>) null);
      // Undeclared exception!
      try { 
        json0.removePadding("waitNewUrl - interrupted, error {}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // us/codecraft/xsoup/XTokenQueue
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("W?a\".jaEqc\"\"^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("W?a\".jaEqc\"\"^", "W?a\".jaEqc\"\"^");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.initComponent();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[bg%,yg']:rgE]Y?$.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread((ExecutorService) null, 2751);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "threadNum should be more than one!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("threadNum should be more than one!", "threadNum should be more than one!");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      ExecutorService executorService0 = null;
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      // Undeclared exception!
      try { 
        spider2.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Init");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(1802);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider2 = spider1.startUrls(list0);
      assertTrue(spider2.isSpawnUrl());
      
      Spider spider3 = spider2.setSpawnUrl(false);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider4 = spider3.setPipelines(linkedList0);
      Spider spider5 = spider4.setUUID("");
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1802, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
      spider5.thread((ExecutorService) scheduledThreadPoolExecutor0, 30000);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider.Status.fromValue((-552));
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      spider1.thread(30000);
      String string1 = "omit-xml-declaration";
      Request request0 = new Request();
      Request request1 = request0.setUrl("^DG:\"E<%vd$");
      HttpRequestBody httpRequestBody0 = new HttpRequestBody();
      request0.setRequestBody(httpRequestBody0);
      request0.getExtras();
      Request request2 = request1.setExtras((Map<String, Object>) null);
      Request request3 = request2.addHeader("", "^DG:\"E<%vd$");
      Request request4 = request3.setBinaryContent(true);
      // Undeclared exception!
      try { 
        spider1.onSuccess(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("xes=", "xes=");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = spider0.getAll((Collection<String>) set0);
      List<Locale.LanguageRange> list1 = spider0.getAll((Collection<String>) list0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list2 = Locale.filterTags(list1, (Collection<String>) list0, locale_FilteringMode0);
      spider0.getAll((Collection<String>) list2);
      Spider spider2 = spider1.setSpawnUrl(false);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      spider0.scheduler(fileCacheQueueScheduler0);
      spider2.isExitWhenComplete();
      int int0 = (-127);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-127), threadPoolExecutor_DiscardOldestPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(86);
      Spider spider2 = spider0.thread((ExecutorService) forkJoinPool0, 2582);
      Spider spider3 = spider2.setExecutorService(forkJoinPool0);
      spider1.setExitWhenComplete(true);
      spider3.initComponent();
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("xes=", "xes=");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.setExecutorService((ExecutorService) null);
      String[] stringArray0 = new String[8];
      String string0 = "omit-xml-declaration";
      stringArray0[0] = "omit-xml-declaration";
      stringArray0[1] = "xes=";
      stringArray0[2] = "xes=";
      stringArray0[3] = "xes=";
      stringArray0[4] = "xes=";
      stringArray0[5] = "xes=";
      stringArray0[6] = "#79[xrz%>ECOmE";
      stringArray0[7] = "xes=";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.thread((ExecutorService) null, 1805);
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList0);
      List<String> list0 = orSelector0.selectList("");
      Spider spider1 = spider0.startUrls(list0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Spider.Status.fromValue(0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      FilePipeline filePipeline0 = new FilePipeline();
      Request request0 = new Request();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("waitNewUrl - interrupted, error {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" ", "waitNewUrl - interrupted, error {}");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(0);
      Spider spider2 = spider1.downloader(phantomJSDownloader1);
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      assertTrue(spider3.isExitWhenComplete());
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "waitNewUrl - interrupted, error {}");
      spider3.setExitWhenComplete(false);
      spider2.sleep(0);
      assertFalse(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor1);
      spider0.getThreadAlive();
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      Spider.Status spider_Status0 = spider0.getStatus();
      assertEquals(Spider.Status.Init, spider_Status0);
      
      spider0.getSite();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.startRequest((List<Request>) null);
      Spider spider2 = spider1.setUUID("a");
      spider1.getSpiderListeners();
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      assertTrue(spider3.isExitWhenComplete());
      
      Spider spider4 = spider2.setExitWhenComplete(false);
      spider4.setSpiderListeners((List<SpiderListener>) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("K|XDR.Z");
      spider2.setScheduler(fileCacheQueueScheduler0);
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor1);
      spider0.getThreadAlive();
      spider0.getSpiderListeners();
      spider0.setSpiderListeners((List<SpiderListener>) null);
      Spider.create(simplePageProcessor1);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider0);
      // Undeclared exception!
      try { 
        spider0.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.pipeline(resultItemsCollectorPipeline0);
      spider0.getSpiderListeners();
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      ResultItems resultItems0 = new ResultItems();
      Spider spider3 = spider0.pipeline(resultItemsCollectorPipeline0);
      resultItemsCollectorPipeline0.process(resultItems0, spider3);
      spider2.setSpawnUrl(false);
      spider1.getCollectorPipeline();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2288, threadPoolExecutor_AbortPolicy0);
      Spider spider1 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      Spider spider2 = spider1.setSpawnUrl(true);
      spider0.stop();
      Spider spider3 = spider2.setExitWhenComplete(true);
      // Undeclared exception!
      try { 
        spider3.sleep((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }
}
