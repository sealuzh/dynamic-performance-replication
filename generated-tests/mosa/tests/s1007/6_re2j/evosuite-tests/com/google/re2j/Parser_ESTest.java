/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:52:58 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Regexp regexp0 = Parser.parse("missing closing )", 43);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Regexp regexp0 = Parser.parse("com.google.re2j.PatternSyntaxException", 8);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:blank:]", (-664));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Regexp regexp0 = Parser.parse("%n", (-631));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        Parser.parse("[:vD-", 289);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:vD-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:blank:]", (-4411));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:blank:]", 45);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        Parser.parse(" EQ?Diha%[e;yO", 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[e;yO`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        Parser.parse("Rg%CZPMSe^(1?E=\"Q", 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `Rg%CZPMSe^(1?E=\"Q`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Regexp regexp0 = Parser.parse("P'pW", 1149);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0001EE}!KH3iy", 85);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      try { 
        Parser.parse("(?(?P<", (-3044));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Regexp regexp0 = Parser.parse("WD*L~{u|", 64);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      try { 
        Parser.parse("[:3'pW", 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:3'pW`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        Parser.parse("(?P<(?P<", 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      try { 
        Parser.parse(")(?;3s55}_em#u%VoP9", (-284));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", 92);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", 3424);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      try { 
        Parser.parse("+SZxMhCo:?4FIu=nm", 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Regexp regexp0 = Parser.parse("h|nJ^C7 C5FG'Mj,6!W", 12);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Regexp regexp0 = Parser.parse(".^-?6s4X0~@^U", 85);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pp_=g3>Lv3~~@a", 984);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Regexp regexp0 = Parser.parse("C", (-4411));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pp_=g3>Lv3~~@a", 2417);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      try { 
        Parser.parse("v/8V*Iy(z+RN8", (-4187));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `v/8V*Iy(z+RN8`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Regexp regexp0 = Parser.parse("A%]zX|qfme1Ch#>pk?", 12);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      try { 
        Parser.parse("Qas~N5/&PW{\"lYC(", 149);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `Qas~N5/&PW{\"lYC(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Fo E/$^_}4^", 97);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Regexp regexp0 = Parser.parse("com.google.re2j.Parser$Stack", 125);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Ppp_=g3>Lv3~~@a", (-2376));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Regexp regexp0 = Parser.parse("`EtAKN0WlL AJYcb", 1605);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Regexp regexp0 = Parser.parse("h|nJ^C1 C5FG'Mj,6!W", 13);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      try { 
        Parser.parse("(?(?P<", 1225);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      try { 
        Parser.parse("(?", 2529);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|}", 36);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|{>^;", 92);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-m:$)", 125);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Regexp regexp0 = Parser.parse("'V<WEn${", (-760));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Regexp regexp0 = Parser.parse("ZrYfE^{/", 33);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      try { 
        Parser.parse("1^W-&v[", 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:^]", 93);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      try { 
        Parser.parse("-(m~?", 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `-(m~?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Regexp regexp0 = Parser.parse("WFI|@E\fk?nbg<R:oZ~", 2529);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Regexp regexp0 = Parser.parse("a:\n1", 3136);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("a:\n1", 3136);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Regexp regexp0 = Parser.parse("P'pW", 11513);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Regexp regexp0 = Parser.parse("s", (-43));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      try { 
        Parser.parse("[:[:r3'pW", 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:[:r3'pW`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[::]", (-1424));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Regexp regexp0 = Parser.parse("~{i0Tc@ch_l8EAhw~X", 73);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        Parser.parse("m]|x.]n.A.AFP)", 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Regexp regexp0 = Parser.parse("B", (-539));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Regexp regexp0 = Parser.parse("<Lc3@ND/0AFz+.( \")w", 2529);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0003", 112);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Regexp regexp0 = Parser.parse("`\u0006+oQ3r$", 1052);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000PB", 2556);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Regexp regexp0 = Parser.parse("qw{3F{/opSKbd", 92);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Regexp regexp0 = Parser.parse("s", 124);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x{", 1049);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Regexp regexp0 = Parser.parse("", 80);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        Parser.parse("Lg(j|zcX by/+2|Yc", 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `Lg(j|zcX by/+2|Yc`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Regexp regexp0 = Parser.parse("=P[I]+;E*r", (-1424));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Regexp regexp0 = Parser.parse("t\ta3fmvP}V\"Nq5", 129);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      try { 
        Parser.parse("Y[(EN", (-2096));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[(EN`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Regexp regexp0 = Parser.parse("=P[I]+;E*r", 125);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x", 3193);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        Parser.parse("[:%-K", 984);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:%-K`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Regexp regexp0 = Parser.parse("=Eyq0dZmd+\u0011WF`\"", 41);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|y[I]+%qI", 2341);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\r", (-539));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Regexp regexp0 = Parser.parse("z", (-2736));
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("z", string0);
      
      Regexp regexp1 = Parser.parse("Syriac", (-1148));
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Regexp regexp0 = Parser.parse("P^]", 1760);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Regexp regexp0 = Parser.parse("90a`~D'ni", 593);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PPrG", 968);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Regexp regexp0 = Parser.parse("$BvaE,-@e:@@2d5}xW", (-1424));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Foe{98zLlukQ!.*/DF>", 52);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x#x^OVCMx=x^", 12);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", 80);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", 112);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Regexp regexp0 = Parser.parse("0|#", 2529);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|", 12348);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      try { 
        Parser.parse("(?i:", 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      try { 
        Parser.parse("7M(?UJI-`tf9Nc", 2404);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?UJ`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      try { 
        Parser.parse(".+*?()|[]{}^$", 1992);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `+*?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      try { 
        Parser.parse("[:-'x00-x{1FF}]", 77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `:-'`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Regexp regexp0 = Parser.parse("`\u0006ioQ3r*$", 2529);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Regexp regexp0 = Parser.parse("S#w;%[ ]dmS^a.2", 1025);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[0];
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 9, 9);
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      
      try { 
        Parser.parse(";/^L[]R{", 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[]R{`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?s:.)", 2529);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      try { 
        Parser.parse("O`S6#y[-", 2824);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        Parser.parse("O`S6#y[-", 2793);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Q", 80);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Regexp regexp0 = Parser.parse("4 3#v*t-p $gh#3j$\"", 4);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PPrG", 10749);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0005PPrG", 10725);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^x00-x{10FFFF}", (-4075));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Regexp regexp0 = Parser.parse("J|<|xl", 3120);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      try { 
        Parser.parse("cptk[\u0007!*Xe<<@X?B:", (-3887));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[\u0007!*Xe<<@X?B:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:x00-x{10FFFF?]", (-539));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:x00-x{10FFFF}]", 92);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:x00-x{1FFFF}]", (-524));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      String string0 = "\\PM\\x{1wTFF}]";
      int int0 = (-2359);
      Regexp regexp0 = Parser.parse("PMx{1wTFF}]", (-2359));
      assertNotNull(regexp0);
      
      boolean boolean0 = regexp0.equals(string0);
      assertFalse(boolean0);
      
      regexpArray0[0] = regexp0;
      int int1 = 12308;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2359
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[x0W-x{10FFFF}]", (-524));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Regexp regexp0 = Parser.parse("vQ=#.]0-ke6`4", (-360));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-360), (-360));
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:x00-x{1FFbFF}]", (-511));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Regexp regexp0 = Parser.parse("2GRe{7,", 57);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Regexp regexp0 = Parser.parse("e.a,cf|Enu7Ny", 1);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Regexp regexp0 = Parser.parse("nGRe{7", (-860));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Regexp regexp0 = Parser.parse(",\u0001", (-583));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Regexp regexp0 = Parser.parse("g{01", 992);
      assertNotNull(regexp0);
  }
}
