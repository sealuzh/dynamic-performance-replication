/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 19:52:55 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Properties;
import java.util.Vector;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassCache;
import weka.core.ClassDiscovery;
import weka.core.EuclideanDistance;
import weka.core.FindWithCapabilities;
import weka.core.Instances;
import weka.core.ManhattanDistance;
import weka.core.OptionHandlerJavadoc;
import weka.core.ProtectedProperties;
import weka.core.SingleIndex;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("Lpv@Y8sxPB5a|ldn");
      Vector<String> vector1 = findWithCapabilities1.getMisses();
      findWithCapabilities1.m_Misses = vector1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities1.m_Misses.containsAll(vector0);
      findWithCapabilities0.getMisses();
      Vector<String> vector2 = findWithCapabilities1.m_Misses;
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.setHandler(findWithCapabilities0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.enableAllClasses();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      boolean boolean0 = findWithCapabilities1.m_GenericPropertiesCreator;
      String[] stringArray1 = findWithCapabilities2.getOptions();
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      vector0.add("weka/core/Capabilities.props");
      vector0.trimToSize();
      LinkedList<OptionHandlerJavadoc> linkedList0 = new LinkedList<OptionHandlerJavadoc>();
      Predicate<OptionHandlerJavadoc> predicate0 = Predicate.isEqual((Object) findWithCapabilities0.m_NotCapabilities);
      predicate0.negate();
      vector0.containsAll(linkedList0);
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.getMisses();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      String[] stringArray0 = new String[9];
      capabilities0.enableAllClasses();
      String[] stringArray1 = findWithCapabilities1.getOptions();
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities1.getHandler();
      FindWithCapabilities.main(stringArray1);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      boolean boolean0 = findWithCapabilities1.m_GenericPropertiesCreator;
      String[] stringArray2 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray2);
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      FindWithCapabilities.main(stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex(",0");
      findWithCapabilities1.getMisses();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.setHandler(findWithCapabilities0);
      findWithCapabilities2.setFilename(",!4");
      findWithCapabilities2.setHandler(findWithCapabilities0);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      findWithCapabilities3.setHandler(findWithCapabilities1);
      findWithCapabilities3.setHandler(findWithCapabilities2);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities5.setHandler(findWithCapabilities3);
      findWithCapabilities5.setFilename(",!4");
      Capabilities capabilities0 = findWithCapabilities5.m_Capabilities;
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      String[] stringArray0 = new String[5];
      HashSet<Capabilities.Capability> hashSet0 = capabilities1.m_Capabilities;
      capabilities1.m_Capabilities = hashSet0;
      stringArray0[1] = ",0";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.setCapabilities(capabilities1);
      Capabilities capabilities2 = new Capabilities(findWithCapabilities0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "u|2L*^q)OeE`3iL");
      findWithCapabilities0.m_Handler = null;
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("[*l^-gl8J9^1:Qhp");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/index.html");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7AL(tqNdj?XWlnO<+sC");
      findWithCapabilities0.setClassIndex("\t");
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      boolean boolean0 = findWithCapabilities0.m_GenericPropertiesCreator;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getNotCapabilities();
      boolean boolean1 = findWithCapabilities0.m_GenericPropertiesCreator;
      findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities1.isEnabled(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities2.enableNot(capabilities_Capability1);
      boolean boolean0 = findWithCapabilities1.m_GenericPropertiesCreator;
      String[] stringArray1 = findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities2.getNotCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities1.setCapabilities(capabilities1);
      findWithCapabilities0.setCapabilities(capabilities1);
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.m_Superclass = "V=V]%";
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V=V]%");
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      boolean boolean0 = findWithCapabilities0.m_GenericPropertiesCreator;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      findWithCapabilities0.m_Filename = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setCapabilities(capabilities1);
      assertEquals(1, capabilities1.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Misses = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      vector0.add("nM2");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      findWithCapabilities0.setFilename("kexSG}>r%:f+-Md#c");
      HashSet<EuclideanDistance> hashSet0 = new HashSet<EuclideanDistance>();
      vector0.containsAll(hashSet0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "kexSG}>r%:f+-Md#c";
      vector0.add("kexSG}>r%:f+-Md#c");
      stringArray0[1] = "kexSG}>r%:f+-Md#c";
      stringArray0[2] = "kexSG}>r%:f+-Md#c";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setClassIndex("kexSG}>r%:f+-Md#c");
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNumeric((-369));
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      boolean boolean0 = findWithCapabilities0.m_GenericPropertiesCreator;
      String[] stringArray1 = findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      capabilities0.getOtherCapabilities();
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      findWithCapabilities1.setCapabilities(capabilities0);
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.disableNot(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.removeAllElements();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W~");
      findWithCapabilities1.isEnabled(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities1.setFilename("oN9n6thII02HV[cCL");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      boolean boolean0 = findWithCapabilities1.m_GenericPropertiesCreator;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities2.find();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities2.setNotCapabilities(capabilities0);
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.setCapabilities(capabilities1);
      try { 
        findWithCapabilities4.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.m_Superclass = "V=V]%";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.add("V=V]%");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability2);
      vector0.removeAllElements();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V=V]%");
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities1.setFilename("{jDMCf*]pTE#@M_ZA");
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability3);
      boolean boolean0 = findWithCapabilities0.m_GenericPropertiesCreator;
      String[] stringArray1 = findWithCapabilities1.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setCapabilities(capabilities1);
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      findWithCapabilities0.m_Superclass = "V=V]%";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.add("-nominal-class");
      findWithCapabilities0.m_Misses = vector0;
      vector0.add("ErY_r");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability2);
      vector0.removeAllElements();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "V=V]%");
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.setHandler(findWithCapabilities0);
      findWithCapabilities0.setFilename("V=V]%");
      findWithCapabilities0.enableNot(capabilities_Capability2);
      boolean boolean0 = findWithCapabilities0.m_GenericPropertiesCreator;
      Locale.getISOCountries();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = null;
      findWithCapabilities1.getFilename();
      String[] stringArray1 = new String[5];
      stringArray1[0] = "V=V]%";
      stringArray1[1] = "-nominal-class";
      stringArray1[2] = "-nominal-class";
      stringArray1[3] = "V=V]%";
      stringArray1[4] = "ErY_r";
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex(",$");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",$");
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getMisses();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex(",");
      findWithCapabilities0.getMisses();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities3);
      findWithCapabilities0.setFilename(",$");
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities4.m_Handler;
      findWithCapabilities4.setHandler(findWithCapabilities2);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",";
      stringArray0[1] = ",$";
      stringArray0[2] = ",";
      stringArray0[3] = ",$";
      stringArray0[4] = ",$";
      findWithCapabilities0.setHandler(findWithCapabilities4);
      findWithCapabilities0.setFilename(",");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities2.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      boolean boolean0 = findWithCapabilities1.m_GenericPropertiesCreator;
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities6.setFilename("; a{uv^G]XZ8A:i[[W");
      assertEquals("; a{uv^G]XZ8A:i[[W", findWithCapabilities6.getFilename());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex(",$");
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getMisses();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex(",");
      findWithCapabilities1.getMisses();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.setHandler(findWithCapabilities0);
      findWithCapabilities3.setHandler(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities1.isEnabledNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities5.getMisses();
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities4.getNotCapabilities();
      findWithCapabilities1.listOptions();
      findWithCapabilities5.setFilename(",$");
      assertEquals(",$", findWithCapabilities5.getFilename());
      
      findWithCapabilities6.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      boolean boolean0 = findWithCapabilities7.m_GenericPropertiesCreator;
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities6.getOptions();
      findWithCapabilities6.getHandler();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.isEnabled(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities1.isEnabled(capabilities_Capability2);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities2.disableNot(capabilities_Capability3);
      vector0.removeAllElements();
      findWithCapabilities2.isEnabled(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities2);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities3.listOptions();
      findWithCapabilities3.setFilename("V=V]%");
      findWithCapabilities1.enableNot(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      boolean boolean0 = findWithCapabilities4.m_GenericPropertiesCreator;
      findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities6.getHandler();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities4.setFilename(":\n");
      assertEquals(":\n", findWithCapabilities4.getFilename());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "V=V]%";
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      vector0.removeAllElements();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.isEnabled(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities2);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.listOptions();
      findWithCapabilities0.setFilename("e");
      findWithCapabilities2.enableNot(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      boolean boolean0 = findWithCapabilities4.m_GenericPropertiesCreator;
      String[] stringArray0 = findWithCapabilities1.getOptions();
      findWithCapabilities2.getHandler();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.setFilename("u");
      assertEquals("u", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      findWithCapabilities0.m_Superclass = "V=V]%";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      vector0.removeAllElements();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "V=V]%");
      findWithCapabilities0.isEnabled((Capabilities.Capability) null);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.setFilename("V=V]%");
      findWithCapabilities1.enableNot(capabilities_Capability1);
      boolean boolean0 = findWithCapabilities1.m_GenericPropertiesCreator;
      Locale.getISOCountries();
      FindWithCapabilities findWithCapabilities2 = (FindWithCapabilities)findWithCapabilities0.m_Handler;
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        TestInstances.forCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "V=V]%";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability2);
      vector0.removeAllElements();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "V=V]%");
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.setFilename("V=V]%");
      findWithCapabilities1.enableNot(capabilities_Capability2);
      boolean boolean0 = findWithCapabilities1.m_GenericPropertiesCreator;
      Locale.getISOCountries();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities1.m_Handler;
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        TestInstances.forCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "V=V]%");
      findWithCapabilities0.m_Superclass = "V=V]%";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities1.m_GenericPropertiesCreator = true;
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      findWithCapabilities2.isEnabledNot(capabilities_Capability0);
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities1.m_Filename = "measureMax_points_visited";
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities3.isEnabledNot(capabilities_Capability1);
      findWithCapabilities1.getHandler();
      assertEquals("measureMax_points_visited", findWithCapabilities1.getFilename());
      
      FindWithCapabilities.main(stringArray1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities3.enableNot(capabilities_Capability2);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability3);
      findWithCapabilities2.getMisses();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getMatches();
      findWithCapabilities2.disable(capabilities_Capability0);
      String[] stringArray2 = findWithCapabilities0.getOptions();
      assertEquals(17, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "V=V]%";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities2);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.setHandler(findWithCapabilities2);
      findWithCapabilities1.setFilename("Cannot instantiate '");
      findWithCapabilities4.setHandler(findWithCapabilities3);
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities4.enable(capabilities_Capability0);
      boolean boolean0 = findWithCapabilities4.m_GenericPropertiesCreator;
      findWithCapabilities2.getOptions();
      boolean boolean1 = findWithCapabilities2.m_GenericPropertiesCreator;
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities5.getHandler();
      findWithCapabilities0.find();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities6.getNotCapabilities();
      findWithCapabilities1.listOptions();
      assertEquals("Cannot instantiate '", findWithCapabilities1.getFilename());
      
      String[] stringArray1 = findWithCapabilities4.getOptions();
      assertEquals(12, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.isEnabledNot((Capabilities.Capability) null);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities2.enableNot(capabilities_Capability1);
      findWithCapabilities1.getMisses();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      findWithCapabilities1.disable(capabilities_Capability0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "V=V]%";
      stringArray0[1] = "V=V]%";
      stringArray0[2] = "V=V]%";
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities3 = (FindWithCapabilities)findWithCapabilities1.m_Handler;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      findWithCapabilities2.setHandler(findWithCapabilities0);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities2.isEnabledNot(capabilities_Capability2);
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities5.isEnabledNot(capabilities_Capability3);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities4.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      try { 
        findWithCapabilities6.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "+1? ";
      stringArray0[2] = "-numeric-atts";
      stringArray0[3] = "nominal-class";
      stringArray0[4] = "-unary-class";
      stringArray0[5] = ".,k,0)u}";
      stringArray0[6] = "3x5 {~bC8K//)`828b.";
      stringArray0[7] = "o3x3HzU:y(mk)~W{";
      stringArray0[8] = ";&/&";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setFilename("o3x3HzU:y(mk)~W{");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.disable(capabilities_Capability1);
      assertNotSame(findWithCapabilities1, findWithCapabilities2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.setClassIndex("64(.6~$Y|tIC%X`$");
      SingleIndex singleIndex0 = new SingleIndex("Sk4p~,Vn");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getHandler();
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      singleIndex0.m_IndexString = " ";
      singleIndex0.getRevision();
      TestInstances.arrayToList(stringArray0);
      findWithCapabilities0.setClassIndex("-1");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.handles(capabilities_Capability0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.getClassIndex();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("\tSuppresses printing in the console.");
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("\tSuppresses printing in the console.");
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Random.setNextRandom(99);
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Matches = vector0;
      vector0.retainAll(findWithCapabilities0.m_Matches);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%UM");
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.handles(capabilities_Capability1);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getMatches();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "zsk^JlXJS";
      stringArray0[1] = "";
      stringArray0[2] = "";
      findWithCapabilities0.m_Matches.add("i_73Xr}$*");
      stringArray0[3] = "-string-atts";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.enableNot((Capabilities.Capability) null);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex(", ");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities1.disable(capabilities_Capability0);
      findWithCapabilities0.setFilename("~RaN");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setFilename("nqFeuz| `u");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.find();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte) (-53);
      byteArray0[8] = (byte) (-53);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities1.isEnabledNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities4.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "TX1m+jtD=pX,UnKo";
      stringArray0[1] = "gxvNyn6pL,bYxFIp'";
      stringArray0[2] = ";P`a8MxoFOm(]p3V";
      stringArray0[3] = "b;N}_$";
      stringArray0[4] = "_yv=/#bu";
      stringArray0[5] = "-date-class";
      stringArray0[6] = "X5#j 4S/fS.";
      FindWithCapabilities.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Unable to find Description file in package archive!";
      stringArray0[1] = "[Weka] loading package ";
      stringArray0[2] = "-not-binary-atts";
      stringArray0[3] = "";
      stringArray0[4] = "45$w1g(QnI,d";
      stringArray0[5] = "i9~pFh1aE[~$";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      stringArray0[6] = "\"Hdhe_9";
      stringArray0[7] = "-not-binary-class";
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      Capabilities capabilities2 = capabilities1.getClassCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities2;
      stringArray0[8] = "Q>i";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "V=V]%");
      findWithCapabilities0.m_Superclass = "V=V]%";
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      Predicate<OptionHandlerJavadoc> predicate0 = Predicate.isEqual((Object) evoSuiteFile0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<OptionHandlerJavadoc> predicate2 = predicate0.and(predicate1);
      Predicate<OptionHandlerJavadoc> predicate3 = predicate2.negate();
      Predicate<OptionHandlerJavadoc> predicate4 = predicate3.or(predicate0);
      predicate4.negate();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      LinkedList<ManhattanDistance> linkedList0 = new LinkedList<ManhattanDistance>();
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities5.setHandler(findWithCapabilities2);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities4.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities2.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities2.getOptions();
      findWithCapabilities2.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities7 = (FindWithCapabilities)findWithCapabilities5.m_Handler;
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      capabilities1.createMessage("7xaz]r#L");
      capabilities1.setMinimumNumberInstances((-2183));
      Capabilities capabilities2 = capabilities1.getClassCapabilities();
      capabilities2.disableAllAttributes();
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities1.find();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities1.enable(capabilities_Capability1);
      findWithCapabilities1.getOptions();
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.enable(capabilities_Capability1);
      assertNotSame(findWithCapabilities0, findWithCapabilities1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.m_NumRelationalDate = (-2514);
      Capabilities capabilities0 = Capabilities.forInstances(instances0, true);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.getHandler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".class");
      Capabilities capabilities1 = new Capabilities((CapabilitiesHandler) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      capabilities1.disableDependency(capabilities_Capability0);
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.setNotCapabilities(capabilities1);
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      singleIndex0.m_IndexString = "weka/core/Capabilities.props";
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getMatches();
      FindWithCapabilities.main(testInstances1.DEFAULT_WORDS);
      findWithCapabilities0.setFilename(".class");
      try { 
        findWithCapabilities0.setOptions(testInstances1.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getOptions();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "not-no-class";
      stringArray0[1] = "-numeric-atts";
      stringArray0[2] = "relational-date";
      stringArray0[3] = "HB*qnG";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "";
      findWithCapabilities0.setClassIndex("");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      findWithCapabilities0.m_Handler = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      findWithCapabilities0.enable(capabilities_Capability0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.find();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      String string0 = findWithCapabilities0.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "F3#>(");
      stringArray0[0] = "-not-unary-atts";
      boolean boolean0 = true;
      boolean boolean1 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      stringArray0[1] = ",>j>}_kS=%n][TEN";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      singleIndex0.toString();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.m_RelationalClassFormat;
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      capabilities1.toSource("weka/core/Capabilities.props", (-1902));
      capabilities1.enableAll();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      capabilities1.setOwner(findWithCapabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      findWithCapabilities0.setNotCapabilities(capabilities1);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.disable(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "jV]%F";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setOptions(stringArray0);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      MockException mockException0 = new MockException("HB*qnG");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.isEnabledNot(capabilities_Capability1);
      Capabilities capabilities1 = findWithCapabilities1.m_NotCapabilities;
      findWithCapabilities0.setNotCapabilities(capabilities1);
      findWithCapabilities1.disable(capabilities_Capability1);
      findWithCapabilities1.disableNot((Capabilities.Capability) null);
      assertNotSame(findWithCapabilities1, findWithCapabilities0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "jV]%F";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setOptions(stringArray0);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      MockException mockException0 = new MockException("jV]%F");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("|yr9");
      findWithCapabilities0.find();
      findWithCapabilities0.setClassIndex("|yr9");
      findWithCapabilities2.getMisses();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.setHandler(findWithCapabilities3);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities1.isEnabledNot(capabilities_Capability2);
      assertEquals("|yr9", findWithCapabilities1.getFilename());
      
      findWithCapabilities4.getHandler();
      FindWithCapabilities.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
      
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      String[] stringArray0 = new String[2];
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      Capabilities capabilities2 = capabilities1.getClassCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities2);
      MockFile mockFile0 = new MockFile("8034");
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.listOptions();
      Capabilities capabilities3 = findWithCapabilities0.getCapabilities();
      String[] stringArray1 = new String[1];
      capabilities3.enableAllClassDependencies();
      stringArray1[0] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.m_NotCapabilities = capabilities2;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("D/gG:hFX");
      findWithCapabilities0.setNotCapabilities(capabilities3);
      Capabilities capabilities4 = findWithCapabilities0.getCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      assertTrue(vector0.isEmpty());
      
      findWithCapabilities0.setCapabilities(capabilities3);
      assertSame(capabilities3, capabilities4);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "V=V]%";
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "V=V]%");
      Predicate<OptionHandlerJavadoc> predicate0 = Predicate.isEqual((Object) findWithCapabilities1);
      predicate0.negate();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getMisses();
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "V=V]%");
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities1.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities3.enable(capabilities_Capability1);
      findWithCapabilities3.getOptions();
      findWithCapabilities3.setClassIndex("7l=G5y\"kHU5\"BH");
      findWithCapabilities3.enable(capabilities_Capability0);
      String string0 = findWithCapabilities3.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "V=V]%";
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      vector0.add(" class that didn't match the criteria:\n");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "V=V]%");
      Predicate<OptionHandlerJavadoc> predicate0 = Predicate.isEqual((Object) findWithCapabilities1);
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      predicate0.test(optionHandlerJavadoc0);
      predicate0.negate();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getMisses();
      LinkedList<ManhattanDistance> linkedList0 = new LinkedList<ManhattanDistance>();
      vector0.containsAll(linkedList0);
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities3.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities1.find();
      findWithCapabilities3.disableNot(capabilities_Capability0);
      findWithCapabilities4.getRevision();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities6.getNotCapabilities();
      String[] stringArray0 = new String[0];
      try { 
        findWithCapabilities5.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "V=V]%";
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "V=V]%");
      Predicate<OptionHandlerJavadoc> predicate0 = Predicate.isEqual((Object) findWithCapabilities1);
      predicate0.negate();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getMisses();
      LinkedList<ManhattanDistance> linkedList0 = new LinkedList<ManhattanDistance>();
      vector0.containsAll(linkedList0);
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities3.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities3.isEnabledNot(capabilities_Capability1);
      findWithCapabilities3.getHandler();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities5.setFilename("{ expected at beginning of enumeration");
      // Undeclared exception!
      try { 
        findWithCapabilities5.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      singleIndex0.m_SelectedIndex = 87;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setNotCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.listOptions();
      Capabilities capabilities1 = findWithCapabilities0.m_NotCapabilities;
      capabilities1.toString();
      Capabilities capabilities2 = capabilities1.getClassCapabilities();
      capabilities2.getOtherCapabilities();
      findWithCapabilities0.setCapabilities(capabilities2);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.setFilename("\tMust handle unray classes.");
      capabilities1.disableAll();
      capabilities2.m_InstancesTest = false;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "Capabilities: []\nDependencies: []\nmin # Instance: 1\n";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability3);
      findWithCapabilities0.getHandler();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.getOptions();
      assertEquals("\tMust handle unray classes.", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      vector0.trimToSize();
      LinkedList<OptionHandlerJavadoc> linkedList0 = new LinkedList<OptionHandlerJavadoc>();
      Predicate<OptionHandlerJavadoc> predicate0 = Predicate.isEqual((Object) findWithCapabilities0.m_NotCapabilities);
      predicate0.negate();
      vector0.containsAll(linkedList0);
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.getMisses();
      Vector<String> vector1 = findWithCapabilities0.m_Misses;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      String[] stringArray0 = new String[9];
      capabilities0.enableAllClasses();
      findWithCapabilities1.getOptions();
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities1.isEnabledNot(capabilities_Capability1);
      findWithCapabilities1.getHandler();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities1.getOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities1.enable(capabilities_Capability2);
      assertNotSame(capabilities_Capability2, capabilities_Capability0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      vector0.trimToSize();
      LinkedList<OptionHandlerJavadoc> linkedList0 = new LinkedList<OptionHandlerJavadoc>();
      Predicate<OptionHandlerJavadoc> predicate0 = Predicate.isEqual((Object) findWithCapabilities0.m_NotCapabilities);
      predicate0.negate();
      vector0.containsAll(linkedList0);
      findWithCapabilities0.m_Packages = vector0;
      Vector<String> vector1 = findWithCapabilities0.m_Misses;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      FindWithCapabilities.main((String[]) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities1.handles(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      findWithCapabilities0.getNotCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.isEnabled(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      try { 
        findWithCapabilities3.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "V=V]%";
      String[] stringArray0 = new String[9];
      stringArray0[0] = "V=V]%";
      stringArray0[1] = "V=V]%";
      stringArray0[2] = "V=V]%";
      stringArray0[3] = "HB?*qn^";
      stringArray0[4] = "V=V]%";
      stringArray0[5] = "V=V]%";
      stringArray0[6] = "-not-numeric-class";
      stringArray0[7] = "V=V]%";
      stringArray0[8] = "V=V]%";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "jV]%F";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setOptions(stringArray0);
      assertEquals(4, stringArray0.length);
      
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      capabilities0.m_AttributeTest = false;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "V6F,";
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.handles(capabilities_Capability1);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      assertEquals(5, stringArray1.length);
      
      boolean boolean0 = findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      assertTrue(boolean0);
      
      findWithCapabilities0.getHandler();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "jV]%F";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setOptions(stringArray0);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      capabilities0.m_AttributeTest = false;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "V6F,";
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      assertTrue(vector0.isEmpty());
      
      findWithCapabilities1.isEnabledNot(capabilities_Capability0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      assertEquals(5, stringArray1.length);
      
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      FindWithCapabilities.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      String[] stringArray0 = new String[0];
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      Properties properties0 = Capabilities.PROPERTIES;
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("-not-numeric-class", vector0, protectedProperties1);
      capabilities0.test(attribute0);
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities1.isEnabledNot(capabilities_Capability2);
      findWithCapabilities0.getHandler();
      FindWithCapabilities.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getNotCapabilities();
      Properties properties0 = Capabilities.PROPERTIES;
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("-not-numeric-class", vector0, protectedProperties1);
      findWithCapabilities1.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.isEnabledNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.getHandler();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-not-numeric-class";
      stringArray0[1] = "-not-numeric-class";
      stringArray0[2] = "string";
      stringArray0[3] = "numeric";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.find();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      vector0.trimToSize();
      LinkedList<OptionHandlerJavadoc> linkedList0 = new LinkedList<OptionHandlerJavadoc>();
      Predicate<OptionHandlerJavadoc> predicate0 = Predicate.isEqual((Object) null);
      predicate0.negate();
      Vector<String> vector1 = new Vector<String>();
      vector1.containsAll(vector0);
      findWithCapabilities0.getMisses();
      Vector<String> vector2 = findWithCapabilities0.getMisses();
      assertEquals(0, vector2.capacity());
      
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setHandler(findWithCapabilities1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":\n";
      stringArray0[1] = ":\n";
      stringArray0[2] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.isEnabledNot(capabilities_Capability1);
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      FindWithCapabilities.main(stringArray1);
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("-not-string-atts");
      findWithCapabilities0.getMatches();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMatches();
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities0.find();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-not-string-atts";
      stringArray0[1] = "measureMaxCoordsPerPoint";
      stringArray0[2] = "-not-string-atts";
      stringArray0[3] = "-not-string-atts";
      stringArray0[4] = "-not-string-atts";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "DFqIZ/TWODMl";
      stringArray0[1] = "|``ya/NI:*5";
      stringArray0[2] = "\"!oy";
      stringArray0[3] = "%gi#6%L(,=\"2zUM{D=";
      stringArray0[4] = "-not-no-class";
      stringArray0[5] = "DFqIZ/TWODMl";
      stringArray0[6] = "zwv";
      stringArray0[7] = "Xw{AhG%@}[iYP";
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("'aAV*J=a");
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_ATTRIBUTES;
      vector0.add("'aAV*J=a");
      findWithCapabilities0.disableNot(capabilities_Capability2);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getFilename();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5(eA2VAZ),}");
      capabilities0.setMinimumNumberInstances((-1124));
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      capabilities1.enableAllClasses();
      findWithCapabilities0.setCapabilities(capabilities1);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      String string0 = findWithCapabilities0.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.addElement(":sL");
      findWithCapabilities0.m_Packages = vector0;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_ATTRIBUTES;
      vector0.add(":sL");
      findWithCapabilities0.disableNot(capabilities_Capability2);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "jV]%8";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities3.getMatches();
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("'aAV*J=a");
      findWithCapabilities0.getMatches();
      findWithCapabilities0.find();
      findWithCapabilities0.getMatches();
      SingleIndex singleIndex0 = new SingleIndex();
      Vector<String> vector0 = findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.m_Packages = vector0;
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      vector0.add("weka/core/Capabilities.props");
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      assertEquals("'aAV*J=a", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      String[] stringArray0 = new String[0];
      findWithCapabilities0.m_Filename = "o3x3HzU:y(mk)~W{";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ";YJ\u0000M8SF;wE!?";
      stringArray0[1] = "\tMust handle unary attributes.";
      stringArray0[2] = "#^J^";
      stringArray0[3] = "-not-nominal-atts";
      stringArray0[4] = "~w($$";
      stringArray0[5] = "";
      stringArray0[6] = "ucsh\"F\"";
      FindWithCapabilities.main(stringArray0);
      try { 
        findWithCapabilities0.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main((String[]) null);
      Random.setNextRandom((-1797));
      String string0 = findWithCapabilities0.getFilename();
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.getMatches();
      assertFalse(vector0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"position\" has unknown type");
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.disable(capabilities_Capability0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qEg@P$'U:q");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability2);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.listOptions();
      Random.setNextRandom(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.m_Superclass = "keyword @relation expected";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "-1";
      stringArray0[5] = "";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setClassIndex("-1");
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability3);
      findWithCapabilities0.disableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability4);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex(":\n");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.disable((Capabilities.Capability) null);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray1 = new String[5];
      stringArray1[0] = "^?-cc:RtnDk";
      stringArray1[2] = "^?-cc:RtnDk";
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getRelationalClassFormat();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities1.disable(capabilities_Capability1);
      try { 
        Capabilities.forInstances((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = Locale.getISOLanguages();
      findWithCapabilities0.find();
      String string0 = findWithCapabilities0.m_Superclass;
      findWithCapabilities0.getFilename();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      assertNotSame(capabilities1, capabilities0);
      
      boolean boolean0 = findWithCapabilities0.handles(capabilities_Capability0);
      assertTrue(boolean0);
      
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      boolean boolean1 = findWithCapabilities0.handles(capabilities_Capability1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex(":\n");
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      capabilities1.createMessage("7xaz]r#L");
      capabilities1.setMinimumNumberInstances((-2162));
      Capabilities capabilities2 = capabilities1.getClassCapabilities();
      capabilities2.disableAllAttributes();
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities1.find();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      try { 
        findWithCapabilities1.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      vector0.trimToSize();
      LinkedList<OptionHandlerJavadoc> linkedList0 = new LinkedList<OptionHandlerJavadoc>();
      Predicate<OptionHandlerJavadoc> predicate0 = Predicate.isEqual((Object) findWithCapabilities0.m_NotCapabilities);
      predicate0.negate();
      vector0.containsAll(linkedList0);
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities1.isEnabledNot(capabilities_Capability0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities1.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      FindWithCapabilities.main(stringArray1);
      assertEquals(11, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disable(capabilities_Capability0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8034";
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities1.m_Matches = vector0;
      findWithCapabilities1.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.disable(capabilities_Capability2);
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      boolean boolean0 = findWithCapabilities1.handles(capabilities_Capability2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.listOptions();
      Capabilities capabilities1 = findWithCapabilities0.m_NotCapabilities;
      capabilities1.toString();
      Capabilities capabilities2 = capabilities1.getClassCapabilities();
      Capabilities capabilities3 = capabilities2.getOtherCapabilities();
      findWithCapabilities0.setCapabilities(capabilities2);
      findWithCapabilities0.setFilename("\tMust handle unray classes.");
      capabilities1.disableAll();
      capabilities2.m_InstancesTest = false;
      capabilities3.m_Test = false;
      capabilities1.getRevision();
      findWithCapabilities0.m_NotCapabilities = capabilities3;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setClassIndex("unary-atts");
      findWithCapabilities0.getMisses();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disable(capabilities_Capability0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      stringArray0[4] = "8034";
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities1.setCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getFilename();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.getHandler();
      assertNull(capabilitiesHandler0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "jV]%F";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setOptions(stringArray0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Superclass = "V6F,";
      MockException mockException0 = new MockException("the");
      mockException0.toString();
      mockException0.getLocalizedMessage();
      capabilities0.m_FailReason = (Exception) mockException0;
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "^?-cc:RtnDk";
      stringArray0[1] = "^?-cc:RtnDk";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setFilename("^?-cc:RtnDk");
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.listOptions();
      findWithCapabilities2.setClassIndex("^?-cc:RtnDk");
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.disableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities3.handles(capabilities_Capability2);
      findWithCapabilities1.getHandler();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability3);
      assertEquals("^?-cc:RtnDk", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disable(capabilities_Capability0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      stringArray0[4] = "8034";
      stringArray0[5] = "8034";
      stringArray0[6] = "8034";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      assertFalse(capabilities0.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities1.m_Matches = vector0;
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      assertEquals("", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.m_Superclass = "@";
      findWithCapabilities0.m_Filename = "%3YKYK{8Y0&nS";
      ClassDiscovery.m_ClassCache = null;
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.listOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "xOWf!";
      stringArray0[1] = "%3YKYK{8Y0&nS";
      stringArray0[2] = "%3YKYK{8Y0&nS";
      stringArray0[3] = "%3YKYK{8Y0&nS";
      stringArray0[4] = "@";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities1.setClassIndex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.disable(capabilities_Capability2);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Misses = vector0;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.disable(capabilities_Capability1);
      capabilities0.setMinimumNumberInstances(1884);
      findWithCapabilities1.disable(capabilities_Capability0);
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      Capabilities capabilities2 = capabilities1.getOtherCapabilities();
      findWithCapabilities0.setCapabilities(capabilities2);
      findWithCapabilities0.setClassIndex("o3x3HzU:y(mk)~W{");
      findWithCapabilities0.getHandler();
      findWithCapabilities0.listOptions();
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.setFilename("o3x3HzU:y(mk)~W{");
      singleIndex0.m_Upper = 1884;
      findWithCapabilities0.setClassIndex("o3x3HzU:y(mk)~W{");
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability3);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities2);
      testInstances0.m_NumNumeric = 1884;
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.getMisses();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex("-not-date-class");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("");
      Capabilities capabilities0 = findWithCapabilities2.m_NotCapabilities;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      capabilities0.or(capabilities1);
      findWithCapabilities1.setNotCapabilities(capabilities0);
      Capabilities capabilities2 = findWithCapabilities1.getNotCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities2);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getFilename();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.handles(capabilities_Capability1);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      String[] stringArray0 = new String[2];
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getFilename();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      String[] stringArray0 = new String[5];
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Misses = vector0;
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "-relational-atts";
      stringArray0[3] = "'e]fov=6'i}";
      stringArray0[4] = "tK[>1<vKsG";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.createMessage("");
      capabilities0.setMinimumNumberInstances((-2162));
      capabilities0.m_InstancesTest = true;
      capabilities0.disableAllAttributes();
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.find();
      findWithCapabilities0.disableNot(capabilities_Capability1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka/core/Capabilities.props";
      findWithCapabilities0.getRevision();
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      capabilities0.m_Owner = (CapabilitiesHandler) findWithCapabilities0;
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "L0T";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "e_(VK'tO:$6}4mY.";
      stringArray0[5] = "Xz)CG@l(:Boi ";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.setClassIndex("8034");
      vector0.add("!xPruKvUCC)");
      findWithCapabilities0.m_Superclass = "8034";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      stringArray0[4] = "8034";
      stringArray0[5] = "lA(0h/";
      stringArray0[6] = "8034";
      stringArray0[7] = "8034";
      stringArray0[8] = "weka/core/Capabilities.props";
      try { 
        Capabilities.main(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No file provided with option '-file'!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Packages = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ";@&KP|4Pc";
      stringArray0[1] = "bOo";
      stringArray0[2] = "Xq_>HpxZ(6#T`e&Ie,";
      stringArray0[3] = "\tMust handle binary attributes.";
      stringArray0[4] = "h{bu";
      stringArray0[5] = "4K(&d";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setFilename("");
      findWithCapabilities0.setCapabilities(capabilities0);
      assertEquals(1, capabilities0.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      vector0.trimToSize();
      LinkedList<OptionHandlerJavadoc> linkedList0 = new LinkedList<OptionHandlerJavadoc>();
      Predicate<OptionHandlerJavadoc> predicate0 = Predicate.isEqual((Object) findWithCapabilities0.m_NotCapabilities);
      Predicate<OptionHandlerJavadoc> predicate1 = predicate0.negate();
      linkedList0.removeIf(predicate1);
      vector0.containsAll(linkedList0);
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities1.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities1.isEnabledNot(capabilities_Capability0);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.getHandler();
      assertNotSame(capabilitiesHandler0, findWithCapabilities0);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      capabilities0.m_MissingValuesTest = false;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.listOptions();
      capabilities0.dependencies();
      capabilities0.createMessage("false");
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.find();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.listOptions();
      capabilities0.getRevision();
      findWithCapabilities0.getMatches();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
