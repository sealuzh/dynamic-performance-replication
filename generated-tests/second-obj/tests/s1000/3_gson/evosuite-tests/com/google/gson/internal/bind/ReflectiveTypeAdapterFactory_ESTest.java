/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:07:25 GMT 2018
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.JsonNull;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.ObjectConstructor;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import java.io.FilterInputStream;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.util.Enumeration;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReflectiveTypeAdapterFactory_ESTest extends ReflectiveTypeAdapterFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<String> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<String>((ObjectConstructor<String>) null, hashMap0);
      reflectiveTypeAdapterFactory_Adapter0.toJson("{2Zs-\"c5yv^E");
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      String string0 = reflectiveTypeAdapterFactory_Adapter0.fromJsonTree(jsonNull0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Object object0 = new Object();
      gson1.toJson(object0);
      Class<FilterInputStream> class0 = FilterInputStream.class;
      FilterInputStream filterInputStream0 = gson1.fromJson("{}", class0);
      Class<ReflectiveTypeAdapterFactory.BoundField> class1 = ReflectiveTypeAdapterFactory.BoundField.class;
      TypeToken.get(class1);
      Excluder excluder0 = Excluder.DEFAULT;
      Excluder excluder1 = excluder0.excludeFieldsWithoutExposeAnnotation();
      gson1.toJson((Object) filterInputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        excluder1.excludeField((Field) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Excluder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Field field0 = null;
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      gson0.toJson((Object) excluder1);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 92);
      String string0 = gson0.toJson((Object) pushbackInputStream0);
      Class<FilterInputStream> class0 = FilterInputStream.class;
      Class<FilterInputStream> class1 = FilterInputStream.class;
      gson0.fromJson("", class1);
      Class<FilterInputStream> class2 = FilterInputStream.class;
      // Undeclared exception!
      try { 
        gson0.fromJson(string0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to invoke public java.io.InputStream() with no args
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$3", e);
      }
  }
}
