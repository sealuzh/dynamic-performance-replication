/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:09:20 GMT 2018
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.serializer.DateCodec;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import java.io.CharArrayWriter;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateCodec_ESTest extends DateCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("GMT");
      Class<Long> class0 = Long.TYPE;
      Integer integer0 = new Integer(19);
      Object object0 = dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) defaultJSONParser0, (Object) integer0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", object0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      String[] stringArray0 = new String[1];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5r%6|$bqgFujpck$|hb`");
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) null, (Object) "5r%6|$bqgFujpck$|hb`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5r%6|$bqgFujpck$|hb`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      String[] stringArray0 = new String[17];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5r|$bqgFujpck$|hb`");
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) null, (Object) simplePropertyPreFilter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse error
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Class<Float> class0 = Float.TYPE;
      Integer integer0 = new Integer((-1));
      dateCodec0.write(jSONSerializer0, integer0, jSONSerializer0, class0, (-1));
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Byte> class0 = Byte.TYPE;
      Object object0 = new Object();
      Method method0 = dateCodec0.cast((DefaultJSONParser) null, (Type) class0, object0, (Object) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Class<Float> class0 = Float.TYPE;
      dateCodec0.write(jSONSerializer0, (Object) null, (Object) null, class0, (-1));
      assertEquals(1041, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      String[] stringArray0 = new String[17];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("I5r|$bqgFujpck$|hb`");
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) null, (Object) "I5r|$bqgFujpck$|hb`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"I5r|$bqgFujpck$|hb`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(125);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(charArrayWriter0, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Class<Double> class0 = Double.TYPE;
      Byte byte0 = new Byte((byte)31);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MockDate mockDate0 = new MockDate((byte)31, 125, (byte)31);
      dateCodec0.write(jSONSerializer0, mockDate0, serializerFeature0, class0, 45);
      assertEquals(72, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(charArrayWriter0, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Class<Double> class0 = Double.TYPE;
      Byte byte0 = new Byte((byte) (-1));
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      dateCodec0.write(jSONSerializer0, byte0, mockThaiBuddhistDate0, class0, (byte) (-1));
      assertEquals(26, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(161);
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(charArrayWriter0, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Class<Double> class0 = Double.TYPE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(161, (byte)46, 161, (byte)46, (byte)46);
      dateCodec0.write(jSONSerializer0, mockGregorianCalendar0, (Object) null, class0, 161);
      assertEquals(13, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0000-00-00";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0000-00-00");
      dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) "writeAsArrayNonContext", (Object) "0000-00-00");
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(jSONSerializer0.out, serializerFeatureArray0);
      JSONSerializer jSONSerializer1 = new JSONSerializer(serializeWriter0);
      Long long0 = new Long((byte)3);
      Class<Double> class0 = Double.TYPE;
      DateCodec dateCodec0 = DateCodec.instance;
      Short short0 = new Short((byte)3);
      dateCodec0.write(jSONSerializer1, short0, long0, class0, (byte)3);
      assertEquals(21, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(125);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(charArrayWriter0, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Class<Double> class0 = Double.TYPE;
      Byte byte0 = new Byte((byte) (-1));
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        dateCodec0.write(jSONSerializer0, byte0, mockThaiBuddhistDate0, class0, (byte) (-1));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.util.Date
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      String[] stringArray0 = new String[2];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      char[] charArray0 = new char[2];
      charArray0[1] = '/';
      charArray0[1] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Dg5E", '/');
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
      
      dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) "Dg5E", (Object) "");
      assertEquals(2, dateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      JSON.setDefaultTypeKey("0000-00-00T00:00:00");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5r%6|$bqgFujpck$|hb`");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5r%6|$bqgFujpck$|hb`");
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
      
      System.setCurrentTimeMillis(2);
      dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) null, (Object) "0000-00-00T00:00:00");
      assertEquals(2, dateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      String[] stringArray0 = new String[1];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("writeAsArrayNonContext");
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) "/Date(5r%6|$bgFujpck$|hb`", (Object) "/Date(5r%6|$bgFujpck$|hb`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/Date(5r%6|$bgFujpck$|hb`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "$syixphFQYxET fCw";
      stringArray0[1] = "/Date(0000-00-00T00:00:00)/";
      stringArray0[2] = "error parse false";
      stringArray0[3] = "(>B_l'J]m&";
      stringArray0[4] = "deserialize inet adress error";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(>B_l'J]m&", 1124075009);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Object object0 = new Object();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MockGregorianCalendar mockGregorianCalendar0 = dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) mockThaiBuddhistDate0, (Object) "/Date(0000-00-00T00:00:00)/");
      assertNull(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(125);
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(charArrayWriter0, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Class<Double> class0 = Double.TYPE;
      Integer integer0 = new Integer(1000);
      Long long0 = new Long(1000);
      dateCodec0.write(jSONSerializer0, long0, serializerFeature0, class0, 582);
      int int0 = Float.SIZE;
      Double double0 = new Double((-4819.8104135));
      // Undeclared exception!
      try { 
        dateCodec0.write(jSONSerializer0, serializerFeature0, double0, class0, 22);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : UseISO8601DateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "m";
      stringArray0[1] = "0000-00-00";
      stringArray0[2] = "~?!..kHB*`JlO5EC";
      stringArray0[3] = "0001-01-01t00:00:00+08:00";
      stringArray0[4] = "9}Q&Q$";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("m");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) mockHijrahDate0, (Object) "0001-01-01t00:00:00+08:00");
      System.setCurrentTimeMillis((-435L));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(161);
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(charArrayWriter0, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Class<Double> class0 = Double.TYPE;
      Byte byte0 = Byte.valueOf((byte)46);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      dateCodec0.write(jSONSerializer0, byte0, mockThaiBuddhistDate0, class0, (byte)46);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(161, (byte)46, 161, (byte)46, (byte)46);
      mockGregorianCalendar0.getWeekYear();
      dateCodec0.write(jSONSerializer0, mockGregorianCalendar0, (Object) null, class0, 161);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      dateCodec0.write(jSONSerializer0, (Object) null, date0, class0, 161);
      assertEquals(52, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      String[] stringArray0 = new String[2];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("writeAsArrayNonContext");
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) null, (Object) "writeAsArrayNonContext");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"writeAsArrayNonContext\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
