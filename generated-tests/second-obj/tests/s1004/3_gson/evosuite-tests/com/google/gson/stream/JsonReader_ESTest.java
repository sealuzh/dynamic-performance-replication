/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:36:46 GMT 2018
 */

package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectStreamConstants;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      String string0 = jsonReader0.toString();
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"W-0- ?G:!=|~Dqj");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"-0- ?G:!=|~Dqj");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.read();
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}D0,");
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N][X!P");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FALSE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 901);
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      jsonReader0.peeked = 901;
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 901);
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      pipedReader0.markSupported();
      jsonReader0.peeked = 901;
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = '%';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      StringReader stringReader0 = new StringReader("ED-p[,j]'6Q8]gOH");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = 'E';
      charArray0[2] = 'g';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StringReader stringReader0 = new StringReader("f$R.tX");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("20,");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      StringReader stringReader1 = new StringReader("vm>eh^Yod6e5Nr");
      stringReader1.mark(36);
      jsonReader0.peek();
      int int0 = jsonReader0.nextInt();
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"W-0- ?G:!=|~Dqj");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 17 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t|NbAvLg]");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/{aa9!sfv;}1e");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.ready();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      try { 
        jsonReader1.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("20,");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      String string0 = jsonReader0.nextString();
      assertEquals("20", string0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      jsonReader1.setLenient(false);
      assertFalse(jsonReader1.isLenient());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2");
      StringReader stringReader1 = new StringReader("2");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jsonReader0.skipValue();
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was END_DOCUMENT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("20,");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.nextLong();
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("20,");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " at line ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was NUMBER at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(false);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "20,";
      char[] charArray0 = new char[2];
      StringReader stringReader0 = new StringReader("20,");
      stringReader0.read(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" path ");
      StringReader stringReader1 = new StringReader(" path ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(false);
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("20,");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      StringReader stringReader1 = new StringReader("vm>eh^Yod6e5Nr");
      jsonReader0.peek();
      double double0 = jsonReader0.nextDouble();
      assertEquals(20.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("20,");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.getPath();
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      
      boolean boolean1 = jsonReader0.isLenient();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$VALUES");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[17];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Expected a long but was ");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[13];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FALSE");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was BOOLEAN at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FALSE");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was END_DOCUMENT at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("20,");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was NUMBER at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("20,");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.close();
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("FALSE");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      jsonReader1.setLenient(false);
      assertFalse(jsonReader1.isLenient());
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      jsonReader1.peeked = (-1060);
      assertFalse(jsonReader1.isLenient());
      
      boolean boolean1 = jsonReader0.isLenient();
      assertFalse(boolean1);
      assertFalse(jsonReader0.isLenient());
      assertNotSame(jsonReader0, jsonReader1);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertFalse(boolean1 == boolean0);
      
      jsonReader1.skipValue();
      assertFalse(jsonReader1.isLenient());
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      // Undeclared exception!
      try { 
        jsonReader1.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was BOOLEAN at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      String string0 = "\"W-0-?G:!=|~Dqj";
      StringReader stringReader0 = new StringReader("\"W-0-?G:!=|~Dqj");
      assertNotNull(stringReader0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FALSE");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("FALSE");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was BOOLEAN at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t|NbAvLg]");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = '5';
      charArray0[5] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'5', '5', '5', '5', '5', '5'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean1 = charArrayReader0.markSupported();
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'5', '5', '5', '5', '5', '5'}, charArray0);
      assertFalse(boolean1 == boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'5', '5', '5', '5', '5', '5'}, charArray0);
      assertNotNull(jsonReader0);
      
      int int0 = jsonReader0.doPeek();
      assertEquals(15, int0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'5', '5', '5', '5', '5', '5'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was NUMBER at line 1 column 7 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '\''}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '\''}, charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8Mk>^");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader1);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\'', '\''}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"W-0- ?G:!=|~Dqj");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = '/';
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      charArray0[2] = '/';
      charArray0[3] = '/';
      charArray0[3] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'/', '/', '/', '/', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      boolean boolean1 = jsonReader0.hasNext();
      assertTrue(boolean1);
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = jsonReader0.hasNext();
      assertTrue(boolean2);
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'/', '/', '/', '/', '\u0000'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 17 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'z';
      charArray0[0] = 'e';
      charArray0[2] = '8';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'e', '\u0000', '8', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'e', '\u0000', '8', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'e', '\u0000', '8', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      try { 
        jsonReader1.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("20,");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"W-0-?G:!=|~Dqj");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      JsonReader jsonReader2 = new JsonReader(stringReader1);
      assertFalse(jsonReader2.isLenient());
      assertNotNull(jsonReader2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      
      try { 
        jsonReader2.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 16 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"-0- ?G:!=|~Dqj");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 16 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("20,");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"W-0-?G:!=|~Dqj");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      boolean boolean0 = jsonReader1.hasNext();
      assertTrue(boolean0);
      assertFalse(jsonReader1.isLenient());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      // Undeclared exception!
      try { 
        jsonReader1.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was NUMBER at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      StringReader stringReader0 = new StringReader("Unterminated array");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.gson.stream.JsonReader");
      assertFalse(boolean0);
      
      int int0 = 7;
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, 7);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      long long0 = stringReader0.skip(7);
      assertEquals(7L, long0);
      
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#0,");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      char[] charArray0 = new char[2];
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#0,");
      assertFalse(boolean0);
      
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2+,");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      
      StringReader stringReader0 = new StringReader("END_ARRAY");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      jsonReader1.setLenient(true);
      assertTrue(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      jsonReader1.skipValue();
      assertTrue(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = 'E';
      charArray0[2] = '7';
      charArray0[3] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'2', 'E', '7', '('}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'2', 'E', '7', '('}, charArray0);
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'2', 'E', '7', '('}, charArray0);
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$VALUES");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = 'r';
      charArray0[2] = ';';
      charArray0[3] = '/';
      charArray0[4] = 'O';
      charArray0[5] = 'V';
      charArray0[6] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'M', 'r', ';', '/', 'O', 'V', 'i'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'M', 'r', ';', '/', 'O', 'V', 'i'}, charArray0);
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'M', 'r', ';', '/', 'O', 'V', 'i'}, charArray0);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'M', 'r', ';', '/', 'O', 'V', 'i'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "Expected END_OBJECT but was ";
      StringReader stringReader0 = new StringReader("Expected END_OBJECT but was ");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FALSE");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was BOOLEAN at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected END_OBJECT but was ");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      jsonReader1.setLenient(false);
      assertFalse(jsonReader1.isLenient());
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      assertNotSame(jsonReader0, jsonReader1);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      
      try { 
        jsonReader1.hasNext();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "2+,";
      StringReader stringReader0 = new StringReader("2+,");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      stringReader0.mark(110);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = jsonReader0.nextString();
      assertEquals("2+", string1);
      assertTrue(jsonReader0.isLenient());
      assertNotNull(string1);
      assertNotSame(jsonReader0, jsonReader1);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertFalse(string1.equals((Object)string0));
      
      try { 
        jsonReader1.peek();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = '=';
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      StringReader stringReader0 = new StringReader("*Fl975Lwo{*g");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[7] = '|';
      charArray0[2] = '.';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'.', '\u0000', '.', '\u0000', '\u0000', '\u0000', '\u0000', '|'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'.', '\u0000', '.', '\u0000', '\u0000', '\u0000', '\u0000', '|'}, charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader1);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'.', '\u0000', '.', '\u0000', '\u0000', '\u0000', '\u0000', '|'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected END_OBJECT but was ");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = jsonReader0.nextString();
      assertEquals("Expected", string0);
      assertTrue(jsonReader0.isLenient());
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      stringReader0.reset();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {';', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {';', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      try { 
        jsonReader1.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$VALUES");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[5] = 'r';
      charArray0[2] = ';';
      charArray0[3] = '0';
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$VALUES");
      assertFalse(boolean0);
      
      charArray0[4] = 'O';
      charArray0[5] = 'V';
      charArray0[6] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'M', '\u0000', ';', '0', 'O', 'V', 'i'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'M', '\u0000', ';', '0', 'O', 'V', 'i'}, charArray0);
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'M', '\u0000', ';', '0', 'O', 'V', 'i'}, charArray0);
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'M', '\u0000', ';', '0', 'O', 'V', 'i'}, charArray0);
      
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")20,");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"W-0-?G:!=|~Dqj");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      long long0 = (-2L);
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 16 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)7;
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)43;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte) (-33), (byte) (-1), (byte)7, (byte) (-37), (byte)78, (byte)43}, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("4.GeU");
      assertNotNull(stringReader0);
      
      stringReader0.mark((byte)0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jsonReader0, jsonReader1);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      
      try { 
        jsonReader1.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("20,");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"W-0-?G:!=|~Dqj");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertFalse(jsonReader0.isLenient());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t|NbAvLg]");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[1] = 'T';
      charArray0[0] = '@';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'@', 'T', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'@', 'T', '\u0000'}, charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'@', 'T', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'@', 'T', '\u0000'}, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      int int0 = charArrayReader0.read();
      assertEquals(64, int0);
      assertArrayEquals(new char[] {'@', 'T', '\u0000'}, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t|NbAvLg]");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'/', 't'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'/', 't'}, charArray0);
      assertNotNull(jsonReader0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      long long0 = charArrayReader0.skip((byte) (-106));
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'/', 't'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'/', 't'}, charArray0);
      
      byte[] byteArray0 = null;
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"W-0- ?G:!=|~Dqj");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'/'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'/'}, charArray0);
      assertNotNull(jsonReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$VALUES");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[5] = 'r';
      charArray0[2] = 'G';
      charArray0[3] = '0';
      charArray0[4] = '[';
      charArray0[5] = 'V';
      charArray0[6] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'G', '0', '[', 'V', 'i'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'G', '0', '[', 'V', 'i'}, charArray0);
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'G', '0', '[', 'V', 'i'}, charArray0);
      
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-66);
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'G', '0', '[', 'V', 'i'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FALSE");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      boolean boolean0 = jsonReader0.nextBoolean();
      assertFalse(boolean0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean1 = jsonReader0.hasNext();
      assertTrue(boolean1);
      assertFalse(jsonReader0.isLenient());
      assertFalse(boolean1 == boolean0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected END_OBJECT but was ");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = jsonReader0.nextString();
      assertEquals("Expected", string0);
      assertTrue(jsonReader0.isLenient());
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charArray0[2] = 't';
      charArray0[3] = ';';
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean1 = jsonReader0.isLenient();
      assertTrue(boolean1);
      assertTrue(jsonReader0.isLenient());
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"W-0- ?G:!=|~Dqj");
      assertNotNull(stringReader0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 17 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      char[] charArray0 = new char[16];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      StringReader stringReader0 = new StringReader(".3g#6kz+k0,I");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      JsonReader jsonReader2 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader2.isLenient());
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("<7h");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      boolean boolean2 = charArrayReader1.markSupported();
      assertTrue(boolean2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = charArrayReader0.markSupported();
      assertTrue(boolean3);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader1);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.BEGIN_ARRAY, jsonToken0);
      assertFalse(jsonReader0.isLenient());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      boolean boolean4 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Expected a long but was ");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[13];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-125);
      byteArray0[1] = (byte) (-68);
      jsonReader0.beginArray();
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\"', '\"', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\"', '\"', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      charArray0[1] = '=';
      byte[] byteArray0 = new byte[1];
      StringReader stringReader0 = new StringReader("*Fl975Lwo{*g");
      assertNotNull(stringReader0);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long long0 = stringReader0.skip((-5555L));
      assertEquals(0L, long0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was BEGIN_OBJECT at line 1 column 11 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)58, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)58, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)58, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertNotNull(inputStreamReader0);
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertEquals(5, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new byte[] {(byte)58, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertNotNull(jsonReader0);
      
      JsonReader jsonReader1 = new JsonReader(inputStreamReader0);
      assertEquals(5, byteArrayInputStream0.available());
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new byte[] {(byte)58, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      try { 
        jsonReader1.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\"', '\"', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0WD-(]/p2lVs}q");
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\"', '\"', '\u0000'}, charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader1);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\"', '\"', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\"', '\"', '\u0000'}, charArray0);
      assertNotNull(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\"', '\"', '\u0000'}, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      CharArrayReader charArrayReader3 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\"', '\"', '\u0000'}, charArray0);
      assertNotNull(charArrayReader3);
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      
      JsonReader jsonReader1 = new JsonReader(pipedReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      charArrayReader1.reset();
      assertArrayEquals(new char[] {'\"', '\"', '\u0000'}, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader3);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader3));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      
      jsonReader1.setLenient(true);
      assertTrue(jsonReader1.isLenient());
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$VALUES");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[5] = 'q';
      charArray0[2] = 'q';
      charArray0[4] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'q', '\u0000', '[', 'q', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'q', '\u0000', '[', 'q', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'q', '\u0000', '[', 'q', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader1);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      jsonReader1.setLenient(true);
      assertTrue(jsonReader1.isLenient());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      try { 
        jsonReader1.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 14 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*Fl975Lwo{*g");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      long long0 = stringReader0.skip((-1966L));
      assertEquals(0L, long0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.beginObject();
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.close();
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"W-0- ?G:!=|~Dqj");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("JSON forbids NaN and infinities: ");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = stringReader1.markSupported();
      assertTrue(boolean2);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = '=';
      boolean boolean3 = stringReader1.ready();
      assertTrue(boolean3);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      long long0 = stringReader1.skip((-526L));
      assertEquals(0L, long0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean4 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'(', '=', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'(', '=', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'(', '=', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'(', '=', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("FALSE");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '-';
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      boolean boolean1 = jsonReader0.isLenient();
      assertFalse(boolean1);
      assertFalse(jsonReader0.isLenient());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = jsonReader0.hasNext();
      assertTrue(boolean2);
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.BOOLEAN, jsonToken0);
      assertFalse(jsonReader0.isLenient());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)90;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 301, (byte) (-14));
      assertEquals((-297), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte)42, (byte)90}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean3 = byteArrayInputStream0.markSupported();
      assertTrue(boolean3);
      assertEquals((-297), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte)42, (byte)90}, byteArray0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 6, (-2001));
      assertEquals((-2001), byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte)42, (byte)90}, byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      int int0 = byteArrayInputStream1.read(byteArray0);
      assertEquals((-1), int0);
      assertEquals((-2001), byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte)42, (byte)90}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      long long0 = byteArrayInputStream0.skip(1867L);
      assertEquals((-297L), long0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte)42, (byte)90}, byteArray0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was BOOLEAN at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-70);
      StringReader stringReader0 = new StringReader("I7-ELQyGcd~V/<y_h");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        stringReader0.mark((byte) (-70));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Read-ahead limit < 0
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FALSE");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '0';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = ';';
      charArray0[4] = '[';
      charArray0[5] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'0', '[', '[', ';', '[', '0'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'0', '[', '[', ';', '[', '0'}, charArray0);
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'0', '[', '[', ';', '[', '0'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'0', '[', '[', ';', '[', '0'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was BEGIN_ARRAY at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      charArray0[1] = '}';
      charArray0[2] = 's';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'U', '}', 's'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'U', '}', 's'}, charArray0);
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'U', '}', 's'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "End of input");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.STRING, jsonToken0);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'U', '}', 's'}, charArray0);
      
      String string0 = jsonReader0.nextString();
      assertEquals("U", string0);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'U', '}', 's'}, charArray0);
      assertNotNull(string0);
      
      long long0 = charArrayReader0.skip(2105L);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'U', '}', 's'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'U', '}', 's'}, charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader1);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'U', '}', 's'}, charArray0);
      assertNotNull(jsonReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      jsonReader1.setLenient(true);
      assertTrue(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'U', '}', 's'}, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      // Undeclared exception!
      try { 
        jsonReader1.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }
}
