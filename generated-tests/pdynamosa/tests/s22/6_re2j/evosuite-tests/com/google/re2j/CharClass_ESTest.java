/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 09:15:31 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-24);
      intArray0[1] = 2523;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1114111;
      intArray0[5] = 0;
      intArray0[6] = 1523;
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1030;
      intArray0[1] = 219;
      intArray0[2] = (-1577);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1030, 219, (-1577)}, intArray0);
      
      CharClass charClass1 = charClass0.appendRange((-1577), 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1030, 219, (-1577)}, intArray0);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 1030;
      CharClass charClass2 = charClass1.appendNegatedClass(intArray1);
      assertNotNull(charClass2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1030, 219, (-1577)}, intArray0);
      assertArrayEquals(new int[] {0, 1030}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = charClass2.toArray();
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(7, intArray2.length);
      assertArrayEquals(new int[] {1030, 219, (-1577)}, intArray0);
      assertArrayEquals(new int[] {0, 1030}, intArray1);
      assertArrayEquals(new int[] {1030, 219, (-1577), (-1577), 0, 1031, 1114111}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      int[][] intArray3 = new int[2][2];
      intArray3[0] = intArray2;
      intArray3[1] = intArray1;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-864);
      intArray0[3] = 0;
      intArray0[4] = (-363);
      intArray0[5] = 0;
      intArray0[6] = (-968);
      intArray0[7] = 0;
      intArray0[8] = 2843;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2329);
      intArray0[1] = 3809;
      intArray0[2] = 1642;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 150;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2329), 3809, 1642, 0, 0, 150}, intArray0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2329), 3809, 1642, 0, 0, 150}, intArray0);
      assertEquals("[0xfffff6e7-0xee1 0x66a-0x0 0x0-0x96]", string0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-2329));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2329), 3809, 1642, 0, 0, 1114111}, intArray0);
      
      CharClass charClass2 = charClass1.appendLiteral(0, 1374);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2329), 3809, 1642, 0, 0, 1114111}, intArray0);
      
      int[][] intArray1 = new int[4][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass3 = charClass2.appendLiteral((-2037), 479);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2329), 3809, 1642, 0, 0, 1114111}, intArray0);
      
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass4 = charClass2.appendTable(intArray1);
      assertNotNull(charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {(-2329), 3809, 1642, 0, 0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      intArray0[0] = 407;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 2337;
      intArray0[5] = 0;
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {407, 0, 0, 0, 2337, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {407, 0, 0, 0, 2337, 0}, intArray0);
      
      int[][] intArray1 = new int[0][2];
      CharClass charClass3 = charClass1.appendTableWithSign(intArray1, (-1827));
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {407, 0, 0, 0, 2337, 0}, intArray0);
      
      CharClass charClass4 = charClass3.negateClass();
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {407, 0, 0, 0, 2337, 0}, intArray0);
      
      String string1 = charClass4.toString();
      assertNotNull(string1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {407, 0, 0, 0, 2337, 0}, intArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[0x0-0x196 0x1-0x920 0x1-0x196]", string1);
      
      CharClass charClass5 = charClass3.appendLiteral(0, 2337);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {407, 0, 0, 0, 2337, 0}, intArray0);
      
      CharClass charClass6 = charClass2.negateClass();
      assertNotNull(charClass6);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {407, 0, 0, 0, 2337, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 407);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[5][7];
      int[] intArray1 = new int[7];
      intArray1[0] = (-294);
      intArray1[1] = (-294);
      intArray1[2] = (-294);
      intArray1[3] = (-294);
      intArray1[4] = (-294);
      intArray1[5] = (-294);
      intArray1[6] = (-294);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-294);
      intArray3[1] = (-294);
      int int0 = (-523);
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2061;
      intArray0[1] = 0;
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray0[2] = 0;
      intArray0[3] = 0;
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2061, 0, 0, 0}, intArray0);
      
      CharClass charClass3 = charClass0.cleanClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      int[][] intArray1 = new int[3][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = 2061;
      intArray2[2] = 2061;
      intArray2[3] = 2061;
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray1[2] = intArray2;
      CharClass charClass4 = charClass2.appendNegatedTable(intArray1);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {2061, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      
      CharClass charClass5 = charClass2.appendLiteral(2061, 0);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2061, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[8][6];
      int[] intArray1 = new int[4];
      intArray1[0] = 4;
      intArray1[1] = (-544);
      intArray1[2] = 7;
      intArray1[3] = (-4105);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 4;
      intArray2[1] = (-4105);
      intArray2[2] = 1;
      intArray2[3] = (-4105);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-4105);
      intArray3[1] = 7;
      intArray3[2] = 60;
      intArray3[3] = 1;
      intArray3[4] = (-4105);
      intArray3[5] = 4;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = (-544);
      intArray4[1] = 7;
      intArray4[2] = 1;
      intArray4[3] = (-3573);
      intArray4[4] = 60;
      intArray4[5] = (-4105);
      intArray4[6] = (-4105);
      intArray4[7] = (-616);
      intArray4[8] = 60;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[7];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 7;
      intArray5[1] = (-4105);
      intArray5[2] = 60;
      intArray5[3] = (-616);
      intArray5[4] = 7;
      intArray5[5] = (-4105);
      intArray5[6] = (-544);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[9];
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      
      intArray6[0] = 60;
      intArray6[1] = 7;
      intArray6[2] = 60;
      intArray6[3] = (-544);
      intArray6[4] = 7;
      intArray6[5] = (-3573);
      intArray6[6] = 60;
      intArray6[7] = (-544);
      intArray6[8] = 1;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[6];
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray6));
      
      intArray7[0] = 4653;
      intArray7[1] = 60;
      intArray7[2] = (-616);
      intArray7[3] = (-4105);
      intArray7[4] = (-616);
      intArray7[5] = (-544);
      intArray0[6] = intArray7;
      int[] intArray8 = new int[2];
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray2));
      
      intArray8[0] = 60;
      intArray8[1] = 4653;
      intArray0[7] = intArray8;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(2701, 65);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.appendLiteral(1114111, 1114111);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[4][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 52;
      intArray0[2] = 32;
      intArray0[3] = 2089;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, 0, 32, 2089}, intArray0);
      
      CharClass charClass2 = charClass1.appendLiteral(232, 52);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, 0, 32, 2089}, intArray0);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, 0, 32, 2089}, intArray0);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, 0, 32, 2089}, intArray0);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass5 = charClass4.appendNegatedClass(intArray1);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {52, 0, 32, 2089}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[][] intArray2 = new int[0][3];
      CharClass charClass6 = charClass1.appendTable(intArray2);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {52, 0, 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      String string0 = charClass6.toString();
      assertNotNull(string0);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {52, 0, 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals("[0x0-0x10ffff]", string0);
      
      CharClass charClass7 = charClass2.negateClass();
      assertNotNull(charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, 0, 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      CharClass charClass8 = charClass6.cleanClass();
      assertNotNull(charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass2);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {52, 0, 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      String string1 = charClass8.toString();
      assertNotNull(string1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass2);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {52, 0, 32, 2089}, intArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals("[]", string1);
      
      CharClass charClass9 = charClass8.appendClassWithSign(intArray0, 232);
      assertNotNull(charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass3);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass2);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {52, 0, 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      String string2 = CharClass.charClassToString(intArray0, 1);
      assertNotNull(string2);
      assertNotSame(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, 0, 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("[0x34-0x0]", string2);
      
      CharClass charClass10 = charClass2.appendFoldedClass(intArray0);
      assertNotNull(charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass10);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, 0, 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      CharClass charClass11 = charClass2.appendLiteral(32, 52);
      assertNotNull(charClass11);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass10);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, 0, 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      CharClass charClass12 = charClass11.negateClass();
      assertNotNull(charClass12);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass12);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass4);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass5);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass10);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, 0, 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      CharClass charClass13 = charClass8.cleanClass();
      assertNotNull(charClass13);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass11);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass3);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass3);
      assertSame(charClass6, charClass11);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass10);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass13);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass12);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass11);
      assertSame(charClass8, charClass13);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass12);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass10);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {52, 0, 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      String string3 = charClass11.toString();
      assertNotNull(string3);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass11);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass12);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass13);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass4);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, 0, 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("[0x0-0x10ffff]", string3);
      
      CharClass charClass14 = charClass2.appendNegatedTable(intArray2);
      assertNotNull(charClass14);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass11);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass14);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass14);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass14, charClass13);
      assertSame(charClass14, charClass9);
      assertSame(charClass14, charClass5);
      assertSame(charClass14, charClass12);
      assertSame(charClass14, charClass1);
      assertSame(charClass14, charClass8);
      assertSame(charClass14, charClass3);
      assertSame(charClass14, charClass6);
      assertSame(charClass14, charClass10);
      assertSame(charClass14, charClass11);
      assertSame(charClass14, charClass7);
      assertSame(charClass14, charClass4);
      assertSame(charClass14, charClass2);
      assertSame(charClass14, charClass0);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {52, 0, 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      CharClass charClass15 = charClass3.appendLiteral(52, 64297);
      assertNotNull(charClass15);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass15);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass14);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass15);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass15);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass14);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass13);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass14);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass15);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass11);
      assertSame(charClass15, charClass0);
      assertSame(charClass15, charClass5);
      assertSame(charClass15, charClass12);
      assertSame(charClass15, charClass9);
      assertSame(charClass15, charClass3);
      assertSame(charClass15, charClass6);
      assertSame(charClass15, charClass4);
      assertSame(charClass15, charClass1);
      assertSame(charClass15, charClass2);
      assertSame(charClass15, charClass14);
      assertSame(charClass15, charClass10);
      assertSame(charClass15, charClass13);
      assertSame(charClass15, charClass8);
      assertSame(charClass15, charClass11);
      assertSame(charClass15, charClass7);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, 0, 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      CharClass charClass16 = charClass15.appendTableWithSign(intArray2, 0);
      assertNotNull(charClass16);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass16);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass14);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass16);
      assertSame(charClass1, charClass15);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass16);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass15);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass14);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass13);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass14);
      assertSame(charClass3, charClass16);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass15);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass11);
      assertSame(charClass15, charClass0);
      assertSame(charClass15, charClass5);
      assertSame(charClass15, charClass12);
      assertSame(charClass15, charClass9);
      assertSame(charClass15, charClass3);
      assertSame(charClass15, charClass6);
      assertSame(charClass15, charClass4);
      assertSame(charClass15, charClass1);
      assertSame(charClass15, charClass2);
      assertSame(charClass15, charClass14);
      assertSame(charClass15, charClass10);
      assertSame(charClass15, charClass13);
      assertSame(charClass15, charClass8);
      assertSame(charClass15, charClass11);
      assertSame(charClass15, charClass16);
      assertSame(charClass15, charClass7);
      assertSame(charClass16, charClass5);
      assertSame(charClass16, charClass13);
      assertSame(charClass16, charClass9);
      assertSame(charClass16, charClass14);
      assertSame(charClass16, charClass6);
      assertSame(charClass16, charClass12);
      assertSame(charClass16, charClass15);
      assertSame(charClass16, charClass8);
      assertSame(charClass16, charClass11);
      assertSame(charClass16, charClass10);
      assertSame(charClass16, charClass2);
      assertSame(charClass16, charClass4);
      assertSame(charClass16, charClass0);
      assertSame(charClass16, charClass3);
      assertSame(charClass16, charClass7);
      assertSame(charClass16, charClass1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {52, 0, 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      CharClass charClass17 = charClass10.appendNegatedTable(intArray2);
      assertNotNull(charClass17);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass17);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass16);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass16);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass15);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass12);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass17);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass14);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass11);
      assertSame(charClass10, charClass13);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass7);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass17);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass14);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass16);
      assertSame(charClass1, charClass15);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass16);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass15);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass17);
      assertSame(charClass2, charClass14);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass17, charClass8);
      assertSame(charClass17, charClass11);
      assertSame(charClass17, charClass16);
      assertSame(charClass17, charClass10);
      assertSame(charClass17, charClass4);
      assertSame(charClass17, charClass0);
      assertSame(charClass17, charClass2);
      assertSame(charClass17, charClass7);
      assertSame(charClass17, charClass14);
      assertSame(charClass17, charClass3);
      assertSame(charClass17, charClass13);
      assertSame(charClass17, charClass1);
      assertSame(charClass17, charClass6);
      assertSame(charClass17, charClass9);
      assertSame(charClass17, charClass12);
      assertSame(charClass17, charClass5);
      assertSame(charClass17, charClass15);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {52, 0, 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 1256;
      int int1 = 5008;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, 1114111}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      int[][] intArray1 = new int[4][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 65303);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 65303);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass4 = charClass3.negateClass();
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, 1114111}, intArray0);
      
      CharClass charClass5 = charClass4.appendNegatedClass(intArray0);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass6 = charClass5.appendLiteral(65303, 2342);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass5 = charClass0.appendFoldedRange(0, 0);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      
      CharClass charClass6 = charClass5.appendFoldedClass(intArray0);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass7 = charClass6.appendClassWithSign(intArray0, 0);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass8 = charClass7.appendRange((-3305), (-2404));
      assertNotNull(charClass8);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(1649, 1649);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 66639;
      intArray0[1] = 1649;
      intArray0[2] = 1649;
      intArray0[3] = 1649;
      intArray0[4] = 1649;
      intArray0[5] = 1649;
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 1649);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {66639, 1649, 1649, 1649, 1649, 1649}, intArray0);
      
      int[][] intArray1 = new int[2][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass3 = charClass2.appendNegatedTable(intArray1);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(6, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {66639, 1649, 1649, 1649, 1649, 1649}, intArray0);
      
      CharClass charClass4 = charClass2.appendFoldedRange((-2), 61);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {66639, 1649, 1649, 1649, 1649, 1649}, intArray0);
      
      int[][] intArray2 = new int[0][5];
      assertFalse(intArray2.equals((Object)intArray1));
      
      CharClass charClass5 = charClass4.appendTable(intArray2);
      assertNotNull(charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertNotSame(intArray2, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {66639, 1649, 1649, 1649, 1649, 1649}, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertEquals("[0x671 0xfffffffe-0x10ffff]", string0);
      
      int[] intArray3 = new int[3];
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = (-1281);
      intArray3[1] = 66639;
      intArray3[2] = (-537);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray3, 66639);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(2005, 2262);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[6][1];
      int[] intArray1 = new int[3];
      intArray1[0] = 2262;
      intArray1[1] = 2005;
      intArray1[2] = 2005;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1294;
      intArray2[1] = 2262;
      intArray2[2] = 2262;
      intArray2[3] = 2005;
      intArray2[4] = 2005;
      intArray2[5] = 2005;
      intArray2[6] = 2262;
      intArray2[7] = 2005;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 1524;
      intArray3[1] = 4;
      intArray3[2] = 1294;
      intArray3[3] = 2262;
      intArray3[4] = 2262;
      intArray3[5] = 2262;
      intArray3[6] = 2005;
      intArray3[7] = 1294;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[5];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = 1524;
      intArray4[1] = 2262;
      intArray4[2] = 4;
      intArray4[3] = 2262;
      intArray4[4] = 2005;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[4];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = 2005;
      intArray5[1] = 2262;
      intArray5[2] = 1294;
      intArray5[3] = (-2527);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[1];
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray2));
      
      intArray6[0] = 3372;
      intArray0[5] = intArray6;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendLiteral(4, 91);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertSame(charClass0, charClass1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("[0x4]", string0);
      
      int[][] intArray1 = new int[0][3];
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, 1);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass2.appendTableWithSign(intArray1, 4);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray2 = new int[0][3];
      assertFalse(intArray2.equals((Object)intArray1));
      
      CharClass charClass4 = charClass0.appendTable(intArray2);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      
      CharClass charClass5 = charClass4.negateClass();
      assertNotNull(charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      
      String string1 = charClass2.toString();
      assertNotNull(string1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("[0x0-0x3 0x5-0x10ffff]", string1);
      
      CharClass charClass6 = charClass3.appendFoldedClass(intArray0);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray1.equals((Object)intArray2));
      
      int[] intArray3 = charClass2.toArray();
      assertNotNull(intArray3);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertNotSame(intArray3, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray3.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 3, 5, 1114111}, intArray3);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      String string2 = charClass4.toString();
      assertNotNull(string2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray2.equals((Object)intArray1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("[0x0-0x3 0x5-0x10ffff]", string2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass0.appendLiteral(915, 1301);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass2.negateClass();
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      
      int[] intArray0 = new int[0];
      String string1 = charClass2.toString();
      assertNotNull(string1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[0x0-0x392 0x394-0x3b2 0x3b4-0x10ffff]", string1);
      
      CharClass charClass5 = charClass2.appendClassWithSign(intArray0, 638);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass6 = charClass5.cleanClass();
      assertNotNull(charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      int int0 = 52;
      intArray0[0] = 52;
      intArray0[1] = (-481);
      int int1 = 32;
      intArray0[2] = 32;
      intArray0[3] = 2089;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, (-481), 32, 2089}, intArray0);
      
      CharClass charClass2 = charClass1.appendLiteral(232, 52);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, (-481), 32, 2089}, intArray0);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, (-481), 32, 2089}, intArray0);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, (-481), 32, 2089}, intArray0);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass5 = charClass4.appendNegatedClass(intArray1);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {52, (-481), 32, 2089}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[][] intArray2 = new int[0][3];
      CharClass charClass6 = charClass1.appendTable(intArray2);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {52, (-481), 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      String string0 = charClass6.toString();
      assertNotNull(string0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {52, (-481), 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals("[0xfffffe20-0x10ffff]", string0);
      
      CharClass charClass7 = charClass6.appendTable(intArray2);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass7);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {52, (-481), 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      CharClass charClass8 = charClass6.cleanClass();
      assertNotNull(charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass7);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {52, (-481), 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      String string1 = charClass8.toString();
      assertNotNull(string1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass7);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {52, (-481), 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("[0xfffffe20-0x10ffff]", string1);
      
      CharClass charClass9 = charClass8.appendClassWithSign(intArray0, 232);
      assertNotNull(charClass9);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass2);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass7);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {52, (-481), 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      String string2 = charClass1.toString();
      assertNotNull(string2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, (-481), 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("[0xfffffe20-0x10ffff]", string2);
      
      String string3 = CharClass.charClassToString(intArray0, 1);
      assertNotNull(string3);
      assertNotSame(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, (-481), 32, 2089}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("[0x34-0xfffffe1f]", string3);
      
      // Undeclared exception!
      charClass2.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][3];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      
      String string0 = charClass1.toString();
      assertNotNull(string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertEquals("[0x0-0x10ffff]", string0);
      
      CharClass charClass2 = charClass0.appendLiteral(66639, 1114111);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 8505;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {8505}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(0, 2054);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {8505}, intArray0);
      
      CharClass charClass2 = charClass1.appendRange(93, (-1757));
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {8505}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass2.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2061;
      intArray0[1] = 0;
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray0[2] = 0;
      intArray0[3] = (-51);
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2061, 0, 0, (-51)}, intArray0);
      
      CharClass charClass3 = charClass0.cleanClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2061, 0, 0, (-51)}, intArray0);
      
      CharClass charClass5 = charClass0.appendRange(3289, 0);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = (-294);
      int[][] intArray0 = new int[5][7];
      int[] intArray1 = new int[7];
      intArray1[0] = (-294);
      intArray1[1] = (-294);
      intArray1[2] = (-294);
      intArray1[3] = (-294);
      intArray1[4] = (-294);
      intArray1[5] = (-294);
      intArray1[6] = (-294);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-294);
      intArray3[1] = (-294);
      intArray3[2] = (-523);
      intArray3[3] = (-294);
      intArray3[4] = (-294);
      intArray3[5] = (-294);
      intArray3[6] = (-294);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = (-294);
      intArray4[1] = (-294);
      intArray4[2] = (-523);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[2];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = (-294);
      intArray5[1] = (-294);
      intArray0[4] = intArray5;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass2.negateClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass2.appendFoldedClass(intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass5 = charClass0.cleanClass();
      assertNotNull(charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      
      int[][] intArray1 = new int[6][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(2256, 91);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[8][4];
      int[] intArray1 = new int[8];
      intArray1[0] = 2256;
      intArray1[1] = 2256;
      intArray1[2] = 91;
      intArray1[3] = 2256;
      intArray1[4] = 91;
      intArray1[5] = 0;
      intArray1[6] = 2256;
      intArray1[7] = 91;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 2256;
      intArray2[1] = 0;
      intArray2[2] = 91;
      intArray2[3] = 0;
      intArray2[4] = 91;
      intArray2[5] = (-2981);
      intArray2[6] = 2256;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 0;
      intArray3[1] = 2256;
      intArray3[2] = 2256;
      intArray3[3] = 2256;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[1];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = 91;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      
      intArray5[0] = (-2981);
      intArray5[1] = 91;
      intArray5[2] = (-2981);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[8];
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray4));
      
      intArray6[0] = 217;
      intArray6[1] = 91;
      intArray6[2] = 91;
      intArray6[3] = 2256;
      intArray6[4] = 2256;
      intArray6[5] = 2256;
      intArray6[6] = 0;
      intArray6[7] = (-2981);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[6];
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray6));
      
      intArray7[0] = (-2981);
      intArray7[1] = 2256;
      intArray7[2] = 2256;
      intArray7[3] = 0;
      intArray7[4] = 0;
      intArray7[5] = 2256;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[1];
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray2));
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray7));
      
      intArray8[0] = 0;
      intArray0[7] = intArray8;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 65303;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      int int1 = 11388;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 11388);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, 1114111}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass2.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(65, 65);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1379;
      intArray0[2] = 93;
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertNotNull(string0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 1379, 93, 0, 0}, intArray0);
      assertEquals("[]", string0);
      
      intArray0[3] = 1375;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 509);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass1 = new CharClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      
      String string0 = CharClass.charClassToString(intArray0, (-1));
      assertNotNull(string0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals("[]", string0);
      
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = (-692);
      int int1 = (-2162);
      CharClass charClass1 = charClass0.appendRange((-692), (-2162));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[3][6];
      int[] intArray1 = new int[3];
      intArray1[0] = (-692);
      intArray1[1] = (-692);
      intArray1[2] = (-692);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-692);
      intArray2[1] = (-692);
      intArray2[2] = (-692);
      intArray2[3] = (-2162);
      intArray2[4] = (-2162);
      intArray2[5] = (-692);
      intArray2[6] = 1451;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-2162);
      intArray0[2] = intArray3;
      // Undeclared exception!
      charClass1.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1909);
      intArray0[1] = 66640;
      intArray0[2] = (-912);
      CharClass charClass1 = new CharClass();
      assertNotNull(charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertNotNull(charClass2);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1909), 66640, (-912), 0, 0, 0}, intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      
      CharClass charClass3 = charClass2.cleanClass();
      assertNotNull(charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1909), 66640, (-912), 0, 0, 0}, intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      
      CharClass charClass4 = charClass2.appendFoldedClass(intArray0);
      assertNotNull(charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1909), 66640, (-912), 0, 0, 0}, intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass0));
      
      CharClass charClass5 = charClass1.appendRange((-2404), (-2554));
      assertNotNull(charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(2256, 91);
      int[][] intArray0 = new int[8][4];
      int[] intArray1 = new int[8];
      intArray1[0] = 2256;
      intArray1[1] = 2256;
      intArray1[2] = 91;
      intArray1[3] = 2256;
      intArray1[4] = 91;
      intArray1[5] = 0;
      intArray1[6] = 2256;
      intArray1[7] = 91;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 2256;
      intArray2[1] = 0;
      intArray2[2] = 91;
      intArray2[3] = 0;
      intArray2[4] = 91;
      CharClass charClass2 = new CharClass(intArray1);
      int[] intArray3 = new int[0];
      charClass2.appendClassWithSign(intArray3, 2256);
      CharClass charClass3 = charClass1.appendRange(2256, 0);
      CharClass charClass4 = charClass3.appendNegatedClass(intArray1);
      CharClass charClass5 = charClass4.cleanClass();
      charClass5.appendNegatedClass(intArray1);
      charClass1.toArray();
      // Undeclared exception!
      charClass2.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2676;
      intArray0[1] = (-2);
      intArray0[2] = 0;
      intArray0[3] = 3776;
      intArray0[4] = 2826;
      intArray0[5] = 64;
      intArray0[6] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendRange((-1066), 2676);
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CharClass charClass0 = new CharClass();
          int[] intArray0 = new int[6];
          intArray0[1] = 66640;
          intArray0[2] = (-912);
          intArray0[3] = (-2554);
          intArray0[4] = 1114111;
          intArray0[5] = 69819;
          CharClass charClass1 = charClass0.appendLiteral((-912), (-2554));
          CharClass charClass2 = charClass1.appendRange(69819, 1);
          CharClass charClass3 = charClass0.appendFoldedRange((-4772), (-4772));
          charClass3.appendRange(69819, (-2554));
          int[][] intArray1 = new int[6][0];
          intArray1[0] = intArray0;
          intArray1[1] = intArray0;
          intArray1[2] = intArray0;
          intArray1[3] = intArray0;
          intArray1[4] = intArray0;
          intArray1[5] = intArray0;
          // Undeclared exception!
          charClass2.appendNegatedTable(intArray1);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[2][8];
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      int int0 = (-645);
      intArray1[1] = (-645);
      intArray1[2] = 839;
      intArray1[3] = 798;
      int int1 = 0;
      intArray1[4] = 0;
      intArray1[5] = 3745;
      int int2 = 0;
      intArray1[6] = 0;
      int int3 = 0;
      intArray1[7] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 0;
      intArray2[1] = 798;
      intArray2[2] = 3745;
      intArray2[3] = (-645);
      intArray2[4] = 0;
      intArray0[1] = intArray2;
      CharClass charClass1 = charClass0.appendTable(intArray0);
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      // Undeclared exception!
      charClass2.appendFoldedClass(intArray2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = charClass0.toArray();
      int int0 = (-337);
      CharClass charClass1 = charClass0.appendFoldedRange((-337), (-337));
      charClass0.appendRange(379, (-337));
      charClass1.toString();
      int[][] intArray1 = new int[2][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      CharClass.charClassToString(intArray0, (-206));
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      CharClass charClass1 = new CharClass(intArray0);
      charClass1.appendClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][3];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      charClass1.toString();
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 66639);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      CharClass charClass3 = charClass2.negateClass();
      int[][] intArray1 = new int[0][9];
      CharClass charClass4 = charClass0.appendNegatedTable(intArray1);
      CharClass charClass5 = charClass3.appendLiteral(0, 0);
      CharClass charClass6 = charClass5.appendLiteral(0, 8275);
      assertSame(charClass6, charClass4);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral(4, 91);
      charClass0.toString();
      int[][] intArray1 = new int[0][3];
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, 1);
      charClass2.appendTableWithSign(intArray1, 4);
      int[][] intArray2 = new int[0][3];
      int[] intArray3 = new int[7];
      intArray3[0] = 4;
      intArray3[1] = 1;
      intArray3[2] = (-5905);
      intArray3[3] = 4;
      intArray3[4] = 91;
      intArray3[5] = 4;
      intArray3[6] = 1;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(757, 757);
      CharClass charClass2 = charClass1.cleanClass();
      CharClass charClass3 = charClass2.appendRange(35, (-1879));
      CharClass charClass4 = charClass3.negateClass();
      int[] intArray0 = new int[7];
      intArray0[0] = 65079;
      intArray0[1] = 35;
      intArray0[2] = 35;
      intArray0[3] = (-1879);
      intArray0[4] = (-1879);
      intArray0[5] = 35;
      intArray0[6] = 35;
      // Undeclared exception!
      try { 
        charClass4.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(0, 884);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 884;
      intArray0[5] = 884;
      intArray0[6] = 884;
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 33;
      intArray0[2] = 2911;
      intArray0[3] = 1191;
      intArray0[4] = (-2970);
      intArray0[5] = 91;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[4][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      charClass0.appendTableWithSign(intArray1, (-247));
      assertArrayEquals(new int[] {1, 33, 2911, 1191, (-2970), 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1179;
      intArray0[1] = 66640;
      intArray0[2] = 230;
      intArray0[3] = 9116;
      intArray0[4] = (-2217238);
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[1][6];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      CharClass charClass2 = charClass1.appendRange(9116, (-3303));
      CharClass charClass3 = charClass2.appendFoldedRange(9116, 230);
      CharClass charClass4 = charClass3.negateClass();
      CharClass charClass5 = charClass4.appendTableWithSign(intArray1, 230);
      charClass5.cleanClass();
      assertArrayEquals(new int[] {1179, 66640, 230, 9116, (-2217238)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      // Undeclared exception!
      charClass0.appendFoldedRange(1723, 128064);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-340);
      intArray0[1] = 0;
      intArray0[2] = 2865;
      intArray0[3] = 91;
      intArray0[4] = 1957;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendRange((-340), 1418);
      // Undeclared exception!
      try { 
        charClass0.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][3];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, (-1446));
      int[] intArray1 = new int[9];
      intArray1[0] = (-1446);
      intArray1[1] = (-1446);
      intArray1[2] = (-1446);
      intArray1[3] = (-1446);
      intArray1[4] = (-1446);
      intArray1[5] = (-1446);
      intArray1[6] = (-1446);
      intArray1[7] = (-1446);
      intArray1[8] = (-1446);
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendClass(intArray0);
      CharGroup charGroup0 = null;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign((int[]) null, 657);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[5];
      intArray0[0] = (-73);
      intArray0[1] = (-309);
      intArray0[2] = 0;
      intArray0[3] = (-280);
      intArray0[4] = 661;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, (-997));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][3];
      charClass0.appendNegatedTable(intArray0);
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 66639;
      charClass0.appendFoldedClass(intArray0);
      charClass0.appendRange(1, 66639);
      CharClass charClass1 = charClass0.appendRange(43573, 43573);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[1];
      int int0 = 8526;
      intArray0[0] = 8526;
      int int1 = 0;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      int[][] intArray0 = new int[7][1];
      int[] intArray1 = new int[2];
      intArray1[0] = 128;
      intArray1[1] = 2365;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      intArray2[0] = 128;
      intArray2[1] = 2365;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      intArray3[0] = 2365;
      intArray3[1] = 128;
      intArray3[2] = 128;
      intArray3[3] = 128;
      intArray3[4] = 128;
      intArray3[5] = 0;
      intArray3[6] = 128;
      intArray3[7] = 2365;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 2365;
      intArray4[1] = 128;
      intArray4[2] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[4];
      intArray5[0] = 2365;
      intArray5[1] = 128;
      intArray5[2] = 0;
      intArray5[3] = 2365;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[7];
      intArray6[0] = 2365;
      intArray6[1] = 128;
      intArray6[2] = 32;
      intArray6[3] = 2365;
      intArray6[4] = 0;
      intArray6[5] = 2365;
      intArray6[6] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[8];
      intArray7[0] = 128;
      intArray7[1] = 128;
      intArray7[2] = 0;
      intArray7[3] = 2365;
      intArray7[4] = 32;
      intArray7[5] = 128;
      intArray7[6] = 0;
      intArray7[7] = 0;
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray0, 2365);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      int[][] intArray0 = new int[6][8];
      int[] intArray1 = new int[5];
      intArray1[0] = 1256;
      intArray1[1] = (-2);
      intArray1[2] = 91;
      intArray1[3] = (-352);
      intArray1[4] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = (-2);
      intArray2[1] = 91;
      intArray2[2] = 1256;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = (-352);
      intArray3[1] = 0;
      intArray3[2] = 4159;
      intArray3[3] = 91;
      intArray3[4] = (-2);
      intArray3[5] = (-2);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[1];
      intArray4[0] = 1256;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[7];
      intArray5[0] = 0;
      intArray5[1] = 0;
      intArray5[2] = 747;
      intArray5[3] = 0;
      intArray5[4] = 2226;
      intArray5[5] = 0;
      intArray5[6] = (-352);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[3];
      intArray6[0] = (-352);
      intArray6[1] = 1256;
      intArray6[2] = 1892;
      intArray0[5] = intArray6;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 1256;
      intArray0[0] = 1256;
      intArray0[1] = 5008;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[9][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      int[] intArray2 = new int[6];
      intArray2[0] = 43793;
      intArray2[1] = (-552);
      intArray2[2] = 0;
      intArray2[3] = 32;
      intArray2[4] = (-2843);
      intArray2[5] = (-1116);
      intArray1[5] = intArray2;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = (-1896);
      intArray0[1] = 66640;
      intArray0[2] = (-912);
      intArray0[3] = (-2554);
      intArray0[4] = 1114111;
      intArray0[5] = 69819;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      charClass1.appendRange(69819, 1);
      CharClass charClass2 = charClass0.appendFoldedRange((-4772), (-4772));
      charClass2.appendRange(69819, (-2554));
      charClass2.toString();
      CharClass charClass3 = charClass0.appendRange((-912), 66639);
      charClass2.appendClass(intArray0);
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, 66640);
      assertSame(charClass4, charClass0);
  }
}
