/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 02:29:06 GMT 2018
 */

package org.apache.commons.math3.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventFilter;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.events.FilterType;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedRungeKuttaIntegrator_ESTest extends EmbeddedRungeKuttaIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(216.038, 216.038, 216.038, (-3585.57453117));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3585.57453117);
      doubleArray0[1] = 216.038;
      doubleArray0[2] = 216.038;
      highamHall54Integrator0.vecRelativeTolerance = doubleArray0;
      highamHall54Integrator0.getEventHandlers();
      double double0 = highamHall54Integrator0.getMinReduction();
      assertEquals(0.2, double0, 0.01);
      
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3585.57453117), 216.038, 2075.1855039388997, 216.038);
      dormandPrince54Integrator0.getOrder();
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3698.161806, 3698.161806, 0.2, 0.2);
      dormandPrince54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(140).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-8.0E298));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2587.1075267663764, 2.482282821883242E-159, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setInitialStepSize(2587.1075267663764);
      int int0 = 5825;
      double double0 = 1.0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 6.626052626622228E-44, doubleArray0, 2671.633, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 485.0458566997, 0.0, 0.0);
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      dormandPrince853Integrator0.getMinReduction();
      double[] doubleArray0 = new double[4];
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer(8, (FixedStepHandler) null, stepNormalizerMode0);
      dormandPrince853Integrator0.addStepHandler(stepNormalizer0);
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = 485.0458566997;
      doubleArray0[3] = 0.2;
      dormandPrince853Integrator0.estimateError((double[][]) null, doubleArray0, doubleArray0, 8);
      dormandPrince853Integrator0.setMaxGrowth((-776.47756035236));
      dormandPrince853Integrator0.getMaxGrowth();
      dormandPrince853Integrator0.setMinReduction(43.34374342143296);
      assertEquals(43.34374342143296, dormandPrince853Integrator0.getMinReduction(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, 0.12728634476661682, 1.0, 1.0, 1.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      eventFilter0.init(0.0, doubleArray0, 0.0);
      dormandPrince853Integrator0.addEventHandler((EventHandler) eventFilter0, 0.0, 2300.4, 0);
      dormandPrince853Integrator0.setStepSizeControl((-818.0492386667), 0.0, (-1004.011), 0.0);
      dormandPrince853Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(8, 0.9, 4439.38358856949, 0.0);
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 0.9;
      doubleArray2[2] = (-1004.011);
      doubleArray2[3] = (double) 8;
      highamHall54Integrator0.estimateError(doubleArray1, doubleArray2, doubleArray2, 8.0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 0.12728634476661682);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(216.038, 216.038, 216.038, (-3585.57453117));
          double[] doubleArray0 = new double[3];
          doubleArray0[0] = (-3585.57453117);
          doubleArray0[1] = 216.038;
          doubleArray0[2] = 216.038;
          HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator((-3853.4912051264723), 0.0, doubleArray0, doubleArray0);
          highamHall54Integrator1.setMinReduction(216.038);
          SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
          doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
          FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
          ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
          // Undeclared exception!
          highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double double0 = 0.0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double1 = 5.4985298195094216E153;
      double double2 = (-903.94235773);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(5.4985298195094216E153, (-903.94235773), doubleArray0, doubleArray0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-903.94235773));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double double0 = 0.2;
      double double1 = 0.0;
      double double2 = 1504.5359399928486;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.2, 0.0, 0.0, 1504.5359399928486);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1987).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(1504.5359399928486);
      double double3 = 5.4985298195094216E153;
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 5.4985298195094216E153);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      double double0 = 3698.161806;
      double double1 = (-0.13008934607680245);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3698.161806, 3698.161806, (-0.13008934607680245), 121.848340795);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator0.getStepHandlers();
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-1111.0542792336234));
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-0.13008934607680245));
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1509.96368, 1504.5359399928486, 1504.5359399928486, 1509.96368);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(9).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(1509.96368);
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-2791.481));
      dormandPrince54Integrator0.getSafety();
      dormandPrince54Integrator0.setMaxGrowth(0.3437005281448364);
      dormandPrince54Integrator0.getOrder();
      assertEquals(0.3437005281448364, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
  }
}
