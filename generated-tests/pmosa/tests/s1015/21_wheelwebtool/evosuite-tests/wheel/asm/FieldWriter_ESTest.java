/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 06:10:16 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "%_Ql%~Q`) nL0", "%_Ql%~Q`) nL0", "");
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(563);
      classWriter0.visitField((-791), "System", "System", "Signature", "Signature");
      FieldWriter fieldWriter0 = classWriter0.firstField;
      fieldWriter0.getSize();
      classWriter0.newFloat(563);
      // Undeclared exception!
      try { 
        classWriter0.newMethod("System", "System", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(4096, "System", "RuntimeVisibleAnnotations", "System", "RuntimeVisibleAnnotations");
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter0.getSize();
      System.setCurrentTimeMillis(4096);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      assertSame(fieldWriter0, fieldWriter1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(4096, "System", "RuntimeVisibleAnnotations", "System", "RuntimeVisibleAnnotations");
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter1.visitAnnotation("RuntimeVisibleAnnotations", true);
      fieldWriter1.getSize();
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      assertSame(fieldWriter0, fieldWriter1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-1318);
      ClassWriter classWriter0 = new ClassWriter((-1318));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3044), "java/lang/Throwable", "T/v.NUL}ljY_|$u~l7Q", "wheel.asm.ClassReader", "java/lang/Throwable");
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAnnotation(";x-ZOHuJ3I.", false);
      byte[] byteArray0 = new byte[0];
      int int1 = 345;
      // Undeclared exception!
      try { 
        attribute0.getSize(classWriter0, byteArray0, 345, 2, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(563);
      String string0 = "";
      classWriter0.visitField(3684, "short", "short", "", "Signature");
      FieldWriter fieldWriter0 = classWriter0.firstField;
      fieldWriter0.getSize();
      classWriter0.newFloat(2399.9875F);
      String string1 = "";
      classWriter0.newMethod("", "", "", false);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("Deprecated");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newFloat(0.0F);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      classWriter0.newDouble(3804.64117);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "a", "a", "a", (Object) null);
      fieldWriter0.visitEnd();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("a", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      classWriter0.newMethod("a", "", "", false);
      classWriter0.newMethod("Exceptions", "]?r_>#)HJl", "", false);
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "Exceptions", "a", "]?r_>#)HJl");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Label label0 = new Label();
      Object object0 = label0.info;
      classWriter0.visitField(0, "a", "KQx", "Signature", (Object) null);
      FieldWriter fieldWriter0 = classWriter0.firstField;
      fieldWriter0.getSize();
      classWriter0.newFloat(0.0F);
      classWriter0.newMethod("", "Signature", "RuntimeInvisibleParameterAnnotations", true);
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate2 = new MockThaiBuddhistDate();
      ClassWriter classWriter1 = new ClassWriter(0);
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter1, (-2072), "KQx", "KQx", "", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(563);
      classWriter0.visitField(563, "Invalid IOCase name: ", "", (String) null, (Object) null);
      FieldWriter fieldWriter0 = classWriter0.firstField;
      fieldWriter0.getSize();
      classWriter0.newFloat(8);
      classWriter0.newMethod("ConstantValue", "RuntimeVisibleAnnotations", "=H(<]PdVC>l'|bvo}", false);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 2, "", "a", "Synthetic", "Synthetic");
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(563);
      classWriter0.newMethod("`-znKACbE|cAz4ktqr'", "", "", true);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      ClassWriter classWriter1 = new ClassWriter(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter1, 21, "", "`-znKACbE|cAz4ktqr'", "RuntimeVisibleAnnotations", (Object) null);
      ClassWriter classWriter2 = new ClassWriter(1);
      ByteVector byteVector0 = classWriter2.pool;
      fieldWriter0.put(byteVector0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(285212684, "System", "System", (String) null, (Object) null);
      FieldWriter fieldWriter0 = classWriter0.firstField;
      fieldWriter0.visitAnnotation("System", true);
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      assertSame(fieldWriter0, fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      classWriter0.version = 850;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      classWriter0.visitField((-791), "SyUstem", "SyUstem", "Signature", "Signature");
      FieldWriter fieldWriter0 = classWriter0.lastField;
      fieldWriter0.getSize();
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      Attribute attribute0 = new Attribute("k");
      Attribute attribute1 = attribute0.next;
      // Undeclared exception!
      try { 
        fieldWriter1.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }
}
