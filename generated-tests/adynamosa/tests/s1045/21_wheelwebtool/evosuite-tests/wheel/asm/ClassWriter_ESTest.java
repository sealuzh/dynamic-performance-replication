/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 02:04:58 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.Item;
import wheel.asm.MethodVisitor;
import wheel.asm.MethodWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      classWriter0.visit(0, (-865), "n5iaM[?dzNHx]rH", (String) null, "", stringArray0);
      classWriter0.threshold = 8;
      classWriter0.visitInnerClass("p1KZV^s)rB.SQ_/3I2n", "p1KZV^s)rB.SQ_/3I2n", "@s/y;ki}m", 5);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(40);
      Item[] itemArray0 = new Item[1];
      classWriter0.typeTable = itemArray0;
      int int0 = classWriter0.addType("Synthetic");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      classWriter0.newFieldItem("", "", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      ClassReader classReader0 = new ClassReader(byteArray0);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 13);
      assertEquals(26, classReader0.header);
      assertEquals(40, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3122));
      classWriter0.index = (-65);
      int int0 = classWriter0.newUTF8("RuntimeVisibleAnnotations");
      assertEquals((-65), int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3122));
      classWriter0.index = (-65);
      int int0 = classWriter0.newNameType("+gO", "");
      assertEquals((-63), int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.index = (-1685);
      int int0 = classWriter0.newMethod("java/lang/Object", "!+", "", true);
      assertEquals((-1680), int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.index = (-1685);
      int int0 = classWriter0.newField("The wildcard must not be null", "RuntimeVisibleAnnotations", "?fc");
      assertEquals((-1680), int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2769));
      classWriter0.index = (-2769);
      Byte byte0 = new Byte((byte)0);
      int int0 = classWriter0.newConst(byte0);
      assertEquals((-2769), int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.index = (-1685);
      int int0 = classWriter0.newClass("!+");
      assertEquals((-1684), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(182);
      classWriter0.visitSource("", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(280);
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(1, "", "", "", stringArray0);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(16, (String) null, "", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(0, "", "", "Ui]-r)E", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(182);
      classWriter0.visitInnerClass("lMWnl", ".s.IFJDCS", ".s.IFJDCS", 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3159));
      classWriter0.visitInnerClass("@s/y;ki}m", "", "", (-1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      classWriter0.visitInnerClass("", "wheel.asm.AnnotationWriter", "org.apache.commons.io.filefilter.NameFileFilter", 9);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1691);
      // Undeclared exception!
      try { 
        classWriter0.visitField(18, (String) null, "ou&]T\"L>,v2,ToT", "Deprecated", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(252);
      Type type0 = Type.getObjectType("`L=KCEG(.Bl]]iy");
      // Undeclared exception!
      try { 
        classWriter0.visitField(30, "InnerClasses", (String) null, "i'~C", type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(500);
      Byte byte0 = new Byte((byte)6);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(0, "The strings must not be null", "", "", byte0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2769));
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        classWriter0.visit((-2769), 409, (String) null, "", "_Bb_][#", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2769));
      String[] stringArray0 = new String[0];
      classWriter0.visit(2, (-2768), "", "gF38", (String) null, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        classWriter0.visit(664, 0, "wheel.asm.ClassWriter", "wheel.asm.Item", "wheel.asm.ClassWriter", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3122));
      int int0 = classWriter0.newUTF8("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      // Undeclared exception!
      try { 
        classWriter0.newNameType((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(6);
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem("boolean", (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      Item item0 = classWriter0.newMethodItem("", "", "", true);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      // Undeclared exception!
      try { 
        classWriter0.newMethod("p1KZV^s)rB.SQ_/3I2n", (String) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3159));
      // Undeclared exception!
      try { 
        classWriter0.newMethod((String) null, "/F1,plbQ1XP`", "/F1,plbQ1XP`", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-748));
      int int0 = classWriter0.newMethod("", "", "[_.K2-", false);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      Item item0 = classWriter0.newLong(0L);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(55);
      Item item0 = classWriter0.newLong((-798L));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Item item0 = classWriter0.newInteger(0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Item item0 = classWriter0.newInteger(65);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Item item0 = classWriter0.newFloat(0.0F);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2769));
      Item item0 = classWriter0.newFloat((-2769));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(252);
      // Undeclared exception!
      try { 
        classWriter0.newFieldItem("?B}/VEtFy$", "StackMapTable", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3597));
      // Undeclared exception!
      try { 
        classWriter0.newFieldItem((String) null, " /!e72M>,", "Signature");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(252);
      // Undeclared exception!
      try { 
        classWriter0.newField("InnerClasses", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2151);
      Item item0 = classWriter0.newDouble(0.0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Item item0 = classWriter0.newDouble(4314.6);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(182);
      Item item0 = classWriter0.newDouble((-395.11476));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2935));
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@407056cf
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(182);
      // Undeclared exception!
      try { 
        classWriter0.newConst((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Item item0 = classWriter0.newClassItem("");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4225));
      int int0 = classWriter0.newClass("EnclosingMethod");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass((String) null, "SourceDebugExtension");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      int int0 = classWriter0.addUninitializedType("H9", 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4225));
      int int0 = classWriter0.addType("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(500);
      // Undeclared exception!
      try { 
        classWriter0.visitOuterClass((String) null, (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3366));
      String[] stringArray0 = new String[3];
      stringArray0[0] = ",PrIXi,)";
      stringArray0[1] = ",PrIXi,)";
      stringArray0[2] = ",PrIXi,)";
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(2, ",PrIXi,)", ",PrIXi,)", ",PrIXi,)", stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      // Undeclared exception!
      try { 
        classWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(13);
      // Undeclared exception!
      try { 
        classWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(464);
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      // Undeclared exception!
      try { 
        classWriter0.newUTF8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(280);
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem((String) null, "p6@B61f", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      // Undeclared exception!
      try { 
        classWriter0.newMethod("cPq>IJj]DJ", "1dk2}Be!StqAyD1'mv$", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-748));
      // Undeclared exception!
      try { 
        classWriter0.newFieldItem("+`", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(182);
      // Undeclared exception!
      try { 
        classWriter0.newField((String) null, "(a^\"Affejo{9!{", "x2l");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2151);
      // Undeclared exception!
      try { 
        classWriter0.newConstItem((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-748));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      // Undeclared exception!
      try { 
        classWriter0.newConst(bufferedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.io.BufferedInputStream@5a0627fe
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      // Undeclared exception!
      try { 
        classWriter0.newClassItem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      // Undeclared exception!
      try { 
        classWriter0.newClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      classWriter0.addType("JSR/RET are not supported with computeFrames option");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'JSR/RET are not supported with computeFrames option.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3122));
      classWriter0.addType("+gO");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-1738), (-824));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1738
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1886));
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass(",)NK( skjVrsc'~qOF", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class ',)NK( skjVrsc'~qOF.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      // Undeclared exception!
      try { 
        classWriter0.addUninitializedType((String) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3357);
      // Undeclared exception!
      try { 
        classWriter0.addType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(499);
      classWriter0.addUninitializedType("wheel.asm.ClassWiter", 2);
      classWriter0.addUninitializedType("", 8);
      Item[] itemArray0 = new Item[2];
      classWriter0.typeTable = itemArray0;
      // Undeclared exception!
      try { 
        classWriter0.addType("l");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter((ClassReader) null, (-889275714));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3816);
      classWriter0.newFieldItem("", ")V", "M*k[wUbe \"-j4aJN:5U");
      int int0 = classWriter0.newField("", "", "c");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(464);
      Item item0 = classWriter0.newLong(464);
      Item item1 = classWriter0.newLong(464);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(6);
      Item item0 = classWriter0.newFieldItem("", "", "");
      assertNotNull(item0);
      
      int int0 = classWriter0.newField("", "", "");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2769));
      int int0 = classWriter0.newNameType("8pf-", "'`6[4b<Hz6AO\"S>;");
      assertEquals(3, int0);
      
      int int1 = classWriter0.newUTF8("'`6[4b<Hz6AO\"S>;");
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      int int0 = classWriter0.newClass("");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(182);
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(499);
      Item item0 = classWriter0.newLong(499);
      assertNotNull(item0);
      
      classWriter0.index = 499;
      int int0 = classWriter0.addUninitializedType("wheel.asm.ClassWiter", 2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(499);
      classWriter0.index = 499;
      int int0 = classWriter0.addUninitializedType("wheel.asm.ClassWiter", 2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.OrFileFilter", "wheel.asm.ClassReader");
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.OrFileFilter", "java/lang/Object");
      assertEquals("java/lang/Object", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(503);
      int int0 = classWriter0.addUninitializedType("wheel.asm.ClassWriter", (-1933));
      assertEquals(1, int0);
      
      Item[] itemArray0 = new Item[2];
      classWriter0.typeTable = itemArray0;
      int int1 = classWriter0.addType(";g4_ZGy_!tY&~?");
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2762));
      Item[] itemArray0 = new Item[2];
      Item item0 = classWriter0.newClassItem("wheel.asm.Label");
      itemArray0[1] = item0;
      classWriter0.typeTable = itemArray0;
      int int0 = classWriter0.getMergedType(1, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2769));
      classWriter0.addUninitializedType("", (-2639));
      int int0 = classWriter0.addUninitializedType("", (-2639));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-748));
      int int0 = classWriter0.addType("rO");
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("rO");
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-15));
      classWriter0.visitOuterClass(",}VpZ`#M!kT'cuSHV8[", "", "");
      int int0 = classWriter0.newNameType("", "");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(46);
      classWriter0.newConst("67pZXEdo&J[tlWcVfs");
      int int0 = classWriter0.newConst("67pZXEdo&J[tlWcVfs");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(Integer.MAX_VALUE);
      Long long0 = new Long((-2790L));
      classWriter0.newConstItem(long0);
      int int0 = classWriter0.newConst(long0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      Item item0 = classWriter0.newFloat(9);
      Item item1 = classWriter0.newFloat(9);
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      Item item0 = classWriter0.newInteger((-1));
      Item item1 = classWriter0.newInteger((-1));
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(462);
      classWriter0.newMethod("AnnotationDefault", "AnnotationDefault", "AnnotationDefault", true);
      Item item0 = classWriter0.newMethodItem("AnnotationDefault", "AnnotationDefault", "AnnotationDefault", true);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Type type0 = Type.LONG_TYPE;
      ClassWriter classWriter0 = new ClassWriter(6);
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(40);
      Class<Integer> class0 = Integer.class;
      Type type0 = Type.getType(class0);
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Double double0 = new Double(0.0);
      Item item0 = classWriter0.newConstItem(double0);
      Item item1 = classWriter0.newConstItem(double0);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      Float float0 = new Float((float) 9);
      Item item0 = classWriter0.newConstItem(float0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(55);
      Boolean boolean0 = new Boolean("4|.");
      FieldVisitor fieldVisitor0 = classWriter0.visitField(6, "org.apache.commons.io.filefilter.DelegateFileFilter", "4|.", "4|.", boolean0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(55);
      Boolean boolean0 = new Boolean(true);
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Short short0 = new Short((short)414);
      Item item0 = classWriter0.newConstItem(short0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1519);
      Character character0 = Character.valueOf('f');
      Item item0 = classWriter0.newConstItem(character0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1285));
      Byte byte0 = new Byte((byte)15);
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-2212), "", "", "I$<H(S,GrfdJMG#&JS", byte0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      byte[] byteArray0 = classWriter0.toByteArray();
      Attribute attribute0 = new Attribute("B`&5BC0d");
      attribute0.value = byteArray0;
      classWriter0.visitAttribute(attribute0);
      byte[] byteArray1 = classWriter0.toByteArray();
      assertEquals(65, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-889275714));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "wheel.asm.Handler";
      stringArray0[2] = ".p=!K6G.d9Z19X";
      stringArray0[3] = "}o!@s$%A";
      stringArray0[4] = "9p\"@Ar";
      stringArray0[5] = "9p\"@Ar";
      stringArray0[6] = "upTSo2+?MY;";
      classWriter0.visit(4096, (-1), "wheel.asm.ClassWriter", "", "", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(197, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 26, "dL", ",", ",", stringArray0, false, false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(61, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      classWriter0.visitField(64, "Q,j1V'H", "Q,j1V'H", "", classWriter0.COMPUTE_FRAMES);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(94, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-15));
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 65535);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(55, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(28);
      classWriter0.visitInnerClass("Code", "OVV!-q@9u:|-[&u", "Code", 200);
      classWriter0.visitInnerClass("OVV!-q@9u:|-[&u", "mv", "OVV!-q@9u:|-[&u", 643);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitAnnotation("j!c#[d~NYWn\"x-Z:Y%v", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(86, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2769));
      classWriter0.visitAnnotation("", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(69, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(6);
      classWriter0.visitOuterClass("", "RuntimeInvisibleAnnotations", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(499);
      classWriter0.visitOuterClass("wheel.asm.ClassWiter", "l", "l");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(87, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitOuterClass("LocalVariableTable", (String) null, (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(11);
      classWriter0.visitSource("java/lang/Object", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-15));
      classWriter0.visitSource("U@", "SourceDebugExtension");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(99, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3816);
      classWriter0.visitSource((String) null, "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      classWriter0.visit(46, 9, "InnerClasses", "RuntimeInvisibleAnnotations", "+^T?", (String[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassWriter classWriter0 = new ClassWriter((-3597));
      classWriter0.visit(2, (-1), "Signature", "wheel.asm.AnnotationWriter", (String) null, stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(113, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(464);
      classWriter0.invalidFrames = true;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0kbQMN&$VO)w.JyXm";
      stringArray0[1] = "l";
      stringArray0[2] = "0kbQMN&$VO)w.JyXm";
      stringArray0[3] = "0kbQMN&$VO)w.JyXm";
      stringArray0[4] = "l";
      stringArray0[5] = "=k3N$S!}**";
      stringArray0[6] = "0kbQMN&$VO)w.JyXm";
      classWriter0.visit(464, 34, "wheel.asm.ClassWiter", "l", "wheel.asm.ClassWiter", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(130, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4428));
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        classWriter0.visitMethod((-4428), (String) null, (String) null, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(6);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        classWriter0.visitField(3, "J", "J", (String) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@1b2e9703
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      Attribute attribute0 = new Attribute("B`&5BC0d");
      classWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }
}
