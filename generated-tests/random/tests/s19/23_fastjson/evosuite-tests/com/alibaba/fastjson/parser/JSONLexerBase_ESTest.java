/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 04:10:39 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("96FxNVA?Z[XP", (-2974));
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      jSONScanner0.pos = 999;
      jSONScanner0.scanFieldBoolean(charArray0);
      charArray0[1] = '[';
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.nextToken();
      assertEquals('x', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan new error");
      SymbolTable symbolTable0 = new SymbolTable(85);
      jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONReaderScanner0.scanType("fb<erEf");
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner0 = new JSONScanner("fb<erEf", 97);
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = '3';
      charArray0[2] = 'j';
      charArray0[3] = 'o';
      charArray0[4] = ':';
      charArray0[5] = '1';
      charArray0[6] = 'u';
      charArray0[7] = 'R';
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(97, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '3';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9999, 9999);
      long long0 = jSONReaderScanner0.scanLong('3');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(3L, long0);
      assertEquals(9999, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = ']';
      charArray0[0] = ']';
      int int0 = 41;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 41);
      jSONReaderScanner0.nextToken();
      char char1 = 'U';
      jSONReaderScanner0.features = (-1790);
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1790));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("D.<(g5zPQLo}5tRs{'|", 62);
      char char0 = ' ';
      jSONReaderScanner0.features = 2333;
      jSONReaderScanner0.info();
      jSONReaderScanner0.subString(125, 125);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.ch = ' ';
      jSONReaderScanner0.close();
      char[] charArray0 = new char[6];
      char char1 = '*';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('*');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = '+';
      charArray0[0] = '+';
      charArray0[1] = 'W';
      charArray0[2] = 'P';
      int int0 = 9;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("SupportAutoType");
      linkedHashSet0.add((String) null);
      linkedHashSet0.add((String) null);
      linkedHashSet0.remove(jSONReaderScanner0);
      jSONReaderScanner0.scanStringArray(linkedHashSet0, '+');
      jSONReaderScanner0.nextToken(9);
      jSONReaderScanner0.scanString('P');
      jSONReaderScanner0.getLocale();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'C';
      char char0 = '*';
      charArray0[1] = '*';
      charArray0[2] = 't';
      charArray0[3] = 'o';
      charArray0[4] = 'z';
      charArray0[5] = 'G';
      charArray0[6] = 'i';
      charArray0[7] = 'N';
      charArray0[8] = 'V';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 68);
      jSONReaderScanner0.scanString('N');
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.isEOF();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#Y2cszTz}9l@4#T2l");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.features = 58;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) jSONReaderScanner0;
      objectArray0[2] = (Object) stringReader0;
      char char0 = 'C';
      jSONReaderScanner0.scanBoolean('C');
      objectArray0[3] = (Object) jSONReaderScanner0;
      objectArray0[4] = (Object) "#Y2cszTz}9l@4#T2l";
      jSONReaderScanner0.lexError("SortFeidFastMatch", objectArray0);
      char char1 = '2';
      jSONReaderScanner0.scanString('2');
      jSONReaderScanner0.isEnabled(4, 4);
      jSONReaderScanner0.pos();
      // Undeclared exception!
      try { 
        stringReader0.mark((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Read-ahead limit < 0
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000", 65);
      jSONReaderScanner0.scanLong('n');
      jSONReaderScanner0.setToken(65);
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = '[';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanDecimal('j');
      jSONReaderScanner0.scanFloat('m');
      jSONReaderScanner0.next();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse null or new");
      jSONScanner0.scanNumber();
      assertEquals('r', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3600, 70);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('-');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 727;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$C", 727);
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[6];
      jSONReaderScanner0.putChar('M');
      jSONReaderScanner0.scanInt('M');
      charArray0[0] = '';
      charArray0[1] = 'w';
      charArray0[2] = 'i';
      jSONReaderScanner0.scanString('M');
      charArray0[3] = '_';
      charArray0[4] = 'P';
      char char0 = '-';
      charArray0[5] = '-';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 18;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":?LV80f\" %aVz)(", 18);
      jSONReaderScanner0.isEnabled(18, (-2228));
      char char0 = 'a';
      jSONReaderScanner0.scanFloat('a');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '@';
      charArray0[1] = '\'';
      charArray0[2] = ':';
      charArray0[3] = 'h';
      charArray0[4] = '+';
      charArray0[5] = 'P';
      charArray0[6] = '2';
      charArray0[7] = '\"';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 19, 1082);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanType("`FbS>\b5");
      jSONReaderScanner0.next();
      assertEquals(1082, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'X';
      charArray0[1] = '=';
      charArray0[2] = '{';
      charArray0[3] = 'N';
      charArray0[4] = 'Y';
      charArray0[5] = 'z';
      charArray0[6] = 'X';
      charArray0[7] = 'I';
      int int0 = 56;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 56);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanFieldInt(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(56);
      jSONReaderScanner0.scanSymbol(symbolTable0, 'X');
      Calendar calendar0 = MockCalendar.getInstance();
      jSONReaderScanner0.calendar = calendar0;
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.numberString();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new", 5211);
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      jSONScanner0.scanDate('f');
      charArray0[1] = '}';
      charArray0[2] = '|';
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanString('}');
      Locale locale0 = Locale.TAIWAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Calendar.getAvailableCalendarTypes();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[*_#O>03`)[X", (-2412));
      Locale locale0 = Locale.FRENCH;
      jSONReaderScanner0.locale = locale0;
      jSONReaderScanner0.skipComment();
      jSONReaderScanner0.matchStat = 1631;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$C;.#98\"?");
      jSONReaderScanner0.scanIdent();
      int int0 = 213;
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.charAt(213);
      char char0 = ']';
      jSONReaderScanner0.indexOf(']', 114);
      char[] charArray0 = new char[2];
      charArray0[0] = '\u001A';
      jSONReaderScanner0.isRef();
      charArray0[1] = '\u001A';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      int int1 = (-2563);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "UTF-8";
      int int0 = (-1926);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("UTF-8", (-1926));
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      charArray0[1] = 'G';
      charArray0[2] = 'p';
      charArray0[3] = 'F';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.putChar('G');
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.hasSpecial = false;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"U\", 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = 'W';
      charArray0[2] = 'N';
      charArray0[3] = '9';
      charArray0[4] = 'k';
      charArray0[5] = 'H';
      charArray0[6] = '/';
      charArray0[7] = 'x';
      charArray0[8] = 'f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 31, 117);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.nextIdent();
      JSONLexerBase.isWhitespace('f');
      jSONReaderScanner0.scanInt('9');
      JSONScanner jSONScanner0 = new JSONScanner("false");
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(117, charArray0, 0, 1385);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support type ", 9961);
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      jSONReaderScanner0.scanStringArray(set0, 'n');
      jSONReaderScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 2178;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" /'|^<*i[@qn*}ZIhL3", 2178);
      char char0 = '<';
      jSONReaderScanner0.putChar('<');
      jSONReaderScanner0.features = 2942;
      int int1 = (-2619);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-2619));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 160);
      jSONReaderScanner0.nextToken(160);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("O=cjHH$tKQEbn?,Q=;8");
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.resetStringPosition();
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray1, class0);
      jSONReaderScanner0.intValue();
      JSONScanner jSONScanner0 = new JSONScanner(charArray1, 0);
      int int0 = 181;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",2k8f(i");
      jSONReaderScanner0.sp = 1;
      jSONReaderScanner0.nextIdent();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 121;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 121, 121);
      JSONScanner jSONScanner0 = new JSONScanner("Y8p");
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.matchField(charArray0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.isRef();
      char char0 = 'x';
      jSONScanner0.scanDouble('x');
      jSONReaderScanner0.indexOf('x', 1327);
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`S", 68);
      jSONScanner0.getLocale();
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('G', 'G', 'M', '<', '<');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" wMvo*|7[");
      jSONScanner0.scanDecimal('o');
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertFalse(boolean0);
      
      jSONScanner0.scanDouble('r');
      jSONScanner0.scanLong('W');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-.L$3&(~ODLkcz", (-1646));
      jSONReaderScanner0.nextToken((-1646));
      jSONReaderScanner0.stringDefaultValue();
      JSONScanner jSONScanner0 = new JSONScanner("", 16384);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed.str.lit");
      jSONScanner0.isBlankInput();
      jSONScanner0.info();
      jSONScanner0.scanDate('D');
      char[] charArray0 = new char[0];
      jSONScanner0.sbuf = charArray0;
      char[] charArray1 = new char[2];
      jSONScanner0.nextIdent();
      char char0 = ')';
      charArray1[0] = ')';
      charArray1[1] = 'V';
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray1, class0);
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.nextToken();
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.info();
      jSONScanner0.getFeatures();
      JSONLexerBase.isWhitespace('f');
      jSONScanner0.scanString(')');
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        pipedWriter0.write("pos 9, json : unclosed.str.lit", (-1), 35);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", 39);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jSONScanner0;
      jSONScanner0.lexError("true", objectArray0);
      jSONScanner0.scanFloat(']');
      char[] charArray0 = new char[2];
      charArray0[0] = ']';
      charArray0[1] = ']';
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanInt(']');
      jSONScanner0.nextToken();
      jSONScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(Integer.MIN_VALUE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 4, json : true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 1462;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 1462);
      jSONReaderScanner0.hasSpecial = false;
      char char0 = 'y';
      jSONReaderScanner0.scanUUID('y');
      jSONReaderScanner0.scanType("new");
      jSONReaderScanner0.isRef();
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      charArray0[1] = 'h';
      charArray0[2] = '<';
      charArray0[3] = '!';
      charArray0[4] = 'e';
      charArray0[5] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2690, 2690);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      SymbolTable symbolTable0 = new SymbolTable(121);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '[');
      jSONReaderScanner0.scanDouble('F');
      jSONReaderScanner0.isEnabled(121, 78);
      assertEquals(2690, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      charArray0[1] = 'h';
      charArray0[2] = '<';
      charArray0[3] = '!';
      charArray0[4] = 'e';
      charArray0[5] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2690, 2690);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('F');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = 'q';
      charArray0[2] = ' ';
      charArray0[3] = ',';
      charArray0[4] = '^';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 44, 101);
      char[] charArray1 = new char[1];
      charArray1[0] = 'Z';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray1, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.LocalDate", 111);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "float overflow : ";
      objectArray0[1] = (Object) jSONReaderScanner0;
      objectArray0[2] = (Object) jSONReaderScanner0;
      objectArray0[3] = (Object) jSONReaderScanner0;
      objectArray0[4] = (Object) "float overflow : ";
      objectArray0[5] = (Object) "float overflow : ";
      objectArray0[6] = (Object) "java.time.LocalDate";
      objectArray0[7] = (Object) "float overflow : ";
      objectArray0[8] = (Object) "java.time.LocalDate";
      jSONReaderScanner0.scanLong('');
      jSONReaderScanner0.lexError("float overflow : ", objectArray0);
      jSONReaderScanner0.isEOF();
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ");
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '';
      charArray0[5] = '';
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, '{');
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3051);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      Locale locale0 = new Locale("undefined", "undefined", "undefined");
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDouble('G');
      jSONReaderScanner0.scanType("@F{Eb`\"fMWDG>?|");
      jSONReaderScanner0.close();
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 106);
      char[] charArray0 = new char[1];
      char char0 = 'p';
      jSONScanner0.stringDefaultValue = "o(D";
      charArray0[0] = 'p';
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.token();
      jSONScanner0.scanFieldDate(charArray0);
      char char1 = '1';
      jSONScanner0.putChar('1');
      jSONScanner0.scanLong('1');
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[1] = '>';
      charArray0[2] = ']';
      charArray0[3] = 'y';
      int int0 = 2101;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2101);
      jSONReaderScanner0.scanDate('>');
      jSONReaderScanner0.getCurrent();
      jSONReaderScanner0.nextToken(36);
      jSONReaderScanner0.scanString('M');
      JSONScanner jSONScanner0 = new JSONScanner(" zV8F48ya7{=0-s&B");
      jSONScanner0.scanLong('M');
      int int1 = 83;
      jSONReaderScanner0.subString(482, 83);
      int int2 = 1;
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("G");
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[1] = '<';
      charArray0[2] = '-';
      charArray0[3] = 'G';
      charArray0[4] = 'b';
      charArray0[5] = 't';
      charArray0[6] = '&';
      charArray0[7] = '0';
      charArray0[8] = 'j';
      jSONReaderScanner0.scanFieldString(charArray0);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.charArrayCompare(charArray1);
      jSONReaderScanner0.scanFieldSymbol(charArray1);
      jSONReaderScanner0.setLocale((Locale) null);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-2480));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - G, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("asqor0<360L!oX2");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 73);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      charArray0[1] = '-';
      charArray0[2] = 'I';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 73, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 48;
      JSONScanner jSONScanner0 = new JSONScanner("\"'W]]i?)t;#", 48);
      char[] charArray0 = new char[9];
      charArray0[0] = 'P';
      charArray0[1] = 's';
      charArray0[2] = 'V';
      charArray0[3] = '<';
      charArray0[4] = '#';
      charArray0[5] = '*';
      charArray0[6] = 'c';
      charArray0[7] = ')';
      charArray0[8] = 'i';
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M^9(");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 120);
      jSONReaderScanner0.sp = 120;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      char char0 = '!';
      charArray0[1] = '!';
      charArray0[2] = 'T';
      charArray0[3] = 'V';
      charArray0[4] = '?';
      charArray0[5] = 'E';
      int int0 = 117;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 117);
      jSONReaderScanner0.scanLong('T');
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.matchStat = 83;
      jSONReaderScanner0.indexOf('T', 117);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.stringVal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", 103);
      jSONReaderScanner0.nextToken(268);
      jSONReaderScanner0.subString(103, 103);
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = 'Y';
      charArray0[2] = '&';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2185), 103);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "v";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("v");
      jSONReaderScanner0.scanInt('\\');
      char[] charArray0 = null;
      int int0 = 3111;
      SymbolTable symbolTable0 = new SymbolTable(3111);
      int int1 = 85;
      int int2 = 1797;
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol((char[]) null, 85, 3111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('1');
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = '1';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 123);
      jSONReaderScanner0.charAt(107);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 323;
      JSONScanner jSONScanner0 = new JSONScanner(" QJ=BMP={Gz56Y'", 323);
      int int1 = (-486);
      jSONScanner0.scanString('c');
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ", 91);
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = 's';
      charArray0[2] = 'T';
      charArray0[3] = 'P';
      charArray0[4] = '8';
      charArray0[5] = ',';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.subString(1967, 920);
      JSONLexerBase.isWhitespace('B');
      SymbolTable symbolTable0 = new SymbolTable(42);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'B');
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable1 = new SymbolTable(62);
      jSONReaderScanner0.scanEnum(class0, symbolTable1, 'A');
      jSONReaderScanner0.scanBoolean('a');
      char char0 = jSONReaderScanner0.next();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('o', char0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#@]#", 32);
      char char0 = 'l';
      jSONReaderScanner0.putChar('l');
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = '&';
      charArray0[2] = '$';
      charArray0[3] = 'E';
      charArray0[4] = '\\';
      charArray0[5] = 'd';
      charArray0[6] = 'g';
      charArray0[7] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 594, 594);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - q, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$ref");
      jSONScanner0.close();
      jSONScanner0.longValue();
      jSONScanner0.intValue();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanFloat('Y');
      jSONScanner0.stringDefaultValue();
      jSONScanner0.bytesValue();
      jSONScanner0.scanFloat('Y');
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      charArray0[5] = 'Y';
      charArray0[6] = 'Y';
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.getTimeZone();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]H!kL7i");
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = 'C';
      charArray0[2] = '7';
      charArray0[3] = '>';
      charArray0[4] = 'T';
      charArray0[5] = 'm';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = 'n';
      charArray0[2] = 'x';
      charArray0[3] = 'A';
      charArray0[4] = 'v';
      charArray0[5] = 'k';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 22, 996);
      boolean boolean0 = true;
      jSONReaderScanner0.hasSpecial = true;
      SymbolTable symbolTable0 = new SymbolTable(117);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'O');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 68;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" Ya-", 68);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = 'o';
      charArray0[2] = '%';
      charArray0[3] = 'O';
      charArray0[4] = 'V';
      charArray0[5] = '\"';
      charArray0[6] = ')';
      charArray0[7] = '&';
      charArray0[8] = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 91);
      int int0 = jSONReaderScanner0.pos();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = '!';
      charArray0[2] = '+';
      charArray0[3] = '$';
      charArray0[4] = '&';
      charArray0[5] = '{';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 91);
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = (-4780);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Hx{h[a)Emzj$K32c[", (-4780));
      char char0 = '&';
      jSONReaderScanner0.scanDate('&');
      Feature feature0 = Feature.SupportArrayToBean;
      jSONReaderScanner0.config(feature0, false);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "&<";
      JSONScanner jSONScanner0 = new JSONScanner("&<");
      jSONScanner0.isBlankInput();
      char[] charArray0 = new char[7];
      charArray0[0] = 'W';
      charArray0[1] = '7';
      charArray0[2] = 's';
      charArray0[3] = '0';
      charArray0[4] = 'n';
      charArray0[5] = ':';
      charArray0[6] = '[';
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.getCurrent();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&<", (-2));
      jSONReaderScanner0.scanDouble('F');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-2), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1Tz", 3153);
      char[] charArray0 = new char[3];
      jSONScanner0.scanISO8601DateIfMatch(false);
      charArray0[0] = 'B';
      jSONScanner0.info();
      charArray0[1] = 'm';
      JSONLexerBase.readString(charArray0, 0);
      charArray0[2] = '{';
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.nextIdent();
      jSONScanner0.scanDate('B');
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.scanFloat(')');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pos 0, json : 1Tz");
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONScanner0.indexOf('k', 3153);
      assertEquals('T', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 118;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", 118);
      jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal setter", 0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'R';
      jSONScanner0.scanFloat('R');
      charArray0[1] = ':';
      charArray0[2] = '=';
      charArray0[3] = '}';
      charArray0[4] = '2';
      jSONScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. i
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = 'q';
      charArray0[2] = 'y';
      charArray0[3] = 'Z';
      charArray0[4] = '<';
      charArray0[5] = 'v';
      charArray0[6] = '=';
      charArray0[7] = '\\';
      charArray0[8] = 'b';
      jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal(':');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xO[z>CRa!");
      SymbolTable symbolTable0 = new SymbolTable(1630);
      jSONReaderScanner0.addSymbol(4, 1630, 1630, symbolTable0);
      jSONReaderScanner0.indexOf(';', 85);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('7');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" -> ");
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.observesDaylightTime();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.setTimeZone(timeZone0);
      char char0 = ']';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : >
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("k+9d7x$");
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = 'q';
      charArray0[2] = 'H';
      charArray0[3] = 'a';
      charArray0[4] = 'T';
      charArray0[5] = 'z';
      charArray0[6] = 'c';
      jSONScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-2452), (-514));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[1] = '[';
      charArray0[2] = 'e';
      charArray0[3] = 'd';
      charArray0[4] = 'X';
      charArray0[5] = '0';
      jSONScanner0.scanISO8601DateIfMatch();
      charArray0[6] = 'x';
      jSONScanner0.scanFieldDate(charArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) '0';
      objectArray0[1] = (Object) 'd';
      jSONScanner0.lexError("", objectArray0);
      assertEquals(1, jSONScanner0.token());
      
      jSONScanner0.nextToken(12);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("IgnoreAutoType");
      char char0 = 'v';
      jSONReaderScanner0.scanUUID('v');
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      char char1 = ';';
      charArray0[1] = ';';
      char char2 = '/';
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) ';';
      objectArray0[1] = (Object) ';';
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "IgnoreAutoType";
      jSONReaderScanner0.lexError("6[h", objectArray0);
      charArray0[2] = '/';
      charArray0[3] = 'a';
      jSONReaderScanner0.setToken(92);
      int int0 = (-1719304391);
      jSONReaderScanner0.matchStat = (-1719304391);
      char char3 = 'Q';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 398;
      JSONScanner jSONScanner0 = new JSONScanner("Xt*6cx{dy.L", 398);
      jSONScanner0.isRef();
      jSONScanner0.info();
      jSONScanner0.scanType("2*fxZ`kVN");
      PipedWriter pipedWriter0 = new PipedWriter();
      int int1 = (-804);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, (-804));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = '9';
      charArray0[2] = '\"';
      charArray0[3] = '';
      charArray0[4] = '|';
      charArray0[5] = ')';
      charArray0[6] = 'C';
      int int0 = 1181;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1181, 1181);
      char[] charArray1 = new char[7];
      charArray1[0] = 'C';
      charArray1[1] = '3';
      charArray1[2] = '!';
      charArray1[3] = ')';
      charArray1[4] = '9';
      charArray1[5] = '|';
      charArray1[6] = '';
      jSONReaderScanner0.scanFieldIntArray(charArray1);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDate(':');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V^RCH3O]Cr;T~0w<");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-1378));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ^, info : pos 1, json : V^RCH3O]Cr;T~0w<
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("aJ3_<i,#^BTgcIk");
      jSONScanner0.scanLong('Y');
      jSONScanner0.tokenName();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. a
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'b';
      charArray0[0] = 'b';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 78, 78);
      char char1 = 'F';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanUUID('F');
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.stringVal();
      JSONScanner jSONScanner0 = new JSONScanner("", 84);
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      int int0 = 108;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 108);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('6');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dalvik");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char char0 = ']';
      int int0 = 76;
      int int1 = 11;
      JSONScanner.checkDate(']', ']', ']', '[', '[', '[', 76, 11);
      JSONScanner jSONScanner0 = new JSONScanner("U]0s<z");
      jSONScanner0.isRef();
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      jSONScanner0.scanDate(']');
      charArray0[1] = '[';
      charArray0[2] = ']';
      jSONScanner0.scanBoolean('[');
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("R", 774);
      int int0 = 45;
      jSONReaderScanner0.np = 45;
      jSONReaderScanner0.integerValue();
      char char0 = 'I';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 580;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 580);
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[2];
      char char0 = '#';
      charArray0[0] = '#';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 3966);
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      jSONScanner0.config(feature0, false);
      jSONScanner0.scanBoolean('C');
      jSONScanner0.longValue();
      jSONScanner0.next();
      char[] charArray0 = new char[3];
      charArray0[0] = '\u001A';
      jSONScanner0.isBlankInput();
      charArray0[1] = '\u001A';
      charArray0[2] = '\u001A';
      jSONScanner0.matchField2(charArray0);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'C';
      charArray0[2] = 'e';
      charArray0[3] = 'U';
      charArray0[4] = '[';
      charArray0[5] = 'K';
      charArray0[6] = 'i';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13, 13);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanFieldString(charArray0);
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 116);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(479);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '/');
      jSONReaderScanner0.subString(125, 380);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = '(';
      charArray0[0] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66, 66);
      Locale locale0 = Locale.ITALIAN;
      locale0.getDisplayVariant();
      Locale locale1 = locale0.stripExtensions();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONReaderScanner0.newCollectionByType(class0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, collection0, locale_FilteringMode0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale1);
      locale0.getDisplayVariant(locale1);
      char char1 = ' ';
      // Undeclared exception!
      try { 
        locale0.getExtension(' ');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key:  
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("trim");
      jSONReaderScanner0.ch = 'G';
      jSONReaderScanner0.nextToken(845);
      SymbolTable symbolTable0 = new SymbolTable(108);
      symbolTable0.addSymbol("uu;uVF'Nl16kQ`", 0, 0, 845);
      jSONReaderScanner0.addSymbol(845, 40, 845, symbolTable0);
      jSONReaderScanner0.tokenName();
      boolean boolean0 = jSONReaderScanner0.scanBoolean('.');
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 92);
      jSONReaderScanner0.getCalendar();
      assertEquals(92, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("f,l5?^IVQsz", 767);
      char[] charArray0 = new char[7];
      char char0 = 'r';
      charArray0[0] = 'r';
      char char1 = '2';
      charArray0[1] = '2';
      char char2 = '[';
      charArray0[2] = '[';
      charArray0[3] = '6';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      charArray0[4] = 'B';
      char char3 = 'j';
      charArray0[5] = 'j';
      char char4 = 'v';
      charArray0[6] = 'v';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("f,l5?^IVQsz", (-2));
      int int0 = 39;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "undefined";
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.scanDate('\"');
      char[] charArray0 = new char[7];
      charArray0[0] = ' ';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      charArray0[5] = 'P';
      charArray0[6] = '\"';
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 56);
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.timeZone = timeZone0;
      jSONReaderScanner0.nextTokenWithChar('c');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-3020));
      Feature feature0 = Feature.IgnoreAutoType;
      jSONScanner0.config(feature0, true);
      Feature feature1 = Feature.AllowComment;
      jSONScanner0.config(feature1, true);
      jSONScanner0.indexOf('Q', (-2980));
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      charArray0[4] = 'Q';
      charArray0[5] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-3020), 39);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = 'm';
      charArray0[2] = 'l';
      charArray0[3] = 'v';
      charArray0[4] = ']';
      charArray0[5] = '$';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 49);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("axG.0");
      char[] charArray0 = new char[8];
      SymbolTable symbolTable0 = new SymbolTable(3826);
      jSONScanner0.scanSymbol(symbolTable0);
      charArray0[0] = 'H';
      charArray0[1] = 'b';
      charArray0[2] = 'Q';
      JSONLexerBase.readString(charArray0, 0);
      charArray0[3] = 'U';
      charArray0[4] = 'S';
      jSONScanner0.lexError("N@l:4:$@ak39L~u", (Object[]) null);
      charArray0[5] = ']';
      char char0 = 'C';
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'O';
      charArray0[1] = '{';
      int int0 = 1634;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1634);
      jSONReaderScanner0.putChar('{');
      boolean boolean0 = true;
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.integerValue();
      jSONReaderScanner0.skipWhitespace();
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      int int1 = (-109);
      // Undeclared exception!
      try { 
        timeZone0.getOffset(93, 34, 44, 93, (-2), 93);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'B';
      charArray0[1] = '`';
      charArray0[2] = 'Q';
      charArray0[3] = '<';
      charArray0[4] = 'Z';
      charArray0[5] = 'S';
      charArray0[6] = 'o';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 414, 414);
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pk$", 110);
      char[] charArray0 = new char[8];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      charArray0[0] = ')';
      charArray0[1] = 'y';
      charArray0[2] = '(';
      charArray0[3] = '9';
      charArray0[4] = 'V';
      charArray0[5] = 'z';
      charArray0[6] = '~';
      char char0 = 'L';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "UN]pA[P~CwkS `^^dP";
      int int0 = 998;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("UN]pA[P~CwkS `^^dP", 998);
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = '7';
      charArray0[2] = '/';
      charArray0[3] = '^';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = 'F';
      charArray0[2] = 'Z';
      charArray0[3] = 'p';
      int int0 = 102;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 102, 102);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('Z');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match Z - \", info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{P#7RFX=z.Zb[p");
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = 'X';
      charArray0[2] = 'z';
      charArray0[3] = '5';
      charArray0[4] = 't';
      charArray0[5] = '5';
      jSONReaderScanner0.scanFieldLong(charArray0);
      Locale locale0 = Locale.PRC;
      jSONReaderScanner0.setLocale(locale0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.setLocale((Locale) null);
      jSONScanner0.charAt(17);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "85Jx2xMH9*fPZ2Sx";
      int int0 = 1817;
      JSONScanner jSONScanner0 = new JSONScanner("85Jx2xMH9*fPZ2Sx", 1817);
      char[] charArray0 = new char[5];
      SymbolTable symbolTable0 = new SymbolTable(1817);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'C';
      charArray0[1] = ';';
      charArray0[2] = 'e';
      charArray0[3] = 'U';
      charArray0[4] = '[';
      charArray0[5] = 'K';
      charArray0[6] = 'i';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13, 13);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pk$", 110);
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = 'y';
      charArray0[2] = '(';
      charArray0[3] = '9';
      charArray0[4] = 'V';
      charArray0[5] = 'z';
      charArray0[6] = '~';
      charArray0[7] = 'L';
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 112);
      jSONScanner0.resetStringPosition();
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanBoolean('q');
      jSONScanner0.next();
      assertEquals(112, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = 'm';
      charArray0[2] = 'l';
      charArray0[3] = 'v';
      charArray0[4] = ']';
      charArray0[5] = '$';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = 'C';
      charArray0[0] = 'C';
      char char1 = '8';
      charArray0[1] = '8';
      charArray0[2] = 'y';
      char char2 = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = '}';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 56, 56);
      jSONReaderScanner0.eofPos = 1215;
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.tokenName();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("IgnoreNotMatch");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.stringDefaultValue = "AVf)F$.\"";
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.matchField2(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.getTimeZone();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("toString");
      char char0 = '-';
      jSONReaderScanner0.putChar('-');
      int int0 = (-523);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-523), (-523));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -523
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V");
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = '<';
      charArray0[2] = '9';
      charArray0[3] = '\'';
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", (-1136));
      jSONReaderScanner0.scanDate('*');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.indexOf('|', 1116);
      jSONReaderScanner0.charArrayCompare(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("illegal setter", (-1));
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.matchField2(charArray0);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "";
      int int0 = (-2);
      JSONScanner jSONScanner0 = new JSONScanner("", (-2));
      int int1 = 34;
      char[] charArray0 = new char[4];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.hasSpecial = false;
      SymbolTable symbolTable0 = new SymbolTable(59);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.scanLong('G');
      charArray0[0] = 'M';
      charArray0[1] = '}';
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.sbuf = charArray0;
      jSONScanner0.scanBoolean(':');
      charArray0[2] = '!';
      char char0 = '&';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('W');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match W - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("h");
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = 'T';
      charArray0[2] = '$';
      charArray0[3] = 'K';
      charArray0[4] = 't';
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("|XG}(%HwlC>^cO");
      jSONScanner0.resetStringPosition();
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = 'e';
      charArray0[2] = '~';
      jSONScanner0.scanNumber();
      charArray0[3] = '=';
      jSONScanner0.scanFieldDate(charArray0);
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      jSONScanner0.token();
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo((-46), (-4121), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", 1787);
      char[] charArray0 = new char[5];
      charArray0[0] = 'u';
      jSONScanner0.nextToken(1071);
      charArray0[1] = '2';
      charArray0[2] = 'Q';
      char char0 = '!';
      charArray0[3] = '!';
      char char1 = 'L';
      charArray0[4] = 'L';
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(1787, charArray0, 1787, 1787);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }
}
