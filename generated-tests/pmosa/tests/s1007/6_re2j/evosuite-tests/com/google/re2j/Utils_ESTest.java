/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 08:40:14 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Utils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utils_ESTest extends Utils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = Utils.stringToRunes("\n");
      int int0 = 0;
      Utils.runeToString(0);
      int int1 = (-1020);
      // Undeclared exception!
      try { 
        Utils.subarray(intArray0, (-1020), 2196);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1020
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = Utils.stringToRunes("");
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = Utils.isWordRune((-465));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("b`n;Xc1$t(FrW M%'`+");
      Utils.escapeRune(stringBuilder0, 1);
      assertEquals("b`n;Xc1$t(FrW M%'`+\\x01", stringBuilder0.toString());
      
      int[] intArray0 = Utils.subarray((int[]) null, 718, 718);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utils.isWordRune((-635));
      String string0 = "\\.+*?()|[]{}^$";
      int[] intArray0 = Utils.stringToRunes(".+*?()|[]{}^$");
      Utils.subarray(intArray0, 0, 0);
      Utils.stringToRunes(".+*?()|[]{}^$");
      Utils.isWordRune((-635));
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)97;
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-42);
      byte byte1 = (byte)0;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        Utils.subarray(byteArray0, 0, (-635));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = Utils.isalnum(6071);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 6071;
      intArray0[1] = 6071;
      intArray0[2] = 6071;
      intArray0[3] = 6071;
      intArray0[4] = 6071;
      int int0 = (-1793);
      // Undeclared exception!
      try { 
        Utils.subarray(intArray0, 4719, (-1793));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 3096;
      Utils.emptyOpContext(0, 3096);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 32;
      intArray0[2] = 3096;
      int int1 = 8;
      intArray0[3] = 8;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        Utils.subarray(intArray0, 8, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = Utils.runeToString((-486));
      assertEquals("\uFE1A", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-44);
      int int0 = Utils.indexOf(byteArray0, byteArray0, (byte) (-44));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Utils.subarray((int[]) null, 0, 0);
      Utils.isalnum(0);
      String string0 = "";
      Utils.stringToRunes("");
      Utils.runeToString(0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-25);
      byteArray0[0] = (byte) (-25);
      Utils.indexOf(byteArray0, byteArray0, (byte) (-25));
      int int0 = 95;
      // Undeclared exception!
      try { 
        Utils.subarray(byteArray0, 95, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = Utils.isWordRune((-713));
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = Utils.indexOf(byteArray0, byteArray0, 48);
      assertEquals(0, int0);
      
      int int1 = Utils.unhex((-2106));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Utils.runeToString(3441);
      Utils.runeToString(3441);
      Utils.isalnum(3441);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte)95;
      Utils.indexOf(byteArray0, byteArray0, 2094);
      Utils.emptyOpContext(543, (byte)0);
      int int0 = (-2604);
      // Undeclared exception!
      try { 
        Utils.subarray(byteArray0, (byte)0, (-2604));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      byte[] byteArray1 = Utils.subarray(byteArray0, 2109, 2109);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = Utils.emptyOpContext(0, 661);
      assertEquals(32, int0);
      
      Utils.isWordRune(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)0;
      Utils.subarray(byteArray0, 0, (byte)0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-103);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)46;
      byteArray1[5] = (byte) (-103);
      Utils.indexOf(byteArray1, byteArray0, (-2114));
      int int1 = Utils.unhex((byte)0);
      assertEquals((-1), int1);
      
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-103);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)29;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)46;
      byteArray2[5] = (byte)46;
      byteArray2[6] = (byte) (-103);
      byteArray2[7] = (byte)46;
      byteArray2[8] = (byte) (-103);
      Utils.indexOf(byteArray2, byteArray1, 0);
      int int2 = Utils.emptyOpContext(0, (-1020));
      assertEquals(42, int2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-81);
      byteArray1[2] = (byte) (-81);
      byteArray1[3] = (byte) (-81);
      byteArray1[4] = (byte) (-81);
      Utils.indexOf(byteArray0, byteArray1, (byte) (-45));
      // Undeclared exception!
      try { 
        Utils.escapeRune((StringBuilder) null, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-118);
      int int0 = Utils.indexOf(byteArray0, byteArray0, (byte) (-118));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utils.isalnum(5604);
      Utils.isalnum(5604);
      Utils.runeToString(5604);
      Utils.runeToString((-1666));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byte byte0 = (byte)51;
      byteArray0[1] = (byte)51;
      byte byte1 = (byte)92;
      byteArray0[2] = (byte)92;
      byte byte2 = (byte)100;
      byteArray0[3] = (byte)100;
      byte byte3 = (byte)55;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)0;
      byte byte4 = (byte)110;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte)8;
      // Undeclared exception!
      try { 
        Utils.subarray(byteArray0, 48, (byte)0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 767;
      Utils.unhex(767);
      String string0 = "P";
      Utils.stringToRunes("P");
      Utils.runeToString((-1));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      int int1 = 521;
      // Undeclared exception!
      try { 
        Utils.subarray(byteArray0, (-1590), 521);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1590
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("b`n;Xc1$t(FrW M%'`+");
      stringBuilder0.append(false);
      Utils.escapeRune(stringBuilder0, (byte)27);
      assertEquals("b`n;Xc1$t(FrW M%'`+false\\x1b", stringBuilder0.toString());
      
      String string0 = Utils.runeToString(4);
      assertEquals("\u0004", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Utils.emptyOpContext(164, 70);
      Utils.unhex(70);
      Utils.emptyOpContext(48, (-937));
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)44;
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)39;
      // Undeclared exception!
      try { 
        Utils.subarray(byteArray0, (-458), 64031);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -458
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("b`n;Xc1$t(FrW M%'`+");
      int int0 = Utils.emptyOpContext(58, 58);
      assertEquals(32, int0);
      
      boolean boolean0 = Utils.isWordRune(32);
      int int1 = Utils.emptyOpContext(1001, 58);
      assertEquals(32, int1);
      
      boolean boolean1 = Utils.isalnum(78);
      assertFalse(boolean1 == boolean0);
      
      int int2 = Utils.unhex(1001);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Utils.isWordRune((byte)102);
      Utils.indexOf(byteArray0, byteArray0, (-301));
      // Undeclared exception!
      try { 
        Utils.escapeRune((StringBuilder) null, (byte)102);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("b`n;Xc1$t(FrW M%'`+");
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (-1.0F));
      stringBuilder1.replace(0, 0, "b`n;Xc1$t(FrW M%'`+");
      StringBuilder stringBuilder2 = stringBuilder1.appendCodePoint(0);
      StringBuilder stringBuilder3 = stringBuilder2.append((CharSequence) stringBuilder1);
      stringBuilder0.insert(0, '.');
      StringBuilder stringBuilder4 = stringBuilder3.append((long) 0);
      StringBuilder stringBuilder5 = stringBuilder4.append((Object) "b`n;Xc1$t(FrW M%'`+");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-81);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte)61;
      byteArray1[2] = (byte)61;
      byteArray1[3] = (byte)108;
      byteArray1[4] = (byte)61;
      byteArray1[5] = (byte) (-81);
      byteArray1[6] = (byte)61;
      Utils.indexOf(byteArray0, byteArray1, 9);
      Utils.escapeRune(stringBuilder0, (byte)61);
      StringBuilder stringBuilder6 = stringBuilder5.insert((int) (byte)61, 1021.454F);
      Utils.escapeRune(stringBuilder6, 12);
      assertEquals(".b`n;Xc1$t(FrW M%'`+-1.0b`n;Xc1$t(FrW M%'`+\u0000b`n;Xc1$t(FrW M%'1021.454`+-1.0b`n;Xc1$t(FrW M%'`+\u00000b`n;Xc1$t(FrW M%'`+=\\f", stringBuilder5.toString());
      assertEquals(".b`n;Xc1$t(FrW M%'`+-1.0b`n;Xc1$t(FrW M%'`+\u0000b`n;Xc1$t(FrW M%'1021.454`+-1.0b`n;Xc1$t(FrW M%'`+\u00000b`n;Xc1$t(FrW M%'`+=\\f", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("b`n;Xc1$t(FrW M%'`+");
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (-1.0F));
      stringBuilder1.replace(0, 0, "b`n;Xc1$t(FrW M%'`+");
      StringBuilder stringBuilder2 = stringBuilder1.appendCodePoint(0);
      StringBuilder stringBuilder3 = stringBuilder2.append((CharSequence) stringBuilder1);
      stringBuilder0.insert(0, '.');
      StringBuilder stringBuilder4 = stringBuilder3.append((long) 0);
      stringBuilder4.append((Object) "b`n;Xc1$t(FrW M%'`+");
      StringBuilder stringBuilder5 = stringBuilder4.insert(0, 'K');
      byte[] byteArray0 = new byte[0];
      Utils.indexOf(byteArray0, byteArray0, 216);
      Utils.escapeRune(stringBuilder5, (-3478));
      assertEquals("K.b`n;Xc1$t(FrW M%'`+-1.0b`n;Xc1$t(FrW M%'`+\u0000b`n;Xc1$t(FrW M%'`+-1.0b`n;Xc1$t(FrW M%'`+\u00000b`n;Xc1$t(FrW M%'`+\\xfffff26a", stringBuilder5.toString());
      assertEquals("K.b`n;Xc1$t(FrW M%'`+-1.0b`n;Xc1$t(FrW M%'`+\u0000b`n;Xc1$t(FrW M%'`+-1.0b`n;Xc1$t(FrW M%'`+\u00000b`n;Xc1$t(FrW M%'`+\\xfffff26a", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("b`n;Xc1$t(FrW M%'`+");
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (-1.0F));
      stringBuilder1.replace(0, 0, "b`n;Xc1$t(FrW M%'`+");
      StringBuilder stringBuilder2 = stringBuilder1.appendCodePoint(0);
      stringBuilder2.append((CharSequence) stringBuilder1);
      stringBuilder1.insert(0, '.');
      StringBuilder stringBuilder3 = stringBuilder1.append(0L);
      StringBuilder stringBuilder4 = stringBuilder3.append((Object) "b`n;Xc1$t(FrW M%'`+");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-81);
      Utils.indexOf(byteArray0, byteArray0, 959);
      Utils.escapeRune(stringBuilder2, 9);
      stringBuilder4.insert(0, (float) (byte)108);
      Utils.escapeRune(stringBuilder4, (byte) (-81));
      assertEquals("108.0.b`n;Xc1$t(FrW M%'`+-1.0b`n;Xc1$t(FrW M%'`+\u0000b`n;Xc1$t(FrW M%'`+-1.0b`n;Xc1$t(FrW M%'`+\u00000b`n;Xc1$t(FrW M%'`+\\t\\xffffffaf", stringBuilder4.toString());
      assertEquals("108.0.b`n;Xc1$t(FrW M%'`+-1.0b`n;Xc1$t(FrW M%'`+\u0000b`n;Xc1$t(FrW M%'`+-1.0b`n;Xc1$t(FrW M%'`+\u00000b`n;Xc1$t(FrW M%'`+\\t\\xffffffaf", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)0;
      Utils.indexOf(byteArray0, byteArray0, 6);
      // Undeclared exception!
      try { 
        Utils.escapeRune((StringBuilder) null, 2147);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("b`n;Xc1$t(FrW M%'`+");
      Utils.emptyOpContext(56, 56);
      Utils.emptyOpContext(56, 56);
      Utils.isalnum(56);
      Utils.unhex(56);
      Utils.unhex(8);
      Utils.runeToString(32);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)72;
      Utils.indexOf(byteArray0, byteArray0, 97);
      Utils.escapeRune(stringBuilder0, 58);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(438, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 438
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("b`n;Xc1$t(FrW M%'`+");
      Utils.emptyOpContext(58, 58);
      Utils.emptyOpContext(58, 58);
      Utils.isalnum(58);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      Utils.indexOf(byteArray0, byteArray0, (-4722));
      Utils.escapeRune(stringBuilder0, 13);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-5248), (float) (byte) (-58));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -5248
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("b`n;Xc1$t(FrW M%'`+");
      Utils.emptyOpContext(58, 58);
      Utils.emptyOpContext(58, 58);
      Utils.isalnum(58);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)17;
      Utils.indexOf(byteArray0, byteArray0, (byte) (-26));
      Utils.escapeRune(stringBuilder0, 8);
      stringBuilder0.insert(0, (float) (byte)17);
      Utils.escapeRune(stringBuilder0, 239);
      assertEquals("17.0b`n;Xc1$t(FrW M%'`+\\b\u00EF", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("b`n;Xc1$t(FrW M%'`+");
      Utils.emptyOpContext(58, 58);
      int int0 = Utils.EMPTY_BEGIN_TEXT;
      Utils.isalnum(58);
      byte[] byteArray0 = new byte[1];
      int int1 = Utils.EMPTY_ALL;
      StringBuilder stringBuilder1 = stringBuilder0.append((double) (byte)17);
      Utils.escapeRune(stringBuilder1, 10);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-3348), (float) 122);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3348
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }
}
