/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 23:26:40 GMT 2019
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SHA-1");
      httpUrl0.querySize();
      HttpUrl httpUrl1 = httpUrl0.resolve("SHA-1");
      String string0 = HttpUrl.USERNAME_ENCODE_SET;
      HttpUrl.percentDecode(" \"':;<=>@[]^`{}|/?#", false);
      HttpUrl.canonicalize("/", " \"':;<=>@[]^`{}|/?#", false, false, false, false);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder(" \"':;<=>@[]^`{}|/?#");
      String string1 = HttpUrl.PATH_SEGMENT_ENCODE_SET;
      HttpUrl httpUrl2 = httpUrl_Builder0.build();
      Object object0 = new Object();
      HttpUrl httpUrl3 = new HttpUrl(httpUrl_Builder0);
      httpUrl0.equals(httpUrl3);
      httpUrl2.encodedPath();
      httpUrl3.encodedUsername();
      httpUrl_Builder0.build();
      HttpUrl httpUrl4 = httpUrl_Builder0.build();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("%2F%5C");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("{rmC*)x{HkC>R1VVJr");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("");
      HttpUrl httpUrl5 = new HttpUrl(httpUrl_Builder3);
      httpUrl5.queryParameterName(0);
      httpUrl5.queryParameterNames();
      httpUrl1.password();
      httpUrl4.encodedPath();
      HttpUrl.parse("%2F%5C");
      HttpUrl.canonicalize("{rmC*)x{HkC>R1VVJr", 6, 6, "::", false, true, false, false);
      httpUrl3.port();
      httpUrl_Builder2.toString();
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("d*kc6Ok-=i(|=a*%FIv", 31, 31, "/", true, false, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "K";
      httpUrl_Builder0.addPathSegment("K");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("K");
      httpUrl_Builder1.addPathSegments("K");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("K");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.fragment("K");
      httpUrl_Builder3.encodedPassword("K");
      httpUrl_Builder1.addEncodedPathSegment("%2e.");
      httpUrl_Builder2.addEncodedPathSegment("%2e.");
      httpUrl_Builder1.addPathSegment("K");
      String string1 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder3.removePathSegment(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SHA-1");
      httpUrl0.querySize();
      httpUrl0.resolve("SHA-1");
      HttpUrl.queryStringToNamesAndValues("WK");
      String string0 = HttpUrl.USERNAME_ENCODE_SET;
      HttpUrl.percentDecode(" \"':;<=>@[]^`{}|/?#", false);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer0.read(buffer1, (long) 0);
      HttpUrl.canonicalize(buffer1, "/", 0, 0, "/", false, true, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("%2F%");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedPath("/");
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SHA-1");
      httpUrl0.querySize();
      HttpUrl httpUrl1 = httpUrl0.resolve("SHA-1");
      String string0 = HttpUrl.USERNAME_ENCODE_SET;
      HttpUrl.percentDecode(" \"':;<=>@[]^`{}|/?#", false);
      HttpUrl.canonicalize("/", " \"':;<=>@[]^`{}|/?#", false, false, false, false);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder(" \"':;<=>@[]^`{}|/?#");
      String string1 = HttpUrl.PATH_SEGMENT_ENCODE_SET;
      HttpUrl httpUrl2 = httpUrl_Builder0.build();
      Object object0 = new Object();
      HttpUrl httpUrl3 = new HttpUrl(httpUrl_Builder0);
      httpUrl0.equals(httpUrl3);
      httpUrl2.encodedPath();
      httpUrl3.encodedUsername();
      httpUrl_Builder0.build();
      String string2 = "e +0A";
      httpUrl3.encodedPath();
      httpUrl0.encodedQuery();
      httpUrl2.queryParameter("e +0A");
      try { 
        HttpUrl.getChecked("SI4D");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for SI4D
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SHA-1");
      httpUrl0.querySize();
      HttpUrl httpUrl1 = httpUrl0.resolve("SHA-1");
      String string0 = HttpUrl.FRAGMENT_ENCODE_SET;
      httpUrl0.encodedPassword();
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder("");
      String string1 = HttpUrl.PATH_SEGMENT_ENCODE_SET;
      HttpUrl httpUrl2 = httpUrl_Builder0.build();
      Object object0 = new Object();
      HttpUrl httpUrl3 = new HttpUrl(httpUrl_Builder0);
      httpUrl0.equals(httpUrl3);
      String string2 = httpUrl2.encodedPath();
      assertEquals("/SHA-1", string2);
      
      HttpUrl httpUrl4 = httpUrl_Builder0.build();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      httpUrl_Builder1.query("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedUsername("");
      HttpUrl httpUrl5 = new HttpUrl(httpUrl_Builder2);
      Set<String> set0 = httpUrl5.queryParameterNames();
      assertEquals("http://foo.bar/SHA-1?", httpUrl5.toString());
      assertTrue(set0.contains(""));
      
      httpUrl3.password();
      assertTrue(httpUrl3.equals((Object)httpUrl4));
      assertEquals(80, httpUrl3.port());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.newBuilder("9");
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("", (-2680), (-2680), "9", false, false, true, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SHA-1");
      httpUrl0.querySize();
      HttpUrl httpUrl1 = httpUrl0.resolve("SHA-1");
      HttpUrl httpUrl2 = HttpUrl.get(uRI0);
      Buffer buffer0 = new Buffer();
      String string0 = HttpUrl.FRAGMENT_ENCODE_SET;
      httpUrl2.encodedPassword();
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder("");
      httpUrl1.toString();
      String string1 = HttpUrl.PATH_SEGMENT_ENCODE_SET;
      httpUrl0.toString();
      Object object0 = new Object();
      Object object1 = new Object();
      HttpUrl httpUrl3 = new HttpUrl(httpUrl_Builder0);
      httpUrl2.equals(httpUrl3);
      String string2 = HttpUrl.USERNAME_ENCODE_SET;
      httpUrl3.resolve("/");
      HttpUrl httpUrl4 = httpUrl_Builder0.build();
      httpUrl4.username();
      HttpUrl httpUrl5 = HttpUrl.parse("M!mI[(%Vh$[gH!hK");
      assertNull(httpUrl5);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.url();
      httpUrl0.querySize();
      HttpUrl httpUrl1 = HttpUrl.get(uRI0);
      Buffer buffer0 = new Buffer();
      String string0 = HttpUrl.PASSWORD_ENCODE_SET;
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("$%\"F%");
      String string1 = HttpUrl.PATH_SEGMENT_ENCODE_SET;
      httpUrl1.username();
      HttpUrl.parse("V");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("z/j:(Wvz");
      httpUrl_Builder1.parse((HttpUrl) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      httpUrl_Builder1.toString();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("x");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.removeAllEncodedQueryParameters("x");
      httpUrl_Builder2.addPathSegments("x");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      httpUrl_Builder2.fragment("x");
      httpUrl_Builder1.password("%2e.");
      httpUrl_Builder2.addEncodedPathSegment("%2e.");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegments("x");
      String string0 = "http";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.setQueryParameter("http", "x");
      Object object0 = new Object();
      httpUrl_Builder4.scheme("http");
      httpUrl_Builder0.setQueryParameter("-SiJ2", "%2e.");
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        httpUrl_Builder3.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SHA-1");
      httpUrl0.querySize();
      HttpUrl httpUrl1 = httpUrl0.resolve("SHA-1");
      HttpUrl httpUrl2 = HttpUrl.get(uRI0);
      Buffer buffer0 = new Buffer();
      String string0 = HttpUrl.FRAGMENT_ENCODE_SET;
      httpUrl2.encodedPassword();
      HttpUrl.canonicalize("/", "", false, false, false, false);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder("");
      httpUrl1.toString();
      String string1 = HttpUrl.PATH_SEGMENT_ENCODE_SET;
      httpUrl0.toString();
      httpUrl_Builder0.build();
      Object object0 = new Object();
      Object object1 = new Object();
      HttpUrl httpUrl3 = new HttpUrl(httpUrl_Builder0);
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("getsockname failed", (-3134), 0, "%20%22%23%3C%3E%5C%5E%60%7B%7C%7D", false, true, true, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "size < 2: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("size < 2: ");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("size < 2: ");
      httpUrl_Builder2.setEncodedPathSegment(1, "size < 2: ");
      httpUrl_Builder1.addEncodedPathSegments("size < 2: ");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addPathSegments("/%");
      httpUrl_Builder2.addEncodedPathSegment("http");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.encodedUsername("http");
      httpUrl_Builder1.username("http");
      httpUrl_Builder3.removeAllQueryParameters("http");
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertEquals("http://foo.bar/", httpUrl0.toString());
      
      HttpUrl.parse("/%");
      httpUrl_Builder4.parse(httpUrl0, ")$r|A;.4jH");
      httpUrl_Builder0.setQueryParameter("B`,[Ga>Z^51,N$WapAX", "http");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gcm#");
      httpUrl_Builder2.toString();
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "VWpxl.zn5>j Z@Z0FcA", 1, 15, ")$r|A;.4jH", false, false, false, false);
      assertEquals(18L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("size < 2: ");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("size < 2: ");
      httpUrl_Builder2.setEncodedPathSegment(1, "size < 2: ");
      httpUrl_Builder2.query("/%");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedPathSegment(1, "W0N)FT");
      httpUrl_Builder2.addEncodedPathSegment("http");
      httpUrl_Builder2.encodedUsername("http");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllQueryParameters("http");
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.parse("/%");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedFragment("B`,[Ga>Z^51,N$WapAX");
      httpUrl_Builder5.parse(httpUrl0, ")$r|A;.4jH");
      assertEquals(80, httpUrl0.port());
      
      httpUrl_Builder0.setQueryParameter("B`,[Ga>Z^51,N$WapAX", "g1Ha");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gcm#");
      String string0 = httpUrl_Builder2.toString();
      assertEquals("http://foo.bar/)$r%7CA;.4jH?/%25&B`,[Ga%3EZ^51,N$WapAX=g1Ha#B`,[Ga>Z^51,N$WapAX", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.url();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SHA-1");
      httpUrl0.querySize();
      HttpUrl httpUrl1 = httpUrl0.resolve("SHA-1");
      HttpUrl httpUrl2 = HttpUrl.get(uRI0);
      Buffer buffer0 = new Buffer();
      String string0 = HttpUrl.FRAGMENT_ENCODE_SET;
      httpUrl2.encodedPassword();
      HttpUrl.canonicalize("/", "", false, false, false, false);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder("");
      httpUrl1.toString();
      String string1 = HttpUrl.PATH_SEGMENT_ENCODE_SET;
      httpUrl0.toString();
      httpUrl_Builder0.build();
      Object object0 = new Object();
      Object object1 = new Object();
      HttpUrl httpUrl3 = httpUrl_Builder0.build();
      httpUrl2.equals(httpUrl3);
      try { 
        HttpUrl.getChecked("okhttp3.HttpUrl$1");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for okhttp3.HttpUrl$1
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", (String) null, (-3932), "https");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.pathSegments();
      assertFalse(list0.contains("https"));
      assertEquals("https://https/", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("77*zQp_`i");
      URI uRI1 = MockURI.aHttpURI;
      HttpUrl httpUrl1 = HttpUrl.get(uRI0);
      httpUrl_Builder1.setEncodedQueryParameter("l}M8S", "l}M8S");
      httpUrl1.resolve("encodedName == null");
      httpUrl_Builder1.password("77*zQp_`i");
      httpUrl0.resolve("l}M8S");
      httpUrl1.querySize();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, ".%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .%2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("l}M8S", "hwttp");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl httpUrl1 = HttpUrl.get(uRI0);
      HttpUrl httpUrl2 = httpUrl0.resolve("?#");
      httpUrl_Builder0.password("ke!_sX]7n]`%F");
      httpUrl1.resolve("Z_~~l[G3~rW");
      httpUrl2.querySize();
      httpUrl_Builder0.addQueryParameter("#;", "http:");
      httpUrl0.pathSize();
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setEncodedPathSegment(1, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T_<il");
      String string0 = "https:";
      httpUrl_Builder0.addQueryParameter("https:", "zrD&6F:F0&0XAt)cv");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("zrD&6F:F0&0XAt)cv");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedPathSegment("VJFGOb");
      httpUrl_Builder2.addPathSegment("VJFGOb");
      httpUrl_Builder1.scheme("http");
      try { 
        MockURL.URL((String) null);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "size < 2: ");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("size < 2: ");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedPathSegment("[c@iYX|Hpq4Zi7`");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("[c@iYX|Hpq4Zi7`", "size < 2: ");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.addEncodedPathSegment("GniYK'%qvUn/'^I\"V");
      httpUrl_Builder4.encodedUsername("MYC");
      httpUrl_Builder1.encodedFragment("interrupted");
      httpUrl_Builder4.query("interrupted");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder3.addPathSegment("size < 2: ");
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("\u2026");
      assertTrue(list0.contains("\u2026"));
      
      httpUrl_Builder2.reencodeForUri();
      httpUrl_Builder0.addPathSegments("size < 2: ");
      boolean boolean0 = httpUrl0.equals(httpUrl0);
      assertTrue(boolean0);
      
      httpUrl_Builder5.reencodeForUri();
      HttpUrl.Builder.ParseResult.values();
      httpUrl0.query();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      
      String string0 = HttpUrl.percentDecode("d+%3CR", false);
      assertEquals("d+<R", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-68);
      byteArray0[3] = (byte) (-68);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)0;
      httpUrl_Builder0.encodedUsername("okio.SegmentedByteString");
      byteArray0[4] = (byte)122;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("okio.SegmentedByteString");
      String string0 = "::";
      HttpUrl.percentDecode("::", (byte)0, 1, false);
      httpUrl_Builder0.addPathSegment("size%20%3C%202:%20");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "http:/foo.bar";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("http:/foo.bar");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.fragment("http:/foo.bar");
      httpUrl_Builder1.query("http:/foo.bar");
      httpUrl_Builder2.removeAllEncodedQueryParameters("http:/foo.bar");
      httpUrl_Builder2.addPathSegment("0000ffff");
      httpUrl_Builder1.addEncodedPathSegments("%2e%2e");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath("http:/foo.bar");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: http:/foo.bar
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "size < 2: ";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "size < 2: ");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("size < 2: ");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("size < 2: ");
      httpUrl_Builder1.username("size < 2: ");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("Gn}Y&K'%qvUn/j^I\"0V");
      httpUrl_Builder2.encodedUsername("Gn}Y&K'%qvUn/j^I\"0V");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllQueryParameters("size < 2: ");
      httpUrl_Builder4.query("\u2026");
      httpUrl_Builder3.addPathSegment("\u2026");
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl.get(uRI0);
      HttpUrl.queryStringToNamesAndValues("KU?kV");
      httpUrl_Builder3.reencodeForUri();
      try { 
        HttpUrl.getChecked("9:");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 9:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      HttpUrl httpUrl0 = HttpUrl.get(uRI1);
      assertNotNull(httpUrl0);
      assertEquals("http://foo.bar/", httpUrl0.toString());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HttpUrl httpUrl1 = httpUrl0.resolve(".?$g;D;j*5");
      httpUrl1.encodedPathSegments();
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder();
      httpUrl0.uri();
      HttpUrl httpUrl2 = httpUrl_Builder0.build();
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/?$g;D;j*5", httpUrl2.toString());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("8", "%2e.");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("8");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addEncodedPathSegment("8");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.encodedUsername("/%");
      httpUrl_Builder1.addEncodedPathSegment("%2e.");
      httpUrl_Builder4.encodedUsername("ftp:%2f%2f");
      httpUrl_Builder4.port(1);
      httpUrl_Builder2.query("/%");
      httpUrl_Builder3.addPathSegment("http");
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl.get(uRI0);
      boolean boolean0 = HttpUrl.percentEncoded("ftp:%2f%2f", 12, (-572));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("\"._9,_6Q6ARfkZ2x?_");
      URL uRL0 = MockURL.getHttpExample();
      Buffer buffer0 = new Buffer();
      httpUrl_Builder1.fragment("*XwBkw[=UG=maq$t");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      httpUrl_Builder0.addPathSegments(",");
      httpUrl_Builder1.encodedQuery("ftp://");
      httpUrl_Builder1.setEncodedPathSegment(1, "ftp://");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*XwBkw[=UG=maq$t");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.queryParameterValues((String) null);
      MockURL.getFtpExample();
      HttpUrl.Builder httpUrl_Builder2 = new HttpUrl.Builder();
      HttpUrl httpUrl1 = httpUrl0.resolve("*XwBkw[=UG=maq$t");
      httpUrl1.encodedQuery();
      Object object0 = new Object();
      httpUrl1.toString();
      try { 
        HttpUrl.getChecked(":: not found: size=");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for :: not found: size=
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "size < 2: ");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("size < 2: ");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("size < 2: ");
      httpUrl_Builder0.addEncodedPathSegment("/%");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("http");
      httpUrl_Builder2.encodedUsername("http");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.port(1);
      httpUrl_Builder4.query("\u2026");
      httpUrl_Builder3.addPathSegment("\u2026");
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl.get(uRI0);
      boolean boolean1 = HttpUrl.percentEncoded("Unexpected hex digit: ", 12, 100);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "size < 2: ");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("size < 2: ");
      httpUrl_Builder1.addEncodedPathSegment("size < 2: ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      httpUrl_Builder0.removePathSegment(1);
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("byteString == null");
      HttpUrl httpUrl2 = httpUrl1.resolve("W\"faiTAN}1gz=Y~m");
      HttpUrl.get(uRL0);
      httpUrl0.queryParameterNames();
      String string0 = HttpUrl.FORM_ENCODE_SET;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " \"':;<=>@[]^`{}|/?#&!$(),~");
      httpUrl2.queryParameterValues(" \"':;<=>@[]^`{}|/?#&!$(),~");
      MockURL.getFtpExample();
      HttpUrl.Builder httpUrl_Builder2 = new HttpUrl.Builder();
      HttpUrl httpUrl3 = HttpUrl.get(uRL0);
      HttpUrl httpUrl4 = httpUrl3.resolve(" \"':;<=>@[]^`{}|/?#&!$(),~");
      httpUrl1.uri();
      httpUrl4.encodedQuery();
      Object object0 = new Object();
      httpUrl2.toString();
      try { 
        HttpUrl.getChecked("cFu{=`%%(I+Yh\"Yr3g");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for cFu{=`%%(I+Yh\"Yr3g
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpUrl.defaultPort("..");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("http");
      httpUrl_Builder0.encodedUsername("http");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("http");
      httpUrl_Builder0.addPathSegments("..");
      URI uRI0 = MockURI.URI("http", "..", "http");
      HttpUrl.get(uRI0);
      HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HttpUrl.percentDecode("%3mo6)l]O", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fooExample");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      Buffer buffer0 = new Buffer();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("%3mo6)l]O");
      HttpUrl.get(uRL0);
      httpUrl1.queryParameterNames();
      String string0 = HttpUrl.FORM_ENCODE_SET;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " \"':;<=>@[]^`{}|/?#&!$(),~");
      httpUrl1.queryParameterValues("b:c");
      MockURL.getFtpExample();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      httpUrl1.resolve("https:foo.bar");
      httpUrl1.encodedQuery();
      Object object0 = new Object();
      httpUrl0.toString();
      try { 
        HttpUrl.getChecked("^`{|}");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ^`{|}
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("7`Mlf");
      httpUrl_Builder1.host("7`Mlf");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.host("7`Mlf");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addEncodedQueryParameter("\n", "\n");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.addPathSegment("\n");
      httpUrl_Builder4.encodedQuery("okio.Buffer$1");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      httpUrl_Builder3.reencodeForUri();
      try { 
        HttpUrl.getChecked("7`Mlf");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 7`Mlf
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "]|]ycS!p|\\)@wkb:";
      String string1 = "\u2026]";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("\u2026]");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      String string0 = " \"#<>\\^`{|}";
      httpUrl_Builder0.setEncodedQueryParameter(" \"#<>^`{|}", " \"#<>^`{|}");
      String string1 = "\n";
      httpUrl_Builder0.removeAllQueryParameters("\n");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      httpUrl_Builder1.reencodeForUri();
      String string2 = "+sHJUfK?3{a#E/O ";
      try { 
        HttpUrl.getChecked("+sHJUfK?3{a#E/O ");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for +sHJUfK?3{a#E/O 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpUrl.defaultPort("https:/some/fake/but/wellformed/url");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/some/fake/but/wellformed/url");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " \"':;<=>@[]^`{}|/?#");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      Buffer buffer0 = new Buffer();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("%3EZ,ePH227ThU");
      HttpUrl.get(uRL0);
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl1.resolve((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedPathSegments(" \"#<>^`{|}");
      String string0 = "\n";
      httpUrl_Builder2.encodedQuery("\n");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      httpUrl_Builder1.reencodeForUri();
      try { 
        HttpUrl.getChecked("+sHJUfK?3{a#E/O ");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for +sHJUfK?3{a#E/O 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      URL uRL0 = httpUrl0.url();
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      HttpUrl httpUrl1 = HttpUrl.get(uRI0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SHA-1");
      httpUrl1.querySize();
      HttpUrl httpUrl2 = httpUrl0.resolve("SHA-1");
      assertEquals("http://foo.bar/SHA-1", httpUrl2.toString());
      assertNotNull(httpUrl2);
      
      Buffer buffer1 = new Buffer();
      HttpUrl httpUrl3 = HttpUrl.get(uRL0);
      httpUrl1.query();
      httpUrl3.encodedPassword();
      httpUrl3.toString();
      httpUrl3.toString();
      HttpUrl.parse("http://foo.bar/");
      String string0 = httpUrl3.toString();
      assertEquals("http://foo.bar/", uRL0.toExternalForm());
      assertEquals("http://foo.bar/", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = null;
      int int0 = 55296;
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, 55296, 55296, (String) null, false, false, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      URL uRL0 = httpUrl0.url();
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      HttpUrl httpUrl1 = HttpUrl.get(uRI0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SHA-1");
      httpUrl1.querySize();
      httpUrl0.resolve("SHA-1");
      Buffer buffer1 = new Buffer();
      HttpUrl httpUrl2 = HttpUrl.get(uRL0);
      HttpUrl.percentDecode(buffer1, "~hSg~:$6}n", 0, 0, false);
      httpUrl1.password();
      HttpUrl.percentDecode("size%20%3c%202:%20", false);
      String string0 = HttpUrl.PATH_SEGMENT_ENCODE_SET;
      // Undeclared exception!
      try { 
        httpUrl2.queryParameterName((-3124));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.equals(uRI0);
      HttpUrl.percentEncoded(" (to read code point prefixed 0x", 148, 46);
      int int0 = HttpUrl.decodeHexDigit('i');
      assertEquals((-1), int0);
      
      httpUrl0.query();
      URL uRL0 = MockURI.toURL(uRI0);
      HttpUrl httpUrl1 = HttpUrl.get(uRL0);
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      
      httpUrl1.newBuilder();
      httpUrl0.scheme();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.percentDecode("", true);
      httpUrl0.equals(uRI0);
      String string0 = " (to read code point prefixed 0x";
      int int0 = 46;
      HttpUrl.percentEncoded(" (to read code point prefixed 0x", 148, 46);
      HttpUrl.decodeHexDigit('i');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removePathSegment(47);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 47, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setEncodedQueryParameter("", "");
      String string0 = "V!1SR%Ue3|i";
      httpUrl_Builder0.encodedFragment("V!1SR%Ue3|i");
      HttpUrl.queryStringToNamesAndValues("");
      httpUrl_Builder0.removeAllQueryParameters("..");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.equals(uRI0);
      httpUrl0.encodedUsername();
      httpUrl0.redact();
      HttpUrl.getChecked("http://foo.bar/...");
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "https:foo.bar", 1334, 103, "", true, true, true, true);
      HttpUrl.Builder.ParseResult.values();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString(stringBuilder0, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe((-62));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize(buffer0, "`oc|J{49fEY{Aq! %", (-62), 8192, (String) null, true, false, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aFileURI;
      HttpUrl.get(uRI0);
      List<String> list0 = httpUrl_Builder0.encodedQueryNamesAndValues;
      // Undeclared exception!
      try { 
        HttpUrl.pathSegmentsToString((StringBuilder) null, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:///tmp/foo.bar");
      HttpUrl.Builder.ParseResult.values();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "N;Wro]^9/^\"");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8?\"WFNhm5N");
      httpUrl0.newBuilder();
      assertEquals("http://tmp/foo.bar", httpUrl0.toString());
      
      int int0 = HttpUrl.decodeHexDigit('B');
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, (String) null, true, true, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.aFileURI;
      HttpUrl.get(uRI0);
      HttpUrl.canonicalize("maxBufferSize < 1: ", 12, 12, "3Sh", false, true, true, true);
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "U?SW'or`er`C:M", 56320, 56320, false);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "Fd6.](M\"5($L@^M:~g2";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("Fd6.](M\"5($L@^M:~g2");
      String string1 = ".%2e";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery(".%2e");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("Fd6.](M\"5($L@^M:~g2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: Fd6.](M\"5($L@^M:~g2
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "MXj-^;dIT;]M(", 14, (-1962), "MXj-^;dIT;]M(", true, true, true, true);
      HttpUrl.canonicalize(buffer0, (String) null, 1847, (-2640), (String) null, true, true, false, true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("MXj-^;dIT;]M(", "RK]R/Sf");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("_<)$vhW}OHAT#", "MXj-^;dIT;]M(");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("RK]R/Sf");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegments("RK]R/Sf");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedPassword("_<)$vhW}OHAT#");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.encodedPath("::6::(M\"5($L@^M:~g2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: ::6::(M\"5($L@^M:~g2
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("Fd6::(M\"5($L@^M:~g2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: Fd6::(M\"5($L@^M:~g2
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter(".", ".");
      httpUrl_Builder1.encodedPassword = ".";
      httpUrl_Builder0.setEncodedQueryParameter(".", ".");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setPathSegment((-145), ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.url();
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      HttpUrl httpUrl1 = HttpUrl.get(uRI0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SHA-1");
      httpUrl1.querySize();
      HttpUrl httpUrl2 = httpUrl0.resolve("SHA-1");
      Buffer buffer1 = new Buffer();
      HttpUrl.percentDecode(buffer1, "~hSg~:$6}n", 0, 0, false);
      Object object0 = new Object();
      String string0 = httpUrl2.toString();
      assertEquals(80, httpUrl2.port());
      assertEquals("http://foo.bar/SHA-1", string0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "]|]ycS!p|\\)@wkb:";
      httpUrl_Builder0.addQueryParameter("]|]ycS!p|)@wkb:", "<y/rz5%+P?(|&m");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "okhttp3.HttpUrl$1");
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      Buffer buffer0 = new Buffer();
      HttpUrl.parse("<y/rz5%+P?(|&m");
      int int0 = 0;
      HttpUrl.Builder httpUrl_Builder2 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder2.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      String string0 = "iyd5_g]_] ";
      httpUrl0.resolve("iyd5_g]_] ");
      StringBuilder stringBuilder0 = null;
      List<String> list0 = httpUrl0.pathSegments();
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "http";
      HttpUrl.defaultPort("http");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = "lHM8S";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("lHM8S");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      FileSystemHandling.shouldAllThrowIOExceptions();
      httpUrl_Builder1.setEncodedQueryParameter(":", ">w v");
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HttpUrl httpUrl1 = httpUrl0.resolve(":");
      assertNotNull(httpUrl1);
      
      httpUrl0.queryParameter("%20%22'%3C%3E%23&=");
      MockURI.toURL(uRI0);
      httpUrl1.port();
      httpUrl1.querySize();
      httpUrl1.newBuilder();
      assertEquals("http://foo.bar/:", httpUrl1.toString());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("wnjfkuy)o(n9[", "ZiI!");
      FileSystemHandling.shouldAllThrowIOExceptions();
      httpUrl_Builder1.setEncodedQueryParameter("kPFz)|7kcH[%27CF8", "wnjfkuy)o(n9[");
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-68);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object object0 = new Object();
      httpUrl0.equals((Object) null);
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.decodeHexDigit('y');
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/some/fake/but/wellformed/url");
      httpUrl0.resolve("+");
      httpUrl0.resolve("%5C:");
      HttpUrl.percentDecode("+", true);
      HttpUrl.parse("+");
      httpUrl0.port();
      String string0 = "9`O%";
      try { 
        MockURI.URI("+", "+", "fO'~{=NhAQqxHH", "9`O%", "https:/some/fake/but/wellformed/url");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: +://+fO'~%7B=NhAQqxHH?9%60O%25#https:/some/fake/but/wellformed/url
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.get(uRI0);
      Buffer buffer0 = new Buffer();
      String string0 = "%40";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("%40");
      String string1 = "%2e";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("%2e");
      String string2 = "EIHHB\"D^B@:8I";
      // Undeclared exception!
      try { 
        httpUrl_Builder2.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.defaultPort("https:");
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      String string0 = "lHM8S";
      httpUrl_Builder0.addQueryParameter("IQu8Sy\"=Gy{&VrF%j", "lHM8S");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      String string1 = null;
      String string2 = "ks{5kc/\\Z+]9U";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addQueryParameter((String) null, "ks{5kc/Z+]9U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertNotNull(httpUrl0);
      
      httpUrl0.url();
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      HttpUrl httpUrl1 = HttpUrl.get(uRI0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SHA-1");
      httpUrl1.querySize();
      HttpUrl.parse("ZiI!");
      Buffer buffer1 = new Buffer();
      HttpUrl.percentDecode("SHA-1", 0, 0, false);
      String string0 = httpUrl0.password();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "https:/some/fake/but/wellformed/url";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      HttpUrl.decodeHexDigit('y');
      HttpUrl httpUrl0 = HttpUrl.parse("https:/some/fake/but/wellformed/url");
      String string1 = "+";
      HttpUrl httpUrl1 = httpUrl0.resolve("+");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl1.pathSize();
      // Undeclared exception!
      try { 
        HttpUrl.getChecked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 360;
      HttpUrl.percentEncoded("INVALID_PORh", 360, (-3815));
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("INVALID_PORh");
      httpUrl_Builder1.encodedPassword("INVALID_PORh");
      httpUrl_Builder1.query("4");
      String string0 = HttpUrl.FRAGMENT_ENCODE_SET;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl.canonicalize("", "", false, false, false, false);
      // Undeclared exception!
      try { 
        HttpUrl.get((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpUrl.defaultPort("https:/some/ake/but/wellformed/url");
      HttpUrl httpUrl0 = HttpUrl.parse("https:/some/ake/but/wellformed/url");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue((-16));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = httpUrl0.encodedPathSegments();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      HttpUrl.pathSegmentsToString((StringBuilder) null, list1);
      MockURL.getHttpExample();
      HttpUrl.parse("timeout");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = " \"'<>#&=";
      httpUrl_Builder0.encodedQuery("tFvf[*FY'afsR");
      httpUrl_Builder0.setEncodedPathSegment(0, " \"'<>#&=");
      try { 
        HttpUrl.getChecked(")");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for )
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpUrl.parse("/%");
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("/%", 2201, 6752, (String) null, false, false, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(119);
      StringBuilder stringBuilder0 = new StringBuilder("4*N+");
      List<String> list0 = httpUrl_Builder2.encodedPathSegments;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HttpUrl.namesAndValuesToQueryString(stringBuilder0, linkedList0);
      assertFalse(linkedList0.contains("4*N+"));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments("+o3QaK((:O-v /4P");
      HttpUrl.defaultPort("|iK=RQt");
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      httpUrl_Builder0.setQueryParameter("N", "N");
      httpUrl_Builder0.port(65535);
      StringBuilder stringBuilder0 = new StringBuilder("");
      HttpUrl.percentEncoded("", (-3635), (-3635));
      List<String> list0 = httpUrl_Builder0.encodedPathSegments;
      HttpUrl.namesAndValuesToQueryString(stringBuilder0, list0);
      assertEquals("+o3%7FQaK((:O-v%20=4P", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.defaultPort("|iK=RQt");
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.port(65535);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      
      StringBuilder stringBuilder0 = new StringBuilder("");
      List<String> list0 = httpUrl_Builder0.encodedPathSegments;
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString(stringBuilder0, list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpUrl.parse("WK:");
      HttpUrl.canonicalize((Buffer) null, "%26^|B_d{%27%3CICWCNA", 32, 32, "out == null", false, false, true, false);
      String string0 = HttpUrl.canonicalize("WK:", "%26^|B_d{%27%3CICWCNA", false, false, false, false);
      assertEquals("%57K:", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}@sK?XLRFnl5%7U$T");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("}@sK?XLRFnl5%7U$T");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "SHAI-1";
      HttpUrl.parse("SHAI-1");
      URI uRI0 = MockURI.URI("SHAI-1", "SHAI-1", "SHAI-1");
      HttpUrl.get(uRI0);
      try { 
        MockURL.URL("w4s8xMeCg648(3>gU% ");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: w4s8xMeCg648(3>gU% 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.defaultPort("https");
      String string0 = "SHA-1";
      try { 
        HttpUrl.getChecked("https");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for https
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.getChecked("http:N:");
      String string0 = HttpUrl.PASSWORD_ENCODE_SET;
      HttpUrl.canonicalize("^6;j=CiiiE[=U2", "http:N:", false, false, false, false);
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("^6;j=Cii%5CiE[=U2", 63, 63, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "https";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("https", "https");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.scheme("https");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("F:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: F:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "..";
      HttpUrl.defaultPort("..");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("..");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.port(65536);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 65536
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpUrl.defaultPort("..");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "lHM8S";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("lHM8S", "..");
      httpUrl_Builder1.password("..");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedUsername("lHM8S");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.query("..");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegment("..");
      List<String> list0 = httpUrl_Builder4.encodedPathSegments;
      boolean boolean0 = true;
      StringBuilder stringBuilder0 = new StringBuilder("lHM8S");
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      stringBuilder1.append((-1963.961));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      HttpUrl.pathSegmentsToString(stringBuilder0, list0);
      try { 
        HttpUrl.getChecked("lHM8S");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for lHM8S
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpUrl.defaultPort("http:");
      HttpUrl.defaultPort("zZ>E}-Hp1B=Y=a+n");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl.percentDecode("tS:49iey't95", 1, 1, false);
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "iqwu9A|NF7%F#`o", 127, (-15), "vns`tL7>b-sO~75", true, false, false, false);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.get(uRI0);
      Buffer buffer0 = new Buffer();
      String string0 = "hwttp";
      HttpUrl.defaultPort("hwttp");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("%40");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment(".%2e");
      String string1 = "EIHHB\"D^B@:8I";
      httpUrl_Builder2.addEncodedQueryParameter("I?FMYE,3kcwW>+", "I?FMYE,3kcwW>+");
      httpUrl_Builder0.encodedUsername("I9XH%\"5JJw");
      httpUrl_Builder2.removeAllEncodedQueryParameters("RC#s");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      EvoSuiteFile evoSuiteFile0 = null;
      try { 
        HttpUrl.getChecked("http::");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http::
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.url();
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      HttpUrl httpUrl1 = HttpUrl.get(uRI0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SHA-1");
      httpUrl1.querySize();
      HttpUrl.parse("ZiI!");
      Buffer buffer1 = new Buffer();
      HttpUrl.percentDecode(buffer1, "~hSg~:$6}n", 0, 0, false);
      assertTrue(buffer1.exhausted());
      
      Object object0 = new Object();
      httpUrl1.equals(object0);
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertEquals(80, httpUrl1.port());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "::@T");
      int int0 = httpUrl0.port;
      String string0 = "oU#(p5c_qG)D9u,S";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oU#(p5c_qG)D9u,S");
      httpUrl0.hashCode();
      httpUrl0.querySize();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(1765, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1765, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl.get(uRI0);
      MockURL.getFtpExample();
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      String string0 = "timeout";
      HttpUrl.parse("timeout");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("&A=('/,nnv*tUet[");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("&A=('/,nnv*tUet[");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addQueryParameter("timeout", "timeout");
      String string1 = "5nP<>?@,";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.password("5nP<>?@,");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.removePathSegment(2169);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2169, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpUrl.defaultPort("https:/some/fake/but/wellformed/url");
      HttpUrl httpUrl0 = HttpUrl.parse("https:/some/fake/but/wellformed/url");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "::@T");
      int int0 = httpUrl0.port;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oU#(p5c_qG)D9u,S");
      httpUrl0.querySize();
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("fooexample", 0, 752, "fooexample", false, true, true, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("D8V0Ls||:F1/qWu");
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl1.newBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "%2e";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("%2e");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setQueryParameter("[fa|iDm:!h-+%(", "%2e");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      httpUrl_Builder3.addEncodedQueryParameter("[fa|iDm:!h-+%(", ":@");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      URI uRI1 = MockURI.aHttpURI;
      HttpUrl httpUrl1 = HttpUrl.get(uRI1);
      HttpUrl httpUrl2 = httpUrl0.resolve("kP)|7kcH[%27CF8");
      httpUrl2.encodedPath();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "kP)|7kcH[%27CF8");
      httpUrl0.queryParameter("tS:49iey't95");
      httpUrl1.encodedPathSegments();
      StringBuilder stringBuilder0 = new StringBuilder(15);
      // Undeclared exception!
      try { 
        HttpUrl.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HttpUrl httpUrl0 = HttpUrl.parse("");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "INVALID_PORh";
      HttpUrl.percentEncoded("INVALID_PORh", 360, (-3815));
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("INVALID_PORh");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("INVALID_PORh");
      httpUrl_Builder1.removeAllQueryParameters("INVALID_PORh");
      httpUrl_Builder1.reencodeForUri();
      httpUrl_Builder2.username("INVALID_HOST");
      httpUrl_Builder1.setQueryParameter("wnJfKuy)o(n9[", "wnJfKuy)o(n9[");
      try { 
        HttpUrl.getChecked("INVALID_PORh");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for INVALID_PORh
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.percentEncoded("pbpki:", 1114111, 1114111);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)102;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      httpUrl_Builder0.removeAllQueryParameters("pbpki:");
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment("l+VzTUCl#kx]mT}|v76");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.encodedQuery("9o~02:sG");
      httpUrl_Builder3.removeAllEncodedQueryParameters("is]OsyOy7<[2{F[|");
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("9o~02:sG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 9o~02:sG
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpUrl.parse("https:/some/fake/but/wellformed/url");
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize(")FnMf4mnH=Lg{V#", 113, (-1391), "kVRZZ]w}6:/", false, false, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.url();
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HttpUrl httpUrl1 = HttpUrl.get(uRI0);
      List<String> list0 = httpUrl1.queryParameterValues(".%2e");
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("w\"", "%3");
      httpUrl_Builder1.addEncodedQueryParameter("r&<UOjv|}M?$C(KR", "5IA'O4gTWd=");
      httpUrl_Builder1.reencodeForUri();
      httpUrl0.resolve("r&<UOjv|}M?$C(KR");
      Buffer buffer1 = new Buffer();
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.url();
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HttpUrl httpUrl1 = HttpUrl.get(uRI0);
      List<String> list0 = httpUrl1.queryParameterValues(".%2e");
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "5IA'O4gTWd=";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("w\"", "%3");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("r&<UOjv|}M?$C(KR", "5IA'O4gTWd=");
      httpUrl_Builder1.reencodeForUri();
      String string1 = "FHCRC";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("FHCRC");
      httpUrl_Builder3.addPathSegment("http:");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-1994197846), "%3");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HttpUrl.defaultPort("N{apnzXCOcj");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("X..");
      HttpUrl.parse("UTF-32LE");
      httpUrl_Builder1.encodedFragment = "N{apnzXCOcj";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("UTF-32LE");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpUrl.defaultPort("https:/some/fake/but/wellformed/url");
      HttpUrl httpUrl0 = HttpUrl.parse("https:/some/fake/but/wellformed/url");
      httpUrl0.resolve("");
      httpUrl0.encodedQuery();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("url");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("Q/7l*H[");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllQueryParameters("Q/7l*H[");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.port((-1192));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -1192
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.url();
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      httpUrl0.queryParameterNames();
      httpUrl0.isHttps();
      httpUrl0.encodedUsername();
      httpUrl0.port();
      httpUrl0.host();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.percentDecode("@nTk'`B9pK*l'>#%", true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "k_L)GsB";
      String string1 = "okio.SegmentedByteStrin";
      httpUrl_Builder0.setQueryParameter("okio.SegmentedByteStrin", "@nTk'`B9pK*l'>#%");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("k_L)GsB", "k_L)GsB");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("okio.SegmentedByteStrin");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("/E%");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("\u2026]", "/E%");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.query("/E%");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedPath("/E%");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegment("]+");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.host("XgQ");
      httpUrl_Builder2.addEncodedPathSegment("]+");
      httpUrl_Builder0.addEncodedPathSegment("@/?#");
      httpUrl_Builder4.addEncodedPathSegment("@/?#");
      httpUrl_Builder4.fragment("\u2026]");
      httpUrl_Builder3.removeAllEncodedQueryParameters("X<>e9/Uu{m|EIR:");
      // Undeclared exception!
      try { 
        httpUrl_Builder6.scheme("okio.Timeout");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: okio.Timeout
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpUrl.defaultPort("..");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("lHM8S", "..");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("..");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.query("..");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addPathSegment("..");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.setEncodedPathSegment((-671), "!8%");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "http:p4i";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:p4i");
      httpUrl0.url();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("MISSING_SCHEME");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("wellformed");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.host("wellformed");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedQueryParameter("MISSING_SCHEME", (String) null);
      String string1 = "expected%20leading%20[0-9]%20or%20'-'%20character%20but%20was%200x";
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.setQueryParameter("expected%20leading%20[0-9]%20or%20'-'%20character%20but%20was%200x", (String) null);
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.encodedPassword("MISSING_SCHEME");
      httpUrl_Builder6.encodedQuery("wellformed");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[\u0000-\u001F-\u009Fp{javaWhitespace}]");
      String string0 = null;
      // Undeclared exception!
      try { 
        HttpUrl.queryStringToNamesAndValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "://");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "size < 2: ";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("size < 2: ");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("size < 2: ");
      String string1 = "9[+'4{:A*c;^*";
      httpUrl_Builder2.addEncodedPathSegment("9[+'4{:A*c;^*");
      httpUrl_Builder0.removePathSegment(1);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath("size < 2: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: size < 2: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpUrl.defaultPort("https:/some/fake/but/wellformed/url");
      HttpUrl httpUrl0 = HttpUrl.parse("https:/some/fake/but/wellformed/url");
      httpUrl0.resolve("yf)C/#f;@k05");
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpUrl.defaultPort("https:/some/fake/but/wellformed/url");
      HttpUrl httpUrl0 = HttpUrl.parse("https:/some/fake/but/wellformed/url");
      httpUrl0.resolve("d");
      httpUrl0.encodedQuery();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("url");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("d");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("Q/7L*H[");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllQueryParameters("Q/7L*H[");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.port((-1192));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -1192
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.defaultPort("N{apnzXCOcj");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("X..");
      httpUrl_Builder1.encodedQuery("UTF-32LE");
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "byteCount < 0: ", (-1), (-1), "SHA-256", true, true, true, true);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/some/fake/but/wellformed/url");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(826);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "okhttp3.HttpUrl$1");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("/x]V8h<$FDLN");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("/x]V8h<$FDLN", "/x]V8h<$FDLN");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("/x]V8h<$FDLN", "/x]V8h<$FDLN");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegment("`_tg<");
      httpUrl_Builder2.encodedFragment = "okhttp3.HttpUrl$1";
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegment("/");
      httpUrl_Builder5.removeAllQueryParameters("::@T");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HttpUrl.defaultPort("https:/some/fake/but/wellformed/url");
      HttpUrl httpUrl0 = HttpUrl.parse("https:/some/fake/but/wellformed/url");
      httpUrl0.resolve("d");
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      Buffer buffer0 = new Buffer();
      httpUrl0.newBuilder();
      HttpUrl.defaultPort("+");
      httpUrl0.querySize();
      HttpUrl httpUrl1 = null;
      try {
        httpUrl1 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      Buffer buffer0 = new Buffer();
      int int0 = HttpUrl.defaultPort("hwttp");
      assertEquals((-1), int0);
      
      httpUrl0.queryParameterValues("");
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[W:@mHp4I");
      HttpUrl.percentDecode("[W:@mHp4I", false);
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      String string0 = "'v%M#e7>1zbty0";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("[W:@mHp4I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [W:@mHp4I
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      Buffer buffer0 = new Buffer();
      HttpUrl.defaultPort("encodedPassword == null");
      int int0 = httpUrl0.querySize();
      assertEquals(0, int0);
      
      httpUrl0.encodedFragment();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.get(uRI0);
      Buffer buffer0 = new Buffer();
      HttpUrl.defaultPort("hwttp");
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("hwttp", 79, 90, "", false, true, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.defaultPort("5w:");
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      String string0 = "..";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setPathSegment(871, "..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: ..
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpUrl.defaultPort("[\u0000-\u001F-\u009Fp{javaWhitespace}]");
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer1.writeDecimalLong((-1));
      HttpUrl.percentDecode(buffer1, "[\u0000-\u001F-\u009Fp{javaWhitespace}]", (-1), (-2080), false);
      assertEquals(2L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = HttpUrl.USERNAME_ENCODE_SET;
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize(" \"':;<=>@[]^`{}|/?#", (-3144), (-3144), "fffe", false, false, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      MockURI.parseServerAuthority(uRI0);
      HttpUrl.get(uRI0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.redact();
      assertEquals("http://foo.bar/...", string0);
      
      httpUrl0.queryParameterValues("https://tmp/foo.bar");
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ";0v.4ASaCE|RPX[X";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment(";0v.4ASaCE|RPX[X");
      httpUrl_Builder1.addQueryParameter("6N]%gASzzN-RUzl`Eg", "");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername(";0v.4ASaCE|RPX[X");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.addEncodedQueryParameter((String) null, "Z>lR)M");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      HttpUrl.defaultPort("ID1ID2");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments(".");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters(">a'(Z`kb!?AR");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("%40");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegments("?gI)ln Zj");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedPassword("fo");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.scheme(">a'(Z`kb!?AR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: >a'(Z`kb!?AR
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "http:");
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize(buffer0, "username == null", (-129), 2737, (String) null, false, true, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HttpUrl.canonicalize("fromIndex < 0", "fromIndex < 0", true, true, true, true);
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("<s BI;}.Zpy8q", (-585), (-585), "<s BI;}.Zpy8q", true, true, true, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "t\\p98:";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("%252e");
      String string1 = "iz!;4]ck1U&c3I";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("iz!;4]ck1U&c3I", "/");
      String string2 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPath == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      Buffer buffer0 = new Buffer();
      int int0 = 484;
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(484);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('R');
      int int1 = HttpUrl.defaultPort("");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HttpUrl.decodeHexDigit('8');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removeAllEncodedQueryParameters("sink == null");
      HttpUrl.decodeHexDigit(' ');
      try { 
        HttpUrl.getChecked("a~A1YdHC7hT8");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for a~A1YdHC7hT8
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('y');
      assertEquals((-1), int0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("https:/some/fake/but/wellformed/url");
      assertNotNull(httpUrl0);
      
      httpUrl0.url();
      assertEquals("https://some/fake/but/wellformed/url", httpUrl0.toString());
      assertEquals(4, httpUrl0.pathSize());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpUrl.decodeHexDigit('8');
      String string0 = HttpUrl.USERNAME_ENCODE_SET;
      HttpUrl.defaultPort("unexpected port: ");
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("okio.RealBufferedSource", 8, 102, "e'", false, true, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = HttpUrl.FORM_ENCODE_SET;
      HttpUrl.defaultPort("http:");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.percentEncoded("", 0, 0);
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.resolve(uRI0, "");
      HttpUrl httpUrl0 = HttpUrl.get(uRI1);
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("okio.RealBufferedSource");
      assertEquals((-1), int0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      boolean boolean0 = HttpUrl.percentEncoded("okio.RealBufferedSource", 0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = HttpUrl.defaultPort(".");
      assertEquals((-1), int0);
      
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      boolean boolean0 = HttpUrl.percentEncoded("::", (-1), (-1));
      assertFalse(boolean0);
      
      httpUrl_Builder0.port(275);
      String string0 = HttpUrl.canonicalize("=9`", "::", false, true, false, true);
      assertEquals("=9`", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HttpUrl.percentEncoded("INVALID_PORT", 408, (-3815));
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("INVALID_PORT");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("INVALID_PORT");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("INVALID_HOST");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.query("wnJfKuy)o(n9[");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegment("wnJfKuy)o(n9[");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HttpUrl.Builder.ParseResult.values();
      String string0 = "fa.iDm:!h-+%(";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fa.iDm:!h-+%(");
      HttpUrl.decodeHexDigit('s');
      try { 
        HttpUrl.getChecked("YT+fGR");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for YT+fGR
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = HttpUrl.FORM_ENCODE_SET;
      HttpUrl httpUrl0 = HttpUrl.parse("okQo.Tep0");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(86);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegments("ftp:/");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedFragment(".%2e");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.port(2982);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "%2e%2e";
      int int0 = 63;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      HttpUrl.percentDecode((Buffer) null, "%2e%2e", 63, (-2816), true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment((-2816), "%2e%2e");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("^Q^h");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("^Q^h", "^Q^h");
      String string0 = "timeout";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addQueryParameter("^Q^h", "timeout");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedPassword("^Q^h");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      int int0 = 1524;
      HttpUrl.canonicalize(buffer0, "M_Vm", 1524, 1524, "M_Vm", true, false, false, true);
      String string0 = "O}y<A.fO:L92t)@Q%|";
      String string1 = "m!\\Y0+2";
      try { 
        MockURL.URL("O}y<A.fO:L92t)@Q%|", "okhttp3.HttpUrl$1", "m!Y0+2");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: o}y<a.fo:l92t)@q%|
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("0A[^-8`a2");
      String string0 = "=_P|ODMmwI/%_ix]S";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("=_P|ODMmwI/%_ix]S");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery("v\"&5w:");
      httpUrl_Builder0.encodedPassword = "v\"&5w:";
      try { 
        HttpUrl.getChecked("v\"&5w:");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for v\"&5w:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte)108;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HttpUrl.percentDecode("\"%3y'o6)l]O", false);
      HttpUrl.defaultPort("INVALID_HOST");
      MockFile mockFile0 = new MockFile("INVALID_HOST", "INVALID_HOST");
      URL uRL0 = mockFile0.toURL();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HttpUrl.defaultPort("http:");
      HttpUrl.defaultPort("zZ>E}-Hp1B=Y=a+n");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve("http:");
      httpUrl1.queryParameter("tS:49iey't95");
      httpUrl1.encodedPathSegments();
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HttpUrl.defaultPort("whttp:");
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize(buffer0, "whttp:", (-1), 711, "whttp:", false, false, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "s4L]!Lw8GF)M{&c\"", 1276, 1276, "ftp:/", false, false, false, false);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HttpUrl.defaultPort("$tp:");
      HttpUrl.percentDecode("\"%3y'o6)l]O", false);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HttpUrl.canonicalize("6>ACBX_+jqyb", "u^(4rO", false, false, true, false);
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("SUCCESS", 76, 6, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ".";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment(".");
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string1 = "http:";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("http:");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegments("http:");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setEncodedQueryParameter("encodedPassword == null", "encodedPassword == null");
      httpUrl_Builder4.encodedFragment = "encodedPassword == null";
      // Undeclared exception!
      try { 
        httpUrl_Builder4.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HttpUrl.defaultPort("\"Snnh1MCexT\"pl");
      HttpUrl.percentEncoded("\"Snnh1MCexT\"pl", (-1), (-1));
      try { 
        HttpUrl.getChecked("\"Snnh1MCexT\"pl");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for \"Snnh1MCexT\"pl
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = HttpUrl.QUERY_ENCODE_SET;
      URI uRI0 = MockURI.aFTPURI;
      HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query((String) null);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder2.removePathSegment(97);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HttpUrl.parse("Z.!u-8gX1w*");
      Buffer buffer0 = new Buffer();
      String string0 = null;
      int int0 = (-4567);
      int int1 = 17;
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, (String) null, (-4567), 17, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HttpUrl.queryStringToNamesAndValues("okio.Buffer$2");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment((-1506), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.password("foo.bar");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      httpUrl_Builder0.encodedFragment("r4:x<");
      httpUrl_Builder0.addPathSegments("v5w:");
      try { 
        HttpUrl.getChecked("xb6sZRL6.Ha*]k51q%L");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for xb6sZRL6.Ha*]k51q%L
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      try { 
        HttpUrl.getChecked("Z^g[h");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Z^g[h
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.url();
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("kPFz)|7kcH[%27CF8");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.host("p5,");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kPFz)|7kcH[%27CF8");
      httpUrl_Builder2.password(".@k;U (7?;eA_v81");
      httpUrl0.username();
      httpUrl_Builder2.username("ch@m]%b%20h$");
      HttpUrl httpUrl1 = null;
      try {
        httpUrl1 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "~fg}@C7(JjE?");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      httpUrl0.encodedUsername();
      httpUrl0.encodedUsername();
      httpUrl0.uri();
      httpUrl0.fragment();
      int int0 = 66;
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(66);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 132, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl.get(uRI0);
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "kPFz)|7kcH[%27CF8";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("kPFz)|7kcH[%27CF8");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("fa|iDm:!h-+%(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: fa|iDm:!h-+%(
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = 760;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "encodedPassword == null";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("encodedPassword == null");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("endIndex < beginIndex: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: endIndex < beginIndex: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.decodeHexDigit('e');
      String string0 = HttpUrl.QUERY_ENCODE_SET;
      URI uRI0 = MockURI.aFTPURI;
      HttpUrl.get(uRI0);
      try { 
        HttpUrl.getChecked("OF ");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for OF 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "v5w:";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = "iT,Rem\\\\";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("iT,Rem\\");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("v5w:");
      String string2 = "::";
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HttpUrl.decodeHexDigit('Z');
      try { 
        HttpUrl.getChecked("M^!3>5!I");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for M^!3>5!I
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HttpUrl.decodeHexDigit('j');
      String string0 = HttpUrl.QUERY_ENCODE_SET;
      HttpUrl.decodeHexDigit('G');
      try { 
        HttpUrl.getChecked("http:/");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:/
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.defaultPort((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HttpUrl.decodeHexDigit('j');
      String string0 = HttpUrl.QUERY_ENCODE_SET;
      HttpUrl.decodeHexDigit('G');
      try { 
        HttpUrl.getChecked("|n");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for |n
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = HttpUrl.PATH_SEGMENT_ENCODE_SET;
      String string1 = HttpUrl.percentDecode("encodedpassword%20==%20null", 13, 13, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HttpUrl.decodeHexDigit('j');
      String string0 = "265xj";
      URI uRI0 = MockURI.create("265xj");
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      HttpUrl.get(uRI1);
      try { 
        HttpUrl.getChecked("265xj");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 265xj
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v5w:");
      try { 
        HttpUrl.getChecked(" I");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for  I
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegment("v5w:");
      HttpUrl.percentDecode("v5w:", false);
      int int0 = 98;
      String string0 = null;
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((String) null, 98, 98, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("A^jW0lG");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      httpUrl_Builder0.encodedFragment("xq\"7Y");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.parse(httpUrl0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        HttpUrl.percentEncoded((String) null, (-3654), 71);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HttpUrl.decodeHexDigit('8');
      String string0 = "size < ";
      try { 
        HttpUrl.getChecked("size < ");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for size < 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        HttpUrl.getChecked("z&Mc&C");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for z&Mc&C
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("GOkHm.5=^C[z}#B");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.username("::");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("*");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllQueryParameters("::");
      httpUrl_Builder2.addEncodedPathSegment("'& 'aT>b5Q`AxI;");
      httpUrl_Builder3.addEncodedPathSegments("}Tf8M_gx`cNnc6y~6I");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HttpUrl.defaultPort("P}^~%+>zc'k=X-:");
      String string0 = null;
      try { 
        MockURI.URI("okhttp3.RequestBody$3", "okhttp3.RequestBody$3", "%2e", (-1), "okhttp3.RequestBody$3", (String) null, (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: okhttp3.RequestBody$3://okhttp3.RequestBody$3@%2eokhttp3.RequestBody$3
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:p4i");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("MISSING_SCHEME");
      assertNotNull(httpUrl_Builder0);
      
      httpUrl0.encodedFragment();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://p4i/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = HttpUrl.percentEncoded((String) null, 738, 738);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HttpUrl.decodeHexDigit('j');
      String string0 = HttpUrl.QUERY_ENCODE_SET;
      URI uRI0 = MockURI.aFTPURI;
      HttpUrl.get(uRI0);
      try { 
        HttpUrl.getChecked("GHsPB");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for GHsPB
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.decodeHexDigit('0');
      String string0 = null;
      // Undeclared exception!
      try { 
        HttpUrl.getChecked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "okio.HashingSink");
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:p4i");
      String string0 = HttpUrl.FRAGMENT_ENCODE_SET_URI;
      List<String> list0 = httpUrl0.pathSegments();
      assertEquals("http://p4i/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HttpUrl.decodeHexDigit('j');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("96$ba!LLR;G", "96$ba!LLR;G");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername("9eTSDz_,!?cQ");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setEncodedQueryParameter("9eTSDz_,!?cQ", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder4.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:p4i");
      String string0 = httpUrl0.encodedFragment();
      assertEquals("http://p4i/", httpUrl0.toString());
      assertNull(string0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "s@'N2cTRe3SD1+");
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HttpUrl.decodeHexDigit('8');
      URI uRI0 = null;
      // Undeclared exception!
      try { 
        HttpUrl.get((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      try { 
        HttpUrl.getChecked("w:@mh");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for w:@mh
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HttpUrl.getChecked("http:p4i");
      String string0 = HttpUrl.FRAGMENT_ENCODE_SET_URI;
      assertEquals(" \"#<>\\^`{|}", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int int0 = 98;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removeAllEncodedQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "http";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("http");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      String string1 = "base64 == null";
      // Undeclared exception!
      try { 
        httpUrl_Builder2.scheme("base64 == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: base64 == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "%e";
      HttpUrl.parse("%e");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("v5w:");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      httpUrl_Builder2.port(826);
      httpUrl_Builder1.effectivePort();
      // Undeclared exception!
      try { 
        MockURI.resolve((URI) null, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HttpUrl.decodeHexDigit(';');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ")+ds`)0]x#!";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(")+ds`)0]x#!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: )+ds`)0]x#!
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("qRX4|)~x(N+");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("qRX4|)~x(N+");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedQuery((String) null);
      String string0 = "https:";
      // Undeclared exception!
      try { 
        httpUrl_Builder4.scheme("https:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: https:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setQueryParameter("P>L1dr_Y&nil", "..");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setPathSegment(0, "s@'N2cTRe3SD1+");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HttpUrl.decodeHexDigit('y');
      // Undeclared exception!
      try { 
        HttpUrl.get((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('y');
      assertEquals((-1), int0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("https:/some/fake/but/wellformed/url");
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("+");
      boolean boolean0 = httpUrl1.isHttps();
      assertEquals(443, httpUrl1.port());
      assertEquals("https://some/fake/but/wellformed/url", httpUrl0.toString());
      assertEquals("https://some/fake/but/wellformed/+", httpUrl1.toString());
      assertEquals(4, httpUrl1.pathSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "O~`oFn` J]Q";
      String string1 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removeAllQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HttpUrl.percentDecode((Buffer) null, (String) null, 2507, 618, true);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      String string0 = HttpUrl.percentDecode("MD5", true);
      assertEquals("MD5", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("(fVN&8#%{1ji", "(fVN&8#%{1ji");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setPathSegment((-8323580), "(fVN&8#%{1ji");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      try { 
        HttpUrl.getChecked("ts)\":qVaefx7EV");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ts)\":qVaefx7EV
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("/E%");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("\u2026]", "/E%");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.query("/E%");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedPath("/E%");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegment("]+");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.host("XgQ");
      httpUrl_Builder6.removeAllQueryParameters("");
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder0.addPathSegment("zMh_~_4ANpJ!3");
      httpUrl_Builder7.addEncodedPathSegment("%40");
      httpUrl_Builder1.addEncodedQueryParameter("EIHHB\"D^B@:8I", "]+");
      httpUrl_Builder6.encodedUsername(".");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      try { 
        HttpUrl.getChecked("[text=");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for [text=
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "Wg9d";
      try { 
        HttpUrl.getChecked("Wg9d");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Wg9d
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "@/\\?#";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("@/?#");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("@/?#");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment((String) null);
      httpUrl_Builder3.removeAllEncodedQueryParameters("@/?#");
      String string1 = "encodedPathSegments == null";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.url();
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      String string0 = "p5,";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removeAllQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removePathSegment(0);
      int int0 = 99;
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((Buffer) null, ";)8vG/y", 0, 2507, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("Yn!Db1`e");
      httpUrl_Builder1.setQueryParameter("Yn!Db1`e", "");
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("", 58, 58, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "kPFz)|7kcH['CF8";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("kPFz)|7kcH['CF8");
      httpUrl_Builder1.query("kPFz)|7kcH['CF8");
      String string1 = "";
      httpUrl_Builder0.addEncodedPathSegment("kPFz)|7kcH['CF8");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addPathSegment("&^|B_d{'<ICWCNA");
      String string2 = "[\\u0000-\\u001F\\u007F-\\u009F\\p{javaWhitespace}]";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("kPFz)|7kcH['CF8", "[\u0000-\u001F-\u009Fp{javaWhitespace}]");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.host("kPFz)|7kcH['CF8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: kPFz)|7kcH['CF8
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.url();
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      String string0 = "p5,";
      httpUrl0.queryParameterNames();
      int int0 = 128;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("6dhj%60%7d%7fdf]p");
      String string1 = null;
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment((String) null);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedQuery("t][4M6F,LWJ");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.password("p5,");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.removePathSegment(99);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.url();
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("kPFz)|7kcH[%27CF8");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.host("p5,");
      httpUrl_Builder2.password(".@k;U (7?;eA_v81");
      httpUrl_Builder2.username("ch@m]%b%20h$");
      HttpUrl httpUrl1 = null;
      try {
        httpUrl1 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("o&{G", (-126), (-126), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.getChecked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("");
      httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("[\u0000-\u001F-\u009Fp{javaWhitespace}]");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment(" hex=");
      String string0 = "=|emy/~?N";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("=|emy/~?N", "=|emy/~?N");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      String string1 = "";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllEncodedQueryParameters("");
      httpUrl_Builder4.addPathSegments("");
      httpUrl_Builder4.encodedQuery(" hex=");
      try { 
        HttpUrl.getChecked("=|emy/~?N");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for =|emy/~?N
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      try { 
        HttpUrl.getChecked("qRX4|)x(N+");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for qRX4|)x(N+
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "6*]aj7Cn%lS";
      HttpUrl.parse("6*]aj7Cn%lS");
      Buffer buffer0 = new Buffer();
      String string1 = "b_R?2~%e";
      int int0 = 224;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(224);
      byteArrayOutputStream0.write((-490));
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) byteArrayOutputStream0, (long) 224, (long) 224);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=224 byteCount=224
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("<kb");
      String string0 = null;
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("<kb", (String) null);
      httpUrl_Builder1.encodedFragment((String) null);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("<kb");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("", (-586), (-2890), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = "[]";
      int int0 = 54;
      String string1 = "SHA-1";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("[]", "[]", 54, "SHA-1", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        HttpUrl.get(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.query("");
      String string0 = "<bJ~Q,S";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("<bJ~Q,S", "<bJ~Q,S");
      String string1 = "unexpected path segment: ";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername("unexpected path segment: ");
      String string2 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder2.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "No deadline";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("No deadline");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("No deadline");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath("No deadline");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: No deadline
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      try { 
        HttpUrl.getChecked("P>L1dr_Y&nil");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for P>L1dr_Y&nil
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "D89Qu}8!-)";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("D89Qu}8!-)", "`Agc{RpS$_");
      String string1 = "size < 8: ";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("`Agc{RpS$_", "size < 8: ");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegments("");
      String string2 = "u!k(y[ 0L_9so";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.fragment("u!k(y[ 0L_9so");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("http");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("http");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("http", "http");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllQueryParameters("getsockname failed");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.host("vC");
      String string0 = "";
      httpUrl_Builder5.setEncodedQueryParameter("", "R4+$Ee#1pgrK`|Gy?v");
      httpUrl_Builder5.encodedUsername("8qi");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      httpUrl_Builder0.addEncodedPathSegment("");
      String string1 = "wD%7S3ARr?";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("wD%7S3ARr?");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removePathSegment(0);
      String string2 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder2.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl((HttpUrl.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = "okhttp3.internal.Util";
      HttpUrl.parse("okhttp3.internal.Util");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = 0;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("okhttp3.internal.Util");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addQueryParameter("okhttp3.internal.Util", "okhttp3.internal.Util");
      httpUrl_Builder3.reencodeForUri();
      httpUrl_Builder2.encodedFragment((String) null);
      String string1 = "Unexpected hex string: ";
      // Undeclared exception!
      try { 
        httpUrl_Builder3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "kPFz)|7kcH['CF8";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("kPFz)|7kcH['CF8");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("kPFz)|7kcH['CF8");
      String string1 = "";
      httpUrl_Builder0.addQueryParameter("&^|B_d{'<ICWCNA", "");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("");
      String string2 = "[\\u0000-\\u001F\\u007F-\\u009F\\p{javaWhitespace}]";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setEncodedQueryParameter("kPFz)|7kcH['CF8", "[\u0000-\u001F-\u009Fp{javaWhitespace}]");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.host("kPFz)|7kcH['CF8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: kPFz)|7kcH['CF8
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      HttpUrl.decodeHexDigit('O');
      String string0 = "s'aZ*j8/)r,7N}sf";
      HttpUrl.queryStringToNamesAndValues("s'aZ*j8/)r,7N}sf");
      Buffer buffer0 = new Buffer();
      String string1 = "";
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = " hex=";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment(" hex=");
      String string1 = "=|emy/~?N";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("=|emy/~?N", "=|emy/~?N");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      String string2 = "";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllEncodedQueryParameters("");
      httpUrl_Builder4.addPathSegments("");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.removePathSegment(15);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("encodedPathSegment == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = true;
      HttpUrl.canonicalize("qy+yKGQ}n#", "qy+yKGQ}n#", true, true, true, true);
      int int0 = (-585);
      try { 
        MockURL.URL("qy+yKGQ}n#", "", (-585), "Unexpected hex digit: ");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid port number :-585
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setPathSegment(2945, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2945, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.url();
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      httpUrl0.queryParameterNames();
      HttpUrl.percentDecode(buffer0, "p5,", 99, 99, true);
      httpUrl0.isHttps();
      httpUrl0.encodedUsername();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(99);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("FHCRC");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("FHCRC", "UTF-16LE");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("FHCRC", "FHCRC");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.removePathSegment(0);
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.removeAllEncodedQueryParameters("UTF-16LE");
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.get((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("[\u0000-\u001F-\u009Fp{javaWhitespace}]");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "]|]ycS!p|\\)@wkb:";
      String string1 = "<y/rz5%+P?(|&m";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("]|]ycS!p|)@wkb:", "<y/rz5%+P?(|&m");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("<y/rz5%+P?(|&m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: <y/rz5%+P?(|&m
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("ch@M]%B H$", "ch@M]%B H$");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("ch@M]%B H$", "ch@M]%B H$");
      String string0 = null;
      httpUrl_Builder2.setEncodedPathSegment(0, "ch@M]%B H$");
      httpUrl_Builder2.username("");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "W:@mHp4I";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("W:@mHp4I");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("W:@mHp4I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: W:@mHp4I
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "s)X=bYhR^L9{%I/Sp";
      String string1 = "";
      httpUrl_Builder0.addPathSegment("");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("s)X=bYhR^L9{%I/Sp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: s)X=bYhR^L9{%I/Sp
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = "hqU";
      int int0 = 1429;
      int int1 = 61;
      HttpUrl.percentEncoded("hqU", 1429, 61);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = "6dhj`}dF]P";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("6dhj`}dF]P");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addPathSegment("6dhj`}dF]P");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.encodedQuery("hqU");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedFragment("hqU");
      httpUrl_Builder4.setEncodedQueryParameter("hqU", "D2uNM?=U3Sp\"[3vrUb'");
      httpUrl_Builder4.encodedFragment = "string == null";
      httpUrl_Builder0.username("");
      httpUrl_Builder3.encodedPassword = "string == null";
      httpUrl_Builder4.addEncodedQueryParameter("\n not found: size=", "\n not found: size=");
      MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = (-2668);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port((-2668));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -2668
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = "";
      try { 
        HttpUrl.getChecked("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "7GHw3TDWYM%q/";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("7GHw3TDWYM%q/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: 7GHw3TDWYM%q/
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = 349;
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(349, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }
}
