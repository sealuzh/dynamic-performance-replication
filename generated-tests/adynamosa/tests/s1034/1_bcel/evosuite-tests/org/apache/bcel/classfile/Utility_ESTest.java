/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 07:32:04 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StreamCorruptedException;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.charset.CharsetEncoder;
import java.util.LinkedList;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ukbp0tEpb-");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)31;
      byteArray0[5] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteSequence0.readFloat();
      byteSequence0.readBoolean();
      byteSequence0.mark((byte)31);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-87);
      byteArray1[1] = (byte)25;
      byteArray1[2] = (byte) (-36);
      byteArray1[3] = (byte) (-36);
      byteArray1[5] = (byte) (-87);
      Utility.classOrInterface(45);
      byteSequence0.skip((byte) (-36));
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.available();
      byteSequence1.available();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals(2, byteSequence1.getIndex());
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.format(16384, (byte) (-87), false, 'M');
      assertEquals("16384", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byteArray0[0] = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      byteArray0[3] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(188, 188);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.copy();
      constantPool1.toString();
      Utility.codeToString(byteSequence0, constantPool1, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool1, true);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.searchOpcode("15+Kk");
      try { 
        Utility.typeOfSignature("putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utility.compactClassName("anewarray", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.JAPAN;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readFloat();
      try { 
        Utility.methodSignatureArgumentTypes("anewarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: anewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.convertString("Olx~-*v8cG<]Sl6m");
      Utility.searchOpcode("Olx~-*v8cG<]Sl6m");
      boolean boolean0 = false;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte) (-90);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, 184, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "&q/,\"M}=S0%";
      Utility.convertString("&q/,\"M}=S0%");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)59;
      byteArray0[8] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)65);
      byteSequence0.readDouble();
      byteSequence0.skip((byte) (-51));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readFloat();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte) (-106));
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      String string0 = "!sU";
      String string1 = "org.apache.commons.io.filefilter.TrueFileFilter";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("fcmpg", "org.apache.commons.io.filefilter.TrueFileFilter", "!sU", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fcmpg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte) (-92);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("new", "invokedynamic", "new", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: new
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "T\"*}?.=c1w$:L3T";
      Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      byte byte0 = (byte)0;
      byte byte1 = (byte)17;
      byte[] byteArray0 = new byte[3];
      byte byte2 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)17;
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)17;
      byteArray1[1] = (byte)0;
      Utility.encode(byteArray1, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.compactClassName("V", false);
      int int0 = Utility.clearBit(62, 62);
      assertEquals(62, int0);
      
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte) (-85);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1433500681), (int) (byte) (-85), true);
      assertEquals("0:    dstore_2\n1:    dstore_2\n2:    lload_2\n3:    lookupswitch\tdefault = 1229564846, npairs = 0 ()\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n", string1);
      
      Utility.classOrInterface((byte) (-85));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "V";
      stringArray0[1] = "V";
      String string2 = Utility.methodTypeToSignature("nop", stringArray0);
      assertEquals("(LV;LV;)Lnop;", string2);
      
      String string3 = Utility.fillup("(LV;LV;)Lnop;", (byte) (-85), true, 'Q');
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.convertString("&q/,\"M}=S0%");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)59;
      byteArray0[8] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)65);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("&q/,\"M}=S0%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &q/,\"M}=S0%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object object0 = new Object();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-99);
      byteArray0[3] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("f!W'[]2LM[Tw7'`j");
      Utility.clearBit(227, 3444);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S#3$");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(82);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f!W'[]2LM[Tw7'`j");
      Utility.compactClassName("f!W'[]2LM[Tw7'`j", "{", false);
      Utility.setBit(3444, 75);
      try { 
        Utility.typeOfSignature("&oeG3I$O1gK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &oeG3I$O1gK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.isSet(5, 5);
      byte[] byteArray0 = Utility.decode("ri*3ZCN[", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readBoolean();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)71;
      byteArray1[1] = (byte) (-46);
      byteArray1[2] = (byte) (-89);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, constantPool0, false);
      Utility.format(131, (byte)71, true, 't');
      try { 
        Utility.methodSignatureArgumentTypes("dstore_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dstore_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-107);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)34, (byte) (-107));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, false);
      char char0 = 'T';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "freturn");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)34, (int) (byte)34, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) byteSequence0;
      objectArray0[1] = (Object) (byte)16;
      objectArray0[2] = (Object) (byte)76;
      Utility.printArray(objectArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "astore_1";
      String string0 = Utility.methodTypeToSignature("YJwx?+[% %9@]+", stringArray0);
      assertEquals("(Lastore_1;)[LYJwx?+;", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte byte0 = (byte) (-94);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[11];
      byteArray1[10] = (byte) (-94);
      byteArray1[1] = (byte) (-94);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.clearBit((byte) (-94), (byte) (-94));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_X.ZA@");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.compactClassName("invokespecial", false);
      Utility.setBit(60, (byte) (-94));
      Utility.setBit(6, 16384);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("if_icmpge\t\t#1", "invokespecial", "Q", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpge\t\t#1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("\t");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte byte0 = (byte) (-119);
      Locale locale0 = Locale.JAPAN;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        byteSequence0.readFloat();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, constantPool0, false);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-99);
      Utility.classOrInterface(1871);
      Utility.decode("interface", false);
      Utility.encode(byteArray1, false);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-99);
      byteArray2[1] = (byte) (-99);
      Utility.replace("Pe=~qv_~/", "@:fn\"]\"qgvBQTs,u@dO", "interface");
      Utility.convertString("tr678r'O&)e3OC:");
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("Class ", stringArray0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte) (-99), (byte) (-99), byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureToString("arraylength", "Lt.(Kn", "?>...", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: arraylength
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.searchOpcode("Nlk9ps!vdkN0Y(z");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "O Tpc7Q(Wfv");
      byte byte0 = (byte)68;
      boolean boolean0 = false;
      byte byte1 = (byte) (-20);
      byte byte2 = (byte)7;
      Utility.clearBit((byte)7, (byte)68);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-113);
      byteArray0[2] = (byte)68;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.JAPAN;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.readFloat();
      try { 
        Utility.methodSignatureArgumentTypes("O Tpc7Q(Wfv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O Tpc7Q(Wfv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utility.compactClassName("T\"*}?.=c1w$:L3T", "T", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-99);
      Utility.classOrInterface(1871);
      Utility.decode("interface", false);
      byte[] byteArray2 = new byte[0];
      Utility.encode(byteArray2, false);
      byte[] byteArray3 = new byte[8];
      byteArray3[1] = (byte) (-99);
      byteArray3[2] = (byte) (-99);
      byteArray3[3] = (byte)114;
      byteArray3[4] = (byte)114;
      byteArray3[5] = (byte) (-99);
      byteArray3[6] = (byte) (-99);
      byteArray3[7] = (byte)114;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray3, constantPool1, (int) (byte) (-99), (-2008), false);
      Utility.replace("", "interface", (String) null);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(200, 1871, byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureToString("0:    nop\n1:    ifgt\t\t#-25229\n4:    frem\n5:    ifgt\t\t#-25225\n", "p6;M", "", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    ifgt\t\t#-25229
         // 4:    frem
         // 5:    ifgt\t\t#-25225
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("T", ":", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool1, true);
      ConstantPool constantPool3 = null;
      try {
        constantPool3 = new ConstantPool(byteSequence3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -109
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-99);
      Utility.classOrInterface(1871);
      Utility.decode("interface", false);
      byte[] byteArray2 = new byte[0];
      ByteSequence byteSequence1 = new ByteSequence(byteArray2);
      byteSequence1.mark(3088);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte) (-99);
      byteArray3[1] = (byte) (-99);
      byteArray3[2] = (byte) (-99);
      byteArray3[3] = (byte) (-114);
      byteArray3[4] = (byte)16;
      ByteSequence byteSequence2 = new ByteSequence(byteArray3);
      byteSequence2.readFloat();
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)114;
      byteArray1[1] = (byte)101;
      byteArray1[2] = (byte)101;
      byteArray1[3] = (byte)2;
      Utility.equals(byteArray1, byteArray0);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "?;dytx~M3JEKfjQW~S";
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("?;dytx~M3JEKfjQW~S", (String[]) null);
      Utility.methodSignatureArgumentTypes("()L?;dytx~M3JEKfjQW~S;");
      try { 
        Utility.decode("+/ i>#kjLIAFZY^CR4", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("?;dytx~OfJEKfjQW~S", (String[]) null);
      assertEquals("()L?;dytx~OfJEKfjQW~S;", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = Utility.methodSignatureToString("()L?;dytx~OfJEKfjQW~S;", "()L?;dytx~OfJEKfjQW~S;", "putstatic");
      assertEquals("putstatic ? ()L?;dytx~OfJEKfjQW~S;()", string1);
      
      Utility.decode("putstatic ? ()L?;dytx~OfJEKfjQW~S;()", false);
      String string2 = Utility.accessToString(45);
      assertEquals("public protected static synchronized", string2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-87);
      Utility.getSignature("GMn5;][a]g6W(v5");
      Utility.classOrInterface(747);
      Utility.setBit((byte) (-87), 78);
      Utility.signatureToString("[LGMn5;];");
      try { 
        Utility.methodSignatureReturnType("iastore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iastore'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-121);
      try { 
        Utility.methodSignatureArgumentTypes("(14", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `14'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "Q";
      try { 
        Utility.methodSignatureReturnType("Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "(%14";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(%14", "Unreachable default case reached", "(%14");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `%14'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("\t", "\t", true);
      Utility.convertString("\t");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[6] = (byte)57;
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\t");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.JAPAN;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)57;
      byteArray1[1] = (byte)57;
      byteArray1[2] = (byte)57;
      byteArray1[3] = (byte)54;
      byteArray1[4] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        byteSequence0.readFloat();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = Utility.decode("Byte code error: ", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Byte code error: ");
      String string0 = Utility.compactClassName("org.apache.bcel.classfile.Utility$1");
      assertEquals("org.apache.bcel.classfile.Utility$1", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref0;
      constantArray0[4] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1180), (-2497), false);
      assertEquals("0:    lstore_3\n1:    lshl\n2:    ineg\n3:    lsub\n4:    lload_2\n5:    dadd\n6:    ddiv\n7:    isub\n8:    lsub\n9:    lload_2\n10:   lsub\n11:   frem\n12:   frem\n13:   ddiv\n14:   frem\n15:   astore\t\t%32\n", string1);
      
      String string2 = Utility.methodSignatureReturnType("BootstrapMethod(");
      assertEquals("byte", string2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.isJavaIdentifierPart('`');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.bcel.util.ClassLoaderRepository");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, false);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.compactClassName("short");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) constantPool1;
      constantPool1.setConstantPool((Constant[]) null);
      objectArray0[1] = (Object) byteSequence0;
      objectArray0[2] = (Object) byteSequence0;
      objectArray0[3] = (Object) constantPool0;
      objectArray0[3] = (Object) mockPrintStream0;
      byteSequence0.read(byteArray0);
      // Undeclared exception!
      try { 
        Utility.printArray(objectArray0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-99);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.accessToString((int) (byte) (-99), false);
      byteSequence0.readByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence2, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      String string0 = Utility.compactClassName("ZI", true);
      assertEquals("ZI", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), (int) (byte) (-109), true);
      assertEquals("0:    i2s\n1:    nop\n", string1);
      
      String string2 = Utility.accessToString((int) (byte) (-109), true);
      assertEquals("public private final transient native abstract strictfp synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[0] = (byte) (-62);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-56);
      String string0 = "class";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("class");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.JAPAN;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = "instanceof";
      String string2 = "nlk9ps!vdkn0y(z";
      boolean boolean0 = true;
      Method method0 = new Method((byte) (-62), (byte) (-78), (byte) (-56), (Attribute[]) null, (ConstantPool) null);
      // Undeclared exception!
      try { 
        method0.getLocalVariableTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[0] = (byte) (-62);
      byte byte0 = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-56);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-56), (byte)0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.getSignature("java.io.Serializable");
      try { 
        Utility.typeOfSignature("@S:n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @S:n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.compactClassName("The magic number must contain at least one byte", "The magic number must contain at least one byte", false);
      Utility.getSignature("The magic number must contain at least one byte");
      Utility.accessToString((-207), false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-514), 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    pop2
         // 1:    freturn
         // 2:    dup2_x1
         // 3:    aload_3
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utility.compactClassName("F.,f`bw");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-6);
      byteArray0[5] = (byte) (-67);
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-56));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-56));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        Utility.codeToString(byteSequence1, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.getSignature("!sU[}Q%=n!Eg?d]N+");
      Integer integer0 = new Integer((-992));
      Utility.methodTypeToSignature("!sU[}Q%=n!Eg?d]N+", (String[]) null);
      byte[] byteArray0 = Utility.decode("[L!sU;", false);
      MockFile.createTempFile("getStatic", "getStatic");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-122), 154);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.classOrInterface((-992));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 91, 154);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q,Sh@JuNe");
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("tf276l)czd\"hch<5");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.JAPAN;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-337));
      Utility.getSignature("Invalid method signature: ");
      Utility.accessToString(71);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.isJavaIdentifierPart('_');
      boolean boolean0 = false;
      Utility.format((byte)123, 30, false, 'y');
      try { 
        Utility.methodSignatureArgumentTypes("Invalid method signature: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.isSet(5, 5);
      byte[] byteArray0 = Utility.decode("ri*3ZCN[", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.getSignature("StackMap(");
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence1, constantPool1, false);
      Utility.compactClassName("1C/de0$J%$'R)A&R,", false);
      Utility.setBit(5, 789);
      Utility.searchOpcode("nop");
      String string0 = Utility.signatureToString("Class ");
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("\tiZw96df)");
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<illegal opcode>");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Invalid signature: ");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.JAPAN;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, constantPool0, false);
      int int0 = Utility.setBit((-347), (-347));
      assertEquals((-347), int0);
      
      short short0 = Utility.searchOpcode("Invalid signature: ");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.signatureToString("Invalid signature: ");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[6] = (byte) (-76);
      byteArray0[0] = (byte) (-65);
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.printArray((Object[]) null, false, false);
      Utility.searchOpcode("zSJ6UOq:FsP'nlk");
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("athrow", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.searchOpcode("");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.getSignature("nop");
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)36;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.printArray((Object[]) null, true, true);
      Utility.searchOpcode("C-_(5");
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)36, (int) (byte)36, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.getSignature("a");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-83);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-88), (int) (byte)26, false);
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("La;", ".sVky(0aP2,BufR", false);
      Utility.accessToString(34);
      Utility.methodTypeToSignature("^]J", (String[]) null);
      Utility.compactClassName("a");
      Utility.isSet((byte) (-83), 2271);
      Utility.isSet(33, 2178);
      // Undeclared exception!
      try { 
        Utility.signatureToString("^]J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^]J'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byte byte0 = (byte) (-113);
      byteArray0[1] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-86));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("byte");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~HR");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, false);
      constantPool0.setConstantPool(constantArray0);
      Utility.encode(byteArray0, true);
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = Utility.decode("$c7$c7o$d4m$_$A$A$A", false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-44);
      byteArray2[1] = (byte) (-57);
      byteArray2[2] = (byte) (-57);
      byteArray2[3] = (byte)109;
      byteSequence1.readFully(byteArray2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      Utility.codeToString(byteSequence1, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utility.getSignature("<:Ck2@bNA$HMkX;\"zZv");
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-76);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 162, (int) (byte)22, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-98);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.isJavaIdentifierPart('m');
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      byte[] byteArray0 = Utility.decode("uH\"O]GV$", false);
      int int0 = Utility.clearBit(107, 107);
      assertEquals(107, int0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(319);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte)117, (byte)72, (byte)34, (byte)79, (byte)93, (byte)71, (byte)86}, byteArray0);
      
      String string0 = Utility.compactClassName("l2f");
      assertEquals("l2f", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{CONSTANT_MethodType[16](descriptor_index = 319)}", string1);
      
      String string2 = Utility.accessToString(107);
      assertEquals("public private static synchronized volatile", string2);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.getSignature("a");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-83);
      byteArray0[0] = (byte)26;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("\t");
      Utility.searchOpcode("l2d");
      Utility.compactClassName("char", "La;", false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-85);
      byteArray1[1] = (byte) (-83);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-98);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = Utility.decode("T\"*}?.=c,w$:L33", false);
      byte[] byteArray2 = new byte[5];
      byteArray2[1] = (byte) (-95);
      Utility.accessToString(206);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.accessToString(206, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)36, (int) (byte)1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "E4;*)P%a}1J+=";
      Utility.compactClassName("E4;*)P%a}1J+=", true);
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("W]-dQlH5^&0L7 Ky", false);
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 161, 256, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utility.compactClassName("E4;*)P%a}1J+=", true);
      byte[] byteArray0 = Utility.decode("W]-dQlH^&0L7_Ky", false);
      int int0 = Utility.clearBit((byte)68, 161);
      assertEquals(68, int0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      byteSequence0.readInt();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.compactClassName("isub");
      assertTrue(string1.equals((Object)string0));
      
      short short0 = Utility.searchOpcode("\t");
      assertEquals((short) (-1), short0);
      
      String string2 = Utility.compactClassName("ifnull");
      assertEquals("ifnull", string2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "\ti6df)";
      MockPrintStream mockPrintStream0 = new MockPrintStream("\ti6df)");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<illegal opcode>");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.JAPAN;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-71);
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility$1", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.classOrInterface((-1607));
      assertEquals("class", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[16];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readDouble();
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals(33, byteArray0.length);
      assertEquals("imul", string1);
      
      Utility.compactClassName("org.apache.bcel.classfile.Code");
      short short0 = Utility.searchOpcode("\t");
      assertEquals((short) (-1), short0);
      
      String string2 = Utility.fillup("org.apache.bcel.classfile.Code", 9, true, '*');
      assertEquals("org.apache.bcel.classfile.Code", string2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)50;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ukbp0tEpb-");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)50;
      byteArray1[4] = (byte) (-8);
      byteArray1[5] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray2 = new byte[12];
      byteArray2[1] = (byte)18;
      Utility.compactClassName("Ukbp0tEpb-");
      Utility.getSignature("Ukbp0tEpb-");
      Utility.accessToString(73);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, (ConstantPool) null, (-1), 59, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      byte[] byteArray0 = Utility.decode("T\"*}?.=c1w$:L3T", false);
      int int0 = Utility.clearBit(161, 161);
      assertEquals(161, int0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T\"*}?.=c1w$:L3T");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.classOrInterface(161);
      assertEquals("class", string0);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(4725, 4725);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool2, false);
      assertEquals(14, byteArray0.length);
      assertEquals("istore_2", string1);
      
      String string2 = Utility.classOrInterface(4725);
      assertEquals("interface", string2);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "V";
      Utility.compactClassName("V", false);
      Utility.clearBit(62, 62);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte) (-85);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1433500681), (int) (byte) (-85), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore_2
         // 1:    dstore_2
         // 2:    lload_2
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "S:,E,f~<'tc";
      Utility.replace("S:,E,f~<'tc", "S:,E,f~<'tc", "S:,E,f~<'tc");
      int int0 = 82;
      Utility.clearBit((byte) (-53), 82);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-53);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)73;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)73, (-923), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "9U4\\_B4--";
      Utility.getSignature("9U4_B4--");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.searchOpcode("org.apache.bcel.classfile.AnnotationDefault");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("+7", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("\t(wide)");
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<illegal opcode>");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Invalid signature: ");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.JAPAN;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      String string0 = Utility.compactClassName("E4;*)P%a}1J+=", true);
      assertEquals("E4;*)P%a}1J+=", string0);
      
      byte[] byteArray1 = Utility.decode("W]-dQlH^&0L7_Ky", false);
      int int0 = Utility.clearBit((byte)68, 161);
      assertEquals(68, int0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string1 = Utility.classOrInterface(68);
      assertEquals("class", string1);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte byte0 = byteSequence0.readByte();
      assertEquals((byte)45, byte0);
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(60, (byte)45);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      String string2 = Utility.convertString("pop");
      String string3 = Utility.replace("pop", "E4;*)P%a}1J+=", "pop");
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)23;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2010), (int) (byte) (-105));
      Utility.getSignature("0:    dcmpl\n1:    nop\n2:    irem\n3:    fload\t\t%0\n5:    nop\n6:    nop\n");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2010), (-1), true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = Utility.decode(" (", false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readFloat();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("lload_2", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[10] = (byte) (-118);
      byteArray0[1] = (byte) (-118);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.clearBit((byte) (-118), (byte) (-118));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.classOrInterface(685);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byteSequence0.readByte();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-118), 2986);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteSequence0.readUTF();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("interface", "j1D,5H QB|", "eh3P0iIxX`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      short short0 = Utility.searchOpcode("Nlk9ps!vdkN0Y(z");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.compactClassName("y", "y", true);
      assertEquals("", string0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("jsr\t\t#19449", string1);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object object0 = new Object();
      Object object1 = new Object();
      String string2 = Utility.methodTypeToSignature("o5TOJxT2KCOVBHp", (String[]) null);
      assertEquals("()Lo5TOJxT2KCOVBHp;", string2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      assertEquals("T\"*}?.=c1w$:L3T", string0);
      
      byte[] byteArray0 = Utility.decode("T\"*}?.=c1w$:L3T", false);
      int int0 = Utility.clearBit(161, 161);
      assertEquals(161, int0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string1 = Utility.classOrInterface(161);
      assertEquals("class", string1);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.readByte();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(4725, 4725);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteSequence0, constantPool2, false);
      assertEquals("daload", string2);
      assertEquals(14, byteArray0.length);
      
      String string3 = Utility.classOrInterface(4725);
      assertEquals("interface", string3);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-4);
      byteArray0[0] = (byte)125;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte) (-51);
      byteArray0[8] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)36, 1497);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "freturn");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i");
      Utility.clearBit((byte) (-111), (byte) (-20));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-20), (byte) (-71));
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("i");
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)31;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ukbp0tEpb-");
      byte[] byteArray1 = new byte[7];
      byteArray1[4] = (byte) (-36);
      byteArray1[5] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)25;
      byteArray2[1] = (byte)25;
      byteArray2[2] = (byte) (-36);
      byteArray2[3] = (byte) (-36);
      byteArray2[5] = (byte)0;
      String string0 = Utility.classOrInterface((byte)25);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence2.skip((byte) (-36));
      byteSequence2.readChar();
      ByteSequence byteSequence3 = new ByteSequence(byteArray2);
      String string1 = Utility.codeToString(byteSequence3, (ConstantPool) null, false);
      assertEquals("aload\t\t%25", string1);
      
      String string2 = Utility.convertString("class");
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utility.compactClassName("F.,f`bw");
      String string0 = "{Npo)fwaJcoUm$y>";
      Utility.getSignature("{Npo)fwaJcoUm$y>");
      Utility.convertString("<k?1jr");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<k?1jr");
      Utility.getSignature("_7FkNv?yJL");
      Utility.signatureToString("Z,=Y", false);
      try { 
        Utility.typeOfMethodSignature("isub");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: isub
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.skip((byte)26);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      byte[] byteArray0 = Utility.decode("T\"*}?.=c1w$:L3T", false);
      Utility.clearBit(161, 161);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T\"*}?.=c1w$:L3T");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.classOrInterface(161);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "impdep2";
      byte[] byteArray0 = Utility.decode("impdep2", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = (-1607);
      Utility.classOrInterface((-1607));
      boolean boolean0 = true;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[16];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean1 = true;
      Utility.codeToString(byteSequence0, constantPool1, true);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      try { 
        Utility.typeOfMethodSignature("gkeEQO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: gkeEQO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = Utility.classOrInterface(4166);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-47);
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte) (-57);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), 162, false);
      assertEquals("0:    i2c\n1:    lconst_1\n2:    ifne\t\t#23205\n5:    lload\t\t%209\n7:    sastore\n8:    ifnonnull\t\t#8\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n", string1);
      
      String string2 = Utility.convertString("0:    i2c\n1:    lconst_1\n2:    ifne\t\t#23205\n5:    lload\t\t%209\n7:    sastore\n8:    ifnonnull\t\t#8\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n");
      assertEquals("0:    i2c\\n1:    lconst_1\\n2:    ifne\t\t#23205\\n5:    lload\t\t%209\\n7:    sastore\\n8:    ifnonnull\t\t#8\\n11:   nop\\n12:   nop\\n13:   nop\\n14:   nop\\n15:   nop\\n", string2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.isSet(5, 5);
      byte[] byteArray0 = Utility.decode("ri*3ZCN[", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readBoolean();
      Integer integer0 = new Integer(5);
      constantPool0.toString();
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.classOrInterface(5);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.printArray((Object[]) constantArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 16;
      Utility.isSet(1123, 16);
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      byte byte0 = (byte)60;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2142, (-5685), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Utility.compactClassName("F.,f`bw");
      MockPrintStream mockPrintStream0 = new MockPrintStream("ldc");
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F.,f`bw");
      byte byte0 = (byte) (-75);
      byte byte1 = (byte) (-99);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("ERxl]\"C-C7D4}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ERxl]\"C-C7D4}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.compactClassName("F.,f`bw");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-6);
      byteArray0[5] = (byte) (-67);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-6), 174, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("invkedynami");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte) (-8);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-8), (int) (byte) (-8));
      Utility.getSignature("invkedynami");
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, 2, 90, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y<t}XaSFI", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y<t}XaSFI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utility.compactClassName("F.,f`bw");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-6);
      byteArray0[5] = (byte) (-67);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-6), 174, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    goto_w\t\t#-926352896
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)121;
      byte[] byteArray1 = Utility.decode("H/8_", false);
      String string0 = Utility.encode(byteArray1, false);
      assertEquals("H$_8_", string0);
      
      int int0 = Utility.clearBit(163, 184);
      assertEquals(163, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2650), 184);
      assertEquals("0:    lshl\n1:    nop\n2:    nop\n3:    nop\n", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0:    lshl\n1:    nop\n2:    nop\n3:    nop\n";
      stringArray0[1] = "0:    lshl\n1:    nop\n2:    nop\n3:    nop\n";
      stringArray0[2] = "H$_8_";
      stringArray0[3] = "H$_8_";
      stringArray0[4] = "!sJ!E+]GY{:2DDr=";
      stringArray0[5] = "0:    lshl\n1:    nop\n2:    nop\n3:    nop\n";
      String string2 = Utility.methodTypeToSignature("`+", stringArray0);
      assertEquals("(L0:;L0:;LH$_8_;LH$_8_;L!sJ!E+]GY{:2DDr=;L0:;)L`+;", string2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)31;
      String string0 = "Ukbp0tEpb-";
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ukbp0tEpb-");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)31;
      byteArray1[4] = (byte) (-8);
      byteArray1[5] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      byte[] byteArray2 = new byte[12];
      byteArray2[0] = (byte) (-80);
      byteArray2[1] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, (ConstantPool) null, (int) (byte)18, (int) (byte) (-8));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("T\"*}?.=c1w$:L3T");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.fillup("T\"*}?.=c1w$:L3T", (byte)0, false, 'L');
      Utility.format(2260, (-4101), false, 'Y');
      try { 
        Utility.methodSignatureArgumentTypes("f8ny#|hje{5eU.TK", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: f8ny#|hje{5eU.TK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0`/fShrZCbTbz");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPool0.setConstantPool((Constant[]) null);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.classOrInterface((-1172));
      Utility.codeToString(byteSequence1, constantPool0, true);
      try { 
        Utility.typeOfMethodSignature("Pj.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Pj.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)119;
      byteArray0[3] = (byte)123;
      byteArray0[1] = (byte)4;
      byteArray0[5] = (byte) (-10);
      byteArray0[7] = (byte)119;
      Utility.convertString("Object");
      byte[] byteArray1 = Utility.decode("Object", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.classOrInterface(34);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0);
      byteSequence0.readByte();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(170, (byte)123);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "[";
      boolean boolean0 = false;
      String string1 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-56);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-56), (byte) (-62));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1999, 189, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      assertEquals("T\"*}?.=c1w$:L3T", string0);
      
      byte[] byteArray0 = Utility.decode("T\"*}?.=c1w$:L3T", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = Utility.clearBit(161, 161);
      assertEquals(161, int0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T\"*}?.=c1w$:L3T");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.classOrInterface(161);
      assertEquals("class", string1);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.readByte();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(4725, 4725);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteSequence0, constantPool2, false);
      assertEquals("dadd", string2);
      assertEquals(14, byteArray0.length);
      
      String string3 = Utility.classOrInterface(4725);
      assertEquals("interface", string3);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)15;
      byteArray0[4] = (byte)31;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ukbp0tEpb-");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)31;
      byteArray1[4] = (byte) (-36);
      byteArray1[5] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-80);
      byteArray2[1] = (byte)25;
      byteArray2[2] = (byte) (-36);
      byteArray2[3] = (byte) (-36);
      byteArray2[5] = (byte) (-80);
      byteArray2[6] = (byte) (-36);
      byteArray2[7] = (byte)15;
      byteArray2[8] = (byte)31;
      Utility.codeToString(byteArray2, (ConstantPool) null, (int) (byte) (-36), (int) (byte)31);
      Utility.getSignature("nhZX");
      try { 
        Utility.methodSignatureReturnType("Ukbp0tEpb-", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ukbp0tEpb-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-56);
      byteArray0[3] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (int) (byte) (-56), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dconst_1
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 969, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("if_icmple");
      Constant constant0 = constantUtf8_0.copy();
      Constant[] constantArray0 = new Constant[18];
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      constantArray0[0] = (Constant) constantUtf8_0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantUtf8.getInstance("Xl/8hJoR}");
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = constant0;
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("d2i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: d2i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utility.compactClassName("#P3");
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)75;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("#P3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #P3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)15;
      byteArray0[4] = (byte)15;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ukbp0tEpb-");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)31;
      byteArray1[1] = (byte)15;
      byteArray1[3] = (byte)15;
      byteArray1[4] = (byte) (-36);
      byteArray0[4] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, constantPool0, false);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-98);
      byteArray2[1] = (byte)31;
      byteArray2[2] = (byte) (-109);
      byteArray2[3] = (byte) (-36);
      byteArray2[4] = (byte) (-74);
      byteArray2[5] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, constantPool0, (int) (byte)31, 3020, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utility.compactClassName("F.,f`bw");
      Utility.signatureToString("F.,f`bw", false);
      String string0 = "ldc";
      MockPrintStream mockPrintStream0 = new MockPrintStream("ldc");
      Object object0 = new Object();
      ConstantPool constantPool0 = null;
      String string1 = "\"";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F.,f`bw");
      byte byte0 = (byte) (-75);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      byteArray0[0] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = Utility.compactClassName("#P3");
      assertEquals("#P3", string0);
      
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-88);
      byteArray0[8] = (byte)75;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)16;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 73);
      assertEquals("0:    astore_1\n1:    jsr\t\t#17\n4:    <illegal opcode>\n5:    <illegal opcode>\n6:    <illegal opcode>\n7:    bipush\t\t75\n", string1);
      
      String string2 = Utility.accessToString((-1498), true);
      assertEquals("private protected strictfp synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)26;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)26, (-71));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "S:,E,~<'tc";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      Integer integer0 = new Integer((byte) (-93));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.replace("1VF9$:", "aload_2", "short");
      Utility.classOrInterface((-588));
      try { 
        Utility.methodSignatureArgumentTypes("\t(wide)", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t(wide)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!sU[}Q%=n!Eg?d]N+");
      Utility.getSignature("!sU[}Q%=n!Eg?d]N+");
      Integer integer0 = new Integer((-992));
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("!sU[}Q%=n!Eg?d]N+", (String[]) null);
      byte[] byteArray0 = Utility.decode("\"h%:#58", false);
      MockFile.createTempFile("getStatic", "getStatic");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-122), 154);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.classOrInterface((-992));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.classOrInterface(4166);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), 162, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2c
         // 1:    lconst_1
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S:,E,~<'tc");
      Utility.clearBit((-131), (-33));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)119;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "S:,E,~<'tc";
      objectArray0[3] = (Object) null;
      Object object1 = new Object();
      objectArray0[4] = object1;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Utility.getSignature("<:Ck2@bNA$HMkX;\"zZv");
      byte byte0 = (byte)59;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)59;
      byteArray0[0] = (byte) (-72);
      byteArray0[3] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byteSequence1.close();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S:,E,~<'tc");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[0] = (byte)122;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)122;
      byteArray0[7] = (byte)122;
      byteArray0[8] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence1, constantPool0, false);
      Utility.replace("short", "|?`RXb?;O-<NR i", ";");
      Utility.signatureToString("V", true);
      try { 
        Utility.methodSignatureArgumentTypes("%3NGqrHD!#}Hi;Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %3NGqrHD!#}Hi;Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte)92;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)47;
      byteArray1[1] = (byte)92;
      byteArray1[2] = (byte)48;
      byteArray1[3] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, false);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.replace("<", "<", "uXjl");
      Utility.classOrInterface((byte)92);
      Utility.decode("<", false);
      Utility.classOrInterface(3213);
      try { 
        Utility.methodSignatureArgumentTypes("/|//v,N-~X*rD<|%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /|//v,N-~X*rD<|%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      Integer integer0 = new Integer(286);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.classOrInterface((byte) (-93));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        byteSequence0.readChar();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("if_icmple");
      Constant constant0 = constantUtf8_0.copy();
      Constant[] constantArray0 = new Constant[18];
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8.getInstance("Xl/8hJoR}");
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = constant0;
      byteSequence0.markSupported();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{CONSTANT_Utf8[1](\"if_icmple\"), CONSTANT_Utf8[1](\"if_icmple\"), CONSTANT_Utf8[1](\"if_icmple\"), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}", string0);
      
      Utility.equals(byteArray0, byteArray0);
      String string1 = Utility.classOrInterface(195);
      assertEquals("class", string1);
      
      String string2 = Utility.codeToString(byteArray0, constantPool0, (-63), 195, true);
      assertEquals("0:    ior\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n", string2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "short");
      Utility.clearBit((byte) (-61), 3284);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-103);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray0[3] = (byte) (-103);
      byteArray1[1] = (byte)124;
      byteArray1[2] = (byte)28;
      byteArray1[3] = (byte)28;
      byteArray1[4] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)124, (int) (byte)124, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature(" (", stringArray0);
      byte[] byteArray0 = Utility.decode("T\"*}?.=c1w$:L3T", false);
      Utility.clearBit((-316), (-316));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T\"*}?.=c1w$:L3T");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.classOrInterface((-316));
      byteSequence0.readLong();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, constantPool0);
      byteSequence0.readByte();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(182, (-316));
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool1.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.isJavaIdentifierPart('m');
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte) (-97);
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("if_icmple");
      Constant constant0 = constantUtf8_0.copy();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("if_icmple");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = constant0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WXa3b{0VDFG`");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byteSequence0.readByte();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-97);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)64;
      byteArray1[5] = (byte) (-97);
      byteArray1[6] = (byte) (-97);
      byteArray1[7] = (byte) (-97);
      // Undeclared exception!
      Utility.codeToString(byteArray1, constantPool1, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('I');
      assertTrue(boolean0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "class");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.format(90, 1349, true, 'I');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-74);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 10 03 9a 64 05 b6", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Utility.compactClassName("#P3");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byte byte0 = (byte) (-88);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)75;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-5);
      byte byte1 = (byte)8;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-38);
      byteArray0[8] = (byte)94;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)75, 73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.methodSignatureReturnType("S:,E,~<'tc");
      assertEquals("short", string0);
      
      int int0 = Utility.clearBit((byte) (-70), (-33));
      assertEquals(2147483578, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.classOrInterface(229);
      assertEquals("class", string1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dmul", string2);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)93;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "S:,E,~<'tc";
      objectArray0[3] = (Object) "class";
      String string3 = Utility.printArray(objectArray0);
      assertEquals("{93, null, S:,E,~<'tc, class}", string3);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('J');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(64, (-1131));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/performance/Dataset/gordon_scripts/projects/1_bcel");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = Utility.decode("Vw+xv,[NxSZ`W7", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("( super ");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "I}#tsSn4,i\"";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("I}#tsSn4,i\"");
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getCachedInstance("Vw+xv,[NxSZ`W7");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      constantArray0[1] = (Constant) constantUtf8_1;
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = constantPool1.copy();
      constantPool1.constantToString((Constant) constantUtf8_0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      byteSequence0.readInt();
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      Utility.codeToString(byteSequence0, constantPool2, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("I}#tsSn4,i\"", "ifle", "%7.xR1]m%'T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: I}#tsSn4,i\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)121;
      String string0 = "H=";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("H=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CodeExcepon(start_pc = ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.replace("=1vJLhTqvpoMV;svu3S", "=1vJLhTqvpoMV;svu3S", "void");
      try { 
        Utility.typeOfSignature("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature(" (", stringArray0);
      Utility.decode("T\"*}?.=c1w$:L3T", false);
      Utility.clearBit(1747, 1747);
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-75);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.typeOfMethodSignature("()L(;");
      try { 
        Utility.methodSignatureArgumentTypes("2 aBs%3o>-R^J9{VRL", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2 aBs%3o>-R^J9{VRL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)62;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(1018L);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence1, constantPool0, true);
      String string0 = Utility.classOrInterface(861);
      assertEquals("interface", string0);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("nop", string1);
      
      Utility.printArray((Object[]) null);
      boolean boolean0 = Utility.isJavaIdentifierPart('J');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Utility.getSignature("char");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "C";
      Utility.methodTypeToSignature("protected", stringArray0);
      byte[] byteArray1 = Utility.decode("j%HRR\"k><", false);
      Utility.clearBit((byte)59, 1406);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "protected");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.classOrInterface(1120);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, constantPool0, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfMethodSignature("C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)15;
      byteArray0[4] = (byte)31;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ukbp0tEpb-");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)31;
      byteArray1[1] = (byte)15;
      byteArray1[4] = (byte) (-36);
      byteArray1[5] = (byte)31;
      byteArray0[4] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".sVky(0aP2,BufR";
      stringArray0[1] = "Ukbp0tEpb-";
      stringArray0[2] = "ka3#ww";
      Utility.methodTypeToSignature(".sVky(0aP2,BufR", stringArray0);
      Utility.compactClassName("org.apache.bcel.classfile.DescendingVisitor", "org.apache.bcel.generic.Type", false);
      try { 
        Utility.methodSignatureToString("&G(F1%rc|j+'4mj", ", reference_index = ", "static", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &G(F1%rc|j+'4mj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S:,E,~<'tc");
      byte byte0 = (byte) (-108);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-108);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.classOrInterface(2463);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfMethodSignature("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer0 = new Integer((byte) (-93));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-115);
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-93);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.classOrInterface(64);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfMethodSignature("fastore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fastore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("(", stringArray0);
      int int0 = 1747;
      int int1 = new Integer(1747);
      byte[] byteArray0 = new byte[4];
      String string0 = "\"";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      byteArray0[0] = (byte) (-111);
      byteArray0[2] = (byte) (-75);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-99);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3999, (int) (byte) (-75), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      byte[] byteArray0 = Utility.decode("S:,E,~<'tc", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("S:,E,~<'tc");
      Object object0 = new Object();
      mockPrintStream0.print((Object) "short");
      mockPrintStream0.append((CharSequence) "S:,E,~<'tc");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(63, (-1378));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.copy();
      boolean boolean0 = false;
      byteSequence0.readByte();
      String string0 = "S";
      try { 
        Utility.typeOfSignature("N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dmul");
      int int0 = Utility.clearBit((byte) (-59), (-131));
      assertEquals((-536870971), int0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)28;
      byteArray0[2] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.convertString("iload_2");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$i$A$X", string2);
      
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("1c 00 17", string3);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("if_icmple");
      Constant constant0 = constantUtf8_0.copy();
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      boolean boolean1 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.printArray((Object[]) constantArray0);
      int int0 = 214;
      int int1 = 83;
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3208, 83, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      short short0 = Utility.searchOpcode("2\"'3Gud'");
      assertEquals((short) (-1), short0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("aload_3", string0);
      
      String string1 = Utility.replace("7`CJB:q-z", "dstore", "dstore");
      assertEquals("7`CJB:q-z", string1);
      
      String string2 = Utility.classOrInterface((byte)45);
      assertEquals("class", string2);
      
      String string3 = Utility.encode(byteArray0, false);
      assertEquals("$z$z$z$z$z", string3);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("float", false);
      assertEquals("float", string0);
      
      byte[] byteArray0 = Utility.decode("float", false);
      assertArrayEquals(new byte[] {(byte)102, (byte)108, (byte)111, (byte)97, (byte)116}, byteArray0);
      
      Integer integer0 = new Integer(1752);
      ConstantFloat constantFloat0 = new ConstantFloat(2780.388F);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string1 = Utility.classOrInterface(170);
      assertEquals("class", string1);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-SI!hm0");
      String string2 = Utility.convertString("bipush");
      assertEquals("bipush", string2);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte) (-128);
      String string3 = Utility.codeToString(byteArray1, (ConstantPool) null, (-404), 1732, false);
      assertEquals("0:    iconst_1\n1:    ior\n", string3);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      byte[] byteArray0 = Utility.decode("S:,E,~<'tc", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("S:,E,~<'tc");
      Object object0 = new Object();
      mockPrintStream0.print((Object) "short");
      mockPrintStream0.append((CharSequence) "S:,E,~<'tc");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(63, (-1378));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.copy();
      byteSequence0.readByte();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      constantPool1.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(3, byteSequence0.getIndex());
      
      Utility.classOrInterface((-2064));
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CodeExcepon(start_pc = ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)77;
      byte byte0 = (byte) (-120);
      byteArray0[7] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong((byte)77);
      Utility.toHexString(byteArray0);
      try { 
        Utility.decode("0{n-024w$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-74);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-74));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.skip((byte)0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.getSignature("0:    nop\n1:    nop\n2:    nop\n");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("getstatic", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `getstatic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte) (-30);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("float", false);
      byte[] byteArray1 = Utility.decode("float", false);
      assertArrayEquals(new byte[] {(byte)102, (byte)108, (byte)111, (byte)97, (byte)116}, byteArray1);
      
      int int0 = Utility.clearBit(1747, 1747);
      assertEquals(1747, int0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "float");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.replace("fload_1", "lstore", "x\"/");
      String string0 = Utility.classOrInterface(255);
      assertEquals("class", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('1');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "float";
      Utility.compactClassName("float", false);
      byte[] byteArray0 = Utility.decode("float", false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "float");
      int int0 = 2397;
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      Utility.printArray((Object[]) constantArray0, false, false);
      Utility.convertString("p&)>G8>?]Tyn4oIs*]h");
      String string1 = "6|[hoE^yp8s";
      Utility.compactClassName("6|[hoE^yp8s");
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)4;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "instanceof");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.classOrInterface((-2865));
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Integer integer0 = new Integer((-3701));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)43;
      byteArray0[8] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)110;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      String string1 = Utility.replace("fdiv", "h", "java.lang.");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.classOrInterface(115);
      assertEquals("class", string2);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("$!N}jO:", false);
      Utility.getSignature("SENSITIVE");
      ConstantFloat constantFloat0 = new ConstantFloat(2780.388F);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.classOrInterface(170);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$!N}jO:");
      Utility.convertString("CPnoxNF");
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1489, 40, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)15;
      byteArray0[4] = (byte)43;
      Integer integer0 = new Integer(159);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-105);
      byteArray1[1] = (byte) (-105);
      byteArray1[2] = (byte)15;
      byteArray1[3] = (byte)15;
      byteArray1[5] = (byte)43;
      byteArray1[2] = (byte) (-105);
      byteArray1[6] = (byte) (-105);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("dcmpl", string0);
      
      String string1 = Utility.replace("java.lang.", "java.lang.", "x\"/");
      assertEquals("x\"/", string1);
      
      String string2 = Utility.classOrInterface((byte)43);
      assertEquals("class", string2);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(64, (-1131));
      byte[] byteArray0 = Utility.decode("Vw+xv,[NxSZ`W7", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("( super ");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("I}#tsSn4,i\"");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("monitorenter");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      constantArray0[1] = (Constant) constantUtf8_1;
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = constantPool1.copy();
      String string0 = constantPool1.constantToString((Constant) constantUtf8_0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      Constant[] constantArray1 = new Constant[4];
      constantArray1[1] = (Constant) constantInterfaceMethodref0;
      constantArray1[2] = (Constant) constantInterfaceMethodref0;
      constantArray1[3] = (Constant) constantUtf8_1;
      constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool2, false);
      Utility.convertString("L$oh<x8Pi4Rh3<");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) constantUtf8_1;
      objectArray0[1] = (Object) byteSequence1;
      objectArray0[2] = (Object) constantArray1[3];
      Utility.printArray(objectArray0);
      String string1 = Utility.compactClassName("{CONSTANT_Utf8[1](\"monitorenter\"), org.apache.bcel.util.ByteSequence@7f4d4830, CONSTANT_Utf8[1](\"monitorenter\")}", true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[10] = (byte)0;
      byteArray0[1] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readBoolean();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-71);
      byteArray1[1] = (byte) (-89);
      Utility.encode(byteArray1, false);
      Utility.encode(byteArray1, false);
      try { 
        Utility.decode("$b9$a7", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature(" (", stringArray0);
      byte[] byteArray0 = Utility.decode("T\"*}?.=c1w$:L3T", false);
      Utility.clearBit((-316), (-316));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T\"*}?.=c1w$:L3T");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.classOrInterface((-316));
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfMethodSignature("]B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte) (-30);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("float", false);
      byte[] byteArray1 = Utility.decode("float", false);
      int int0 = Utility.clearBit(1747, 1747);
      assertEquals(1747, int0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "float");
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (-315), (-2629), false);
      assertEquals("0:    fsub\n1:    idiv\n2:    ddiv\n3:    ladd\n4:    ineg\n", string0);
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1747, 2397);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean0 = Utility.isSet((-2629), 91);
      assertTrue(boolean0);
      
      String string1 = Utility.format(87, (-1000), false, 'H');
      assertEquals("87", string1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte) (-26);
      byteArray0[8] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("invokevirtual", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokevirtual'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)15;
      byte byte0 = (byte)31;
      byteArray0[4] = (byte)31;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ukbp0tEpb-");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)31;
      byteArray1[1] = (byte)15;
      byteArray1[3] = (byte)15;
      byteArray1[4] = (byte) (-36);
      byteArray1[5] = (byte)31;
      byteArray0[4] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      byteSequence0.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.replace("Ukbp0tEpb-", "({1Z4X|fF<M}i5;", "'Hf:VLZ#sF]qFyw>V ;");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ukbp0tEpb-", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ukbp0tEpb-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "IRri*3ZC\\N(";
      Utility.isSet((-671), (-671));
      byte[] byteArray0 = Utility.decode("IRri*3ZCN(", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("? super ");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(", length = ");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("ret");
      byteSequence0.readUnsignedShort();
      byteSequence0.read();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      constantPool2.setConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      Utility.codeToString(byteSequence0, constantPool2, true);
      Utility.compactClassName("IRri*3ZCN(", "?D//.y&7YnmY", true);
      Utility.printArray((Object[]) constantArray0, true, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("? super ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `? super '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(64, (-1131));
      byte[] byteArray0 = Utility.decode("Vw+xv,[NxSZ`W7", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("( super ");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("I}#tsSn4,i\"");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("monitorenter");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      constantArray0[1] = (Constant) constantUtf8_1;
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = constantPool1.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      Utility.codeToString(byteSequence0, constantPool2, true);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = Utility.signatureToString("T\"*;}.=c1w$:L3T", false);
      assertEquals("\"*", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)48;
      Utility.encode(byteArray0, false);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$ab$x$3bO$a7$b90", string1);
      
      byte[] byteArray1 = Utility.decode("s[h$07OC&", false);
      assertArrayEquals(new byte[] {(byte)115, (byte)91, (byte)104, (byte)7, (byte)79, (byte)67, (byte)38}, byteArray1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('I');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.methodSignatureReturnType("S:,E,~<'tc");
      assertEquals("short", string0);
      
      boolean boolean0 = Utility.isSet((-2333), (-1378));
      assertTrue(boolean0);
      
      byte[] byteArray0 = Utility.decode("S:,E,~<'tc", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("S:,E,~<'tc");
      mockPrintStream0.print((-2333));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/performance/Dataset/gordon_scripts/projects/1_bcel");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aload_2", string1);
      
      String string2 = Utility.replace("boolean", "S:,E,~<'tc", "S:,E,~<'tc");
      assertEquals("boolean", string2);
      
      String string3 = Utility.classOrInterface((-5044));
      assertEquals("class", string3);
      
      String string4 = Utility.getSignature("eH6(=~om(3");
      assertEquals("LeH6(=~om(3;", string4);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      Utility.compactClassName("getfield", false);
      byte[] byteArray0 = Utility.decode("getfield", false);
      int int0 = 1752;
      int int1 = (-2924);
      Integer integer0 = new Integer((-2924));
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T\"*}?.=c1w$:L3T");
      int int2 = 2397;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1752, 2397);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 102
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      byteArray0[2] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool0, true);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("iaload", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iaload'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "$Ax{AW`Vq\"xE/";
      Utility.compactClassName("$Ax{AW`Vq\"xE/", false);
      String string1 = " (";
      byte[] byteArray0 = Utility.decode("$Ax{AW`Vq\"xE/", false);
      Utility.clearBit((-131), 10);
      ConstantPool constantPool0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, 10, 10, false);
      String string2 = "zZn:a>\"zS.";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("/$[k.)Yn5(xX#X", "zZn:a>\"zS.");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // zZn:a>\"zS.
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[2] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 199, 272);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.compactClassName("putStatic", false);
      String string0 = " (";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(168, 1466);
      ConstantUtf8.getInstance(" (");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = constantPool1.copy();
      Utility.codeToString(byteSequence0, constantPool2, false);
      Utility.classOrInterface((byte) (-122));
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("float", false);
      String string0 = " (";
      Utility.decode(" (", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("float");
      boolean boolean0 = false;
      Utility.format(70, 70, false, '\'');
      try { 
        Utility.typeOfSignature("4-g-08GT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4-g-08GT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte byte0 = (byte)2;
      byte byte1 = (byte)86;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)73;
      byte byte2 = (byte)37;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)2;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)37, (int) (byte)86, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      Integer integer0 = new Integer((byte) (-93));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)93;
      byteArray0[6] = (byte)93;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-115);
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-122);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-131), (int) (byte)93, true);
      assertEquals("0:    if_icmpgt\t\t#23808\n3:    irem\n4:    f2d\n5:    nop\n6:    i2f\n7:    i2f\n", string0);
      
      Utility.equals(byteArray0, byteArray0);
      String string1 = Utility.compactClassName(".sVky(0aP2,BufR", "0:    if_icmpgt\t\t#23808\n3:    irem\n4:    f2d\n5:    nop\n6:    i2f\n7:    i2f\n", true);
      assertEquals(".sVky(0aP2,BufR", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".sVky(0aP2,BufR";
      stringArray0[1] = "S:,E,~<'tc";
      stringArray0[2] = "S:,E,~<'tc";
      stringArray0[3] = ".sVky(0aP2,BufR";
      stringArray0[4] = ".sVky(0aP2,BufR";
      stringArray0[5] = "short";
      String string2 = Utility.methodTypeToSignature("0:    if_icmpgt\t\t#23808\n3:    irem\n4:    f2d\n5:    nop\n6:    i2f\n7:    i2f\n", stringArray0);
      assertEquals("(L/sVky(0aP2,BufR;LS:,E,~<'tc;LS:,E,~<'tc;L/sVky(0aP2,BufR;L/sVky(0aP2,BufR;S)L0:;", string2);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S:,E,~<'tc");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.bcel.util.ClassLoaderRepository");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "S:,E,~<'tc");
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = 'G';
      charArray0[2] = 'J';
      charArray0[4] = 'b';
      charArray0[5] = '6';
      charArray0[6] = '&';
      printStream0.println(charArray0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "org.apache.bcel.util.ClassLoaderRepository";
      Utility.printArray(printStream0, objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)122, (byte)122);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("short");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        constantPool0.constantToString(1640, (byte) (-112));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1640. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      Utility.compactClassName("S:,E,~<'tc", true);
      byte[] byteArray0 = Utility.decode("short", false);
      Utility.clearBit(94, (-2689));
      ConstantPool constantPool0 = null;
      String string0 = "}s,4";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}s,4");
      int int0 = 2397;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(68, (-2689));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 114
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Utility.clearBit(1743, 1743);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1743, 2397);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte) (-32);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-26), 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmpge\t\t#15158
         // 3:    <illegal opcode>
         // 4:    iconst_1
         // 5:    <illegal opcode>
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("b&0Z:/");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Utility.getSignature("P*~4jP");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-102);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "P*~4jP");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.replace("xm;b2\"j}~uV", "dload_1", "TM/lzzWrBVnY$wj$LU");
      Utility.classOrInterface((byte) (-102));
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      Integer integer0 = new Integer((byte) (-93));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)93;
      byteArray0[6] = (byte)93;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S:,E,~<'tc");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = "dload_1";
      String string1 = "'/#FuFH(780Pj6UfQ\"E";
      Utility.replace("short", "S:,E,~<'tc", "'/#FuFH(780Pj6UfQ\"E");
      Utility.classOrInterface(68);
      try { 
        Utility.typeOfMethodSignature("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m3f)");
      Utility.getSignature("double");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)92;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 12, (int) (byte)9, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.methodSignatureReturnType("S:,E,~<'tc");
      assertEquals("short", string0);
      
      Integer integer0 = new Integer((byte) (-93));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong((-131));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("if_icmpgt\t\t#-23645", string1);
      
      String string2 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{}", string2);
      
      String string3 = Utility.getSignature("S:,E,~<'tc");
      assertEquals("LS:,E,~<'tc;", string3);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Utility.isJavaIdentifierPart('m');
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      byte byte0 = (byte)0;
      Utility.clearBit((byte)0, (byte)0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = "return";
      // Undeclared exception!
      try { 
        Utility.signatureToString("return");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `return'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Utility.compactClassName("putStatic", false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "putStatic";
      stringArray0[1] = "putStatic";
      stringArray0[2] = " (";
      stringArray0[3] = "putStatic";
      String string0 = Utility.methodTypeToSignature(" (", stringArray0);
      assertEquals("(LputStatic;LputStatic;L(;LputStatic;)L(;", string0);
      
      byte[] byteArray0 = Utility.decode("putStatic", false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ifnonnull");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string2 = Utility.replace("putStatic", "putStatic", "impdep1");
      assertEquals("impdep1", string2);
      
      String string3 = Utility.classOrInterface((byte) (-95));
      assertEquals("interface", string3);
      
      String string4 = Utility.compactClassName("ineg");
      assertTrue(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-80);
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-83);
      byte byte1 = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.replace("ireturn", "\":F4K$-UuO[PKA", "areturn");
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Utility.isSet(5, 5);
      byte[] byteArray0 = Utility.decode("JB01j`z\"^GIR1HI((", false);
      Utility.printArray((Object[]) null, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("U*$3ZfQZ{9Rr@7]");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("x?[wrMSyTy`V");
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("? super ");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantUtf8_2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool1, false);
      try { 
        Utility.typeOfMethodSignature("x?[wrMSyTy`V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: x?[wrMSyTy`V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.isSet((-671), (-671));
      byte[] byteArray0 = Utility.decode("IRri*3ZCN(", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("? super ");
      mockPrintStream0.append((CharSequence) "IRri*3ZCN(");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(", length = ");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("ret");
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(", length = ");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool2.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool2, true);
      try { 
        Utility.typeOfMethodSignature("ret");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ret
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S:,E,~<'tc");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)122, 764);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Utility.replace("S:,E,f~<'tc", "S:,E,f~<'tc", "S:,E,f~<'tc");
      byte[] byteArray0 = Utility.decode("S:,E,f~<'tc", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("short");
      mockPrintStream0.append((CharSequence) "S:,E,f~<'tc");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cr+2a~.");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.replace("S:,E,f~<'tc", "\"", "void");
      Utility.classOrInterface(1845);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[2] = (byte)15;
      byte byte0 = (byte)43;
      byteArray0[4] = (byte)43;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ukbp0tEpb-");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)43;
      byteArray1[1] = (byte)15;
      byteArray1[3] = (byte)15;
      byteArray1[4] = (byte) (-36);
      byteArray1[5] = (byte)43;
      byteArray1[6] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.replace("Ukbp0tEpb-", "({1ZV4&X|fFW<M}i5;", "'Hf:VLZ#sF]qFyw>V ;");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ukbp0tEpb-", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ukbp0tEpb-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)29;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "int");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.replace("int", "multianewarray", "dload_1");
      Utility.classOrInterface((byte)54);
      try { 
        Utility.typeOfMethodSignature("=1vJLhTqvpoMV;svu3S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =1vJLhTqvpoMV;svu3S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = Utility.replace("S:,E,~<'tc", "S:,E,~<'tc", "S:,E,~<'tc");
      assertEquals("S:,E,~<'tc", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('q');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong((byte)4);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string1 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{CONSTANT_Long[5](bytes = 4), CONSTANT_Long[5](bytes = 4), CONSTANT_Long[5](bytes = 4), CONSTANT_Long[5](bytes = 4)}", string1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CodeException(start_pc = ");
      Utility.isJavaIdentifierPart('=');
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)68;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "GL");
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte)77);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.printArray((Object[]) constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 120, (-1591));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      Integer integer0 = new Integer((byte) (-93));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)93;
      byteArray0[6] = (byte)93;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-115);
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-122);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-131), (int) (byte)93, false);
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName(".sVky(0aP2,BufR", "lload", true);
      try { 
        Utility.typeOfSignature("0:    lastore\n1:    dup2_x1\n2:    nop\n3:    irem\n4:    f2d\n5:    nop\n6:    i2f\n7:    i2f\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    lastore
         // 1:    dup2_x1
         // 2:    nop
         // 3:    irem
         // 4:    f2d
         // 5:    nop
         // 6:    i2f
         // 7:    i2f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong((byte)7);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Constant[] constantArray1 = new Constant[2];
      constantArray1[0] = (Constant) constantLong0;
      constantArray1[1] = (Constant) constantLong0;
      constantPool0.setConstantPool(constantArray1);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("ifeq\t\t#-26368", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray1);
      assertEquals("{CONSTANT_Long[5](bytes = 7), CONSTANT_Long[5](bytes = 7)}", string1);
      
      String string2 = Utility.getSignature("putfield");
      assertEquals("Lputfield;", string2);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.methodSignatureReturnType("S:,E,~<'tc");
      assertEquals("short", string0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S:,E,~<'tc");
      Integer integer0 = new Integer((byte) (-93));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-115);
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-93);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("f2d", string1);
      
      String string2 = Utility.replace("\r", "f2d", "EIeKd%_N%[&j[?]0O");
      assertEquals("\r", string2);
      
      String string3 = Utility.classOrInterface((byte) (-115));
      assertEquals("interface", string3);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.compactClassName("F.,f`bw");
      Utility.signatureToString("F.,f`bw", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("putstatic");
      Object object0 = new Object();
      String string0 = "\"";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F.,f`bw");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = "wbV_O4`xbw-+R[$";
      boolean boolean0 = true;
      Utility.fillup("wbV_O4`xbw-+R[$", 2003, false, 'm');
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte byte0 = (byte)73;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      stringArray0[4] = "mFdG?0\"X{(%#z%";
      stringArray0[5] = "void";
      stringArray0[6] = "void";
      stringArray0[7] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Utility.isSet(5, 5);
      byte[] byteArray0 = Utility.decode("Rri*3ZC$N[", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, constantPool0, true);
      boolean boolean0 = Utility.isSet(5, (-253));
      assertFalse(boolean0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertArrayEquals(new byte[] {(byte)82, (byte)114, (byte)105, (byte)42, (byte)51, (byte)90, (byte)67, (byte)13, (byte)91}, byteArray0);
      assertEquals("lmul", string0);
      
      int int0 = Utility.clearBit(5, (byte)48);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S:,E,~<'tc");
      Utility.clearBit((-131), (-33));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)114;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)114;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 171, 171, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = 74;
      Utility.format(74, 62, false, 'r');
      // Undeclared exception!
      try { 
        Utility.signatureToString("N2[\"OG0", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N2[\"OG0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[2] = (byte)15;
      byteArray0[4] = (byte)43;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ukbp0tEpb-");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)15;
      byteArray1[1] = (byte)15;
      byteArray1[3] = (byte)15;
      byteArray1[4] = (byte) (-36);
      byteArray1[5] = (byte)43;
      byteArray1[6] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.replace("Ukbp0tEpb-", "({1ZV4&X|fFW<M}i5;", "'Hf:VLZ#sF]qFyw>V ;");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 255, (int) (byte)15, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      String string0 = " (";
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature(" (", stringArray0);
      Utility.decode("T\"*}?.=c1w$:L3T", false);
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-69);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.replace(" (", "LineNumberTable", "LineNumberTable");
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature(" (", stringArray0);
      Utility.decode("T\"*}?.=c1w$:L3T", false);
      Utility.clearBit(1747, 1747);
      int int0 = 3999;
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)20;
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.methodSignatureToString("()L(;", "if_icmplt", "\"", false);
      // Undeclared exception!
      try { 
        constantPool0.getConstantString(152, (byte) (-72));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.compactClassName("F.,f`bw");
      Utility.signatureToString("F.,f`bw", false);
      String string0 = "putstatic";
      MockPrintStream mockPrintStream0 = new MockPrintStream("putstatic");
      Object object0 = new Object();
      String string1 = "\"";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F.,f`bw");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      assertEquals("T\"*}?.=c1w$:L3T", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature(" (", stringArray0);
      assertEquals("()L(;", string1);
      
      byte[] byteArray0 = Utility.decode("T\"*}?.=c1w$:L3T", false);
      assertEquals(14, byteArray0.length);
      
      byte[] byteArray1 = new byte[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      byteArray1[0] = (byte) (-95);
      byteArray1[1] = (byte) (-75);
      byteArray1[2] = (byte)20;
      byteArray1[3] = (byte) (-99);
      byteArray1[4] = (byte) (-69);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmplt\t\t#-19180", string2);
      
      String string3 = Utility.replace("=1vJLhTqvpoMV;svu3S", "instanceof", " (");
      assertEquals("=1vJLhTqvpoMV;svu3S", string3);
      
      String string4 = Utility.classOrInterface(65);
      assertEquals("class", string4);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.searchOpcode("");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)53;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.replace("saload", "saload", "");
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 53
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature(" (", stringArray0);
      Utility.decode("T\"*}?.=c1w$:L3T", false);
      Utility.clearBit(1747, 1747);
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)20;
      byteArray0[4] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3999, (int) (byte) (-75), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = 79;
      Utility.setBit(128, 79);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = null;
      int int1 = 160;
      Utility.clearBit(79, 160);
      String string0 = "void";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "void");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 59, 79, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      boolean boolean0 = Utility.isSet((-2333), (-1378));
      assertTrue(boolean0);
      
      byte[] byteArray0 = Utility.decode("S:,E,~<'tc", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("S:,E,~<'tc");
      Object object0 = new Object();
      mockPrintStream0.print((Object) "short");
      mockPrintStream0.append((CharSequence) "S:,E,~<'tc");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(63, (-1378));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string0 = Utility.compactClassName("short", false);
      assertEquals("short", string0);
      
      String string1 = Utility.accessToString(158, true);
      assertEquals("private protected static final transient", string1);
      
      String string2 = Utility.codeToString(byteArray0, constantPool1, (-4), 158);
      assertEquals("0:    aastore\n1:    astore\t\t%44\n3:    fstore_2\n4:    aload_2\n5:    iand\n6:    istore_1\n7:    dload_1\n8:    ineg\n9:    dadd\n", string2);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[2] = (byte)15;
      byte byte0 = (byte)43;
      byteArray0[4] = (byte)43;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ukbp0tEpb-");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)15;
      byteArray1[1] = (byte)15;
      byteArray1[3] = (byte)15;
      byteArray1[4] = (byte) (-36);
      byteArray1[5] = (byte)43;
      byteArray1[6] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.replace("Ukbp0tEpb-", "({1ZV4&X|fFW<M}i5;", "'Hf:VLZ#sF]qFyw>V ;");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ukbp0tEpb-", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ukbp0tEpb-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.isSet(5, 5);
      byte[] byteArray0 = Utility.decode("Rri*3ZC$N[", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte)82, (byte)114, (byte)105, (byte)42, (byte)51, (byte)90, (byte)67, (byte)13, (byte)91}, byteArray0);
      assertEquals("frem", string0);
      
      boolean boolean0 = Utility.isSet(5, (-253));
      assertFalse(boolean0);
      
      String string1 = Utility.format((byte)48, 14, true, 'l');
      assertEquals("48llllllllllll", string1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.isSet(5, 5);
      byte[] byteArray0 = Utility.decode("Rri*3ZC$N[", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("short");
      mockPrintStream0.append((CharSequence) "Rri*3ZC$N[");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      byteSequence0.readByte();
      ConstantUtf8.getInstance("Rri*3ZC$N[");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "ret";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("ret");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(", length = ");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.methodSignatureReturnType("%]zBfC)aD7", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aD7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("float", false);
      byte[] byteArray0 = Utility.decode("float", false);
      int int0 = Utility.clearBit(1747, 1747);
      assertEquals(1747, int0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "float");
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-315), (-2629), false);
      assertEquals("0:    fsub\n1:    idiv\n2:    ddiv\n3:    ladd\n4:    ineg\n", string0);
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1747, 2397);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.isSet((-2629), 91);
      String string1 = Utility.format(87, (-1000), false, 'H');
      assertEquals("87", string1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F.,f`bw");
      assertEquals((byte)6, byte0);
      
      String string0 = Utility.compactClassName("F.,f`bw");
      assertEquals("F.,f`bw", string0);
      
      String string1 = Utility.signatureToString("F.,f`bw", false);
      assertEquals("float", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)6;
      byte[] byteArray1 = Utility.decode("F.,f`bw", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.typeOfSignature(":K'^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :K'^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)32;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2147483645, (int) (byte) (-64));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Utility.replace("S:,E,~<'tc", "S:,E,~<'tc", "S:,E,~<'tc");
      int int0 = 82;
      Utility.clearBit((byte) (-53), 82);
      Utility.clearBit(62, (byte) (-53));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)73;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)73, (-923), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "T\"*}?.=c1w$:L3T";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("T\"*}?.=c1w$:L3T", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T\"*}?.=c1w$:L3T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte byte0 = (byte)54;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)44;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6, (int) (byte)86, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.isSet(5, 5);
      byte[] byteArray0 = Utility.decode("Rri*3ZC$N[", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("short");
      mockPrintStream0.append((CharSequence) "Rri*3ZC$N[");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8.getCachedInstance(", length = ");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("ret");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(", length = ");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.typeOfMethodSignature("ret");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ret
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "M])|)&3( /[<f";
      byte byte0 = (byte)97;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte) (-123);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        byteSequence0.readDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S:,E,~<'tc");
      int int0 = (-131);
      int int1 = new Integer((byte) (-93));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-115);
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-131), 3350, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    drem
         // 1:    dup2_x1
         // 2:    dup2_x1
         // 3:    irem
         // 4:    f2d
         // 5:    nop
         // 6:    i2f
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = (-2890);
      Utility.clearBit((-131), (-2890));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1, 2896, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "M])|)&3( /[<f";
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool2, false);
      try { 
        byteSequence0.readDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("float", false);
      byte[] byteArray0 = Utility.decode(" (", false);
      Utility.clearBit(0, 70);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "float");
      Utility.codeToString(byteArray0, (ConstantPool) null, (-315), (-2629), false);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(127, 2397);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read(byteArray0);
      try { 
        byteSequence0.readBoolean();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "hc>z(?ODJJEb%j)";
      try { 
        Utility.methodSignatureReturnType("Nf+", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nf+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = Utility.replace("S:,E,~<'tc", "S:,E,~<'tc", "S:,E,~<'tc");
      assertEquals("S:,E,~<'tc", string0);
      
      int int0 = Utility.clearBit((byte) (-53), 82);
      assertEquals((-262197), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(0, (byte) (-122));
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      constantArray0[5] = (Constant) constantInterfaceMethodref0;
      constantArray0[6] = (Constant) constantInterfaceMethodref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("?5U|?&#F");
      constantArray0[7] = (Constant) constantUtf8_0;
      constantArray0[8] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{CONSTANT_InterfaceMethodref[11](class_index = 0, name_and_type_index = -122), CONSTANT_InterfaceMethodref[11](class_index = 0, name_and_type_index = -122), CONSTANT_InterfaceMethodref[11](class_index = 0, name_and_type_index = -122), CONSTANT_InterfaceMethodref[11](class_index = 0, name_and_type_index = -122), CONSTANT_InterfaceMethodref[11](class_index = 0, name_and_type_index = -122), CONSTANT_InterfaceMethodref[11](class_index = 0, name_and_type_index = -122), CONSTANT_InterfaceMethodref[11](class_index = 0, name_and_type_index = -122), CONSTANT_Utf8[1](\"?5U|?&#F\"), CONSTANT_InterfaceMethodref[11](class_index = 0, name_and_type_index = -122)}", string1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)38;
      byteArray0[7] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S:,E,~<'tc");
      byte byte0 = (byte) (-93);
      Utility.clearBit((-131), (-33));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte1 = (byte)107;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byte byte2 = (byte)112;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-103);
      byte byte3 = (byte) (-122);
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-131), 3350, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dmul
         // 1:    dup2_x1
         // 2:    dup2_x1
         // 3:    irem
         // 4:    ifeq\t\t#138
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility$1", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.encode(byteArray0, false);
      Utility.format((-1870), 0, false, 'g');
      MockFile mockFile0 = new MockFile("A/ly)I@~$N|WS'", "ifnull");
      File file0 = MockFile.createTempFile("org$$apache$$bcel$$classfile$$Utility", "\t\t", (File) mockFile0);
      MockFile.createTempFile("|z=", "\t(wide)");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "U$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"U$\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Utility.getSignature("!sU[}Q%=n!Eg?d]N+");
      Utility.clearBit((-992), (-992));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)122, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Utility.isSet(5, 5);
      byte[] byteArray0 = Utility.decode("Rri*3ZC$N[", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("short");
      mockPrintStream0.append((CharSequence) "Rri*3ZC$N[");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(5, 63);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3271, 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "5>";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dmul");
      Utility.clearBit((byte) (-59), (-131));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-853), (-2834), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iload_2
         // 1:    dmul
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "M])|)&3( /[<f";
      byte byte0 = (byte)97;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        byteSequence0.readDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.signatureToString("T;1xkik");
      Utility.compactClassName("float", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1623166775), (-1623166775));
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CodeException(start_pc = ");
      boolean boolean0 = Utility.isJavaIdentifierPart('=');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte)77);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S:,E,~<'tc");
      Utility.clearBit((-131), (byte) (-59));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)107;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)107;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-131), 3350, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.classOrInterface(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)58;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 53, 63, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      boolean boolean0 = Utility.isSet(5, 5);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("Rri*3ZC$N[", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-117), 104);
      assertEquals("0:    dastore\n1:    frem\n2:    lmul\n3:    aload_0\n4:    baload\n5:    dup_x1\n6:    fstore_0\n7:    fconst_2\n8:    dup_x2\n", string0);
      assertArrayEquals(new byte[] {(byte)82, (byte)114, (byte)105, (byte)42, (byte)51, (byte)90, (byte)67, (byte)13, (byte)91}, byteArray0);
      
      byte[] byteArray1 = Utility.decode("0:    dastore\n1:    frem\n2:    lmul\n3:    aload_0\n4:    baload\n5:    dup_x1\n6:    fstore_0\n7:    dup2\n8:    fconst_2\n9:    dup_x2\n", false);
      String string1 = Utility.codeToString(byteArray1, constantPool0, 85, 67, true);
      assertEquals("93:   lload_2\n94:   lload_2\n95:   lload_2\n96:   lload_2\n97:   isub\n98:   lneg\n99:   irem\n100:  aaload\n101:  lconst_1\n102:  fstore\t\t%58\n104:  lload_2\n105:  lload_2\n106:  lload_2\n107:  lload_2\n108:  fsub\n109:  dadd\n110:  ddiv\n111:  fdiv\n112:  drem\n113:  ineg\n114:  swap\n115:  aaload\n116:  lconst_1\n117:  dstore\t\t%58\n119:  lload_2\n120:  lload_2\n121:  lload_2\n122:  lload_2\n123:  isub\n124:  lneg\n125:  irem\n126:  swap\n127:  ishl\n128:  aaload\n129:  lconst_1\n", string1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.getSignature("!sU[}Q%=n!Eg?d]N+");
      Utility.format((-992), 11, true, '8');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "!sU[}Q%=n!Eg?d]N+";
      stringArray0[1] = "!sU[}Q%=n!Eg?d]N+";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[L!sU;", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [L!sU;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S:,E,~<'tc");
      Utility.clearBit((-131), (-33));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)107;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-131), 3350, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = Utility.classOrInterface(2);
      assertEquals("class", string0);
      
      String string1 = Utility.format((-5281), (-5281), false, ':');
      assertEquals("-5281", string1);
      
      byte[] byteArray0 = Utility.decode("h?T@TJv]&k#Q'", false);
      assertEquals(14, byteArray0.length);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)60;
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-93);
      byteArray2[1] = (byte)10;
      byteArray2[2] = (byte)43;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-2);
      boolean boolean0 = Utility.equals(byteArray2, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "f0%c";
      stringArray0[1] = "f0%c";
      stringArray0[2] = "monitorexit";
      stringArray0[3] = "f0%c";
      stringArray0[4] = "f0%c";
      stringArray0[5] = "f0%c";
      stringArray0[6] = "OG6aH/l}o)4x*p[]";
      String string0 = Utility.methodTypeToSignature("f0%c", stringArray0);
      assertEquals("(Lf0%c;Lf0%c;Lmonitorexit;Lf0%c;Lf0%c;Lf0%c;[LOG6aH/l}o)4x*p;)Lf0%c;", string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f0%c");
      String string1 = Utility.format(43, 52, false, 'l');
      assertEquals("llllllllllllllllllllllllllllllllllllllllllllllllll43", string1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature(" (", stringArray0);
      Utility.decode("T\"*}?.=c1w$:L3T", false);
      Utility.clearBit(1747, 1747);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3999, (int) (byte) (-72), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("float", false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " (";
      stringArray0[1] = " (";
      stringArray0[2] = " (";
      Utility.methodTypeToSignature(" (", stringArray0);
      byte[] byteArray0 = Utility.decode(" (", false);
      Utility.clearBit(1747, 70);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "float");
      Utility.codeToString(byteArray0, (ConstantPool) null, (-315), (-2629), false);
      Utility.toHexString(byteArray0);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes(" (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)70;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1579, (int) (byte)73, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)91;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.typeOfSignature("DKM8$Iq4x2rO37");
      Utility.signatureToString("DKM8$Iq4x2rO37", true);
      Utility.methodSignatureReturnType("DKM8$Iq4x2rO37", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 82
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S:,E,~<'tc");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.bcel.util.ClassLoaderRepository");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "S:,E,~<'tc");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "org.apache.bcel.util.ClassLoaderRepository";
      Utility.printArray(printStream0, objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-33), (byte) (-66));
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("short");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        constantPool0.constantToString(1640, (byte) (-112));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1640. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.isSet(5, 5);
      byte[] byteArray0 = Utility.decode("Rri*3ZC$N[", false);
      Utility.clearBit((-131), (-2025));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 10, (-8388739), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.fillup("a", 1908, false, 'Y');
      Utility.getSignature("a");
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = "La;";
      stringArray0[2] = "a";
      stringArray0[3] = "a";
      stringArray0[4] = string0;
      stringArray0[5] = "int";
      stringArray0[6] = "(";
      stringArray0[7] = "(";
      Utility.methodTypeToSignature("(", stringArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, (int) (byte)122, 1908);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility$1", false);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean1 = true;
      Utility.codeToString(byteArray0, constantPool0, (-1), (-1), true);
      String string0 = "9";
      try { 
        Utility.methodSignatureArgumentTypes("if_icmpge");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpge
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.fillup("a", 1908, false, 'Y');
      Utility.getSignature("a");
      String string1 = "(";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-83);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 86, (-1074), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = "DdT<b$9%";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.decode("DdT<b$9%", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9%\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "cWk9ps!vdkN0Y(z";
      Utility.searchOpcode("cWk9ps!vdkN0Y(z");
      Utility.compactClassName("y", "y", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)97;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("y", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-50);
      byte byte0 = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte)70;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1579, (int) (byte)70, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S:,E,~<'tc");
      Utility.clearBit((-131), (-33));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-131), 3350, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dmul
         // 1:    dup2_x1
         // 2:    dup2_x1
         // 3:    irem
         // 4:    ifeq\t\t#10378
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)0;
      byteArray0[1] = (byte)48;
      byteArray0[5] = (byte)29;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "a";
      Utility.fillup("a", 1908, false, 'Y');
      Utility.getSignature("a");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-123);
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)58;
      byteArray1[1] = (byte) (-123);
      byteArray1[2] = (byte)58;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-123), 60, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    astore\t\t%133
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("S:,E,~<'tc", "S:,E,~<'tc", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S:,E,~<'tc");
      Utility.clearBit((-131), (-33));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)45;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte) (-128);
      byteArray0[8] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      constantArray0[5] = (Constant) constantInterfaceMethodref0;
      constantArray0[6] = (Constant) constantInterfaceMethodref0;
      constantArray0[7] = (Constant) constantInterfaceMethodref0;
      constantArray0[8] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("QXlo{", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QXlo{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)15;
      Utility.toHexString(byteArray0);
      Utility.compactClassName("00 00 00 36 0f 00 00", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yhRyflr9MjQO{B}UV");
      Utility.clearBit(83, 74);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)101;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)82, false);
      try { 
        Utility.methodSignatureReturnType("yhRyflr9MjQO{B}UV", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `yhRyflr9MjQO{B}UV'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("[r");
      Utility.classOrInterface(66);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S:,E,~<'tc");
      Utility.clearBit((-122), (-33));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-122), 3350, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iadd
         // 1:    dup2_x1
         // 2:    dup2_x1
         // 3:    irem
         // 4:    irem
         // 5:    dload_2
         // 6:    i2f
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature(" (", stringArray0);
      byte[] byteArray0 = Utility.decode("T\"*}?.=c1w$:L3T", false);
      Utility.clearBit(1747, 1747);
      byte[] byteArray1 = new byte[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      byteArray1[0] = (byte) (-95);
      byteArray1[1] = (byte) (-75);
      byteArray1[2] = (byte)20;
      Utility.toHexString(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)20, 3999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S:,E,~<'tc");
      Utility.clearBit((-131), (-33));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-131), 3350, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iadd
         // 1:    dup2_x1
         // 2:    dup2_x1
         // 3:    irem
         // 4:    ifeq\t\t#10378
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature(" (", stringArray0);
      Utility.decode("T\"*}?.=c1w$:L3T", false);
      Utility.clearBit(1747, 1747);
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3999, (int) (byte) (-75), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-31);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-31), 83);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S:,E,~<'tc");
      Utility.clearBit((-131), (-33));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte) (-7);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-131), (int) (byte) (-7), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Utility.searchOpcode("2\"'3Gud'");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-2782), 193, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 46893. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.clearBit(1517, 16);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)122;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)122, 1517);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature(" (", stringArray0);
      Utility.decode("T\"*}?.=c1w$:L3T", false);
      Utility.clearBit(1747, 1747);
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3999, (int) (byte) (-75), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Utility.searchOpcode("oUqH&=|,{tS0 w%\"");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)96;
      byteArray0[8] = (byte)93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2272, (int) (byte)45, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47158. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Utility.clearBit(Integer.MIN_VALUE, 0);
      String string0 = "5!yCGo";
      String string1 = "A#IG~IkWk1";
      try { 
        Utility.typeOfSignature("A#IG~IkWk1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A#IG~IkWk1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.getSignature("b&0Z:/");
      assertEquals("Lb&0Z:/;", string0);
      
      String string1 = Utility.compactClassName("Lb&0Z:/;", "Lb&0Z:/;", true);
      assertEquals("Lb&0Z:.;", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)61;
      byteArray0[0] = (byte)48;
      byteArray0[3] = (byte)88;
      int int0 = Utility.clearBit((-843), 164);
      assertEquals((-859), int0);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1842), 3999, true);
      assertEquals("0:    faload\n1:    istore_2\n2:    nop\n3:    pop2\n4:    nop\n5:    nop\n6:    nop\n", string2);
      
      Utility.toHexString(byteArray0);
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("30 3d 00 58 00 00 00", string3);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.clearBit(1517, 16);
      String string0 = Utility.format(1517, 1521, true, '(');
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1517(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Utility.isSet(5, 5);
      byte[] byteArray0 = Utility.decode("Rri*3ZC$N[", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("short");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "Rri*3ZC$N[");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Rri*3ZC$N[";
      Utility.printArray(printStream0, objectArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(5, 63);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 91, 201, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Utility.getSignature("char");
      Integer integer0 = new Integer(165);
      Utility.typeOfSignature("Invalid type: ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        constantPool0.getConstant((int) (byte)35, (byte)35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-30);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("monitorexit", false);
      Utility.fillup("monitorexit", (byte) (-30), false, '^');
      Utility.classOrInterface((-250));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "cb e2", "iload_0", false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = Utility.replace("(MnknowZ 9ttribut~e ", "(MnknowZ 9ttribut~e ", "(MnknowZ 9ttribut~e ");
      assertEquals("(MnknowZ 9ttribut~e ", string0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "newarray");
      byte[] byteArray0 = new byte[4];
      int int0 = Utility.clearBit((-33), (byte) (-70));
      assertEquals((-67108897), int0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-67108897), (int) (byte) (-7), false);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Utility.compactClassName("T\"*}?.=c1w$:L3T", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2152, (-5685), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "goto";
      stringArray0[1] = "goto";
      stringArray0[2] = "goto";
      Utility.methodTypeToSignature("goto", stringArray0);
      Utility.clearBit(236, 236);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-7), (-2151), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      short short0 = Utility.searchOpcode("cWk9ps!vdkN0Y(z");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.compactClassName("y", "y", true);
      assertEquals("", string0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("wide");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) printStream0;
      objectArray0[1] = (Object) "short";
      objectArray0[2] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "wide";
      objectArray0[5] = (Object) printStream0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(63, (byte)0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string1 = Utility.methodTypeToSignature("org.apache.bcel.classfile.Utility$JavaReader", stringArray0);
      assertEquals("(L;)Lorg/apache/bcel/classfile/Utility$JavaReader;", string1);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("M])|)&3( /[<f", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M])|)&3( /[<f'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 91, (int) (byte)50);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Utility.signatureToString("Js0O\"MillK)Z(KJj", true);
      String string0 = Utility.signatureToString("Js0O\"MillK)Z(KJj", true);
      assertEquals("long", string0);
      
      String string1 = Utility.getSignature("A");
      assertEquals("LA;", string1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Utility.searchOpcode("cWk9ps!vdkN0Y(z");
      Utility.compactClassName("y", "y", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)97;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 93, 1524, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Utility.getSignature("e|hIfyB/s/EpdKCTt]W");
      try { 
        Utility.methodSignatureToString("e|hIfyB/s/EpdKCTt]W", (String) null, "Le|hIfyB/s/EpdKCTt]W;", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: e|hIfyB/s/EpdKCTt]W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Utility.convertString("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Utility.searchOpcode("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)71;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)71, (int) (byte) (-117));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Utility.replace("new", "new", "putstatic");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("putstatic", "new", "putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = ";U|VPW.i$r=N2";
      Utility.searchOpcode(";U|VPW.i$r=N2");
      MockFile mockFile0 = new MockFile(";U|VPW.i$r=N2");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      String string1 = "8Lxb(.s@W3\\8";
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format("8Lxb(.s@W38", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Locale locale0 = Locale.ENGLISH;
      PrintStream printStream1 = mockPrintStream1.format(locale0, "8Lxb(.s@W38", objectArray0);
      Utility.printArray(printStream1, objectArray0);
      String string2 = null;
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Utility.decode("org.apache.bcel.classfile.Utility$1", false);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)70;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)65;
      Utility.encode(byteArray0, false);
      String string0 = Utility.format(2146, 72, true, 'e');
      String string1 = Utility.compactClassName("h5BGs|:>zMI@3;", true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = "[]";
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Utility.searchOpcode("ldc");
      Utility.classOrInterface((short)18);
      try { 
        Utility.methodSignatureReturnType("Wh'&iA9", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wh'&iA9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Utility.compactClassName("S:,E,~<'t");
      // Undeclared exception!
      try { 
        Utility.signatureToString("K<5,!VIo'AIiuY{", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K<5,!VIo'AIiuY{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "i2f";
      stringArray0[1] = "i2f";
      stringArray0[2] = "i2f";
      stringArray0[3] = "i2f";
      stringArray0[4] = "i2f";
      stringArray0[5] = "i2f";
      Utility.methodTypeToSignature("i2f", stringArray0);
      Utility.clearBit((-33), (-33));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 87, 111, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Utility.getSignature("(hnknowZ  ttribute ");
      Utility.searchOpcode("aload_2");
      Utility.compactClassName("aload_2");
      try { 
        Utility.typeOfSignature("RX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = Utility.compactClassName("", true);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lshl", string0);
      
      String string1 = Utility.getSignature("lshl");
      assertEquals("Llshl;", string1);
      
      String string2 = Utility.methodSignatureReturnType("InnerClass(");
      assertEquals("int", string2);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature(";#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Utility.getSignature("V");
      try { 
        Utility.typeOfSignature("Adxl.tHlJ}z1N4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Adxl.tHlJ}z1N4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Utility.getSignature("java.lang.?suteQb");
      Utility.searchOpcode("'5Z");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = "%%nWkqVz.SH_ I0j";
      try { 
        Utility.typeOfSignature("%%nWkqVz.SH_ I0j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %%nWkqVz.SH_ I0j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = "GVkf*DVwF;O7=eBu)";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("XmCE*5IQNY3", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XmCE*5IQNY3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Utility.getSignature("XmCE*5IQNY3");
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Utility.replace("", "XmCE*5IQNY3", "` 50kD2g3v>E t");
      try { 
        Utility.typeOfSignature("3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("em2g`n", "em2g`n", "em2g`n");
      try { 
        Utility.typeOfSignature("U0]I~h\";}az<sh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U0]I~h\";}az<sh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("+?MO>e3'XDP>L.E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?MO>e3'XDP>L.E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "GVkf*DVwF;O7=eBu)";
      // Undeclared exception!
      try { 
        Utility.signatureToString("GVkf*DVwF;O7=eBu)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GVkf*DVwF;O7=eBu)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("'u+BZi*4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'u+BZi*4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Utility.compactClassName("putstatic", false);
      Utility.replace("putstatic", "zjIaJMI'", "L{sg/uh#@A'5g+x5zl;V");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)59;
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)14);
      constantArray0[0] = (Constant) constantDouble0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 91, 157, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      String string0 = Utility.methodSignatureReturnType("V", true);
      assertEquals("void", string0);
      
      String string1 = Utility.convertString("V");
      assertEquals("V", string1);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9BTUW8!$2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9BTUW8!$2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Utility.getSignature("cVCl)");
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      try { 
        Utility.typeOfSignature("86Z7$t`D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 86Z7$t`D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.getSignature("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("boolean", "", "VsehyMdofZM", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
      
      String string1 = Utility.methodSignatureReturnType("L;", false);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("L$oh<x8Pi4Rh3<", false);
      assertEquals(14, byteArray0.length);
      
      String string0 = Utility.compactClassName("L$oh<x8Pi4Rh3<");
      assertEquals("L$oh<x8Pi4Rh3<", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Integer integer0 = new Integer(38);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Only element values of type annotation can be built with this ctor - type specified: ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Only element values of type annotation can be built with this ctor - type specified: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = "EmeR\\M`22]Vo;M$";
      try { 
        Utility.typeOfSignature("EmeRM`22]Vo;M$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EmeRM`22]Vo;M$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = false;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.printArray(objectArray0, false, false);
      String string0 = "mP";
      Utility.replace("", "mP", "mP");
      // Undeclared exception!
      Utility.replace("(MnknowZ 9", "", "");
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Visiting non-standard PMGClass object");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      int int0 = Utility.setBit(128, 79);
      assertEquals(32896, int0);
      
      String string0 = Utility.accessToString(50);
      assertEquals("private final synchronized", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup_x2", string1);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Utility.getSignature("char");
      Integer integer0 = new Integer(165);
      Utility.typeOfSignature("Invalid type: ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(1, byteSequence0.getIndex());
      
      String string0 = Utility.signatureToString("C", false);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Integer integer0 = new Integer(38);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = " (";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " (");
      String string1 = "-w l!8t]V1f@K+[";
      try { 
        Utility.typeOfSignature("-w l!8t]V1f@K+[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -w l!8t]V1f@K+[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("!%9WkqVz.SH& I0j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %9WkqVz.SH& I0j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Utility.replace("(MnknowZ 9ttribute ", "(MnknowZ 9ttribute ", "(MnknowZ 9ttribute ");
      try { 
        Utility.typeOfSignature("Q]Ot{`#2VP`!j1%^Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q]Ot{`#2VP`!j1%^Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Utility.getSignature("(hnknowZ  ttribute ");
      try { 
        Utility.typeOfSignature("H|yTj;.:u>S>a?@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H|yTj;.:u>S>a?@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      try { 
        Utility.typeOfSignature("54.]f1iQOi+7PE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 54.]f1iQOi+7PE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "Njlv%o76c>#";
      Utility.replace("Njlv%o76c>#", "Njlv%o76c>#", "Njlv%o76c>#");
      Utility.typeOfSignature("[;MhX");
      OutputStream outputStream0 = null;
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter((OutputStream) null, (CharsetEncoder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Utility.isJavaIdentifierPart(' ');
      try { 
        Utility.typeOfSignature("=/E<4zAb-lsnk^,>,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =/E<4zAb-lsnk^,>,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Utility.replace("(MnknowZ 9ttribut~e ", "(MnknowZ 9ttribut~e ", "(MnknowZ 9ttribut~e ");
      try { 
        Utility.methodSignatureReturnType("XmCE*5IQN\"Y3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XmCE*5IQN\"Y3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = "G@YZ%R&H";
      Utility.searchOpcode("G@YZ%R&H");
      Utility.accessToString(69, true);
      String string1 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Utility.getSignature("(hnknowZ  ttribute ");
      try { 
        Utility.methodSignatureArgumentTypes("(hnknowZ  ttribute ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `hnknowZ  ttribute '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Utility.typeOfSignature("Jw#DK`+zH^Hv721 ");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F.(,f`bw");
      assertEquals((byte)6, byte0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)6;
      String string0 = Utility.toHexString(byteArray0);
      String string1 = Utility.compactClassName("06 06 06 36 0f 06 06", false);
      assertTrue(string1.equals((Object)string0));
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (-982), (int) (byte)54);
      assertEquals("0:    iconst_3\n1:    iconst_3\n2:    iconst_3\n3:    istore\t\t%15\n5:    iconst_3\n6:    iconst_3\n", string2);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("C}}G%pMK9>L<&a#Vr1>", true);
      Utility.signatureToString("C}}G%pMK9>L<&a#Vr1>");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)7;
      byte byte0 = (byte)21;
      byteArray0[2] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 21
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Utility.searchOpcode("oUqH&=|,{tS0 w%\"");
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (short) (-1), 76);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean boolean0 = true;
      Utility.printArray((Object[]) null, true, true);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.fillup("{}", 76, true, 'd');
      Utility.encode(byteArray0, false);
      String string0 = "Exception while looking for class ";
      String string1 = "bb&0Z:/";
      int int0 = 196;
      int int1 = (-1336);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("eFrAN*I$yds>G%");
      try { 
        Utility.typeOfSignature("0A}UuhF7!ZuY?2K-maK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0A}UuhF7!ZuY?2K-maK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "OK(";
      try { 
        Utility.typeOfSignature("OK(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OK(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = Utility.isSet(5, 5);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("Rri*3ZC$N[", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("short");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "Rri*3ZC$N[");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Rri*3ZC$N[";
      Utility.printArray(printStream0, objectArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(5, 63);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dastore", string0);
      assertArrayEquals(new byte[] {(byte)82, (byte)114, (byte)105, (byte)42, (byte)51, (byte)90, (byte)67, (byte)13, (byte)91}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      File file0 = MockFile.createTempFile("float", "Z['");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("\t");
      Utility.methodSignatureReturnType("L;");
      Utility.typeOfSignature("ZG@ZRJAcE");
      String string0 = "6T{ Yrwe%8f{'fsM";
      Utility.fillup("6T{ Yrwe%8f{'fsM", (-1935), false, '2');
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("tph", "6T{ Yrwe%8f{'fsM");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 6T{ Yrwe%8f{'fsM
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = "Rri*3ZC\\$N[";
      Utility.convertString("Rri*3ZC$N[");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Rri*3ZC\\$N[", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Rri*3ZC\\$N['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "BrfT";
      Utility.typeOfSignature("BrfT");
      try { 
        Utility.decode("BrfT", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("D,v0RB3z4CONd'>OE ");
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 1021, true, 'a');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("*)S<O%qq~S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )S<O%qq~S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Utility.getSignature("tf276]L)cZD\"hCH<5");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ltf276]L)cZD\"hCH<5;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Ltf276]L)cZD\"hCH<5;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Utility.compactClassName(":E&PoS");
      Utility.fillup(":E&PoS", 1609, false, 'Z');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ":E&PoS";
      objectArray0[1] = (Object) ":E&PoS";
      objectArray0[2] = (Object) ":E&PoS";
      objectArray0[3] = (Object) ":E&PoS";
      objectArray0[4] = (Object) ":E&PoS";
      objectArray0[5] = (Object) ":E&PoS";
      objectArray0[6] = (Object) ":E&PoS";
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.goto", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.goto
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = Utility.isSet(47, 86);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      boolean boolean1 = Utility.isJavaIdentifierPart('9');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(Unkno n atutribute ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (Unkno n atutribute 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.format(2661, 2661, true, '\"');
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, true);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("Inva]id type:fz ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Inva]id type:fz ";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "Inva]id type:fz ";
      String string0 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ", high = ";
      try { 
        Utility.typeOfSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("shRG");
      Utility.isSet(47, 3493);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "shRG";
      objectArray0[1] = (Object) "shRG";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = Utility.typeOfSignature("D,v0RB3z4CONd'>OE ");
      assertEquals((byte)7, byte0);
      
      Utility.signatureToString("I#0Aj\"^h$7&7}", true);
      String string0 = Utility.methodSignatureReturnType("I#0Aj\"^h$7&7}", true);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "<";
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "/eX";
      try { 
        Utility.typeOfSignature("/eX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /eX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = Utility.typeOfSignature("The array of names must not be null");
      assertEquals((byte)14, byte0);
      
      short short0 = Utility.searchOpcode("The array of names must not be null");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$O$O", string0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("P4<LTh", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P4<LTh'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      try { 
        Utility.typeOfSignature("KhW\"0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KhW\"0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "P4<LTh";
      try { 
        Utility.typeOfSignature("P4<LTh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P4<LTh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Utility.clearBit(160, (-1897));
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(160);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, (-1897), 160, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Utility.convertString("(RHUnknown at$i/un ");
      try { 
        Utility.typeOfSignature("(RHUnknown at$i/un ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (RHUnknown at$i/un 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("6(va");
      Utility.methodSignatureReturnType("InnerClass(");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".wJPz7#x'G>-Az");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .wJPz7#x'G>-Az
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("G1iJOZ>-,6Tcv&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G1iJOZ>-,6Tcv&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Utility.getSignature("\\");
      Utility.convertString("L\\;");
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.", true);
      assertEquals("", string0);
      
      Utility.getSignature("");
      int int0 = Utility.clearBit((-408), (-408));
      assertEquals((-408), int0);
      
      String string1 = Utility.convertString("L;");
      assertEquals("L;", string1);
      
      short short0 = Utility.searchOpcode("if_acmpeq");
      assertEquals((short)165, short0);
      
      String string2 = Utility.getSignature("_7FkNv?yJL");
      assertEquals("L_7FkNv?yJL;", string2);
      
      Utility.signatureToString("L;", true);
      byte byte0 = Utility.typeOfSignature("L;");
      assertEquals((byte)14, byte0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "L;";
      objectArray0[2] = (Object) "_7FkNv?yJL";
      objectArray0[3] = (Object) "if_acmpeq";
      objectArray0[4] = (Object) "L;";
      String string3 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"\", \"L;\", \"_7FkNv?yJL\", \"if_acmpeq\", \"L;\"}", string3);
      
      Utility.getSignature("l@w1BF}+ny;");
      boolean boolean0 = Utility.isSet((short)165, 20);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = "impdep2";
      String string1 = "";
      Utility.compactClassName("impdep2", "", false);
      String string2 = "Y&}";
      String string3 = "](t|amy7 Ml\"!Y4|{m\"";
      Utility.searchOpcode("](t|amy7 Ml\"!Y4|{m\"");
      try { 
        Utility.typeOfSignature("Y&}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y&}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Utility.methodSignatureReturnType("Z`");
      Utility.decode("uJ{fUB,/u[RUhrq", false);
      try { 
        Utility.methodSignatureReturnType("tE\u0004usP)7O[PieV~}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `7O[PieV~}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "invokedynamic";
      stringArray0[2] = "\\";
      stringArray0[3] = "invokedynamic";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureReturnType("P4<LTh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P4<LTh'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(Unknown attribute ", "(Unknown attribute ", "(Unknown attribute ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unknown attribute '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("");
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("[tbu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `tbu'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("MHgy~]9WO!;t&j@?WJ<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MHgy~]9WO!;t&j@?WJ<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Utility.getSignature("S:,E,~<'t");
      try { 
        Utility.methodSignatureReturnType("K<5/,.!bIo'AIiuY{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K<5/,.!bIo'AIiuY{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Utility.getSignature("Y!pzR!<6");
      try { 
        Utility.methodSignatureReturnType("Y!pzR!<6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y!pzR!<6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("shRG", "shRG", true);
      Utility.searchOpcode("shRG");
      try { 
        Utility.typeOfSignature("7O%q;%PLRthZG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7O%q;%PLRthZG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.signatureToString("S:,E,~<'tc", true);
      assertEquals("short", string0);
      
      Utility.typeOfSignature("S:,E,~<'tc");
      try { 
        Utility.methodSignatureReturnType("short", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `short'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.signatureToString("T;1`xkikV");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-33);
      byte byte0 = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)81;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = "double";
      String string1 = "MSmR`edrXAZ(\"";
      try { 
        Utility.typeOfSignature("MSmR`edrXAZ(\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MSmR`edrXAZ(\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.format(49, 49, false, 'Z');
      assertEquals("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ49", string0);
      
      String string1 = Utility.accessToString((-3562));
      assertEquals("private protected final interface synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("mk_#=-~>q7L{0ywDH", (String) null, " ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: mk_#=-~>q7L{0ywDH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      int int0 = new Integer(44);
      String string0 = Utility.signatureToString("Bg+");
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("EBI#3=s&Wz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EBI#3=s&Wz'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("putstatic", ";H#g?", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.getSignature("\t");
      assertEquals("L;", string0);
      
      String string1 = Utility.convertString("instanceof");
      assertEquals("instanceof", string1);
      
      String string2 = Utility.methodSignatureReturnType("L;");
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.methodSignatureReturnType("S:,E,~<'tc");
      Utility.getSignature("S:,E,~<'tc");
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = "";
      Utility.clearBit((-4236), (-4236));
      String string1 = "33!#";
      Utility.getSignature("33!#");
      Utility.convertString("L33!#;");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "L33!#;", "L33!#;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = "uJ{fUB,/u[RUhrq";
      try { 
        Utility.typeOfSignature("XWWZ2Bgb5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XWWZ2Bgb5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('M');
      try { 
        Utility.typeOfSignature(">,!q^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >,!q^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "% .bhFO}J");
      String string0 = Utility.classOrInterface(238);
      assertEquals("class", string0);
      
      int int0 = Utility.clearBit((-1368), 2789);
      assertEquals((-1400), int0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("S:,E,~<'tc");
      assertEquals("short", string0);
      
      String string1 = Utility.getSignature("short");
      assertEquals("S", string1);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.compactClassName("Hbsk:", "&u=;D8;/WJ1", false);
      Utility.setBit((byte)114, (-204));
      try { 
        Utility.methodSignatureReturnType("Hbsk:", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hbsk:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.fillup("a", 1908, false, 'Y');
      Utility.getSignature("a");
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = "La;";
      stringArray0[2] = "a";
      stringArray0[3] = "a";
      stringArray0[4] = string0;
      stringArray0[5] = "int";
      stringArray0[6] = "(";
      stringArray0[7] = "(";
      Utility.methodTypeToSignature("(", stringArray0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = "Tbf";
      try { 
        Utility.methodSignatureReturnType("Tbf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Tbf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = "8";
      Utility.decode("8", false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("G1iJOZ>-,6Tcv&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G1iJOZ>-,6Tcv&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Utility.accessToString((-2087));
      try { 
        Utility.methodSignatureReturnType(", low = ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `, low = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Utility.clearBit(44, 44);
      String string0 = null;
      Utility.accessToString(44, true);
      Utility.printArray((Object[]) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The FileFilter must not be null";
      stringArray0[1] = "protected static";
      stringArray0[2] = "protected static";
      stringArray0[3] = "Hs @Hho9}7Ks`7(";
      stringArray0[4] = "+v}u";
      stringArray0[5] = "org.apache.bcel.classfile.AnnotationEntry";
      stringArray0[6] = null;
      stringArray0[7] = "protected static";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("+v}u", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-67);
      byte byte0 = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      MockFile mockFile0 = new MockFile("invokeinterface");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.flush();
      mockPrintStream0.append('>');
      mockFile0.delete();
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      Utility.isSet(83, 83);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "newarray";
      stringArray0[1] = "invokeinterface";
      stringArray0[2] = "invokeinterface";
      stringArray0[3] = "invokeinterface";
      stringArray0[4] = "invokeinterface";
      stringArray0[5] = "invokeinterface";
      stringArray0[6] = "@50&-6w,&ww";
      stringArray0[7] = "invokeinterface";
      stringArray0[8] = "invokeinterface";
      String string0 = Utility.methodTypeToSignature("invokeinterface", stringArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String string0 = "L'Ve%ibW";
      try { 
        Utility.methodSignatureReturnType("L'Ve%ibW", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L'Ve%ibW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("uJ{fUB,/u[RUhrq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[RUhrq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Utility.decode("", false);
      String string0 = "java.lang.64";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("&Hy1cH9$7WyKDUq", "java.lang.64", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &Hy1cH9$7WyKDUq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Utility.format(64, (-1450241078), true, '4');
      Utility.compactClassName("64");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("64", "64", "RCz7e6E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 64
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Utility.compactClassName("Unreachable default case reached!", "RCz7e6E", true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "Unreachable default case reached!";
      Utility.methodSignatureReturnType("D$&GF-U", true);
      try { 
        Utility.methodSignatureArgumentTypes("shRG", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: shRG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("shRG", "shRG", true);
      Utility.searchOpcode("shRG");
      try { 
        Utility.typeOfMethodSignature("$VALUES");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $VALUES
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Utility.convertString("float");
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Utility.replace("", "pR/G~O_=12%dC,%[", "if_acmpne");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("putstatic", "Clone Not Supported", "Clone Not Supported");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.methodSignatureReturnType("S:,E,~<'tc");
      assertEquals("short", string0);
      
      String string1 = Utility.convertString("8HQI<!6");
      assertEquals("8HQI<!6", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lneg", string2);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = Utility.isJavaIdentifierPart('0');
      assertTrue(boolean0);
      
      short short0 = Utility.searchOpcode("%=_a\"2_rJx");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = "$!N}\\jO:";
      try { 
        Utility.decode("$!N}jO:", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("Float", false);
      assertArrayEquals(new byte[] {(byte)70, (byte)108, (byte)111, (byte)97, (byte)116}, byteArray0);
      
      String string0 = Utility.methodSignatureReturnType("Float", true);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("C7lk3Bb0)~LC}/$Hy", false);
      assertEquals(16, byteArray0.length);
      
      String string0 = Utility.compactClassName("[");
      assertEquals("[", string0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Utility.decode("", false);
      String string0 = Utility.fillup("", 1560, false, 's');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) string0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) string0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) string0;
      objectArray0[7] = (Object) string0;
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Utility.replace("putst)tc", "putst)tc", "if_acmpne");
      Utility.fillup("if_acmpne", 'o', false, 'o');
      try { 
        Utility.methodSignatureReturnType("putst)tc", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `tc'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Utility.isJavaIdentifierPart('D');
      Utility.accessToString((-1448), true);
      try { 
        Utility.decode("invokeinterface", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Utility.getSignature(" 5@0bZCZ");
      int int0 = Utility.clearBit(6305, 6305);
      assertEquals(6305, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)9;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[0] = (byte)0;
      String string0 = Utility.compactClassName("shRG", "", true);
      assertEquals("shRG", string0);
      
      int int0 = Utility.setBit((-820), (byte)0);
      assertEquals((-819), int0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("\"", "float", true);
      String string1 = Utility.fillup("\"", (-377), true, '|');
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Utility.decode("", false);
      String string0 = "2";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-49);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Utility.decode("1", false);
      String string0 = "D";
      Utility.typeOfSignature("D");
      // Undeclared exception!
      try { 
        Utility.replace("t=j\"7PA", (String) null, "1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Utility.getSignature("new");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "new";
      stringArray0[2] = "Lnew;";
      stringArray0[3] = "Lnew;";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string0 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(L;Lnew;LLnew;;LLnew;;L;L;)L;", string0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Utility.getSignature("new");
      try { 
        Utility.methodSignatureToString("new", "u5OM}?G+d). Upqi%jn", "ireturn", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: new
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Utility.decode("", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(' ');
      boolean boolean1 = Utility.isJavaIdentifierPart('Y');
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.getSignature("\t");
      assertEquals("L;", string0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      String string0 = "05t@\";XO^E+%V t/q_8";
      Utility.replace("2i|W{?Sk.'yK", "05t@\";XO^E+%V t/q_8", "05t@\";XO^E+%V t/q_8");
      Utility.convertString("2i|W{?Sk.'yK");
      String string1 = " ";
      String string2 = "I\\3/_5";
      boolean boolean0 = true;
      Method method0 = new Method();
      Method method1 = new Method(method0);
      // Undeclared exception!
      try { 
        method1.getLocalVariableTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('z');
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "Warning: Padding byte != 0 in ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.replace(";H#g?", "putstatic", "putstatic");
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.classfile.Field", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.Field'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("", false);
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)0;
      Utility.typeOfSignature("C'c");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("C'c", ".7iu", "zW%1H6duHt%v%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: C'c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Object object0 = new Object();
      Utility.searchOpcode("");
      Utility.classOrInterface((-485));
      try { 
        Utility.methodSignatureArgumentTypes(" arg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  arg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = "";
      Utility.decode("", false);
      String string1 = "2";
      try { 
        Utility.typeOfSignature("2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Utility.methodSignatureReturnType("SAME_LOCALS_1_STACK_EXTENDED", true);
      Utility.classOrInterface(74);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("SAME_LOCALS_1_STACK_EXTENDED", "", "SAME_LOCALS_1_STACK_EXTENDED");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: SAME_LOCALS_1_STACK_EXTENDED
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte) (-23);
      byteArray0[8] = (byte)91;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface(0);
      assertEquals("class", string0);
      
      String string1 = Utility.convertString("");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "\"8", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-33);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace(";H#g?", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Utility.decode("", false);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "x/ Kq| T\"()pSwQ~";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x/ Kq| T\"()pSwQ~");
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = ")\t";
      try { 
        Utility.typeOfSignature("\"~4KW?dM$H)QCVbd1W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"~4KW?dM$H)QCVbd1W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.compactClassName("new", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      Utility.replace("monitorexit", "", "");
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      String string0 = Utility.classOrInterface((-117));
      assertEquals("interface", string0);
      
      String string1 = Utility.getSignature(")\t");
      assertEquals("L);", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('u');
      assertTrue(boolean0);
      
      String string2 = Utility.compactClassName("hwMN$KR<D]'^?:^,^J", "interface", false);
      assertEquals("hwMN$KR<D]'^?:^,^J", string2);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      String string0 = "&q/,\"M}=S0%";
      Utility.convertString("&q/,\"M}=S0%");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("&q/,\"M}=S0%", "&q/,\"M}=S0%", "&q/,\"M}=S0%", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &q/,\"M}=S0%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte) (-89);
      byteArray0[8] = (byte)108;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.isJavaIdentifierPart(',');
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dload_0", string0);
      
      String string1 = Utility.compactClassName("Hbsk:", "&u=;D8;/WJ1", false);
      assertEquals("Hbsk:", string1);
      
      int int0 = Utility.setBit((byte)114, (-204));
      assertEquals(1048690, int0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Utility.replace("F1Pa'yZjnLJc!f5&Cm2", "@vt?d}tDvetf", "@vt?d}tDvetf");
      Utility.searchOpcode("org.apache.bcel.classfile.Utility");
      Utility.classOrInterface((byte)0);
      try { 
        Utility.methodSignatureArgumentTypes("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      boolean boolean0 = Utility.isJavaIdentifierPart('V');
      String string0 = Utility.convertString("sS<@%Vg\"hDsrSO&5");
      assertEquals("sS<@%Vg\\\"hDsrSO&5", string0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('#');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Utility.searchOpcode("jsr");
      Utility.classOrInterface(58);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)41;
      byteArray1[1] = (byte)41;
      byteArray1[2] = (byte)41;
      byteArray1[3] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)41, (-1921), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('4');
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)100;
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("h\"<-cpI)2@", true);
      Utility.encode(byteArray0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("h\"<-cpI)2@");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)91;
      objectArray0[1] = (Object) "$A$5b$afd";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (byte)91;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) (byte)100;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, ";]WKq2}5iwM(", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      Utility.replace("C1t", "C1t", "getfield");
      Utility.searchOpcode("getfield");
      Utility.classOrInterface((short)180);
      try { 
        Utility.methodSignatureArgumentTypes("[:S`B.f5lF/x?RI6}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [:S`B.f5lF/x?RI6}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(':');
      byte[] byteArray0 = new byte[6];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A$A$A$A", string0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('');
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Utility.replace("@T", "$*Pz7f:]77a=S", "$*Pz7f:]77a=S");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)111;
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("@T");
      try { 
        Utility.typeOfSignature("jsr_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jsr_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-7);
      try { 
        Utility.typeOfSignature("d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Utility.isJavaIdentifierPart('T');
      String string0 = "x`+";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("x`+", "x`+", "x`+", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: x`+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^{l[0oqXw(:[NFR6");
      MockFile mockFile0 = new MockFile("^{l[0oqXw(:[NFR6", "^{l[0oqXw(:[NFR6");
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Utility.accessToString(981, true);
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "public protected final volatile transient native";
      objectArray0[4] = (Object) "public protected final volatile transient native";
      objectArray0[5] = (Object) "public protected final volatile transient native";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Utility.getSignature("");
      Utility.accessToString(0, true);
      Utility.accessToString(0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)36);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      PrintStream printStream0 = mockPrintStream0.format("", (Object[]) constantArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      constantPool0.dump(dataOutputStream0);
      Utility.codeToString(byteSequence0, constantPool0);
      LocalVariable[] localVariableArray0 = new LocalVariable[1];
      LocalVariable localVariable0 = new LocalVariable((-438), (byte)13, (-1830), 70, 2914, constantPool0);
      localVariableArray0[0] = localVariable0;
      LocalVariableTable localVariableTable0 = new LocalVariableTable(81, (byte)13, localVariableArray0, constantPool0);
      try { 
        Utility.methodSignatureToString("", "", "", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('h');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)89;
      objectArray0[0] = (Object) (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("if_icmple");
      Constant constant0 = constantUtf8_0.copy();
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = constant0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_1;
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Utility.isJavaIdentifierPart('4');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      constantUtf8_0.copy();
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("if_acmpne");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)8, 438);
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantUtf8_1;
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Utility.isJavaIdentifierPart('h');
      try { 
        Utility.methodSignatureArgumentTypes("aL#.4Rn_8K;Cs\"[,3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aL#.4Rn_8K;Cs\"[,3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iconst_m1", string0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("DIr`3Uy?XMwHB", "t 5a)uSG!M%FjyDQAFk", "t 5a)uSG!M%FjyDQAFk", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: DIr`3Uy?XMwHB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Utility.encode(byteArray0, true);
      Utility.replace("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A");
      Utility.fillup("2^:M0kgVqM[y1Fi", 1457, true, 'H');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 00000000
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false, false);
      String string0 = Utility.format(227, (-1072), true, 'k');
      assertEquals("227", string0);
      
      boolean boolean0 = Utility.isSet(210, 256);
      boolean boolean1 = Utility.isSet((-1072), (-888));
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)127;
      Utility.equals(byteArray0, byteArray0);
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('$');
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("5Lud");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("areturn");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "n1]Fzu$&|}})30*[";
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Utility.printArray(objectArray0, false, false);
      Utility.fillup("areturn", 256, false, '}');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      String string0 = "";
      Utility.getSignature("");
      Utility.accessToString(0, true);
      Utility.accessToString(0, true);
      String string1 = "8[(>ORh4i~";
      Utility.compactClassName("8[(>ORh4i~", ")3X u", true);
      Utility.getSignature(")3X u");
      try { 
        Utility.typeOfMethodSignature("Rd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Rd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      String string0 = "'^{[0oqXw(:[NFRh6";
      // Undeclared exception!
      try { 
        Utility.getSignature("'^{[0oqXw(:[NFRh6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[0oqXw(:[NFRh6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "}:If:JA@O", "}:If:JA@O");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Utility.clearBit(1415, (-32768));
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      Utility.convertString("java.lang.Object@56bcc7d4, java.lang.Object@17514032, java.lang.Object@3f0fc69b, java.lang.Object@1066f0ee");
      try { 
        Utility.typeOfSignature("java.lang.Object@56bcc7d4, java.lang.Object@17514032, java.lang.Object@3f0fc69b, java.lang.Object@1066f0ee");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@56bcc7d4, java.lang.Object@17514032, java.lang.Object@3f0fc69b, java.lang.Object@1066f0ee
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(':');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)125;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Utility.compactClassName("", "", true);
      try { 
        Utility.methodSignatureArgumentTypes("dup2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dup2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Utility.getSignature("");
      String string0 = "";
      URI uRI0 = MockURI.URI("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false, false);
      Utility.fillup("java.lang.Object@7bd02fee, java.lang.Object@3044a4ef, java.lang.Object@4210f02c, java.lang.Object@4c1dceb0, java.lang.Object@36483782, java.lang.Object@23be9e78", 256, false, '{');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)92;
      byte byte0 = (byte) (-5);
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 2
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Utility.replace("[0):c9E!=WRlMQ", "-70-b<CD FLHB", "");
      Utility.isSet(1783, (-1545));
      Utility.accessToString((-1545), false);
      try { 
        Utility.typeOfSignature("6$e99.gH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6$e99.gH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("T* f$W02c_a", stringArray0);
      Utility.searchOpcode("");
      Utility.printArray((Object[]) stringArray0);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Utility.setBit(39, 2);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{";
      stringArray0[1] = "~aS";
      stringArray0[2] = "{";
      Utility.methodTypeToSignature("{", stringArray0);
      Utility.setBit(49, (-89));
      Utility.searchOpcode("~aS");
      Utility.convertString("Warning: Padding byte != 0 in ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      boolean boolean0 = Utility.isSet(54, 54);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName(">\t", false);
      assertEquals(">\t", string0);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Utility.classOrInterface(2);
      Utility.format((-5281), (-5281), false, ':');
      Utility.decode("h?T@TJv]&k#Q'", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 215, 2123, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)0;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A$A$Sr$A", string0);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-12);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)18;
      byteArray1[5] = (byte)114;
      byteArray1[6] = (byte)18;
      byteArray1[7] = (byte)18;
      String string1 = Utility.toHexString(byteArray1);
      assertEquals("00 00 f4 00 12 72 12 12", string1);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      String string0 = "dload_3";
      try { 
        Utility.methodSignatureReturnType("dload_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dload_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Utility.methodTypeToSignature("CONSTANT_Float", (String[]) null);
      Utility.compactClassName("Jj4@AG0bn/8lrg:T", "CONSTANT_Float", false);
      Utility.format(2272, 0, true, '$');
      Utility.classOrInterface(2185);
      Utility.setBit(0, 2272);
      Utility.fillup("2272", 2185, false, '$');
      Utility.format(2185, 1, false, '$');
      Utility.printArray((Object[]) null);
      String string0 = Utility.printArray((Object[]) null, true, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      String string0 = Utility.encode(byteArray0, true);
      String string1 = Utility.replace("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.format((byte)0, (byte)0, true, 'u');
      assertEquals("0", string2);
      
      boolean boolean0 = Utility.isSet((byte)0, 0);
      Utility.isSet((-888), 0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      boolean boolean1 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean1);
      
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      String string0 = Utility.accessToString((-991), false);
      assertEquals("public synchronized abstract strictfp synthetic annotation enum", string0);
      
      String string1 = Utility.compactClassName("|QHQ", "public synchronized abstract strictfp synthetic annotation enum", false);
      assertEquals("|QHQ", string1);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      String string0 = " = ";
      Utility.convertString(" = ");
      Utility.clearBit(166, (-3002));
      Utility.accessToString(166);
      String string1 = "org.apache.bcel.classfile.Utility";
      Utility.compactClassName(" = ", "org.apache.bcel.classfile.Utility", true);
      char char0 = '8';
      Utility.isJavaIdentifierPart('8');
      MockFile mockFile0 = new MockFile("java.lang.String");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "java.lang.String");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // java.lang.String
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      char char0 = 'h';
      Utility.isJavaIdentifierPart('h');
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      Utility.classOrInterface((-1239));
      int int0 = (-4681);
      Utility.format((-1239), (-4681), false, 'h');
      Utility.compactClassName("boolean", true);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("int", "", "u\"!;*N:C,MFua");
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      String string0 = "U.3h";
      // Undeclared exception!
      try { 
        Utility.signatureToString("U.3h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U.3h'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Utility.accessToString(103);
      String string0 = "RJSD7D%+LJsGwUdE`";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("public private protected synchronized volatile", "RJSD7D%+LJsGwUdE`", "`NyN(lnyJdAc2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private protected synchronized volatile
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Utility.accessToString(324, true);
      try { 
        Utility.typeOfMethodSignature("protected volatile native");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: protected volatile native
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("", false);
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      String string0 = "Unreachable default case reached!";
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, "Unreachable default case reached!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Utility.isJavaIdentifierPart('4');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)100;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("s'^pv", "s'^pv", "h\"<-cpI)2@", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: s'^pv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      Utility.printArray(objectArray0, false);
      try { 
        Utility.methodSignatureReturnType("java.lang.Object@48fa04b7, java.lang.Object@4475ff2f", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.Object@48fa04b7, java.lang.Object@4475ff2f'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Utility.accessToString(0);
      Utility.accessToString(0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "";
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)0;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-69);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$W$99$93$bb", string0);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("areturn");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[1] = (Object) "n1]Fzu$&|}})30*[";
      mockFileWriter0.getEncoding();
      mockPrintWriter0.print(true);
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[4] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[5] = (Object) mockFileWriter0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      mockPrintWriter0.flush();
      objectArray0[7] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("n1]Fzu$&|}})30*[", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte)33);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lload_3", string0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("2Kf9H#3>hxhnF<X8Mp", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2Kf9H#3>hxhnF<X8Mp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Utility.setBit((-724), (-724));
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
