/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 16:19:41 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.convertString("?8z([|aWmfo1");
      Utility.classOrInterface(8);
      Utility.convertString("class");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte)116;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 246, (int) (byte)60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 18688. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-102);
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-102);
      byteArray1[1] = (byte)93;
      byteArray1[2] = (byte) (-74);
      byteArray1[3] = (byte) (-74);
      byteArray1[4] = (byte) (-32);
      byteArray1[5] = (byte) (-96);
      byteArray1[6] = (byte) (-74);
      byteArray1[7] = (byte) (-102);
      Utility.encode(byteArray1, false);
      try { 
        Utility.typeOfSignature("5d b6 a0 a0 9a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5d b6 a0 a0 9a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-62);
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-24);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 122, 122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte) (-9);
      byteArray0[8] = (byte) (-51);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3605, 252);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "monitorenter");
      Utility.compactClassName("monitorenter", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)118, (int) (byte)118, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-40);
      byteArray0[7] = (byte) (-122);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), 5228);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fload_1
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "%h=tR`'";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      stringArray0[1] = "%h=tR`'";
      stringArray0[2] = "%h=tR`'";
      stringArray0[3] = "%h=tR`'";
      Utility.methodTypeToSignature("%h=tR`'", stringArray0);
      Utility.accessToString(145, true);
      Utility.methodSignatureToString("(L%h=tR`';L%h=tR`';L%h=tR`';L%h=tR`';)L%h=tR`';", "<AI,/w~", "%h=tR`'");
      int int0 = 193;
      Utility.isSet(145, 193);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":Jjur40nM+3(v+");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-98);
      byteArray0[7] = (byte) (-2);
      byteArray0[8] = (byte) (-119);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 103, 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-41);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aload\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@&KM$e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @&KM$e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString((-375));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString(1134, true);
      Utility.compactClassName("public static transient interface abstract strictfp synthetic annotation enum", "private protected static volatile abstract", false);
      Utility.clearBit(178, (-375));
      Utility.convertString("goto_w");
      Utility.isSet(1134, 178);
      Utility.compactClassName("freturn", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)6;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)6, 95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-89);
      byteArray0[7] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.compactClassName("&JM+!cP5m;tvtzAu", "&JM+!cP5m;tvtzAu", true);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, (int) (byte)46, 169, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "f@HAD;]$VSM2Y@s_Xf";
      Utility.compactClassName("f@HAD;]$VSM2Y@s_Xf", "f@HAD;]$VSM2Y@s_Xf", false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      Utility.isSet(86, 67);
      Utility.setBit((byte)47, 34);
      String string1 = "1E2lEpH1f|k>M&a&G";
      try { 
        Utility.typeOfSignature("1E2lEpH1f|k>M&a&G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1E2lEpH1f|k>M&a&G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.classOrInterface(12);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) "class";
      objectArray0[5] = (Object) "class";
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)109;
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)36;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte) (-58);
      byteArray1[3] = (byte) (-72);
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte) (-72);
      byteArray1[6] = (byte)46;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 36, 193);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)6;
      byte byte0 = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      int int0 = 90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-579), 90, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 1187;
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.fillup("1y$<?,Vk>mJUbPx", 1187, false, 'W');
      Utility.isSet(1187, 1187);
      String string1 = Utility.getSignature(string0);
      int int1 = (-1417);
      Utility.format(1187, (-1417), true, 'W');
      try { 
        Utility.methodSignatureReturnType(string1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `?,Vk>mJUbPx;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)37;
      Utility.equals(byteArray0, byteArray0);
      Utility.clearBit((byte)37, (byte)3);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1855, (int) (byte)24, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-113);
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((-3073.6094F));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-84), 165);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)101, (int) (byte)101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger(282);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantInteger constantInteger1 = new ConstantInteger((byte)57);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantLong constantLong0 = new ConstantLong((byte) (-24));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[2] = (Constant) constantLong1;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantFloat constantFloat0 = new ConstantFloat(dataInputStream0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[3] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dstore\t\t%32", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Utility.compactClassName("laload", false);
      Utility.fillup("laload", 12, true, '_');
      Utility.compactClassName("fN)E`ck");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-44);
      byteArray0[7] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1850472318), 69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fconst_2
         // 1:    nop
         // 2:    lconst_0
         // 3:    nop
         // 4:    iconst_5
         // 5:    ior
         // 6:    <illegal opcode>
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=ndD");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "=ndD";
      objectArray0[2] = (Object) "y1JptXA";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "=ndD";
      objectArray0[5] = (Object) "=ndD";
      objectArray0[6] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("y1JptXA", objectArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = '9';
      charArray0[2] = 'f';
      mockPrintWriter0.println(charArray0);
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) "=ndD";
      objectArray1[1] = (Object) "=ndD";
      Utility.printArray(printWriter0, objectArray1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-32);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)10;
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)38, (byte)0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2824, (int) (byte)91, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)71;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, 81, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.convertString("?>...");
      try { 
        Utility.typeOfSignature("/qVK_'V:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /qVK_'V:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "X0p";
      try { 
        Utility.typeOfSignature("X0p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X0p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.accessToString(152);
      Utility.setBit(152, (-321));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte) (-79);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1562, (int) (byte)11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)21;
      byteArray0[8] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iload_1", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("W|#A}7VC\"0!_KM\u0003r");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = "(8d:`7]|";
      String string1 = "ifnonnull";
      String string2 = ")";
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Utility.accessToString((-186), false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte) (-38);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-59), 3087);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 23496. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte) (-56);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, 2240);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1), (-812));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-68);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Mrw[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Mrw[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "class_index";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "class_index");
      String string1 = "#u#-^?|d";
      try { 
        Utility.typeOfSignature("#u#-^?|d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #u#-^?|d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass((byte) (-100));
      constantArray0[0] = (Constant) constantClass0;
      ConstantString constantString0 = new ConstantString(4711);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("ifle\t\t#-5978", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)98;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, (int) (byte)98);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.compactClassName("{NDX~!Vuaw3cZZ", false);
      Utility.format(8192, 8192, false, '/');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-92);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 14, (-3391));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)9;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("impdep1");
      ConstantUtf8.printStats();
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      File file0 = MockFile.createTempFile("freturn", "impdep1");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append('`');
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      constantUtf8_1.dump(dataOutputStream0);
      constantPool0.constantToString((Constant) constantUtf8_1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 200, (-84));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-8);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)39, (int) (byte)103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)82;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-172), (-711), false);
      assertEquals("0:    lushr\n1:    dstore_0\n2:    if_icmple\t\t#-6226\n5:    iload_0\n6:    dastore\n", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "void";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6$#!Gn,7uYwj";
      stringArray0[1] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*bUrK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: bUrK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = ", high = ";
      Utility.convertString(", high = ");
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.typeOfSignature("[");
      String string1 = "char";
      try { 
        Utility.methodSignatureReturnType("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `char'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("Illegally nested brackets:");
      Utility.methodSignatureReturnType("Illegally nested brackets:");
      Utility.typeOfSignature("System");
      try { 
        Utility.methodSignatureArgumentTypes("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: int
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "ALZ.>OR&pfeRp#0GL0";
      try { 
        Utility.typeOfSignature("ALZ.>OR&pfeRp#0GL0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ALZ.>OR&pfeRp#0GL0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-107);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-41), (-1129), false);
      assertEquals("0:    <illegal opcode>\n1:    istore_0\n2:    astore_3\n3:    nop\n4:    dconst_0\n5:    fcmpl\n", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-24);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 960, (int) (byte)42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.format((-355), 59, false, '>');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-39);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 59, 237);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-58);
      byte byte0 = (byte) (-128);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-15);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 191, 191, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "org.apache.bcel.util.ClassPath";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.util.ClassPath");
      String string1 = ";";
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.fillup("n(K0#43", 210, true, ',');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-31);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 224, (-2999));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "jsr";
      Utility.compactClassName("jsr", "jsr", true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)72;
      Utility.toHexString(byteArray0);
      Utility.printArray(objectArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-127), (int) (byte)72);
      Utility.replace("", "jsr", "{}");
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = Utility.compactClassName("cFRTq(F{s8I+&a08", "cFRTq(F{s8I+&a08", true);
      assertEquals("", string0);
      
      try { 
        Utility.typeOfSignature("&* L ~#PY[Y?V6)=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &* L ~#PY[Y?V6)=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "GG<aZs]#\\A5X5(h";
      try { 
        Utility.typeOfSignature("GG<aZs]#A5X5(h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GG<aZs]#A5X5(h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)77;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-127), (int) (byte)64, false);
      assertEquals("0:    iastore\n1:    impdep2\n2:    areturn\n3:    lor\n4:    astore_1\n5:    lstore_1\n6:    astore_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "i2b";
      boolean boolean0 = false;
      Utility.compactClassName("i2b", false);
      Utility.isJavaIdentifierPart('F');
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("i2b", (String[]) null);
      try { 
        Utility.typeOfSignature("()Li2b;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ()Li2b;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)79;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.toString();
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-44), (int) (byte)40);
      Utility.accessToString(123);
      Utility.classOrInterface((byte) (-40));
      Utility.clearBit(1283, 47);
      // Undeclared exception!
      try { 
        Utility.signatureToString("/", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false, true);
      Utility.isSet(802, 68);
      String string0 = ".3%sx%";
      try { 
        Utility.typeOfSignature(".3%sx%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .3%sx%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-4);
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)4, 225);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("if_icmpgt\t\t#1065", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)83;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 61, 2473, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "n}";
      stringArray0[1] = "baload";
      Utility.methodTypeToSignature("baload", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)115;
      byteArray0[8] = (byte) (-66);
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantLong constantLong0 = new ConstantLong((byte)51);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)18, (int) (byte)115);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 233. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "\"";
      Utility.compactClassName("\"", "\"", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte) (-2);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2195, (int) (byte)73, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte)31;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-111);
      byteArray1[1] = (byte)45;
      byteArray1[2] = (byte)77;
      byteArray1[3] = (byte)114;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-111), 43);
      assertEquals("0:    i2b\n1:    aload_3\n2:    astore_2\n3:    frem\n", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)103;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("06 26 c5 6e 67");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 06 26 c5 6e 67
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "_/tb)ng;zw;[5=";
      MockPrintStream mockPrintStream0 = new MockPrintStream("_/tb)ng;zw;[5=");
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "_/tb)ng;zw;[5=", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      Utility.printArray((PrintStream) mockPrintStream1, objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      String string1 = "2y.Yx_O";
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      try { 
        Utility.methodSignatureArgumentTypes("2y.Yx_O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2y.Yx_O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)60, (byte)60);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-66), (byte) (-105));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(3259, 3259);
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(190, (byte) (-50));
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("astore\t\t%60", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)95;
      int int0 = 615;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 615, (int) (byte)62, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "> VmmN/6mp\\h&_r^";
      try { 
        Utility.typeOfSignature("> VmmN/6mph&_r^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: > VmmN/6mph&_r^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)86;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)2, (int) (byte)75, false);
      assertEquals("2:    astore_0\n3:    fload_1\n4:    iconst_m1\n5:    sastore\n", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-105);
      Constant[] constantArray0 = new Constant[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass(dataInputStream0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      Constant constant0 = constantClass1.copy();
      constantArray0[0] = constant0;
      ConstantString constantString0 = new ConstantString(dataInputStream0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(191, (byte) (-125));
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantClass constantClass2 = new ConstantClass((-882));
      constantArray0[3] = (Constant) constantClass2;
      ConstantDouble constantDouble0 = new ConstantDouble(191);
      constantArray0[4] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)8, 159);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "putfield";
      stringArray0[1] = "putfield";
      stringArray0[2] = "putfield";
      stringArray0[3] = "putfield";
      stringArray0[4] = "putfield";
      Utility.methodTypeToSignature("putfield", stringArray0);
      boolean boolean0 = false;
      Utility.printArray((Object[]) stringArray0, false);
      try { 
        Utility.typeOfSignature("Ke2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ke2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "jsr_w";
      stringArray0[1] = "jsr_w";
      Utility.methodTypeToSignature("jsr_w", stringArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)72;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)66, 95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("|}D7Z;j`.", false);
      byte[] byteArray1 = new byte[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|}D7Z;j`.");
      byteArray1[0] = (byte) (-61);
      byteArray1[1] = (byte) (-46);
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte) (-125);
      byteArray1[4] = (byte) (-46);
      Utility.equals(byteArray0, byteArray1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteSequence0.readByte();
      Utility.convertString("monitorexit");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("|}D7Z;j`.", "monitorexit", "TYzL/bPg5xuJI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: |}D7Z;j`.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-48);
      byteArray0[0] = (byte) (-48);
      byte byte1 = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), (-2100));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      try { 
        Utility.decode("oK1 mEJ]fpsHZ$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-120);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-623), (int) (byte) (-43));
      assertEquals("0:    iconst_4\n1:    ifge\t\t#-10752\n4:    l2i\n", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-113);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("d2l", string0);
      
      String string1 = Utility.methodTypeToSignature("if_icmpgt", (String[]) null);
      assertEquals("()Lif_icmpgt;", string1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.accessToString(88, true);
      Utility.getSignature("static final volatile");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)98;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("6#+a8>Z?m");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 255, (-2040), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('o');
      assertTrue(boolean0);
      
      Utility.searchOpcode(">");
      String string0 = Utility.convertString("||||||||||");
      assertEquals("||||||||||", string0);
      
      short short0 = Utility.searchOpcode("||||||||||");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.classOrInterface(181);
      assertEquals("class", string1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "class";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "||||||||||";
      objectArray0[3] = (Object) "||||||||||";
      objectArray0[4] = (Object) "||||||||||";
      objectArray0[5] = (Object) ">";
      objectArray0[6] = (Object) "class";
      objectArray0[7] = (Object) "||||||||||";
      objectArray0[8] = (Object) "||||||||||";
      String string2 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string2);
      
      String string3 = Utility.accessToString((int) (short) (-1), true);
      assertEquals("public private protected static final volatile transient native abstract strictfp synthetic annotation enum", string3);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((short) (-1));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)94, (short) (-1));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantClass constantClass0 = new ConstantClass(187);
      constantArray0[2] = (Constant) constantClass0;
      ConstantLong constantLong0 = new ConstantLong(1L);
      constantArray0[3] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string4 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("if_icmpeq\t\t#7068", string4);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "org.apache.bcel.generic.Type$3";
      try { 
        Utility.decode("org.apache.bcel.generic.Type$3", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("W HFa^x OYG", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W HFa^x OYG'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("From\tTo\tHandler\tType\n");
      String string0 = "czMA}dJS ):";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("czMA}dJS ):", "From\tTo\tHandler\tType\n", "czMA}dJS ):");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: czMA}dJS ):
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)49;
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("areturn");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantInteger constantInteger0 = new ConstantInteger(79);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(501, (byte)64);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)76, 155);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.fillup("ldc2_w", 3, false, 'E');
      Utility.accessToString((-408));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)118;
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-73));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("ldc2_w");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantClass constantClass0 = new ConstantClass(60);
      constantArray0[2] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-17), 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 61369. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = Utility.decode("org.apache.commons.io.filefilter.SuffixFileFilter", false);
      Utility.compactClassName("<illegal opcode>", "Bogus", false);
      Utility.accessToString((-1646), false);
      Constant[] constantArray0 = new Constant[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(49, byteArrayInputStream0.available());
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(dataInputStream0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(246, (-1646));
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger(dataInputStream0);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantFloat constantFloat0 = new ConstantFloat((-1646));
      constantArray0[3] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (-1646), 246);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) constantArray0[3];
      objectArray0[1] = (Object) "<illegal opcode>";
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("CONSTANT_Float[4](bytes = -1646.0), <illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)36;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-3570), (int) (byte)73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    impdep2
         // 1:    <illegal opcode>
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.replace("9i:", "lload_1", "goto");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)88;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-14), (int) (byte)88);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    <illegal opcode>\n1:    iload_2\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    pop2\n", "goto", "lload_1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    <illegal opcode>
         // 1:    iload_2
         // 2:    <illegal opcode>
         // 3:    <illegal opcode>
         // 4:    pop2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)79;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byteArray0[7] = (byte) (-65);
      byteArray0[8] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Utility.compactClassName(",U[^c#d]OH9v>aX");
      Utility.getSignature(",U[^c#d]OH9v>aX");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)51;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.getConstant(171);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-1);
      byte byte0 = (byte)45;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)41;
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(238);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantFloat constantFloat0 = new ConstantFloat(1115.129F);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 704, (-1906), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.classOrInterface((-1));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("From\tTo\tHandler\tType\n", "fload_2", "fload_2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: From\tTo\tHandler\tType
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte) (-110);
      byteArray0[0] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.convertString("i2c");
      String string0 = "freturn";
      boolean boolean0 = true;
      Utility.compactClassName("ya@u-7ALoAL", "freturn", true);
      constantPool0.setConstantPool((Constant[]) null);
      String string1 = ";";
      MockFile mockFile0 = new MockFile("KpyAh3", "i2c");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, ";");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \";\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-126), 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.format(242, 242, true, '%');
      try { 
        Utility.typeOfSignature(":X6qFv49y2g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :X6qFv49y2g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-126), 91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    ixor
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-126), 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-74);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1039, 9, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, true, true);
      Utility.compactClassName("jtn5J5rgv#6b:cfW%", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-70);
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong((byte) (-70));
      constantArray0[0] = (Constant) constantLong0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-3358), (byte)40);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1494, 1179, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.isSet((-1496), (-1496));
      Utility.compactClassName("putstatic", "V", false);
      Utility.convertString("putstatic");
      Utility.fillup("ineg", (-4850), false, '?');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)15;
      byteArray0[8] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, 111);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-103);
      byteArray0[0] = (byte) (-103);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 168, 2623, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.isJavaIdentifierPart('y');
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      String string0 = "e%fCF},vDxv";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "e%fCF},vDxv");
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)32;
      byte byte0 = (byte) (-35);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)9;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1833), (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "6P}[4SFBn'";
      try { 
        Utility.typeOfSignature("6P}[4SFBn'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6P}[4SFBn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)8, 511);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Da8lz7)G{");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "Da8lz7)G{";
      objectArray0[2] = (Object) "Da8lz7)G{";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "Da8lz7)G{";
      Utility.printArray(objectArray0, false);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) null;
      objectArray1[1] = (Object) null;
      objectArray1[2] = (Object) "null, Da8lz7)G{, Da8lz7)G{, null, Da8lz7)G{";
      objectArray1[3] = (Object) "null, Da8lz7)G{, Da8lz7)G{, null, Da8lz7)G{";
      objectArray1[4] = (Object) "Da8lz7)G{";
      objectArray1[5] = (Object) null;
      objectArray1[6] = (Object) "null, Da8lz7)G{, Da8lz7)G{, null, Da8lz7)G{";
      objectArray1[7] = (Object) null;
      objectArray1[8] = (Object) "null, Da8lz7)G{, Da8lz7)G{, null, Da8lz7)G{";
      Utility.printArray(objectArray1, true, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Utility.isJavaIdentifierPart('A');
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.LocalVariable", false);
      Utility.fillup("org.apache.bcel.classfile.LocalVariable", 80, false, 'A');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("4P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.clearBit(124, 124);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cR(OH>0vPx";
      stringArray0[1] = "\"Dx2Zb&c7E1";
      Utility.methodTypeToSignature("\"Dx2Zb&c7E1", stringArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte) (-127);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3098, 242);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)21;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3068), (-3754));
      assertEquals("0:    lstore\t\t%17\n2:    ladd\n3:    istore\t\t%21\n", string1);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "0:    lstore\t\t%17\n2:    ladd\n3:    istore\t\t%21\n";
      objectArray0[2] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[3] = (Object) (byte)55;
      objectArray0[4] = (Object) "0:    lstore\t\t%17\n2:    ladd\n3:    istore\t\t%21\n";
      objectArray0[5] = (Object) (byte)21;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      Utility.printArray(objectArray0, true);
      String string2 = Utility.fillup("LocalVariable", (byte)55, true, 'M');
      assertEquals("LocalVariableMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "=K=q";
      try { 
        Utility.typeOfSignature("=K=q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =K=q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-QG1";
      stringArray0[1] = "-QG1";
      stringArray0[2] = "-QG1";
      Utility.methodTypeToSignature("-QG1", stringArray0);
      try { 
        Utility.typeOfSignature("-QG1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -QG1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Utility.searchOpcode("newarray");
      Utility.setBit((short)188, (short)188);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-4);
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte) (-53);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)33, (-1446));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 51233. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4[<z(,m;V(K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4[<z(,m;V(K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)17;
      Utility.toHexString(byteArray0);
      Utility.format(1488, 41, false, '/');
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1165));
      constantArray0[0] = (Constant) constantMethodType0;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-69);
      byteArray1[1] = (byte)100;
      byteArray1[2] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 68, 41, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("Dont call getValueFloat() on a non FLOAT ElementValue");
      Utility.signatureToString("Dont call getValueFloat() on a non FLOAT ElementValue", true);
      boolean boolean0 = false;
      Utility.compactClassName("\\", false);
      try { 
        Utility.methodSignatureArgumentTypes("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0, true, true);
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("if_icmpge\t\t#31867", string2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "TE";
      Utility.typeOfSignature("TE");
      String string1 = "!D`b;b";
      String string2 = ":b-^X";
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.setBit(97, (-717));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)98;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(20, 20);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)98, 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "UiGc:i!";
      try { 
        Utility.typeOfSignature("UiGc:i!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UiGc:i!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)109;
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("YalKsq1bZIe/,Y6Fs[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YalKsq1bZIe/,Y6Fs['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "KeHG{%";
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("KeHG{%", stringArray0);
      Utility.typeOfMethodSignature("()LKeHG{%;");
      Utility.decode("()LKeHG{%;", false);
      try { 
        Utility.methodSignatureArgumentTypes("KeHG{%", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KeHG{%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)28;
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)2;
      Utility.encode(byteArray0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.convertString("$i$5d$7fP$C");
      char char0 = 'n';
      Utility.isJavaIdentifierPart('n');
      int int0 = 71;
      String string0 = Utility.format(71, 3685, true, 'n');
      Utility.compactClassName(string0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)80, (int) (byte)127, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = Utility.accessToString(3302, false);
      assertEquals("private protected synchronized volatile transient abstract strictfp", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fstore\t\t%43", string1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = Utility.accessToString(2197);
      assertEquals("public protected final transient strictfp", string0);
      
      Utility.compactClassName("\"", false);
      Utility.fillup("\"", 2197, false, 'i');
      boolean boolean0 = Utility.isSet(2197, 192);
      assertTrue(boolean0);
      
      String string1 = Utility.format(62, 98, true, 'd');
      assertEquals("62dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd", string1);
      
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "62dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd";
      stringArray0[1] = "62dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd";
      stringArray0[2] = "\"";
      String string2 = Utility.methodTypeToSignature("\r", stringArray0);
      assertEquals("(L62dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd;L62dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd;L\";)L;", string2);
      
      String string3 = Utility.printArray((Object[]) stringArray0, false, false);
      assertNotNull(string3);
      assertEquals("62dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd, 62dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd, \"", string3);
      
      byte byte0 = Utility.typeOfSignature("Jv?");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DLGtG");
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)77;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)77;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 39, 3, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = 7;
      Utility.accessToString(7, true);
      Utility.encode(byteArray0, true);
      Utility.isJavaIdentifierPart('y');
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.format(6, 6, false, '/');
      assertEquals("/////6", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)75;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("/////6");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantUtf8.printStats();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-108), (-149));
      assertEquals("0:    astore_1\n1:    iconst_m1\n2:    dload_0\n3:    swap\n4:    arraylength\n5:    lcmp\n6:    astore_0\n", string1);
      
      String string2 = Utility.getSignature("0:    astore_1\n1:    iconst_m1\n2:    dload_0\n3:    swap\n4:    arraylength\n5:    lcmp\n6:    astore_0\n");
      assertEquals("L0:;", string2);
      
      String string3 = Utility.accessToString((-6592), false);
      assertEquals("volatile interface abstract annotation enum", string3);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "newarray";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(T$]Q*X4)IHB*e0<p >", "newarray", "(T$]Q*X4)IHB*e0<p >");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T$]Q*X4)IHB*e0<p >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte) (-65);
      byteArray0[8] = (byte) (-76);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2018, 42);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("%f[D{JuQqHI>,M~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %f[D{JuQqHI>,M~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)95;
      byteArray0[0] = (byte)95;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)19;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      String string0 = ";IJ";
      // Undeclared exception!
      try { 
        Utility.signatureToString(";IJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;IJ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass((-5623));
      constantArray0[0] = (Constant) constantClass0;
      ConstantClass constantClass1 = new ConstantClass(782);
      constantArray0[1] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = "N&03";
      try { 
        Utility.typeOfSignature("N&03");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N&03
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Utility.decode("#wGNc$e8E/{S", false);
      Utility.convertString("Byte code error: ");
      Utility.signatureToString("Byte code error: ", false);
      Utility.getSignature("}o6Phk^Q0jnBH");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "#wGNc$e8E/{S", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "Invalid method signature: ";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid method signature: ");
      Utility.compactClassName("Invalid method signature: ", "Invalid method signature: ", true);
      String string1 = "<Unknown>";
      try { 
        Utility.typeOfSignature("<Unknown>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <Unknown>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)119;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("Ap", true);
      Utility.convertString("Ap");
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)119;
      byteArray1[1] = (byte)13;
      byteArray1[2] = (byte)71;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3540);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 2163, (int) (byte)13, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Utility.searchOpcode("G[PRM#`\"!ANR8~");
      try { 
        Utility.methodSignatureReturnType("G[PRM#`\"!ANR8~", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G[PRM#`\"!ANR8~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "#wGNc$e8E/{S";
      Utility.decode("#wGNc$e8E/{S", false);
      Utility.convertString("Byte code error: ");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("\t(wide)", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t(wide)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "bbBS4");
      Utility.setBit(1737, 1737);
      Utility.methodTypeToSignature("bbBS4", (String[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)122, (int) (byte) (-125), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)12;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)93, (int) (byte) (-88), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-17);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.convertString("putstatic");
      Utility.fillup("putstatic", (-1615492241), false, 'H');
      try { 
        Utility.typeOfSignature("3U:|LG*l$d$206\"A)$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3U:|LG*l$d$206\"A)$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("int", "invokestatic", "invokestatic", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: int
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Utility.accessToString((-1735), true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-16);
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "P?J69L2ANXb,&mp}";
      try { 
        Utility.typeOfSignature("P?J69L2ANXb,&mp}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P?J69L2ANXb,&mp}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("The magic number must contain at least one byte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The magic number must contain at least one byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "PC*l4J7L";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PC*l4J7L");
      Utility.format((-1657), (-1436688057), false, 'G');
      // Undeclared exception!
      try { 
        Utility.signatureToString("PC*l4J7L", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PC*l4J7L'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("()L;", string0);
      
      String string1 = Utility.methodSignatureToString("()L;", "", "", false);
      assertEquals(" ()", string1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)84;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)80;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)84, 1958, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.methodSignatureReturnType("JH7w=,;;V5zdZ&J*4d", true);
      try { 
        Utility.methodSignatureReturnType("]1VYjtrw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]1VYjtrw'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("<)9?8MYQ2g_Ri^vwck");
      PrintStream printStream0 = mockPrintStream0.append('e');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) printStream0;
      objectArray0[1] = (Object) "<)9?8MYQ2g_Ri^vwck";
      objectArray0[2] = (Object) mockPrintStream0;
      Utility.printArray(printStream0, objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)43;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-30);
      byteArray1[1] = (byte) (-117);
      byteArray1[2] = (byte) (-117);
      byteArray1[3] = (byte) (-85);
      byteArray1[4] = (byte)18;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-31);
      byte byte0 = (byte)77;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)47;
      ConstantPool constantPool0 = null;
      int int0 = 98;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 83, 98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Utility.isJavaIdentifierPart('y');
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "e%fCF},vDxv");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_[gj|*P\"!fy");
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)9;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1833), (int) (byte) (-106), true);
      try { 
        Utility.decode("e%fCF},vDxv", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Utility.compactClassName(" B|W,i1'\"M@!2NNJ4");
      Utility.accessToString(1994);
      Utility.printArray((Object[]) null);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.classOrInterface(2021);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.compactClassName("interface");
      Utility.isJavaIdentifierPart('$');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 354, 2021);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("lrem", false);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(4096);
      constantArray0[0] = (Constant) constantString0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(4096, 13);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 4096, 4096, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = false;
      Utility.methodSignatureReturnType("SAME", false);
      String string0 = "WW;[\\oM7[_!XpUK3srf";
      // Undeclared exception!
      try { 
        Utility.getSignature("WW;[oM7[_!XpUK3srf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[oM7[_!XpUK3srf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "OUK%";
      stringArray0[1] = "OUK%";
      stringArray0[2] = "OUK%";
      stringArray0[3] = "OUK%";
      stringArray0[4] = "OUK%";
      stringArray0[5] = "OUK%";
      Utility.methodTypeToSignature("OUK%", stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("U5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Utility.isJavaIdentifierPart('U');
      Utility.format(2156, (-458), true, 'Y');
      try { 
        Utility.typeOfSignature("2156");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2156
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)93;
      byte byte0 = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)84;
      byte byte1 = (byte) (-125);
      byteArray0[3] = (byte) (-125);
      int int0 = 0;
      Utility.codeToString(byteArray0, (ConstantPool) null, 0, 1341);
      String string0 = "KCPIjd-k**(nIM;+K>";
      try { 
        Utility.methodSignatureReturnType("KCPIjd-k**(nIM;+K>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KCPIjd-k**(nIM;+K>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "invokevirtual";
      Utility.methodTypeToSignature("invokevirtual", stringArray0);
      Utility.methodSignatureArgumentTypes("(Linvokevirtual;)Linvokevirtual;");
      boolean boolean0 = false;
      Utility.compactClassName("invokevirtual", false);
      Utility.methodSignatureReturnType("I/^Z:</5GxHnz,", false);
      Utility.typeOfSignature("I/^Z:</5GxHnz,");
      try { 
        Utility.methodSignatureReturnType("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `int'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-58);
      byte byte0 = (byte) (-128);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-15);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 191, 191, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)105;
      byte byte0 = (byte)34;
      byteArray0[1] = (byte)34;
      byte byte1 = (byte) (-50);
      byteArray0[2] = (byte) (-50);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte)95;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "!`fLF,wr";
      try { 
        Utility.typeOfSignature("!`fLF,wr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: `fLF,wr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("+'0eoBB)?H4plS");
      mockPrintWriter0.flush();
      mockPrintWriter0.println('F');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      try { 
        Utility.typeOfSignature("+'0eoBB)?H4plS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '0eoBB)?H4plS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("O_btQ>5vu]V`", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O_btQ>5vu]V`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "NkuNuv\\OO2Naa";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("NkuNuvOO2Naa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NkuNuvOO2Naa'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("ZJ*O_B7}5j");
      assertEquals((byte)4, byte0);
      
      String string0 = Utility.methodSignatureReturnType("ZJ*O_B7}5j");
      assertEquals("boolean", string0);
      
      String string1 = Utility.classOrInterface((byte)4);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Utility.replace("invokevirtual", "E|Xje9Ln", "0iGT>[ )+~");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)99;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)85;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 137, (int) (byte)102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = 16384;
      Utility.clearBit(16384, 16384);
      Utility.setBit((-1943), 16384);
      boolean boolean0 = true;
      Utility.compactClassName("L", true);
      Utility.classOrInterface((-1943));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("L");
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      Utility.setBit(16384, (-1943));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)78;
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(516L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 79, (-1943), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("Q$GJE!)N ozXqGK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q$GJE!)N ozXqGK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      int int0 = (-1506);
      char char0 = ']';
      Utility.format((-1506), (-1506), false, ']');
      String string0 = "X?;|P!m";
      // Undeclared exception!
      try { 
        Utility.signatureToString("X?;|P!m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X?;|P!m'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Utility.signatureToString("CONSTANT_NameAndType");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)117;
      byte byte0 = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-71);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantMethodType constantMethodType0 = null;
      try {
        constantMethodType0 = new ConstantMethodType((ConstantMethodType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = " methods:\n";
      Utility.convertString(" methods:\n");
      try { 
        Utility.methodSignatureReturnType("ifnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifnull'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Utility.clearBit(16384, 16384);
      Utility.setBit((-1943), 16384);
      Utility.compactClassName("L", true);
      Utility.classOrInterface((-1943));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("L");
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      Utility.setBit(16384, (-1943));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)78;
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(516L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 79, (-1943), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)45;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)54;
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("(r2{.kz5NFA1cng/L");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "(r2{.kz5NFA1cng/L";
      stringArray0[1] = "(r2{.kz5NFA1cng/L";
      stringArray0[2] = "(r2{.kz5NFA1cng.L";
      stringArray0[3] = "(r2{.kz5NFA1cng/L";
      stringArray0[4] = "(r2{.kz5NFA1cng.L";
      stringArray0[5] = "(r2{.kz5NFA1cng/L";
      stringArray0[6] = "(r2{.kz5NFA1cng.L";
      stringArray0[7] = "(r2{.kz5NFA1cng.L";
      stringArray0[8] = "(r2{.kz5NFA1cng/L";
      Utility.methodTypeToSignature("(r2{.kz5NFA1cng/L", stringArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-423), (-3721), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    newarray\t\t<array>
         // 2:    <illegal opcode>
         // 3:    aload_3
         // 4:    saload
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "goto_w\t\t#-765364736";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) (byte) (-56);
      objectArray0[5] = (Object) "goto_w\t\t#-765364736";
      objectArray0[6] = (Object) (byte)97;
      objectArray0[7] = (Object) "goto_w\t\t#-765364736";
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.z\"MJ~vWR$X");
      Utility.clearBit(16, 16);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 10, 10, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("\n");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.getSignature("\n");
      try { 
        Utility.methodSignatureArgumentTypes("ireturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ireturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte)16;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 566, 35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet((-637), 10);
      Utility.classOrInterface((-637));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((-2987));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.setBit(102, (byte) (-98));
      String string0 = "ladd";
      String string1 = "\\'";
      String string2 = null;
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 92
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-42);
      byteArray1[1] = (byte)73;
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte)122;
      byteArray1[4] = (byte)122;
      byteArray1[5] = (byte)87;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 69, 120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "monitorenter";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "monitorenter";
      Utility.methodTypeToSignature("monitorenter", stringArray0);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)18;
      byteArray0[0] = (byte)18;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte1 = (byte)23;
      byteArray0[1] = (byte)23;
      byte byte2 = (byte)7;
      byteArray0[2] = (byte)7;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.decode("#[:\"$.SLIz5eMz/tZ4", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = "'y_(T";
      try { 
        Utility.typeOfSignature("'y_(T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'y_(T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "w";
      boolean boolean0 = false;
      Utility.compactClassName("w", "w", false);
      String string1 = "I8M";
      Utility.methodSignatureReturnType("I8M");
      int int0 = 10;
      int int1 = 470;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte)122;
      byteArray0[8] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -44
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-83);
      Utility.encode(byteArray0, false);
      Utility.isJavaIdentifierPart('#');
      try { 
        Utility.methodSignatureArgumentTypes("monitorexit", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorexit
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "WF!^) I";
      try { 
        Utility.typeOfSignature("WF!^) I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WF!^) I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("org.apache.bcel.classfile.ConstantString", "", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 24
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string0 = "9";
      try { 
        Utility.typeOfSignature("9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = "$V4|\\Pam17&'o4[En3";
      Utility.convertString("$V4|Pam17&'o4[En3");
      // Undeclared exception!
      try { 
        Utility.signatureToString("$V4|\\Pam17&'o4[En3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$V4|\\Pam17&'o4[En3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)24;
      byteArray0[0] = (byte)24;
      byte byte1 = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)37;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "8da|8p3YQ-QimiY@}s8";
      try { 
        Utility.typeOfSignature("8da|8p3YQ-QimiY@}s8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8da|8p3YQ-QimiY@}s8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("-~yPBQz;;df=j)H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.compactClassName("{NDX~!Vuaw3cZZ", false);
      Utility.format(8192, 8192, false, '/');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-92);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 14, (-3391));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("L><(9FV#J4;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L><(9FV#J4;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.isSet(1609, 1609);
      Utility.format(1609, (-3016), false, '\\');
      Utility.isJavaIdentifierPart('+');
      Utility.printArray((Object[]) null);
      Utility.accessToString(1733, true);
      try { 
        Utility.typeOfMethodSignature("1609");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1609
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.classOrInterface(49);
      try { 
        Utility.typeOfSignature("7-QW0\"c<;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7-QW0\"c<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("+4t#(B6%dvUkeX3", false);
      String string0 = "MxsY_A^H,QfA\"kZ}`n";
      // Undeclared exception!
      try { 
        Utility.signatureToString("MxsY_A^H,QfA\"kZ}`n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MxsY_A^H,QfA\"kZ}`n'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.format(1024, 45, false, 's');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "sssssssssssssssssssssssssssssssssssssssss1024";
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "sssssssssssssssssssssssssssssssssssssssss1024";
      objectArray0[4] = (Object) "sssssssssssssssssssssssssssssssssssssssss1024";
      objectArray0[5] = (Object) null;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      Utility.clearBit((-1464), 68);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("V]2jUDs5i}^");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "{sssssssssssssssssssssssssssssssssssssssss1024, null, java.lang.Object@24b61ec3, sssssssssssssssssssssssssssssssssssssssss1024, sssssssssssssssssssssssssssssssssssssssss1024, null}", objectArray0);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) "sssssssssssssssssssssssssssssssssssssssss1024";
      objectArray1[1] = (Object) "{sssssssssssssssssssssssssssssssssssssssss1024, null, java.lang.Object@24b61ec3, sssssssssssssssssssssssssssssssssssssssss1024, sssssssssssssssssssssssssssssssssssssssss1024, null}";
      objectArray1[2] = (Object) locale0;
      objectArray1[3] = (Object) "{sssssssssssssssssssssssssssssssssssssssss1024, null, java.lang.Object@24b61ec3, sssssssssssssssssssssssssssssssssssssssss1024, sssssssssssssssssssssssssssssssssssssssss1024, null}";
      objectArray1[4] = object0;
      objectArray1[5] = (Object) null;
      objectArray1[6] = (Object) null;
      Utility.printArray(printWriter0, objectArray1);
      Utility.methodSignatureReturnType("V]2jUDs5i}^");
      try { 
        Utility.methodSignatureReturnType("K$A-~0tXO.s<U\"Td@", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K$A-~0tXO.s<U\"Td@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("java.lang.Throwable", "java.lang.Throwable", false);
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.accessToString(4360);
      Utility.isSet(103, 103);
      // Undeclared exception!
      try { 
        Utility.signatureToString("QA W@4oNgE)BpzL%9u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QA W@4oNgE)BpzL%9u'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = "VXpoo[[";
      Utility.typeOfSignature("VXpoo[[");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("VXpoo[[", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: VXpoo[[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      short short0 = Utility.searchOpcode("q~;f50??#6+akBN");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-40);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-40), (int) (byte) (-40), true);
      assertEquals("0:    if_icmple\t\t#431\n3:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, false);
      try { 
        Utility.methodSignatureReturnType("EI.-B!Dw iVsA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EI.-B!Dw iVsA'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<t`4[[jc${@l#9n";
      stringArray0[1] = "<t`4[[jc${@l#9n";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("<t`4[[jc${@l#9n", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[[jc${@l#9n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "?1y\\U/\"^zJ?S?j!";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?1yU/\"^zJ?S?j!");
      boolean boolean0 = true;
      char char0 = '&';
      Utility.fillup("?1yU/\"^zJ?S?j!", (-3237), true, '&');
      try { 
        Utility.typeOfSignature("?1yU/\"^zJ?S?j!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?1yU/\"^zJ?S?j!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-78), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DLGtG");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte) (-3);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 39, 3, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = "V";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.signatureToString("V", true);
      Utility.signatureToString("V");
      String string1 = "anewarray";
      // Undeclared exception!
      try { 
        Utility.signatureToString("anewarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `anewarray'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = "[]";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = "B#,B%j.29nX~&#\\H";
      Utility.convertString("B#,B%j.29nX~&#H");
      boolean boolean0 = false;
      Utility.accessToString(129, false);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-32);
      byteArray0[0] = (byte) (-32);
      byte byte1 = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byte byte2 = (byte)59;
      byteArray0[2] = (byte)59;
      byte byte3 = (byte) (-119);
      byteArray0[3] = (byte) (-119);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("public transient", "R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"R\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      short short0 = Utility.searchOpcode("ifnull");
      assertEquals((short)198, short0);
      
      String string0 = Utility.replace("ifnull", "ifnull", "-73%B");
      assertEquals("-73%B", string0);
      
      short short1 = Utility.searchOpcode("v|up&j3QzQ|m1lB]");
      assertEquals((short) (-1), short1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-112);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 150, 193, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.codeToString(byteArray0, constantPool0, (-1567), (-1652), true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 77, (-1722321287), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = Utility.replace("H", "H", "H");
      assertEquals("H", string0);
      
      byte byte0 = Utility.typeOfSignature("B};gWH !]n");
      assertEquals((byte)8, byte0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "H";
      objectArray0[1] = (Object) "H";
      objectArray0[2] = (Object) "H";
      objectArray0[3] = (Object) "B};gWH !]n";
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals("H, H, H, B};gWH !]n", string1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = "z\"MJ~vWR$X";
      Utility.convertString("z\"MJ~vWR$X");
      Utility.compactClassName("z\"MJ~vWR$X");
      String string1 = "lFw~8v@MO'";
      boolean boolean0 = true;
      char char0 = 'X';
      Utility.fillup("lFw~8v@MO'", (-338), true, 'X');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lFw~8v@MO'", "z\"MJ~vWR$X", "lFw~8v@MO'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lFw~8v@MO'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.format(78, 78, false, '8');
      assertEquals("888888888888888888888888888888888888888888888888888888888888888888888888888878", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dstore_2", string1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.classOrInterface(256);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-788), (int) (byte)86);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = Utility.compactClassName("Illegal type: ");
      assertEquals("Illegal type: ", string0);
      
      String string1 = Utility.classOrInterface((-2160));
      assertEquals("interface", string1);
      
      Utility.format(1126, 1126, true, '$');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte)60;
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("a4 db 53 ab 56 2a f3 3c", string2);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java.lang.6+i|%W&0Z|L|49A_ >";
      stringArray0[1] = "java.lang.6+i|%W&0Z|L|49A_ >";
      stringArray0[2] = "java.lang.6+i|%W&0Z|L|49A_ >";
      stringArray0[3] = "java.lang.6+i|%W&0Z|L|49A_ >";
      stringArray0[4] = "long";
      String string0 = Utility.methodTypeToSignature("java.lang.6+i|%W&0Z|L|49A_ >", stringArray0);
      assertEquals("(Ljava/lang/6+i|%W&0Z|L|49A_;Ljava/lang/6+i|%W&0Z|L|49A_;Ljava/lang/6+i|%W&0Z|L|49A_;Ljava/lang/6+i|%W&0Z|L|49A_;J)Ljava/lang/6+i|%W&0Z|L|49A_;", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = "lookupswitch";
      boolean boolean0 = false;
      Utility.fillup("lookupswitch", (-1381), false, 'h');
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0bi-DI[qm2A/f):";
      stringArray0[1] = "0bi-DI[qm2A/f):";
      stringArray0[2] = "0bi-DI[qm2A/f):";
      stringArray0[3] = "0bi-DI[qm2A/f):";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("0bi-DI[qm2A/f):", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[qm2A/f):
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("@307$r`\"~Hnt", false);
      assertEquals(11, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      Utility.accessToString(67);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)90;
      byteArray0[0] = (byte)90;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)88;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)90;
      Utility.equals(byteArray0, byteArray1);
      Utility.accessToString((int) (byte)90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      try { 
        byteSequence0.readFloat();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Lorg/apache/bcel/classfile/Utility$JavaReader;V");
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.getSignature("\t\t<");
      String string0 = "R*q8PBmPuBni/H<XJ";
      try { 
        Utility.methodSignatureArgumentTypes("R*q8PBmPuBni/H<XJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R*q8PBmPuBni/H<XJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      Utility.methodTypeToSignature("", (String[]) null);
      String string1 = "|:g,[sdrSxW V6";
      String string2 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("|:g,[sdrSxW V6", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.compactClassName("Illegal type: ", true);
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.accessToString(182, true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "private protected final transient";
      stringArray0[1] = "><(9FV#J4";
      Utility.methodTypeToSignature("Illegal type: ", stringArray0);
      try { 
        Utility.decode("><(9FV#J4", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = "[]";
      // Undeclared exception!
      try { 
        Utility.getSignature("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)34;
      byteArray0[8] = (byte) (-13);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(89);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = Utility.compactClassName("6+i|%W&0Z|L|49A_ >");
      assertEquals("6+i|%W&0Z|L|49A_ >", string0);
      
      int int0 = Utility.clearBit(67, 84);
      assertEquals(67, int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Utility.isJavaIdentifierPart('#');
      String string0 = "InitObject";
      Utility.typeOfSignature("InitObject");
      String string1 = "h";
      String string2 = null;
      int int0 = 32;
      int int1 = 2742;
      DataInput dataInput0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format(63, (-2430), false, 'c');
      Utility.isJavaIdentifierPart('A');
      Utility.clearBit(63, (-2430));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = "n\"";
      Utility.fillup("n\"", (-210), true, ';');
      Utility.methodSignatureReturnType("F&dLAykyWg-", true);
      Utility.format((-1606), 77, true, '_');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "n\"", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      int int0 = 158;
      Utility.fillup("Nyb5eEcI4x|z/oLQ.", 158, true, '+');
      PrintWriter printWriter0 = null;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Nyb5eEcI4x|z/oLQ.++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";
      objectArray0[1] = (Object) "Nyb5eEcI4x|z/oLQ.++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";
      objectArray0[2] = (Object) "Nyb5eEcI4x|z/oLQ.++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";
      objectArray0[3] = (Object) "Nyb5eEcI4x|z/oLQ.";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.setBit(92, 82);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)49;
      byte byte0 = (byte)11;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 82, (int) (byte)55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = "[*<\\";
      MockPrintStream mockPrintStream0 = new MockPrintStream("[*<");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-104);
      mockPrintStream0.print((int) (byte)83);
      mockPrintStream0.println((Object) "[*<");
      byteArray0[5] = (byte)58;
      mockPrintStream0.write((-1018));
      byteArray0[6] = (byte)39;
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintStream0.write(byteArray0, 110, (int) (byte)83);
      mockPrintStream0.print("[*<");
      mockPrintStream0.println(0L);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "[*<";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      try { 
        Utility.typeOfSignature("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-54);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte) (-42);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readLong();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal opcode>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = "class";
      Utility.replace("US3U|", "\t<", "class");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("US3U|", "\t\t#", "interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: US3U|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = "The magic number cannot be null";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The magic number cannot be null");
      String string1 = "R{@-";
      try { 
        Utility.methodSignatureReturnType("R{@-", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R{@-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "LJ}";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LJ}");
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      try { 
        Utility.methodSignatureReturnType("LJ}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LJ}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.methodSignatureReturnType("D0, = z'@dDyof\"", false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.searchOpcode(",Qy3s?I$QG,vFd8u(i");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("D0, = z'@dDyof\"", "double", "invokespecial", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: D0, = z'@dDyof\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)1;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("cf 93 01", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte) (-109);
      objectArray0[1] = (Object) (byte) (-109);
      objectArray0[2] = (Object) (byte)1;
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals("-109, -109, 1", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = " (";
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature(" (", stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "()L(;");
      String string1 = "Q";
      try { 
        Utility.methodSignatureArgumentTypes("Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.printArray(objectArray0, false);
      Utility.decode("J}s$C<N<8O.Kpc!A", false);
      boolean boolean1 = true;
      try { 
        Utility.methodSignatureReturnType("java.lang.Object@2fbd7d26, java.lang.Object@5f960265, java.lang.Object@1adc34c5", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.Object@2fbd7d26, java.lang.Object@5f960265, java.lang.Object@1adc34c5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.compactClassName(", max_locals = ");
      Utility.isSet((-1586), (-1586));
      Utility.convertString(",pP>Ae");
      Utility.isJavaIdentifierPart('|');
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) ", max_locals = ";
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      objectArray0[5] = (Object) ",pP>Ae";
      Utility.printArray(objectArray0);
      Utility.decode(",pP>Ae", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("The FileFilter must not be null", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: The FileFilter must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("()L;", string0);
      
      Utility.methodSignatureToString("()L;", "", "$}7V2iEL@av~k{ulq", false);
      short short0 = Utility.searchOpcode("|Vne*4N");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.format((short) (-1), (short) (-1), false, 'e');
      assertEquals("-1", string1);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = "static";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("static", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `static'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Utility.accessToString(36, false);
      Utility.classOrInterface(36);
      // Undeclared exception!
      try { 
        Utility.signatureToString("protected synchronized");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `protected synchronized'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.setBit(108, 108);
      String string0 = ":[OK)xn^ J";
      String string1 = "\\t";
      MockFile mockFile0 = new MockFile(":[OK)xn^ J", "\t");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, ":[OK)xn^ J");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // :[OK)xn^ J
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      int int0 = 0;
      Utility.isSet(0, 0);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      int int0 = (-330);
      Utility.setBit((-330), (-765));
      String string0 = "ifgt";
      Utility.replace("JA(\"+I5$NRLH1;\u0001", "JA(\"+I5$NRLH1;\u0001", "ifgt");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("iAu+EB@:}mr#b=ZO", "iAu+EB@:}mr#b=ZO", "ifgt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iAu+EB@:}mr#b=ZO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "putfield";
      stringArray0[1] = "putfield";
      stringArray0[2] = "putfield";
      stringArray0[3] = "putfield";
      stringArray0[4] = "putfield";
      // Undeclared exception!
      try { 
        Utility.signatureToString("putfield");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `putfield'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Utility.getSignature("ifnull");
      Utility.typeOfSignature("Lifnull;");
      Utility.setBit(1146, 8192);
      Utility.accessToString(1147, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)14;
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "public private static final volatile abstract";
      objectArray0[1] = (Object) (byte)14;
      Utility.printArray(objectArray0, true);
      Utility.printArray(objectArray0, false, true);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfMethodSignature("public private static final volatile abstract");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private static final volatile abstract
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.getSignature("breakpoint");
      try { 
        Utility.methodSignatureArgumentTypes("\")", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \")
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)78;
      byte byte0 = (byte)44;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)122;
      Utility.equals(byteArray0, byteArray0);
      Utility.fillup("org.apache.bcel.classfile.Utility$JavaReader", (byte)24, true, '');
      Utility.compactClassName("if_acmpne", true);
      try { 
        Utility.typeOfSignature("\t\t<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Utility.accessToString(1850);
      // Undeclared exception!
      try { 
        Utility.signatureToString("private static final synchronized native interface abstract", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `private static final synchronized native interface abstract'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Utility.convertString("dTBs7az|`eA0v%i");
      String string0 = "Ees";
      try { 
        Utility.typeOfSignature("Ees");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ees
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-31);
      byteArray0[6] = (byte)74;
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)123;
      objectArray0[1] = (Object) (byte)51;
      objectArray0[2] = (Object) (byte)76;
      objectArray0[3] = (Object) (byte) (-105);
      objectArray0[4] = (Object) (byte)51;
      objectArray0[5] = (Object) (byte) (-105);
      Utility.printArray(objectArray0, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-31), 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.isSet(4657, 4657);
      assertFalse(boolean0);
      
      String string1 = Utility.accessToString(97);
      assertEquals("public synchronized volatile", string1);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Utility.isSet(252, 252);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
}
