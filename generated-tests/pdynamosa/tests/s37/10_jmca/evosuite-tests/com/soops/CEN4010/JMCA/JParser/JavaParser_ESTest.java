/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 01:27:08 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserConstants;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.ParseException;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParser_ESTest extends JavaParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R?>.K_0'~X");
      assertNotNull(stringReader0);
      
      SystemInUtil.addInputLine("Parse error at line ");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)65, (byte)65, (byte)74, (byte) (-46), (byte)35, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArray0.length);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)65, (byte)65, (byte)74, (byte) (-46), (byte)35, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)0, (byte)65, (byte)65, (byte)74, (byte) (-46), (byte)35, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser("R?>.K_0'~X");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MethodDeclaration(84);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 13.  Encountered: at
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isTransient(1948);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.TypeParameter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.BreakStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)50;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)121, (byte) (-74), (byte)122, (byte)50}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(4, byteArray0.length);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)121, (byte) (-74), (byte)122, (byte)50}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser0.LocalVariableDeclaration();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = null;
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.Arguments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SystemInUtil.addInputLine("q!`q|>=Wr+pyo4S_`");
      JavaParser javaParser0 = new JavaParser("tFoM]t6U>R`c$3");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ExplicitConstructorInvocation();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e\"G}Qzme");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.MultiplicativeExpression();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 10.  Encountered: <EOF> after : \"\\\"G}Qzm\\u007fe\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertNotNull(javaParser_ModifierSet0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.Block();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jvVeTv");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.BooleanLiteral();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: jvVeTv
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0, 2608);
      assertNotNull(bufferedInputStream0);
      
      JavaParser javaParser0 = new JavaParser(bufferedInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.InstanceOfExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("\",");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ForUpdate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("41z>O`(WI= T8G");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1135, 1135);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParser0.Expression();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(1137, javaCharStream0.getBeginColumn());
      assertEquals(1137, javaCharStream0.getEndColumn());
      assertEquals(1135, javaCharStream0.getLine());
      assertEquals(1135, javaCharStream0.getBeginLine());
      assertEquals(1137, javaCharStream0.getColumn());
      assertEquals(1135, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser(":g\"~i;@y3xb");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      StringReader stringReader0 = new StringReader(":g\"~i;@y3xb");
      assertNotNull(stringReader0);
      
      javaParser0.ReInit((Reader) stringReader0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.MemberValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: :
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$h.t-");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.StatementExpressionList();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("$r|9&bn");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.InclusiveOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("ov~[-Y{F>Z16!.]mu");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isSynchronized(97);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("-l*|jN,KQ+NA/k");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      javaParser0.ReInit((Reader) stringReader0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.CastExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isStrictfp((-221));
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertTrue(boolean0);
      
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.MemberValue();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Ty'?#");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "Ty'?#");
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser("Ty'?#");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.UnaryExpression();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: \"?\" (63), after : \"\\'\\u007f\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ForStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertNotNull(javaParser_ModifierSet0);
      
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.NormalAnnotation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isVolatile((-2316));
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser("sR[riv");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.enable_tracing();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("An interface cannot have initializers");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ContinueStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MethodDeclaration((-1097));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-152), (-152));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("i");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "q");
      assertTrue(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParser0.ResultType();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -152, column -151.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DP_`xjOZbNmY0ts!_4");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.MemberValue();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("r%f;J");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)74;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-35), (byte)35, (byte)76, (byte)65, (byte)0, (byte)74}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, byteArray0.length);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-35), (byte)35, (byte)76, (byte)65, (byte)0, (byte)74}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte) (-35), (byte)35, (byte)76, (byte)65, (byte)0, (byte)74}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParser0.token_source = javaParserTokenManager0;
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParser0.MethodDeclaration(1909);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("D");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PostfixExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#/");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 62, 62);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParser0.TryStatement();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 62, column 62.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("<?xml version='1.0' encoding='ISO-8859-1' ?>");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.CastExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("caK-eHgez>W/z;!KW0-");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.ArgumentList();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ExplicitConstructorInvocation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("#)/");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.RelationalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("D");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PrimitiveType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("i2LK(Dt1Ad7");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ClassOrInterfaceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("`");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MultiplicativeExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ImportDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iXjQ|8dYyM'5MP");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      int int0 = stringReader0.read();
      assertEquals(105, int0);
      
      javaParser0.EqualityExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.NormalAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 4.  Encountered: |
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SystemInUtil.addInputLine("^T}1)=mi");
      JavaParser javaParser0 = new JavaParser("^T}1)=mi");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ReferenceType();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("R");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JJTJavaParserState jJTJavaParserState0 = javaParser0.jjtree;
      assertNotNull(jJTJavaParserState0);
      
      javaParser0.jjtree = jJTJavaParserState0;
      try { 
        javaParser0.Annotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AdditiveExpression");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.ForInit();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.StatementExpressionList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 18.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      int int0 = JavaParser.ModifierSet.removeModifier(90, 1780);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("-");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      Token token0 = javaParser0.getNextToken();
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertEquals("", token0.toString());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ExplicitConstructorInvocation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sy'?#");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      Token token0 = javaParser0.getNextToken();
      assertFalse(javaParser0.lookingAhead);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertEquals("sy", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParser0.ClassOrInterfaceDeclaration(74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: \"?\" (63), after : \"\\'\\u007f\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.CompilationUnit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.CastLookahead();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-81)}, byteArray0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ExclusiveOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal((-1199));
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("float");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isNative(29);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Guz(YMKOT+&;3,%-|");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ReferenceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic(0);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertFalse(boolean0);
      
      InputStream inputStream0 = null;
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null, 32, (-572));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.MethodDeclaration((-1759));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'T';
      charArray0[1] = '7';
      charArray0[2] = ']';
      charArray0[3] = 'e';
      charArray0[4] = 'Q';
      charArray0[5] = '6';
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ConstructorDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W|;M$/mnc4pCqRr^0");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.VariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: ;
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("IkzV,KD2n1h{0");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.EmptyStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Block();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Guz(YMKOT+&;3,%-|");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.SwitchStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      JavaParser javaParser0 = new JavaParser(pushbackInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MemberValuePairs();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      MockFile mockFile0 = new MockFile("", "/!B(-ShR2qa!V[|#N");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("!B(-ShR2qa!V[|#N", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/!B(-ShR2qa!V[|#N", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      // Undeclared exception!
      try { 
        javaParser0.dump(printWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NormalAnnotation");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.ForUpdate();
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ReInit((Reader) stringReader0);
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("6O#7FBk}");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AnnotationTypeMemberDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PreIncrementExpression");
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PreIncrementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B{s,&'TV\"DLG9W+k");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.StatementExpressionList();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ArrayInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 5.  Encountered: &
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("D");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PreDecrementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isStatic(2610);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertTrue(boolean0);
      
      Token token0 = javaParser0.getToken(64);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(1, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertEquals("", token0.toString());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.ReferenceType();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      Token token0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "\"+=\"";
      // Undeclared exception!
      try { 
        javaParser0.MemberValueArrayInitializer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isProtected(35);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertTrue(boolean0);
      
      try { 
        javaParser0.FormalParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("%;'%-!gw@,p");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.StatementExpressionList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f$PH%ZF1$4Rgq");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.StatementExpression();
      assertFalse(javaParser0.lookingAhead);
      
      Token token0 = javaParser0.getNextToken();
      assertFalse(javaParser0.lookingAhead);
      assertEquals(5, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(108, token0.kind);
      assertEquals(5, token0.endColumn);
      assertNotNull(token0);
      assertEquals("%", token0.toString());
      
      javaParser0.EqualityExpression();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isSynchronized((-1260));
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.VariableInitializer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.WildcardBounds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertNotNull(javaParser_ModifierSet0);
      
      StringReader stringReader0 = new StringReader("MemberValueArrayInitializer");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ThrowStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: MemberValueArrayInitializer
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("ay");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ArrayInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.RSIGNEDSHIFT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6Xc~]UP6,");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6Xc~]UP6,");
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ';';
      charArray0[1] = '+';
      charArray0[2] = 'Q';
      charArray0[3] = ':';
      charArray0[4] = ')';
      charArray0[5] = '-';
      int int0 = stringReader0.read(charArray0);
      assertEquals(6, int0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'6', 'X', 'c', '~', ']', 'U'}, charArray0);
      
      javaParser0.Name();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.TypeParameters();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: ,
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("float");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TypeParameters();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Guz(YMKOT+&;3,%-|");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AnnotationTypeBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.PreIncrementExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.AssertStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'T';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = 'e';
      charArray0[4] = 'Q';
      charArray0[5] = '7';
      charArray0[6] = 'L';
      int int0 = stringReader0.read(charArray0, 0, 0);
      assertEquals(0, int0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'T', '7', '7', 'e', 'Q', '7', 'L'}, charArray0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.StatementExpressionList();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.LabeledStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 13.  Encountered: Version
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("after : \"");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PrimaryExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      javaParser0.ReInit((InputStream) bufferedInputStream0);
      assertFalse(javaParser0.lookingAhead);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JavaParser.main(stringArray0);
      assertEquals(1, stringArray0.length);
      
      try { 
        javaParser0.ArrayDimsAndInits();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      
      sequenceInputStream0.mark(87);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        sequenceInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("float");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AnnotationTypeDeclaration((-16));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: float
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ResultType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("zmo''Ib}1r*wl");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.EnumDeclaration((-2438));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3657), (-3657));
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-3657), byteArrayInputStream0.available());
      
      int int0 = 1191;
      int int1 = byteArrayInputStream0.read();
      assertEquals((-1), int1);
      assertEquals(0, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-3657), byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-3657), 1191);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, byteArray0.length);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-3657), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-3657), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, byteArray0.length);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-3657), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.jjnewStateCnt = (-1);
      assertEquals((-3657), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaParser0.PackageDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line -3657, column 1190.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.WhileStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Wfdh5a`D,Q[=pI:5J");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-100);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)11, (byte) (-100)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaParser javaParser1 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser1.lookingAhead);
      assertEquals(3, byteArray0.length);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotNull(javaParser1);
      assertArrayEquals(new byte[] {(byte)17, (byte)11, (byte) (-100)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser1.SynchronizedStatement();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u0011\" (17), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("An interface cannot have initializers");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotNull(javaParser1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaParser1.PrimarySuffix();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: An
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("t'4&}[H");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.EqualityExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "r%f;J";
      JavaParser javaParser0 = new JavaParser("r%f;J");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-35);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-35), (byte) (-35), (byte) (-35)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 79, (byte) (-35));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-35), (byte) (-35), (byte) (-35)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte) (-35), (byte) (-35), (byte) (-35)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser1 = new JavaParser(javaParser0.token_source);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotNull(javaParser1);
      
      try { 
        javaParser1.ImplementsList(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R?>.K_0'~X");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)65, (byte)65, (byte)74, (byte) (-46), (byte)35, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)65, (byte)65, (byte)74, (byte) (-46), (byte)35, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)0, (byte)65, (byte)65, (byte)74, (byte) (-46), (byte)35, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser("R?>.K_0'~X");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MethodDeclaration(84);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ClassOrInterfaceBody(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2621, 880);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-78), (byte) (-55), (byte) (-41), (byte)116, (byte)39}, byteArray0);
      assertEquals((-2615), byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(6, byteArray0.length);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-78), (byte) (-55), (byte) (-41), (byte)116, (byte)39}, byteArray0);
      assertEquals((-2615), byteArrayInputStream0.available());
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals((-1), int0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-78), (byte) (-55), (byte) (-41), (byte)116, (byte)39}, byteArray0);
      assertEquals((-2615), byteArrayInputStream0.available());
      
      try { 
        javaParser0.MemberSelector();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.Initializer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("else");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isStatic(3911);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("foat");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.EnumConstant();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.EnumConstant();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 4.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BL");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.EnumBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: BL
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", column ");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ConditionalOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: ,
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "#/";
      JavaParser javaParser0 = new JavaParser("#/");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.IfStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'HV~A+");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'j';
      charArray0[1] = 'I';
      charArray0[2] = '.';
      charArray0[3] = 'Z';
      charArray0[4] = 'A';
      int int0 = stringReader0.read(charArray0);
      assertEquals(5, int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\'', 'H', 'V', '~', 'A'}, charArray0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      Token token0 = javaParser0.token_source.getNextToken();
      assertFalse(javaParser0.lookingAhead);
      assertEquals(101, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertEquals("+", token0.toString());
      
      token0.endLine = 5;
      assertEquals("+", token0.toString());
      
      javaParser0.token = token0;
      assertEquals("+", token0.toString());
      assertEquals("+", javaParser0.token.toString());
      
      try { 
        javaParser0.ConstructorDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Parse error at line ");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.WildcardBounds();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("D");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ClassOrInterfaceBodyDeclaration(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("X");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 72, 72);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParser0.ReInit(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParser0.MethodDeclarator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ClassOrInterfaceDeclaration(73);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.VariableDeclarator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("]{h4i");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PrimaryPrefix();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R?>.K_0'~X");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.bufpos = (-6371);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-6371), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.defaultLexState = (-6371);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.curChar = '=';
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.tokenBegin = (-6371);
      try { 
        javaParser0.TryStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: R
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zpDZ|2j5;|{Y:B");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.VariableDeclarator();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      int int0 = javaParser0.Modifiers();
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, int0);
      
      try { 
        javaParser0.RSIGNEDSHIFT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "[*Om";
      JavaParser javaParser0 = new JavaParser("[*Om");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TypeBound();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.ConditionalOrExpression();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isAbstract((-2150));
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertTrue(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjnewStateCnt = 1163;
      javaParserTokenManager0.defaultLexState = 50;
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.MemberValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("/!B(-ShR2qa!V[|#N");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ClassOrInterfaceDeclaration((-2606));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CClFB");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.FormalParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 5.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("LZk");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AssertStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("IuGZsg*}^R$?eu-(ITB");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        javaParser0.MultiplicativeExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 8.  Encountered: }
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("<=");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.CompilationUnit();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jp~G:+mbf");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MemberValuePairs();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: ~
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("i");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ShiftExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Type();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.ArgumentList();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ENaF^oCPd]s[ ");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.CastLookahead();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: ENaF
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isStrictfp(1701);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertFalse(boolean0);
      
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("lAJ,%soU,cG}y");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "lAJ,%soU,cG}y";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "lAJ,%soU,cG}y";
      stringArray0[5] = "";
      stringArray0[6] = "$a4'uK5k9";
      stringArray0[7] = "lAJ,%soU,cG}y";
      stringArray0[8] = "lAJ,%soU,cG}y";
      JavaParser.main(stringArray0);
      assertEquals(9, stringArray0.length);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean1 = javaParser_ModifierSet0.isFinal(43);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("UHd*TSr+YUDPE");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.UnaryExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("float");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ExtendsList(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.Statement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.PrimitiveType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertNotNull(javaParser_ModifierSet0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-64)}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte) (-64)}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      javaParser0.ReInit((InputStream) pushbackInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-64)}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser0.AnnotationTypeMemberDeclaration();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("arse error at }line ");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.NullLiteral();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?Br'Y479B/T27f&");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = stringReader0.read();
      assertEquals(63, int0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'W';
      int int1 = stringReader0.read(charArray0);
      assertEquals(2, int1);
      assertEquals(2, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'B', 'r'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParser0.AnnotationTypeDeclaration(58);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      StringReader stringReader0 = new StringReader("cj(ck@YX&");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotNull(javaParser1);
      
      try { 
        javaParser1.StatementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 6.  Encountered: @
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.Type();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Ty'?#");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ExclusiveOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.SwitchStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("float");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isAbstract(64);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.input_stream = null;
      javaParserTokenManager0.jjnewStateCnt = 1163;
      javaParserTokenManager0.defaultLexState = 50;
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.SynchronizedStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = null;
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      String[] stringArray0 = new String[9];
      try { 
        javaParser0.MultiplicativeExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("6O#7FBk}");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AssignmentOperator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CastLookahead");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ExplicitConstructorInvocation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: CastLookahead
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Java Parser Vesion 1.1:  Reading from tandard inpt . . .");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.VariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("WXd@$Kp?VR,7^)");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.CompilationUnit();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ClassOrInterfaceBody(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SystemInUtil.addInputLine("'GVh7Q0t%Nv?v#a");
      JavaParser javaParser0 = new JavaParser("Java Parser Vesion 1.1:  Reading from tandard inpt . . .");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.InclusiveOrExpression();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"V\" (86), after : \"\\'G\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Parse error at line ");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser javaParser1 = new JavaParser(javaParser0.token_source);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotNull(javaParser1);
      
      try { 
        javaParser0.ConditionalAndExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)50;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)30, (byte)84, (byte)50}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)30, (byte)84, (byte)50}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser0.UnaryExpression();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u001e\" (30), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser(";`(#df");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      int int0 = javaParser0.Modifiers();
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, int0);
      
      ParseException parseException0 = javaParser0.generateParseException();
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(parseException0);
      
      try { 
        javaParser0.Initializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("~QcI@ ");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TypeDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ReturnStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("\\et\\rr{2?ZD ");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("et\rr{2?Z! ");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.EqualityExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isVolatile(43);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("_cFCd");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      Token token0 = javaParser0.getToken(102);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertEquals("", token0.toString());
      
      try { 
        javaParser0.ArgumentList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)89;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)89}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(1, byteArray0.length);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)89}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      javaParser0.ConditionalExpression();
      assertFalse(javaParser0.lookingAhead);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)89}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-1);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-1)}, byteArray0);
      
      StringReader stringReader0 = new StringReader("aB+1rN6Pg");
      assertNotNull(stringReader0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.MemberValuePair();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser(", column ");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.EmptyStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "";
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.VariableDeclarator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ConditionalAndExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isNative((-594));
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser("root");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Type();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("V-)0'iz`");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "";
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.VariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "qk(|\\@9.p 3; U;B";
      JavaParser javaParser0 = new JavaParser("qk(|@9.p 3; U;B");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.UnaryExpressionNotPlusMinus();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.Expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic(29);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertTrue(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("@4jWe~&6`|[0@ByqGh");
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParser javaParser0 = new JavaParser("@4jWe~&6`|[0@ByqGh");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TypeParameters();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 32, (-572));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaParser0.MemberValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 32, column -573.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6$'08+Z");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.MemberValue();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("float");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("float");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      assertFalse(boolean0);
      
      javaParser0.ReInit((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.TypeParameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParser0.FieldDeclaration(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser("D[x^3GU,*+_Sj/p~_");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.EnumDeclaration(93);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      Token token0 = javaParser0.getNextToken();
      assertFalse(javaParser0.lookingAhead);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
      assertEquals("", token0.toString());
      
      try { 
        javaParser0.TypeArguments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic(0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertFalse(boolean0);
      
      InputStream inputStream0 = null;
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null, 75, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.FieldDeclaration(97);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ArgumentList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(75);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 1413, 277);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      SystemInUtil.addInputLine((String) null);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Lt]$lAEL1S(-q");
      assertFalse(boolean0);
      
      long long0 = pipedInputStream0.skip((-1));
      assertEquals(0L, long0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        javaParser0.VariableDeclaratorId();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1413, column 276.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 71, 71);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.prevCharIsLF = false;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.available = 77;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParser0.PostfixExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StringReader stringReader0 = new StringReader("VariableInitializer");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.PostfixExpression();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertNotNull(javaParser_ModifierSet0);
      
      int int0 = (-2150);
      boolean boolean0 = javaParser_ModifierSet0.isAbstract((-2150));
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertTrue(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjnewStateCnt = 1163;
      javaParserTokenManager0.defaultLexState = 50;
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.SynchronizedStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.WhileStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isAbstract(3644);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser("\"transient\"");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.SingleMemberAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SystemInUtil.addInputLine("q}5s/`0wlt9");
      JavaParser javaParser0 = new JavaParser("q}5s/`0wlt9");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.MemberValueArrayInitializer();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Guz(YMKOT+&;3,%-|");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TypeArgument();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaParser javaParser0 = new JavaParser("1~,T&Pw");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      StringReader stringReader0 = new StringReader("1~,T&Pw");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParser0.ReInit(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParser0.ExclusiveOrExpression();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StringReader stringReader0 = new StringReader("OR");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.TypeArgument();
      assertFalse(javaParser0.lookingAhead);
      
      int int0 = 1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        javaParser0.ReturnStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("ForUpdate");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isTransient(71);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "d*{ig}W^";
      JavaParser javaParser0 = new JavaParser("d*{ig}W^");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Name();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.EnumConstant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JlI:N im,y an%");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 96, 96, 45);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParser0.StatementExpressionList();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(99, javaCharStream0.getColumn());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals(99, javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(99, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AnnotationTypeDeclaration(655);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SystemInUtil.addInputLine("-");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("-");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)11;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-17), (byte)108, (byte)103, (byte)59, (byte) (-34), (byte)7, (byte)11}, byteArray0);
      
      JavaParser javaParser0 = new JavaParser("-");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("6O#7FBk}");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ClassOrInterfaceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")taKAA'f}fW4T%g>8CQ");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Literal();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: )
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ArrayDimsAndInits();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StringReader stringReader0 = new StringReader("r");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Annotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: r
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".  Encountered: ");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ShiftExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: .
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.StatementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("9=bHyJioNA");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        javaParser0.MemberValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TypeParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R?>.K_0'~X");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.bufpos = (-6371);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals((-6371), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.defaultLexState = (-6371);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.curChar = '=';
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.tokenBegin = (-6371);
      javaParser0.token_source = javaParserTokenManager0;
      javaParserTokenManager0.debugStream = javaParser0.token_source.debugStream;
      try { 
        javaParser0.Expression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: >
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.DoStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isProtected(29);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",n$.0k");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.TypeParameters();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)87;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-77), (byte)87}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      byteArrayInputStream0.reset();
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-77), (byte)87}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte) (-77), (byte)87}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-77), (byte)87}, byteArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte) (-77), (byte)87}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser1.lookingAhead);
      assertEquals(2, byteArray0.length);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotNull(javaParser1);
      assertArrayEquals(new byte[] {(byte) (-77), (byte)87}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParser1.ForUpdate();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("floa");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.FormalParameters();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ExtendsList(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m V?Gec?Pep[tY");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Statement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: V
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        JavaParser.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R?>.K_0'~X");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufpos = (-6371);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParser0.AndExpression();
      assertFalse(javaParser0.lookingAhead);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      
      javaParserTokenManager0.defaultLexState = 1;
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      
      javaParserTokenManager0.curChar = '=';
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      
      javaCharStream0.tokenBegin = 1;
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      
      javaParser0.token_source = javaParserTokenManager0;
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      
      javaParserTokenManager0.debugStream = javaParser0.token_source.debugStream;
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      
      try { 
        javaParser0.Expression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: ?
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<?xml version='1.0' encoding='ISO-8859-1' ?>");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.NameList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: <
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TypeParameter");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.ReferenceType();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-47);
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte) (-118);
      byteArray0[8] = (byte)113;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)106, (byte)97, (byte)81, (byte)96, (byte)97, (byte) (-47), (byte)66, (byte) (-118), (byte)113}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-118), (byte)66, (byte)97);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(9, byteArray0.length);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)106, (byte)97, (byte)81, (byte)96, (byte)97, (byte) (-47), (byte)66, (byte) (-118), (byte)113}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(9, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)106, (byte)97, (byte)81, (byte)96, (byte)97, (byte) (-47), (byte)66, (byte) (-118), (byte)113}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(9, byteArray0.length);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)106, (byte)97, (byte)81, (byte)96, (byte)97, (byte) (-47), (byte)66, (byte) (-118), (byte)113}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParser0.InstanceOfExpression();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -118, column 69.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("%;'%-!gw@,p");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.FieldDeclaration((-286));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = (-2478);
      JavaParser javaParser0 = new JavaParser("$r|9&bn");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AllocationExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("IF^BU/h;%");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PackageDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.AllocationExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ConditionalOrExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("D");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.SynchronizedStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("po(t fndy");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.disable_tracing();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("*S");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isPrivate(64);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Initializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("O");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "transient");
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser("O");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.StatementExpressionList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: transient
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ExclusiveOrExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, (-1811), 69);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaParser0.ImplementsList(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line -1811, column 68.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("3\" ;51.(7");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.StatementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'T';
      charArray0[1] = '7';
      charArray0[2] = ']';
      charArray0[3] = 'e';
      charArray0[4] = 'Q';
      charArray0[5] = '6';
      charArray0[6] = 'L';
      int int0 = stringReader0.read(charArray0, 0, 0);
      assertEquals(0, int0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'T', '7', ']', 'e', 'Q', '6', 'L'}, charArray0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AnnotationTypeMemberDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 13.  Encountered: Version
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MemberValueArrayInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AdditiveExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Guz(YMKOT+&;3,%-|");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MethodDeclarator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("P");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte)72;
      byteArray0[8] = (byte)17;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertTrue(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-63), (byte)89, (byte)79, (byte)64, (byte)92, (byte)14, (byte)67, (byte)72, (byte)17}, byteArray0);
      
      JavaParser javaParser0 = new JavaParser("P");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ForStatement();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zZh6}Hl");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.UnaryExpressionNotPlusMinus();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.StatementExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.TypeDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("i");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.RUNSIGNEDSHIFT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("float");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.StatementExpressionList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser(" Bm`J-y5c+7#_sPnd");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.InclusiveOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      SystemInUtil.addInputLine("ClassOrInterfaceDeclaration");
      JavaParser javaParser0 = new JavaParser("float");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.InclusiveOrExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.NormalAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 28.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Statement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "|z$-3|";
      SystemInUtil.addInputLine("|z$-3|");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)85;
      byte byte0 = (byte)59;
      byteArray0[2] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-27), (byte)85, (byte)59}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte) (-27), (byte)85, (byte)59}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-27), (byte)85, (byte)59}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte) (-27), (byte)85, (byte)59}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte) (-27), (byte)85, (byte)59}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      String string1 = javaCharStream0.GetImage();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-27), (byte)85, (byte)59}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParser0.ClassOrInterfaceBody(false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.PackageDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l@Eu7_MB8g");
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("l@Eu7_MB8g");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ForInit();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E>8ohX4gj");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.ArgumentList();
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.RelationalExpression();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertNotNull(javaParser_ModifierSet0);
      
      JavaParser javaParser0 = new JavaParser("Av` [ne{h#u");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.BooleanLiteral();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.NormalAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      SystemInUtil.addInputLine("o");
      SystemInUtil.addInputLine("o");
      JavaParser javaParser0 = new JavaParser("wLtP8G>KG");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AnnotationTypeMemberDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 2, column 2.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("D");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.InstanceOfExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ImplementsList(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = null;
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ForStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Java Parser Vesion 1.1:  Reading from tandard inpt . . .");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "4^P6ps!>?>abf({k*");
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser("Java Parser Vesion 1.1:  Reading from tandard inpt . . .");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MethodDeclaration(81);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: 4
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.UnaryExpressionNotPlusMinus();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[zn.s\"tW2x0}[");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaParser0.MarkerAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: [
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("\"Z~|");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      StringReader stringReader0 = new StringReader("\"Z~|");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotNull(javaParser1);
      
      // Undeclared exception!
      try { 
        javaParser1.Literal();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: <EOF> after : \"\\\"Z~|\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Expression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ThrowStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      StringReader stringReader0 = new StringReader("root");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.PrimaryPrefix();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.InstanceOfExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 4.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PrimaryExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Rq?ggChOz.yH3>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 105, 105);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParser0.StatementExpressionList();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(105, javaCharStream0.getLine());
      assertEquals(107, javaCharStream0.getColumn());
      assertEquals(107, javaCharStream0.getEndColumn());
      assertEquals(105, javaCharStream0.getBeginLine());
      assertEquals(105, javaCharStream0.getEndLine());
      assertEquals(107, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isVolatile(93);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.DoStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: Java
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" not found.");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser(" not found.");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Literal();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("')M");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      Token token0 = javaParser0.jj_nt;
      assertNull(token0);
      
      javaParser0.token = null;
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        javaParser0.MarkerAnnotation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("`1sgz`:Nr#'Pm");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser javaParser1 = new JavaParser("ljV8E]j7=%zZzC.b");
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotNull(javaParser1);
      
      try { 
        javaParser0.ConditionalOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("float");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AndExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Mw])\"+bPf(Wwx");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      Token token0 = javaParser0.getToken((-4327));
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
      assertNull(token0.toString());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("e\"G}Qzme");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.SwitchLabel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ClassOrInterfaceType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "l<#{Y!Wl)i B{$'9";
      stringArray0[2] = "root";
      stringArray0[3] = "com.soops.CEN4010.JMCA.JParser.JavaParser$1";
      JavaParser.main(stringArray0);
      assertEquals(4, stringArray0.length);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-102);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-40), (byte)46, (byte) (-102)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte) (-40), (byte)46, (byte) (-102)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      dataInputStream0.close();
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-40), (byte)46, (byte) (-102)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(dataInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte) (-40), (byte)46, (byte) (-102)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser0.ForInit();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      SystemInUtil.addInputLine(",Ei4SFG");
      JavaParser javaParser0 = new JavaParser(",Ei4SFG");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser javaParser1 = new JavaParser(",Ei4SFG");
      assertFalse(javaParser1.lookingAhead);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotNull(javaParser1);
      
      try { 
        javaParser1.MemberValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: ,
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      int int0 = 68;
      try { 
        javaParser0.ImportDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("_cFCd");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      Token token0 = javaParser0.getToken(102);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertNotNull(token0);
      assertEquals("", token0.toString());
      
      try { 
        javaParser0.LocalVariableDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.NameList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A class cannot extend more than one other class");
      assertNotNull(stringReader0);
      
      stringReader0.mark(94);
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.CompilationUnit();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: A
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("float");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ClassOrInterfaceDeclaration(95);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("`v$6$&YNu");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ResultType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ConditionalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"final\"");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      int int0 = JavaParserConstants.TILDE;
      assertEquals(90, int0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.MultiplicativeExpression();
      assertFalse(javaParser0.lookingAhead);
      
      stringReader0.close();
      try { 
        javaParser0.UnaryExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 7.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.EnumBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      SystemInUtil.addInputLine("K7TcFzR;Wa");
      JavaParser javaParser0 = new JavaParser("K7TcFzR;Wa");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MemberValuePair();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 8.  Encountered: ;
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" WWcG");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.NameList();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ConditionalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 5.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("after : \"");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.DefaultValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isPrivate(749);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertTrue(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.DoStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("float");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ClassOrInterfaceBodyDeclaration(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertNotNull(javaParser_ModifierSet0);
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.TypeArgument();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      StringReader stringReader0 = new StringReader("EmptyStatement");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MemberValuePair();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 14.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Gn@'GG]3L [$L\"");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TypeBound();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "l<#{Y!Wl)i B{$'9";
      stringArray0[2] = "root";
      stringArray0[3] = "com.soops.CEN4010.JMCA.JParser.JavaParser$1";
      JavaParser.main(stringArray0);
      assertEquals(4, stringArray0.length);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = 'd';
      charArray0[2] = 'U';
      int int0 = 51;
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 51, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.LocalVariableDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"final\"");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      int int0 = stringReader0.read(charArray0);
      assertEquals(1, int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\"'}, charArray0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MultiplicativeExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: final
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.EqualityExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.AnnotationTypeMemberDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Arguments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }
}
