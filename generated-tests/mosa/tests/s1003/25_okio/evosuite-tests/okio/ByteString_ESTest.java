/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:31:23 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("8f5q*3zjQn9%x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: 8f5q*3zjQn9%x
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("'q.,grwd=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: 'q.,grwd=
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Pipe pipe0 = new Pipe(1937L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.write(realBufferedSource0.buffer);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("Number too large: ");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.sha256();
      byteString0.internalArray();
      String string0 = byteString0.utf8();
      assertEquals("Number too large: ", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
      byteString0.startsWith(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.sha1();
      Buffer buffer0 = new Buffer();
      HashingSink.hmacSha512(buffer0, byteString0);
      byteString0.toString();
      byteString0.lastIndexOf(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(7, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("2#Qq;b#@(>]9/<:{E", charset0);
      ByteString byteString1 = byteString0.md5();
      ByteString byteString2 = byteString1.hmacSha512(byteString0);
      assertEquals(64, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      int int1 = byteString0.indexOf(byteString0, 8257536);
      assertEquals((-1), int1);
      
      boolean boolean0 = byteString0.startsWith(byteString0);
      assertTrue(boolean0);
      
      byteString0.lastIndexOf(byteString0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.size();
      String string0 = byteString0.toString();
      assertEquals("[hex=dd]", string0);
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSink.hmacSha512(realBufferedSink0, byteString0);
      realBufferedSink0.buffer.writeShort((-699));
      byteString0.toString();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0);
      byteString0.lastIndexOf(byteArray0, 166);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      Buffer buffer1 = new Buffer();
      buffer1.writeShort(166);
      ByteString byteString1 = hashingSink0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=dd]", string0);
      
      int int1 = byteString0.lastIndexOf(byteArray0);
      assertTrue(int1 == int0);
      
      ByteString byteString2 = hashingSink0.hash();
      byteString2.rangeEquals((-1255), byteArray0, (-699), 0);
      ByteString byteString3 = byteString1.toAsciiLowercase();
      boolean boolean0 = byteString3.endsWith(byteString0);
      assertFalse(boolean0);
      
      byteString3.toAsciiUppercase();
      assertFalse(byteString3.equals((Object)byteString2));
      assertTrue(byteString1.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
      boolean boolean0 = byteString0.equals(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Pipe pipe0 = new Pipe(1655L);
      Source source0 = pipe0.source();
      HashingSource hashingSource0 = HashingSource.sha256(source0);
      ByteString byteString0 = hashingSource0.hash();
      Object object0 = new Object();
      byteString0.substring(0, 0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hex();
      ByteString byteString1 = byteString0.sha256();
      byteString1.hashCode();
      ByteString byteString2 = byteString0.sha256();
      String string0 = "offset=%s > size=%s";
      // Undeclared exception!
      try { 
        byteString2.substring(111);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
      byteString0.sha256();
      ByteString byteString1 = ByteString.encodeUtf8("k+Js^]Dqc");
      assertEquals(9, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 52, (-31));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=52 byteCount=-31
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("Number too large: ");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      byteString0.asByteBuffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString1 = byteString0.sha256();
      byteString1.endsWith(byteString0);
      ByteString byteString2 = byteString1.hmacSha512(byteString0);
      assertNotSame(byteString1, byteString2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.endsWith(byteArray0);
      byteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha256();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.rangeEquals(2, byteArray0, (-1941), (-32));
      assertFalse(boolean0);
      
      ByteString byteString3 = byteString2.sha256();
      Charset charset0 = Charset.defaultCharset();
      byteString3.string(charset0);
      ByteString byteString4 = byteString3.toAsciiUppercase();
      ByteString byteString5 = byteString1.sha256();
      assertTrue(byteString5.equals((Object)byteString3));
      assertFalse(byteString5.equals((Object)byteString4));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      ByteString byteString2 = byteString0.toAsciiUppercase();
      ByteString byteString3 = new ByteString(byteArray0);
      String string0 = byteString2.toString();
      assertEquals("[hex=bb]", string0);
      
      boolean boolean0 = byteString1.EMPTY.startsWith(byteString3);
      assertFalse(boolean0);
      
      ByteBuffer byteBuffer0 = byteString1.asByteBuffer();
      ByteString byteString4 = ByteString.of(byteBuffer0);
      byteString4.hmacSha512(byteString3);
      assertTrue(byteString4.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("Number too large: ");
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=18 cap=18]", byteBuffer0.toString());
      assertEquals(18, byteBuffer0.capacity());
      assertEquals(18, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(18, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertNotNull(byteBuffer0);
      
      ByteString byteString0 = ByteString.of(byteBuffer0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(18, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(18, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=18 lim=18 cap=18]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(18, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(18, byteString0.size());
      assertNotNull(byteString0);
      
      ByteBuffer byteBuffer1 = byteString0.asByteBuffer();
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(18, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(18, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=18 lim=18 cap=18]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(18, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(18, byteString0.size());
      assertTrue(byteBuffer1.hasRemaining());
      assertFalse(byteBuffer1.isDirect());
      assertFalse(byteBuffer1.hasArray());
      assertTrue(byteBuffer1.isReadOnly());
      assertEquals(18, byteBuffer1.capacity());
      assertEquals(18, byteBuffer1.remaining());
      assertEquals(18, byteBuffer1.limit());
      assertEquals("java.nio.HeapByteBufferR[pos=0 lim=18 cap=18]", byteBuffer1.toString());
      assertEquals(0, byteBuffer1.position());
      assertNotNull(byteBuffer1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteString byteString1 = byteString0.sha256();
      assertFalse(byteBuffer0.equals((Object)byteBuffer1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(18, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(18, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=18 lim=18 cap=18]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(18, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(18, byteString0.size());
      assertEquals(32, byteString1.size());
      assertNotNull(byteString1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      String string0 = byteString0.string(charset0);
      assertFalse(byteBuffer0.equals((Object)byteBuffer1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(18, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(18, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=18 lim=18 cap=18]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(18, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(18, byteString0.size());
      assertEquals("Number too large: ", string0);
      assertNotNull(string0);
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2#Qq;b#@(>]9/<:{E");
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertNotNull(charset0);
      
      ByteString byteString0 = ByteString.encodeString("2#Qq;b#@(>]9/<:{E", charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(17, byteString0.size());
      assertNotNull(byteString0);
      
      String string0 = byteString0.utf8();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(17, byteString0.size());
      assertEquals("2#Qq;b#@(>]9/<:{E", string0);
      assertNotNull(string0);
      
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(17, byteString0.size());
      assertEquals(17, byteString1.size());
      assertNotNull(byteString1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.sha256();
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString0.size());
      assertEquals(32, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      int int0 = byteString1.indexOf(byteArray0, (-1928));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString0.size());
      assertEquals(32, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      int int2 = byteString1.indexOf(byteString0, 55);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, byteString0.size());
      assertEquals(32, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-1), int2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      boolean boolean0 = byteString1.startsWith(byteString0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString0.size());
      assertEquals(32, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      ByteString byteString2 = byteString0.sha1();
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(1, byteString0.size());
      assertEquals(20, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString2);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = byteString0.EMPTY.startsWith(byteArray0);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = byteString0.startsWith(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      MockFile mockFile0 = new MockFile("", "tG/w{Ee#xTNo~1");
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/tG/w{Ee#xTNo~1", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals("/tG", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("w{Ee#xTNo~1", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertNotNull(mockFile0);
      
      String string0 = byteString0.toString();
      assertEquals(0, byteString0.size());
      assertEquals("[size=0]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      String string0 = byteString0.base64Url();
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("AAAAAAAAAA==", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Number too large: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: N
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)42;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)9, (byte)42}, byteArray0);
      assertNotNull(byteString0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)9, (byte)42}, byteArray0);
      assertNotNull(hashingSource0);
      
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)9, (byte)42}, byteArray0);
      assertNotNull(hashingSource1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      
      ByteString byteString1 = hashingSource1.hash();
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)9, (byte)42}, byteArray0);
      assertNotNull(byteString1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString1, byteString0);
      
      int int0 = byteString1.lastIndexOf(byteString0, (int) (byte)42);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)9, (byte)42}, byteArray0);
      assertEquals((-1), int0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteString byteString0 = ByteString.decodeBase64(".l-3 Pgv|)/9XHmjP");
      assertNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 54, 1843);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      ByteString byteString0 = ByteString.encodeString("2#Qq;b#@(>]9/<:{E", charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(17, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.sha512();
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(17, byteString0.size());
      assertEquals(64, byteString1.size());
      assertNotNull(byteString1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString1);
      
      ByteString byteString2 = new ByteString(byteArray0);
      assertTrue(byteString2.equals((Object)byteString0));
      assertTrue(byteString2.equals((Object)byteString1));
      assertEquals(1, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString2);
      
      ByteString byteString3 = new ByteString(byteArray0);
      assertTrue(byteString3.equals((Object)byteString0));
      assertTrue(byteString3.equals((Object)byteString1));
      assertTrue(byteString3.equals((Object)byteString2));
      assertEquals(1, byteString3.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString3);
      
      int int0 = byteString1.compareTo(byteString2);
      assertTrue(byteString1.equals((Object)byteString2));
      assertTrue(byteString1.equals((Object)byteString0));
      assertTrue(byteString1.equals((Object)byteString3));
      assertTrue(byteString2.equals((Object)byteString3));
      assertTrue(byteString2.equals((Object)byteString0));
      assertTrue(byteString2.equals((Object)byteString1));
      assertEquals(1, byteString1.size());
      assertEquals(1, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, int0);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(0, byteString0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteString0);
      
      String string0 = byteString0.hex();
      assertEquals(0, byteString0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = byteString0.base64();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, byteString0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(bufferedInputStream0);
      
      try { 
        ByteString.read(bufferedInputStream0, 52);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)86;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      // Undeclared exception!
      try { 
        ByteString.read(sequenceInputStream0, (byte) (-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -8
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-8);
      byteArray0[1] = (byte) (-8);
      byteArray0[5] = (byte)86;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)86, (byte) (-8), (byte) (-8), (byte) (-8), (byte)0, (byte)86}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)86, (byte) (-8), (byte) (-8), (byte) (-8), (byte)0, (byte)86}, byteArray0);
      assertNotNull(bufferedInputStream0);
      
      try { 
        ByteString.read(byteArrayInputStream0, 33);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-4);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-4), (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte) (-4), (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(2, byteString1.size());
      assertArrayEquals(new byte[] {(byte) (-4), (byte)0}, byteArray0);
      assertNotNull(byteString1);
      
      String string0 = byteString0.toString();
      assertTrue(byteString0.equals((Object)byteString1));
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte) (-4), (byte)0}, byteArray0);
      assertEquals("[hex=f9bb]", string0);
      assertNotNull(string0);
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        byteString0.substring((-3034));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      String string0 = buffer0.readUtf8();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSink0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      String string1 = byteString0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertEquals("[size=0]", string1);
      assertNotNull(string1);
      
      boolean boolean0 = byteString0.equals(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        byteString0.substring(99, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertEquals(7, byteString0.size());
      assertEquals(7, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString1);
      assertSame(byteString0, byteString1);
      assertSame(byteString1, byteString0);
      
      ByteString byteString2 = new ByteString(byteArray0);
      assertTrue(byteString2.equals((Object)byteString1));
      assertTrue(byteString2.equals((Object)byteString0));
      assertEquals(7, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString2);
      
      String string0 = byteString2.toString();
      assertTrue(byteString2.equals((Object)byteString1));
      assertTrue(byteString2.equals((Object)byteString0));
      assertEquals(7, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("[hex=bbbbbbbbbbbbbb]", string0);
      assertNotNull(string0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      
      ByteBuffer byteBuffer0 = byteString2.asByteBuffer();
      assertTrue(byteString2.equals((Object)byteString1));
      assertTrue(byteString2.equals((Object)byteString0));
      assertEquals(7, byteString2.size());
      assertEquals(7, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(7, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(7, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBufferR[pos=0 lim=7 cap=7]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteBuffer0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      
      ByteString byteString3 = ByteString.of(byteBuffer0);
      assertTrue(byteString2.equals((Object)byteString1));
      assertTrue(byteString2.equals((Object)byteString0));
      assertTrue(byteString3.equals((Object)byteString2));
      assertTrue(byteString3.equals((Object)byteString0));
      assertTrue(byteString3.equals((Object)byteString1));
      assertEquals(7, byteString2.size());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBufferR[pos=7 lim=7 cap=7]", byteBuffer0.toString());
      assertEquals(7, byteBuffer0.position());
      assertTrue(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(7, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(7, byteString3.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString3);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      
      int int0 = byteString0.indexOf(byteString2);
      assertTrue(byteString0.equals((Object)byteString2));
      assertTrue(byteString0.equals((Object)byteString3));
      assertTrue(byteString2.equals((Object)byteString1));
      assertTrue(byteString2.equals((Object)byteString0));
      assertTrue(byteString2.equals((Object)byteString3));
      assertEquals(7, byteString0.size());
      assertEquals(7, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
      assertNotSame(byteString0, byteString3);
      assertSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString3);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)86;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(16, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean1 = byteArrayInputStream0.markSupported();
      assertFalse(boolean1 == boolean0);
      assertEquals(16, byteArrayInputStream0.available());
      assertTrue(boolean1);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(16, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      ByteString byteString0 = ByteString.read(byteArrayInputStream0, 10);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(10, byteString0.size());
      assertNotNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Pipe pipe0 = new Pipe(1655L);
      assertNotNull(pipe0);
      
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      assertNotNull(pipe_PipeSource0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)79;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)122, (byte)122, (byte) (-26), (byte)55, (byte)24, (byte) (-98), (byte)79}, byteArray0);
      assertNotNull(byteString0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = byteString0.equals(pipe_PipeSource0);
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)122, (byte)122, (byte) (-26), (byte)55, (byte)24, (byte) (-98), (byte)79}, byteArray0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(7, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString1);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      assertTrue(byteString0.equals((Object)byteString1));
      assertEquals(7, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(hashingSink0);
      assertNotSame(byteString0, byteString1);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      assertTrue(byteString0.equals((Object)byteString1));
      assertEquals(7, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(realBufferedSink0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertEquals(7, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(realBufferedSink1);
      
      HashingSink hashingSink1 = HashingSink.sha1(realBufferedSink1);
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertEquals(7, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(hashingSink1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(hashingSink1, hashingSink0);
      
      ByteString byteString2 = hashingSink1.hash();
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(7, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString2);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      
      ByteString byteString3 = byteString2.md5();
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertEquals(7, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString2.size());
      assertEquals(16, byteString3.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString3);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString0);
      
      String string0 = byteString2.toString();
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(byteString2.equals((Object)byteString3));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(7, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("[hex=d9399399599b9bbd3355bf9f959b199b9fd9b7b9]", string0);
      assertNotNull(string0);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      
      boolean boolean0 = byteString1.rangeEquals(118, byteArray0, 0, (-2698));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString3));
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(7, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString3);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      ByteString byteString4 = hashingSource0.hash();
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString2));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString4.size());
      assertNotNull(byteString4);
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString2);
      
      ByteString byteString5 = byteString4.sha256();
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString2));
      assertFalse(byteString5.equals((Object)byteString4));
      assertFalse(byteString5.equals((Object)byteString3));
      assertFalse(byteString5.equals((Object)byteString2));
      assertFalse(byteString5.equals((Object)byteString0));
      assertFalse(byteString5.equals((Object)byteString1));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString4.size());
      assertEquals(32, byteString5.size());
      assertNotNull(byteString5);
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString5);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString5, byteString4);
      assertNotSame(byteString5, byteString3);
      assertNotSame(byteString5, byteString2);
      assertNotSame(byteString5, byteString0);
      assertNotSame(byteString5, byteString1);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      String string1 = byteString4.string(charset0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString5));
      assertFalse(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString2));
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString4.size());
      assertEquals("\uFFFD\u001D\uFFFD\uFFFD\uFFFD\u0000\uFFFD\u0004\uFFFD\uFFFD\t\uFFFD\uFFFD\uFFFDB~", string1);
      assertNotNull(string1);
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString5);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString2);
      
      ByteString byteString6 = byteString4.toAsciiUppercase();
      assertFalse(byteString6.equals((Object)byteString2));
      assertFalse(byteString6.equals((Object)byteString5));
      assertFalse(byteString6.equals((Object)byteString0));
      assertFalse(byteString6.equals((Object)byteString1));
      assertFalse(byteString6.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString5));
      assertFalse(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString2));
      assertEquals(16, byteString6.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString4.size());
      assertNotNull(byteString6);
      assertNotSame(byteString6, byteString2);
      assertNotSame(byteString6, byteString5);
      assertNotSame(byteString6, byteString0);
      assertNotSame(byteString6, byteString1);
      assertNotSame(byteString6, byteString3);
      assertSame(byteString6, byteString4);
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString5);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString3);
      assertSame(byteString4, byteString6);
      assertNotSame(byteString4, byteString2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      int int1 = byteString0.indexOf(byteString0, 1);
      assertFalse(int1 == int0);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-1), int1);
      
      int int2 = byteString0.lastIndexOf(byteString0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, int2);
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString1);
      
      boolean boolean0 = byteString1.equals(byteString0);
      assertTrue(byteString0.equals((Object)byteString1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString0.size());
      assertEquals(1, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(boolean0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      ByteString byteString2 = byteString0.toAsciiUppercase();
      assertTrue(byteString0.equals((Object)byteString1));
      assertTrue(byteString2.equals((Object)byteString1));
      assertEquals(1, byteString0.size());
      assertEquals(1, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString2);
      assertNotSame(byteString0, byteString1);
      assertSame(byteString0, byteString2);
      assertSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      
      int int3 = byteString0.size();
      assertTrue(byteString0.equals((Object)byteString1));
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, int3);
      assertNotSame(byteString0, byteString1);
      assertSame(byteString0, byteString2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      byteString0.hashCode();
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteString byteString1 = byteString0.sha256();
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(7, byteString0.size());
      assertEquals(32, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      ByteString byteString2 = byteString0.hmacSha1(byteString1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(7, byteString0.size());
      assertEquals(32, byteString1.size());
      assertEquals(20, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString2);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      
      ByteString byteString3 = byteString0.sha256();
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertEquals(7, byteString0.size());
      assertEquals(32, byteString3.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString3);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink1);
      
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSink1);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSink0);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      
      ByteString byteString1 = byteString0.md5();
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertEquals(16, byteString1.size());
      assertNotNull(byteString1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      String string0 = byteString1.toString();
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertEquals(16, byteString1.size());
      assertEquals("[hex=9f71f999993973595ddd99d773f37599]", string0);
      assertNotNull(string0);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      ByteString byteString2 = ByteString.decodeHex("");
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(0, byteString2.size());
      assertNotNull(byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(0, byteString0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteString0);
      
      String string0 = byteString0.hex();
      assertEquals(0, byteString0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertEquals(0, byteString0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      ByteString byteString1 = hashingSource0.hash();
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString1.size());
      assertNotNull(byteString1);
      assertNotSame(byteString1, byteString0);
      
      // Undeclared exception!
      try { 
        byteString1.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.sha256();
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString0.size());
      assertEquals(32, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      ByteString byteString2 = new ByteString(byteArray0);
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(1, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString2);
      
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, int0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString1);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString1);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString1.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(hashingSink0);
      assertNotSame(byteString1, byteString0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString1.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(realBufferedSink0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink1);
      
      HashingSink hashingSink1 = HashingSink.sha1(realBufferedSink1);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSink1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(hashingSink1, hashingSink0);
      
      String string0 = byteString0.toString();
      assertTrue(byteString0.equals((Object)byteString1));
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("[hex=bb]", string0);
      assertNotNull(string0);
      assertNotSame(byteString0, byteString1);
      
      int int1 = byteString1.indexOf(byteArray0, 0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertTrue(int1 == int0);
      assertEquals(1, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, int1);
      assertNotSame(byteString1, byteString0);
      
      boolean boolean0 = byteString0.equals("[hex=00]");
      assertTrue(byteString0.equals((Object)byteString1));
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean0);
      assertNotSame(byteString0, byteString1);
      
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.md5();
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(7, byteString0.size());
      assertEquals(16, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      ByteString byteString2 = byteString0.EMPTY.md5();
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(7, byteString0.size());
      assertEquals(16, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      
      String string0 = byteString0.EMPTY.utf8();
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("k+Js^]Dqc", string0);
      assertNotNull(string0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteString byteString3 = byteString0.sha256();
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString2));
      assertEquals(7, byteString0.size());
      assertEquals(32, byteString3.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString3);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      
      int int0 = byteString3.compareTo(byteString0);
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString2));
      assertEquals(7, byteString0.size());
      assertEquals(32, byteString3.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, int0);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      byteString0.hashCode();
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      String string0 = byteString0.toString();
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("[hex=bbbbbbbbbbbbbb]", string0);
      assertNotNull(string0);
      
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(7, byteString0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(hashingSink0);
      assertNotSame(buffer0, buffer1);
      
      ByteString byteString1 = byteString0.sha256();
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(7, byteString0.size());
      assertEquals(32, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      byteString0.hashCode();
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[size=", false);
      assertNotNull(mockFileOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      byteString0.write(bufferedOutputStream0);
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Charset.forName("[size=");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // [size=
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-8);
      byte byte0 = (byte)97;
      byteArray0[1] = (byte)97;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      byteString0.hashCode();
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = byteString0.lastIndexOf(byteArray0, 70);
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      assertEquals(7, byteString0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(hashingSink0);
      
      ByteString byteString1 = hashingSink0.hash();
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(7, byteString0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(64, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      String string0 = byteString1.EMPTY.base64();
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(7, byteString0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(64, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      int int1 = byteString0.compareTo(byteString1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(int1 == int0);
      assertEquals(7, byteString0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(64, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      byteString0.hashCode();
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteString byteString1 = ByteString.decodeHex("C8");
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString1.size());
      assertNotNull(byteString1);
      assertNotSame(byteString1, byteString0);
      
      ByteString byteString2 = byteString1.hmacSha1(byteString0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(7, byteString0.size());
      assertEquals(1, byteString1.size());
      assertEquals(20, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString2);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeString("~HZ", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      int int0 = byteString0.lastIndexOf(byteArray0, 70);
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      ByteString byteString1 = ByteString.decodeHex("");
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0, byteString1.size());
      assertNotNull(byteString1);
      assertNotSame(byteString1, byteString0);
      
      int int1 = byteString1.compareTo(byteString0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(int1 == int0);
      assertEquals(7, byteString0.size());
      assertEquals(0, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.sha256();
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString0.size());
      assertEquals(32, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      int int0 = byteString1.indexOf(byteArray0, (-1942));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString0.size());
      assertEquals(32, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      int int1 = ObjectStreamConstants.baseWireHandle;
      assertFalse(int1 == int0);
      assertEquals(8257536, int1);
      
      int int2 = byteString1.indexOf(byteString0, 55);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, byteString0.size());
      assertEquals(32, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-1), int2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      ByteString byteString2 = ByteString.decodeHex("");
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(0, byteString2.size());
      assertNotNull(byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      
      int int3 = byteString1.compareTo(byteString2);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, byteString0.size());
      assertEquals(32, byteString1.size());
      assertEquals(0, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, int3);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Pipe pipe0 = new Pipe(1655L);
      assertNotNull(pipe0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        ByteString.decodeHex(" Qa+ n%h~:\"s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit:  
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.EMPTY.md5();
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(7, byteString0.size());
      assertEquals(16, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = byteString1.compareTo(byteString0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(7, byteString0.size());
      assertEquals(16, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, int0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      int int1 = ByteString.codePointIndexToCharIndex("", 1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string0 = byteString0.toString();
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("[hex=bbbbbbbbbbbbbb]", string0);
      assertNotNull(string0);
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.EMPTY.toAsciiUppercase();
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(7, byteString0.size());
      assertEquals(0, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      byteString0.utf8 = "";
      assertEquals(7, byteString0.size());
      
      ByteString byteString2 = new ByteString(byteArray0);
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(7, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString2);
      
      String string0 = byteString0.toString();
      assertTrue(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("[text=]", string0);
      assertNotNull(string0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      
      ByteBuffer byteBuffer0 = byteString2.asByteBuffer();
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(7, byteString2.size());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(7, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBufferR[pos=0 lim=7 cap=7]", byteBuffer0.toString());
      assertEquals(7, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isReadOnly());
      assertEquals(7, byteBuffer0.limit());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteBuffer0);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      
      ByteString byteString3 = ByteString.of(byteBuffer0);
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertTrue(byteString3.equals((Object)byteString2));
      assertTrue(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertEquals(7, byteString2.size());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(7, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBufferR[pos=7 lim=7 cap=7]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(7, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isReadOnly());
      assertEquals(7, byteBuffer0.limit());
      assertEquals(7, byteString3.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString3);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      
      int int0 = byteString3.indexOf(byteString2);
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertTrue(byteString2.equals((Object)byteString3));
      assertTrue(byteString3.equals((Object)byteString2));
      assertTrue(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertEquals(7, byteString2.size());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(7, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBufferR[pos=7 lim=7 cap=7]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(7, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isReadOnly());
      assertEquals(7, byteBuffer0.limit());
      assertEquals(7, byteString3.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)108;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertArrayEquals(new byte[] {(byte) (-78), (byte)52, (byte)108}, byteArray0);
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.sha256();
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(3, byteString0.size());
      assertEquals(32, byteString1.size());
      assertArrayEquals(new byte[] {(byte) (-78), (byte)52, (byte)108}, byteArray0);
      assertNotNull(byteString1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      boolean boolean0 = byteString1.equals(byteString0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(3, byteString0.size());
      assertEquals(32, byteString1.size());
      assertArrayEquals(new byte[] {(byte) (-78), (byte)52, (byte)108}, byteArray0);
      assertFalse(boolean0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      ByteString byteString2 = ByteString.encodeUtf8("beginIndex < 0");
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(14, byteString2.size());
      assertNotNull(byteString2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      byte byte0 = (byte)60;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)13;
      ByteString byteString1 = new ByteString(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString1.size());
      assertArrayEquals(new byte[] {(byte)13}, byteArray1);
      assertNotNull(byteString1);
      
      ByteString byteString2 = new ByteString(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(1, byteString2.size());
      assertArrayEquals(new byte[] {(byte)13}, byteArray1);
      assertNotNull(byteString2);
      
      String string0 = byteString2.toString();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(1, byteString2.size());
      assertArrayEquals(new byte[] {(byte)13}, byteArray1);
      assertEquals("[text=\\r]", string0);
      assertNotNull(string0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      
      int int0 = ByteString.codePointIndexToCharIndex("*{", (-291));
      assertEquals(2, int0);
      
      int int1 = byteString1.hashCode();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(int1 == int0);
      assertEquals(1, byteString1.size());
      assertArrayEquals(new byte[] {(byte)13}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      InflaterSource inflaterSource0 = null;
      try {
        inflaterSource0 = new InflaterSource(buffer0, (Inflater) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // inflater == null
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      byteString0.hashCode();
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteString0.hashCode();
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSink0);
      
      Buffer buffer1 = buffer0.writeShort(9);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      ByteString byteString1 = hashingSink0.hash();
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(64, byteString1.size());
      assertNotNull(byteString1);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString1, byteString0);
      
      String string0 = byteString1.hex();
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(64, byteString1.size());
      assertEquals("9f939135799fb9bdf159395bd99d9bb7d93b99b5bb5715d993f99931d399999997dbd1395d95f3bbff9319d39779993f93b931bd9791799195393379f937d939", string0);
      assertNotNull(string0);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)92;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)92, (byte)92, (byte)92, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertNotNull(inflaterSource0);
      
      InflaterSource inflaterSource1 = new InflaterSource(inflaterSource0, inflater0);
      assertFalse(inflaterSource1.equals((Object)inflaterSource0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertNotNull(inflaterSource1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource1);
      assertFalse(inflaterSource0.equals((Object)inflaterSource1));
      assertFalse(inflaterSource1.equals((Object)inflaterSource0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotNull(buffer1);
      assertNotSame(buffer1, buffer0);
      
      InflaterSource inflaterSource2 = new InflaterSource(buffer1, inflater0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(inflaterSource0.equals((Object)inflaterSource1));
      assertFalse(inflaterSource1.equals((Object)inflaterSource0));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(inflaterSource2.equals((Object)inflaterSource1));
      assertFalse(inflaterSource2.equals((Object)inflaterSource0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotNull(inflaterSource2);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer2 = realBufferedSink0.buffer();
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(buffer2);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer2);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(hashingSource0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      HashingSource hashingSource1 = HashingSource.hmacSha1(hashingSource0, byteString0);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(7, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)92, (byte)92, (byte)92, (byte)0, (byte)0}, byteArray0);
      assertNotNull(hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(hashingSource0, hashingSource1);
      
      ByteString byteString1 = hashingSource1.hash();
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertEquals(20, byteString1.size());
      assertEquals(7, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)92, (byte)92, (byte)92, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(hashingSource0, hashingSource1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ByteString byteString2 = byteString0.substring(1, 1);
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals(0, byteString2.size());
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)92, (byte)92, (byte)92, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = byteString0.endsWith(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals(7, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)92, (byte)92, (byte)92, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
  }
}
