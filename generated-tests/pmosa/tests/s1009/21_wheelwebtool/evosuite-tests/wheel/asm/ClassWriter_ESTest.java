/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 14:48:44 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.Label;
import wheel.asm.MethodVisitor;
import wheel.asm.MethodWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(905);
      classWriter0.threshold = 814;
      Item item0 = classWriter0.newLong(0L);
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@6
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = (-154);
      ClassWriter classWriter0 = new ClassWriter((-154));
      String string0 = "bW;rE2H59g%v";
      // Undeclared exception!
      try { 
        classWriter0.newConstItem((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(47);
      classWriter0.visitEnd();
      int int0 = classWriter0.addType("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 703);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(32, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1404));
      classWriter0.newField("SourceDebugExtension", "SourceDebugExtension", "SourceDebugExtension");
      // Undeclared exception!
      try { 
        classWriter0.addType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1716);
      FieldWriter fieldWriter0 = classWriter0.lastField;
      classWriter0.lastField = null;
      classWriter0.newLong(0L);
      classWriter0.visitAnnotation("char", true);
      classWriter0.newField("", ":Iy~;yU%!Un)f", ":Iy~;yU%!Un)f");
      Attribute attribute0 = new Attribute("");
      Attribute attribute1 = attribute0.next;
      // Undeclared exception!
      try { 
        classWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-579));
      classWriter0.newNameType("O$< x)-2h%p]", "O$< x)-2h%p]");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1818);
      classWriter0.visitOuterClass("1tL=H-", (String) null, (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65);
      classWriter0.toByteArray();
      classWriter0.newInteger(65);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "`/@z:grZ{b<I:v{M?";
      stringArray0[2] = "`/@z:grZ{b<I:v{M?";
      stringArray0[3] = "`/@z:grZ{b<I:v{M?";
      stringArray0[4] = "`/@z:grZ{b<I:v{M?";
      stringArray0[5] = "";
      stringArray0[6] = "`/@z:grZ{b<I:v{M?";
      classWriter0.visit(355, 4978, "", "", "`/@z:grZ{b<I:v{M?", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-304));
      classWriter0.getCommonSuperClass("wheel.asm.Frame", "org.apache.commons.io.filefilter.EmptyFileFilter");
      classWriter0.newClassItem("java/lang/Object");
      String[] stringArray0 = new String[0];
      classWriter0.visit(13, 13, "wheel.asm.Frame", (String) null, (String) null, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5742);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "qW";
      stringArray0[3] = "qW";
      stringArray0[4] = null;
      stringArray0[5] = "qW";
      stringArray0[6] = "qW";
      // Undeclared exception!
      try { 
        classWriter0.visit(5742, 5742, "qW", "qW", (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-579));
      Attribute attribute0 = new Attribute("");
      classWriter0.visitAttribute(attribute0);
      classWriter0.visitSource("LocalVariableTypeTable", "LocalVariableTypeTable");
      byte[] byteArray0 = ClassWriter.TYPE;
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitSource("", "");
      classWriter0.thisName = "";
      classWriter0.newInteger(817);
      int int0 = classWriter0.newClass("~^#rCR5");
      assertEquals(4, int0);
      
      classWriter0.newFieldItem("~^#rCR5", "\"1lI_`Z2HsQ)?F?", "t5x7q");
      int int1 = classWriter0.newMethod("~^#rCR5", "O7_x-CL;pe#z)p", "~^#rCR5", false);
      assertEquals(11, int1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1844);
      classWriter0.visitSource("", "");
      classWriter0.newConst("");
      int int0 = classWriter0.newConst("");
      assertEquals(2, int0);
      
      int int1 = classWriter0.addType("VOrlHrom");
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(814);
      Item item0 = classWriter0.newConstItem("B5");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Synthetic";
      stringArray0[1] = "RuntimeVisibleAnnotations";
      stringArray0[2] = "Synthetic";
      stringArray0[3] = "Synthetic";
      stringArray0[4] = "Synthetic";
      stringArray0[5] = "Synthetic";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(5540, "Synthetic", "RuntimeVisibleAnnotations", "Synthetic", stringArray0);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-579));
      int int0 = classWriter0.addUninitializedType("", 467);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-79));
      classWriter0.visitOuterClass("fV}*2It+r", "fV}*2It+r", (String) null);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-79), (-79));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2260);
      Attribute attribute0 = null;
      // Undeclared exception!
      try { 
        classWriter0.visitField(2260, (String) null, (String) null, "*ec';Nl')+=e", "*ec';Nl')+=e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, (-24));
      Item item0 = classWriter0.newDouble((-24));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2569));
      classWriter0.newMethodItem("", "", "", true);
      classWriter0.newMethod("", "", "", false);
      classWriter0.newClass("wheel.asm.ClassWriter");
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("a69=", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newDouble(845.4866359480495);
      ClassWriter classWriter1 = new ClassWriter(10);
      classWriter1.visitOuterClass("2(PQPL#'Q?-H", "DXm4$otK`", (String) null);
      assertFalse(classWriter1.equals((Object)classWriter0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1404));
      classWriter0.visit((-1404), (-1404), "", "", "9vvNIT(@>v.r](l", (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassWriter classWriter0 = new ClassWriter((-54));
      String string0 = null;
      classWriter0.visitSource((String) null, (String) null);
      int int0 = 65535;
      String string1 = "";
      String string2 = "";
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      String string3 = "!";
      // Undeclared exception!
      try { 
        classWriter0.visitOuterClass((String) null, "MS", "!'(`($'n@@ AP`Y'~>h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2587));
      Object object0 = new Object();
      Boolean boolean0 = Boolean.valueOf(true);
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-141));
      Item item0 = classWriter0.newInteger((-2569));
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Boolean boolean0 = new Boolean(false);
      Item item1 = classWriter0.newConstItem(boolean0);
      assertNotSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-141));
      classWriter0.newLong((-141));
      classWriter0.addType("\"~=p/BH2S/*N je!c");
      int int0 = classWriter0.newMethod("wheel.asm.Type", "gRp", "", false);
      assertEquals(8, int0);
      
      int int1 = classWriter0.addUninitializedType("", (-3324));
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      Item item0 = classWriter0.newInteger(2);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2757);
      classWriter0.threshold = (-32);
      Item item0 = classWriter0.newFloat(2757);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Type type0 = Type.VOID_TYPE;
      classWriter0.newConst(type0);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Type type0 = Type.FLOAT_TYPE;
      classWriter0.newConstItem(type0);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(814);
      String[] stringArray0 = new String[0];
      classWriter0.visit((-1281), (-1281), "value ", "value ", "4u9w+j\u0005 w 23E$", stringArray0);
      classWriter0.toByteArray();
      Float float0 = new Float(0.0);
      int int0 = classWriter0.newConst(float0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-573));
      classWriter0.newInteger(1995);
      classWriter0.newFloat(536.386F);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.io.filefilter.EmptyFileFilter";
      classWriter0.visit((-2924), 1995, "Kgi", (String) null, "org.apache.commons.io.filefilter.EmptyFileFilter", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(47);
      classWriter0.visitEnd();
      classWriter0.newFloat(47);
      Item item0 = classWriter0.newDouble((-230.30269482578416));
      assertNotNull(item0);
      
      Item item1 = classWriter0.newInteger(47);
      Integer.max(703, 0);
      classWriter0.visitInnerClass("|n$6", "|n$6", "|n$6", 703);
      Item item2 = classWriter0.newInteger(47);
      assertSame(item2, item1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      byte[] byteArray0 = new byte[5];
      Item item0 = classWriter0.newLong(0);
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)125;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Item item1 = classWriter0.newLong(0);
      assertNotNull(item1);
      assertSame(item1, item0);
      
      Item item2 = classWriter0.newDouble((-1.0));
      assertNotSame(item2, item0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(905);
      classWriter0.addType("xyc}c");
      classWriter0.visitInnerClass("xyc}c", "", "xyc}c", 1);
      classWriter0.newFloat(0.0F);
      classWriter0.visitInnerClass("", "KZgAa", "KZgAa", 736);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-579));
      Item item0 = classWriter0.newDouble(1174.525558097306);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newFloat(0.0F);
      Item item2 = classWriter0.newFloat(0.0F);
      assertSame(item2, item1);
      assertNotNull(item2);
      assertNotSame(item2, item0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassWriter classWriter0 = new ClassWriter(Integer.MAX_VALUE);
      classWriter0.newField("0cj~fW:", "0cj~fW:", "0cj~fW:");
      classWriter0.newUTF8("[]");
      classWriter0.newInteger(4390);
      classWriter0.newDouble((byte) (-111));
      Integer integer0 = Integer.getInteger("0cj~fW:", (int) (byte)16);
      classWriter0.newConst(integer0);
      classWriter0.visitEnd();
      classWriter0.addUninitializedType("[]", (byte)16);
      classWriter0.addUninitializedType("[]", (byte)16);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(4, (byte) (-111));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      Item[] itemArray0 = new Item[8];
      Item item0 = classWriter0.newDouble((-24));
      itemArray0[0] = item0;
      Item item1 = classWriter0.newInteger((-1877));
      itemArray0[1] = item1;
      Item item2 = new Item();
      itemArray0[2] = item2;
      Item item3 = classWriter0.newFieldItem("", "", "K5Dx71ZEv");
      itemArray0[3] = item3;
      Item item4 = classWriter0.newDouble((-1877));
      itemArray0[4] = item4;
      Item item5 = classWriter0.newDouble((-1877));
      itemArray0[5] = item5;
      Item item6 = new Item((-24), item5);
      itemArray0[6] = item6;
      Item item7 = classWriter0.newFieldItem("T=z", "T=z", "void");
      item5.strVal3 = "_f0gWBX`@:";
      itemArray0[7] = item7;
      classWriter0.typeTable = itemArray0;
      classWriter0.newDouble((-24));
      Item item8 = classWriter0.newLong((-24L));
      assertFalse(item8.equals((Object)item1));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-297));
      classWriter0.getCommonSuperClass("wheel.asm.Frame", "wheel.asm.Frame");
      classWriter0.addType("wheel.asm.Frame");
      Item item0 = classWriter0.newMethodItem("", ";::Jf{w7t{t$:$%~+v", "wheel.asm.Frame", false);
      assertNotNull(item0);
      
      classWriter0.newFieldItem("TIomUxpaKsXP", ",/|M?Ra+4R=:V0WQ%", "wheel.asm.Frame");
      int int0 = classWriter0.addType("wheel.asm.Frame");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-297));
      classWriter0.newDouble((-297));
      classWriter0.getCommonSuperClass("wheel.asm.Frame", "org.apache.commons.io.filefilter.EmptyFileFilter");
      classWriter0.addType("V22}-VZ:4]B!sume");
      classWriter0.newMethodItem("$i92w", "M^$:{{ Gp??~7QH", "$i92w", false);
      String string0 = "&u_/>QaLz";
      classWriter0.newFieldItem("$i92w", "&u_/>QaLz", "*u%5");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)29;
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)1;
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-310));
      classWriter0.getCommonSuperClass("wheel.asm.Frame", "org.apache.commons.io.filefilter.EmptyFileFilter");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(218, (-310));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-279));
      classWriter0.newMethod("", "", "", false);
      classWriter0.newNameType("", "? pr?BKW>)rv");
      Item item0 = classWriter0.newMethodItem("", "", "", false);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1085));
      classWriter0.newDouble(0.0);
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.EmptyFileFilter", "wheel.asm.Frame");
      String string0 = "V22}-VZ:]\\!sum(e";
      classWriter0.addType("V22}-VZ:]!sum(e");
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem("", (String) null, "}A@?:W[&Y!", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(114);
      Item[] itemArray0 = new Item[7];
      classWriter0.visitAnnotation("EnclosingMethod", false);
      Item item0 = classWriter0.newInteger(114);
      itemArray0[0] = item0;
      Item item1 = classWriter0.newInteger(1674);
      itemArray0[1] = item1;
      Item item2 = classWriter0.newFieldItem("WZ5^$W(2ulBO(v/,4", "WZ5^$W(2ulBO(v/,4", "WZ5^$W(2ulBO(v/,4");
      itemArray0[2] = item2;
      Item item3 = classWriter0.newFieldItem("WZ5^$W(2ulBO(v/,4", "WZ5^$W(2ulBO(v/,4", "WZ5^$W(2ulBO(v/,4");
      itemArray0[3] = item3;
      Item item4 = classWriter0.newClassItem("");
      itemArray0[4] = item4;
      Item item5 = classWriter0.newMethodItem("WZ5^$W(2ulBO(v/,4", "WkR'qd;", "Deprecated", false);
      itemArray0[5] = item5;
      Item item6 = classWriter0.key3;
      itemArray0[6] = item6;
      classWriter0.typeTable = itemArray0;
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(114, 114);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 114
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }
}
