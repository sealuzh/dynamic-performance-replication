/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 23:50:09 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap0.put("", hashMap1);
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0);
      Map<String, Object> map0 = doubleKeyMap0.remove("");
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap1.put((String) null, (Object) null);
      hashMap0.put("", hashMap1);
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0);
      Map<String, Object> map0 = doubleKeyMap0.remove("");
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      doubleKeyMap0.put("", "", "us.codecraft.webmagic.utils.DoubleKeyMap");
      String string0 = doubleKeyMap0.get("", "");
      assertEquals("us.codecraft.webmagic.utils.DoubleKeyMap", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-379));
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>();
      doubleKeyMap0.put("", integer0, integer0);
      Map<Integer, Integer> map0 = doubleKeyMap0.get("");
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Object, Map<String, Map<HashMap<String, String>, Integer>>> hashMap0 = new HashMap<Object, Map<String, Map<HashMap<String, String>, Integer>>>();
      DoubleKeyMap<Object, String, Map<HashMap<String, String>, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, String, Map<HashMap<String, String>, Integer>>(hashMap0);
      DoubleKeyMap<Map<String, Integer>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Map<String, Integer>, Object, Object>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Object object0 = doubleKeyMap1.remove((Map<String, Integer>) hashMap1, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Object, String, Map<HashMap<String, String>, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, String, Map<HashMap<String, String>, Integer>>();
      DoubleKeyMap<Object, HashMap<Integer, String>, Map<String, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Integer, String>, Map<String, Object>>();
      Map<HashMap<String, String>, Integer> map0 = doubleKeyMap0.remove((Object) doubleKeyMap1, "");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      Map<Integer, String> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      Map<Integer, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Object>(map0);
      Map<Object, Map<Integer, Object>> map1 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, Object>(map1, class0);
      Integer integer0 = new Integer(1);
      Object object0 = doubleKeyMap2.put((Object) integer0, integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Map<HashMap<String, String>, Integer>, Object, Map<Integer, Map<Object, Map<HashMap<String, String>, Integer>>>> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<String, String>, Integer>, Object, Map<Integer, Map<Object, Map<HashMap<String, String>, Integer>>>>();
      DoubleKeyMap<Map<HashMap<String, String>, Integer>, Object, HashMap<String, Integer>> doubleKeyMap1 = new DoubleKeyMap<Map<HashMap<String, String>, Integer>, Object, HashMap<String, Integer>>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<String, Integer> hashMap1 = doubleKeyMap1.put((Map<HashMap<String, String>, Integer>) null, (Object) doubleKeyMap0, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>();
      Map<String, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>(map0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((String) null, "", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>();
      DoubleKeyMap<Object, Integer, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Map<Object, Integer>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Map<Object, Integer> map0 = doubleKeyMap1.put((Object) doubleKeyMap0, (Integer) null, (Map<Object, Integer>) hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>(class0);
      Integer integer0 = new Integer(1);
      Object object0 = doubleKeyMap0.get(integer0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      Map<String, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>(map0);
      String string0 = doubleKeyMap1.get("", (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      Object object0 = doubleKeyMap0.get((Integer) null, (Object) "wrong proto type map ");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Object, String, Map<HashMap<String, String>, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, String, Map<HashMap<String, String>, Integer>>();
      DoubleKeyMap<Object, HashMap<Integer, String>, Map<String, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Integer, String>, Map<String, Object>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Map<String, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0, hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0, class0);
      Map<Object, String> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<Object, String, Map<HashMap<String, String>, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, String, Map<HashMap<String, String>, Integer>>();
      HashMap<Object, Map<Integer, Map<HashMap<String, String>, Integer>>> hashMap0 = new HashMap<Object, Map<Integer, Map<HashMap<String, String>, Integer>>>();
      DoubleKeyMap<Object, Integer, Map<HashMap<String, String>, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Map<HashMap<String, String>, Integer>>(hashMap0);
      Map<Integer, Map<HashMap<String, String>, Integer>> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put("B+>V 9+}jo?", integer0, integer0);
      Integer integer1 = new Integer(0);
      Integer integer2 = doubleKeyMap0.remove("B+>V 9+}jo?", integer1);
      assertEquals(0, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      String string0 = doubleKeyMap0.remove((String) null, "X");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put("", integer0, integer0);
      Integer integer1 = doubleKeyMap0.put("", integer0, integer0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = doubleKeyMap0.put("B+>V 9+}jo?", integer0, integer0);
      Integer integer2 = doubleKeyMap0.remove("B+>V 9+}jo?", integer1);
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<HashMap<String, String>, Integer>, Map<HashMap<String, String>, Integer>, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<String, String>, Integer>, Map<HashMap<String, String>, Integer>, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleKeyMap<Object, String, Map<HashMap<String, String>, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, String, Map<HashMap<String, String>, Integer>>();
      Object object0 = new Object();
      Map<String, Map<HashMap<String, String>, Integer>> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      doubleKeyMap0.put("X", "X", "us.codecraft.webmagic.utils.DoubleKeyMap");
      String string0 = doubleKeyMap0.get("X", "");
      assertNull(string0);
  }
}
