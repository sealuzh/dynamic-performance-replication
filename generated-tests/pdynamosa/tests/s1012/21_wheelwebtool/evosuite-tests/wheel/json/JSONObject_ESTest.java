/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 02:54:54 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString((String) null, (String) null);
      jSONObject0.optJSONArray((String) null);
      jSONObject0.optInt("244hiR)}M]*\"I@T", 44);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("244hiR)}M]*\"I@T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 244hiR)}M]*\"I@T
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("TZ*N}#j6IduKctZr2-%", true);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = JSONObject.quote("v*=/N:x*E_Z5");
      assertEquals("\"v*=/N:x*E_Z5\"", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)128);
      JSONObject.valueToString(short0, (short)128, (-2565));
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject.quote("wheel.json.JSONTokener");
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getDouble("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("JSONObject[", object0);
      jSONObject1.toString(660, 30);
      double double0 = jSONObject0.optDouble("{\"java.lang.String@0000000003\": [\"java.lang.Object@0000000004\"]}", (double) 660);
      assertEquals(660.0, double0, 0.01);
      
      boolean boolean0 = jSONObject1.isNull("o");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-72.9));
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.put("lis", (Object) boolean0);
      Object object0 = JSONObject.NULL;
      jSONObject1.putOpt("] is not a Boolean.", object0);
      Object object1 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject1);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      int int0 = jSONObject2.optInt("lis");
      assertEquals(2, jSONObject1.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      Boolean boolean0 = new Boolean("pa");
      Boolean.logicalOr(true, true);
      Long long0 = new Long((-1L));
      hashMap0.put(boolean0, long0);
      JSONObject jSONObject1 = jSONObject0.put("ap", (Map) hashMap0);
      double double0 = new Float((-1990.382));
      JSONArray jSONArray1 = jSONObject1.names();
      assertFalse(jSONArray1.equals((Object)jSONArray0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "joi";
      stringArray0[1] = "nC@Im{vxFCAfRLzA";
      stringArray0[2] = "\b";
      JSONObject jSONObject0 = new JSONObject("\b", stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("t),b]", true);
      assertTrue(boolean0);
      
      JSONObject.valueToString("t),b]", 88, 88);
      String[] stringArray1 = JSONObject.getNames((Object) "joi");
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Bad value from toJSONString: ";
      Long long0 = new Long((-3618L));
      Long.sum((-3618L), (-3618L));
      JSONObject.valueToString(long0, 1, (-2642));
      stringArray0[1] = "";
      stringArray0[2] = "KjUA@s,KS{l=";
      stringArray0[3] = "*&q/FIc>ql1IzC";
      String string0 = "@#1Fi.0>g/B";
      stringArray0[4] = "@#1Fi.0>g/B";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "}iK6[LJT48B=";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getJSONArray("*&q/FIc>ql1IzC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*&q/FIc>ql1IzC\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("&FA", 5312.633605079147);
      jSONObject1.putOpt("&FA", jSONObject0);
      jSONObject1.optDouble("wheel.json.JSONTokener");
      try { 
        jSONObject1.getInt("&FA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&FA\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\b";
      stringArray0[1] = "\b";
      stringArray0[2] = "\b";
      stringArray0[3] = "\b";
      stringArray0[4] = "\b";
      JSONObject jSONObject0 = new JSONObject("\b", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("\b", false);
      int int0 = jSONObject1.optInt("YL", 0);
      assertEquals(0, int0);
      
      boolean boolean0 = jSONObject1.isNull("\b");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.put("getadd", 896);
      jSONObject2.toString((-1059), (-1059));
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.append("\"\"", object0);
      jSONObject0.putOpt("wheel.json.JSONTokener", jSONObject1);
      jSONObject1.getJSONArray("\"\"");
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      long long0 = jSONObject0.optLong((String) null, (-1599L));
      assertEquals((-1599L), long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(19);
      JSONObject jSONObject1 = jSONObject0.put("{}", false);
      JSONObject jSONObject2 = jSONObject1.accumulate("{}", (Object) null);
      JSONObject.quote("fIYI>LYd%E7*9!");
      jSONObject0.toString();
      jSONObject0.optString("{}", "{}");
      jSONObject2.optJSONArray("\"fIYI>LYd%E7*9!\"");
      jSONObject0.optInt("] is not a Boolean.", 19);
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("Kjgj(TlWN.eAq\"qC?'w", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.accumulate("Kjgj(TlWN.eAq\"qC?'w", linkedList0);
      assertSame(jSONObject1, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Byte byte0 = new Byte((byte)69);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject();
      Byte.toUnsignedLong((byte)69);
      JSONObject jSONObject1 = jSONObject0.put("!`b`", (double) 69L);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      Double double0 = new Double((byte)69);
      JSONObject.valueToString(double0);
      Double.isFinite(69L);
      Boolean boolean0 = new Boolean("byL`");
      jSONObject2.keys();
      JSONObject jSONObject3 = new JSONObject();
      JSONObject jSONObject4 = jSONObject1.putOpt("byL`", jSONObject3);
      jSONObject4.toString();
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000007\":wheel.json.JSONObject@0000000006,\"java.lang.String@0000000002\":java.lang.Double@0000000003}");
      jSONObject1.toString((-782), 92);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(906.24);
      linkedList0.add(double0);
      jSONObject0.put("ks:wG>", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("ks:wG>");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("\b", true);
      jSONObject0.put("", (-628L));
      Long long0 = new Long((-1L));
      Long.remainderUnsigned(0L, (-1L));
      jSONObject0.accumulate("getvalueOf", long0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0, (-3661), 35);
      boolean boolean0 = false;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      jSONObject0.put("", (Map) hashMap0);
      String string0 = JSONObject.quote("3");
      assertEquals("\"3\"", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("0");
      assertNull(jSONObject1);
      
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(5005);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "null", 2596, 1771);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("n}a,jvzfp4r\"", true);
      boolean boolean0 = jSONObject0.getBoolean("n}a,jvzfp4r\"");
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte)112);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt((String) null);
      JSONObject.getNames(jSONObject0);
      jSONObject0.keys();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString(" at character ");
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(19);
      JSONObject jSONObject1 = jSONObject0.put("{}", false);
      jSONObject1.accumulate("{}", (Object) null);
      JSONObject.quote("fIYI>LYd%E7*9!");
      jSONObject0.toString();
      String string0 = "UDt q~";
      JSONObject jSONObject2 = jSONObject0.put("UDt q~", (Map) hashMap0);
      jSONObject2.get("UDt q~");
      Object object0 = new Object();
      hashMap0.put(object0, (Object) null);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("&FA", 5312.633605079147);
      jSONObject1.getInt("&FA");
      jSONObject0.keys();
      JSONObject jSONObject2 = jSONObject0.put("JSONObject[", 29);
      try { 
        jSONObject2.getJSONArray("JSONObject[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONObject[\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "{f?\"UvT$NxzJe8[Pt";
      stringArray0[1] = "{f?\"UvT$NxzJe8[Pt";
      stringArray0[2] = "gC";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "{f?\"UvT$NxzJe8[Pt";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("{f?\"UvT$NxzJe8[Pt", true);
      JSONObject jSONObject2 = jSONObject1.put("", (-2496L));
      StringWriter stringWriter0 = new StringWriter(2641);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "gC");
      StringWriter stringWriter2 = stringWriter1.append('_');
      stringWriter2.write(2641);
      jSONObject2.write(stringWriter0);
      jSONObject1.toString(61, 92);
      jSONObject2.optLong("isoptString", (-2496L));
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray((Collection) null);
      jSONObject0.toJSONArray(jSONArray1);
      double double0 = jSONObject1.getDouble("");
      assertEquals((-2496.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("nC@Im{vxFCAfRLzA", 0L);
      try { 
        jSONObject1.getBoolean("nC@Im{vxFCAfRLzA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nC@Im{vxFCAfRLzA\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONObject$1", (-1534.2053354921889));
      double double0 = jSONObject0.optDouble("wheel.json.JSONObject$1");
      assertEquals((-1534.2053354921889), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Missing value", true);
      jSONObject0.toString();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      
      JSONObject.quote("{\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      boolean boolean0 = jSONObject1.optBoolean("Missing value");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zk", true);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      hashMap0.getOrDefault((Object) null, long0);
      Integer integer0 = new Integer((-1889));
      Long long1 = new Long(1607L);
      hashMap0.put(integer0, long1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.put(">)uo=)LH", (Object) float0);
      JSONObject jSONObject2 = jSONObject1.putOpt(">)uo=)LH", float0);
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      jSONObject0.optInt(">)uo=)LH");
      assertEquals(2, jSONObject0.length());
      
      long long2 = jSONObject2.optLong(">)uo=)LH", (-813L));
      assertEquals(2, jSONObject0.length());
      assertEquals(0L, long2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      int int0 = jSONObject0.optInt((String) null, 1368);
      assertEquals(1368, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      hashMap0.getOrDefault((Object) null, long0);
      Integer integer0 = new Integer((-1889));
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.listIterator();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "\"@Uob\\Sp";
      jSONObject0.put("\"@UobSp", (Collection) linkedList0);
      jSONObject0.remove((String) null);
      double double0 = 1.0;
      Short.compare((short) (-108), (short) (-108));
      JSONTokener jSONTokener0 = new JSONTokener("F-<.]Ht|O%f~nsy ");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of F-<.]Ht|O%f~nsy 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("gC", true);
      jSONObject1.put("gC", 0L);
      jSONObject0.optJSONObject("gC");
      jSONObject1.optJSONObject((String) null);
      String string0 = JSONObject.doubleToString(0L);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("gC", true);
      jSONObject1.put("gC", 0L);
      StringWriter stringWriter0 = new StringWriter((short)0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter0.append('\\');
      stringWriter1.write((int) (short)0);
      jSONObject1.write(stringWriter2);
      jSONObject1.toString(61, 2641);
      jSONObject0.optLong("gC", (long) 2641);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject2 = new JSONObject(jSONArray1);
      jSONObject2.toJSONArray(jSONArray1);
      jSONObject0.optString("getoptJSONObject", "gC");
      jSONObject2.optString("", "get");
      assertEquals(1, jSONObject2.length());
      
      JSONObject.numberToString(short0);
      try { 
        jSONObject1.getInt("ac");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ac\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "get";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of get
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(70.355358);
      JSONObject jSONObject1 = jSONObject0.putOpt("isvalueOf", float0);
      Object object0 = JSONObject.NULL;
      Long long0 = new Long((-912L));
      JSONObject.getNames((Object) long0);
      int int0 = jSONObject1.optInt("isvalueOf");
      assertEquals(1, jSONObject0.length());
      assertEquals(70, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gC", true);
      JSONObject jSONObject2 = jSONObject1.put("gC", 0L);
      JSONObject jSONObject3 = jSONObject2.put("", 59);
      double double0 = jSONObject3.getDouble("");
      assertEquals(59.0, double0, 0.01);
      
      jSONObject3.put("", 1109L);
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject4 = new JSONObject(boolean0);
      assertEquals(1, jSONObject4.length());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Unterminated string", "Unterminated string");
      jSONObject0.optDouble("(l=epwlcA9XS");
      String string0 = jSONObject1.getString("Unterminated string");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Byte byte0 = new Byte((byte)69);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte.toUnsignedLong((byte)69);
      JSONObject jSONObject1 = jSONObject0.put("!`b`", (double) 69L);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      Double double0 = new Double((byte)69);
      JSONObject.valueToString(double0);
      boolean boolean0 = new Boolean("byL`");
      jSONObject2.keys();
      JSONObject jSONObject3 = new JSONObject();
      JSONObject jSONObject4 = jSONObject1.putOpt("byL`", jSONObject3);
      jSONObject0.toString(232);
      jSONObject4.toString();
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000007\":wheel.json.JSONObject@0000000006,\"java.lang.String@0000000002\":java.lang.Double@0000000003}");
      JSONObject jSONObject5 = new JSONObject(jSONTokener0);
      try { 
        jSONObject5.getBoolean(">6Gava<DnDJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">6Gava<DnDJ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Short short0 = new Short((short)8448);
      short short1 = (short)4032;
      Short.toUnsignedInt((short)57);
      Short.compare((short)118, (short)118);
      Short.compare((short) (-770), (short)4032);
      JSONObject.getNames((Object) short0);
      JSONTokener jSONTokener0 = new JSONTokener("2O'F");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("2O'F", (Map) null);
      jSONObject0.has("2O'F");
      jSONTokener0.skipTo('>');
      jSONObject0.optBoolean("gettoUnsignedLong", false);
      jSONTokener0.next();
      jSONObject0.remove("2O'F");
      JSONObject.doubleToString(0.0);
      try { 
        jSONObject0.getJSONObject("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("Y1W}(</>_.~W");
      assertEquals("\"Y1W}(<\\/>_.~W\"", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-1249));
      JSONObject.valueToString(short0, (short) (-1249), (-325));
      String string0 = JSONObject.valueToString(jSONObject0, (-2695), (-607));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("val");
      assertEquals(0L, long0);
      
      long long1 = jSONObject0.optLong("de", 0L);
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("", "");
      jSONObject0.optString("wheel.json.JSONObject$Null", "wheel.json.JSONObject$Null");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("istoString", (-2566L));
      assertEquals((-2566L), long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.put("", (Collection) linkedList0);
      double double0 = jSONObject0.optDouble("G#%O`", (-1027.5));
      assertEquals((-1027.5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "b";
      stringArray0[1] = "b";
      stringArray0[2] = "b";
      stringArray0[0] = "b";
      stringArray0[4] = "b";
      JSONObject jSONObject0 = new JSONObject("b", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("b", false);
      jSONObject1.optInt("YL", 0);
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = jSONObject0.isNull("kEo");
      boolean boolean1 = jSONObject0.optBoolean("");
      assertFalse(boolean1 == boolean0);
      
      StringWriter stringWriter0 = new StringWriter(0);
      jSONObject0.write(stringWriter0);
      String string0 = jSONObject1.optString("5t]dO{~^kj", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "=(Wc";
      stringArray0[2] = "0";
      stringArray0[3] = "va";
      stringArray0[4] = "A JSONObject text must end with '}'";
      stringArray0[5] = "Unclosed comment";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      long long0 = jSONObject1.optLong((String) null);
      assertEquals(0L, long0);
      
      int int0 = jSONObject1.optInt((String) null, (-22));
      assertEquals((-22), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)13);
      Short.toUnsignedLong((short)13);
      Short.compare((short)1201, (short)1980);
      String string0 = JSONObject.valueToString(short0, (short)13, 8448);
      Integer integer0 = new Integer((short)13);
      JSONObject jSONObject1 = new JSONObject(integer0);
      String string1 = JSONObject.valueToString("", 16, 927);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Boolean.logicalAnd(true, true);
      boolean boolean1 = true;
      Boolean.logicalOr(true, false);
      String string0 = "An\\v)-y";
      jSONObject0.optDouble("Anv)-y", (double) 22);
      Boolean.logicalOr(false, true);
      jSONObject0.toString(22);
      Boolean.compare(true, true);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.toJSONArray((JSONArray) null);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("gC", true);
      JSONObject jSONObject2 = jSONObject1.put("gC", 0L);
      StringWriter stringWriter0 = new StringWriter((short)0);
      stringWriter0.append((CharSequence) "");
      double double0 = jSONObject2.optDouble("gC");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.append("getdecode", object0);
      String string0 = jSONObject0.toString(660, 660);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('4');
      Writer writer0 = jSONArray0.write(stringWriter1);
      jSONObject0.write(writer0);
      JSONObject jSONObject1 = jSONObject0.append("`-B;m0PT@H\"", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      hashMap0.getOrDefault((Object) null, long0);
      Integer integer0 = new Integer((-1889));
      String[] stringArray0 = new String[2];
      String string0 = "toJ";
      stringArray0[0] = "toJ";
      stringArray0[1] = "zM|";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.optBoolean("toJ");
      try { 
        jSONObject0.getString("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.putOpt("isjoin", "isjoin");
      try { 
        jSONObject0.getBoolean("isjoin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isjoin\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      jSONArray0.put((Map) hashMap0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject.doubleToString((-1.0));
      String string0 = "#r)F`+n_";
      JSONTokener jSONTokener0 = new JSONTokener("#r)F`+n_");
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 7 of #r)F`+n_
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("jo", true);
      Integer integer0 = new Integer(55);
      jSONObject0.put("jo", (Object) integer0);
      JSONObject jSONObject2 = jSONObject0.put("jo", 0L);
      JSONObject jSONObject3 = jSONObject2.put("JSONArray initial value should be a string or collection or array.", 102);
      jSONObject3.put("JSONArray initial value should be a string or collection or array.", 0L);
      jSONObject1.put("JSONArray initial value should be a string or collection or array.", 0L);
      String string0 = jSONObject1.toString((-1049), (-3054));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "\"2e\\+$($9'i16_A+3&";
      try { 
        jSONObject0.getJSONObject("\"2e+$($9'i16_A+3&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"2e+$($9'i16_A+3&\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = new JSONObject((Object) "gC");
      jSONObject1.put("gC", (-12L));
      StringWriter stringWriter0 = new StringWriter((short)0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter0.append('\\');
      stringWriter1.write((int) (short)0);
      jSONObject1.write(stringWriter2);
      jSONObject1.toString(29, (int) (short)0);
      assertEquals(4, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      JSONObject jSONObject1 = jSONObject0.put("G4{^C#ef}$=GY7", true);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject2 = jSONObject1.put("G4{^C#ef}$=GY7", (Collection) linkedList0);
      String string0 = "9L8$`#F=";
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-1839), (-1839));
      jSONObject0.optInt("9L8$`#F=");
      JSONObject jSONObject3 = jSONObject0.put("0", (Object) jSONObject2);
      jSONObject1.optDouble("R=q7)OqOlIAlR");
      jSONObject3.length();
      jSONObject0.toString();
      StringWriter stringWriter0 = new StringWriter(0);
      // Undeclared exception!
      jSONObject0.write(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[1];
      String string0 = "gC";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("gC", true);
      Float float0 = new Float((double) (short)0);
      JSONObject.valueToString(float0);
      JSONObject jSONObject2 = jSONObject1.put("gC", 0L);
      int int0 = 2641;
      jSONObject2.append("", jSONObject1);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONObject.doubleToString((-3700.7));
      Object object0 = new Object();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\b";
      stringArray0[1] = "\b";
      stringArray0[2] = "\b";
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject("\b", stringArray0);
      String string0 = jSONObject0.toString((-1213), (-1213));
      assertEquals("{}", string0);
      
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      String string1 = JSONObject.quote("\b");
      assertEquals("\"\\b\"", string1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("'c.BK7\"eX;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 'c.BK7\"eX;
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject(object0);
      jSONObject1.toString((-522));
      int int0 = jSONObject1.optInt("", 542);
      assertEquals(542, int0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      long long0 = jSONObject0.optLong("", 1677L);
      assertEquals(1677L, long0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap0.put(jSONArray0, jSONObject0);
      jSONObject0.put(";g+56/~dUmuv{[d-", (Map) hashMap0);
      jSONObject0.optJSONObject(";g+56/~dUmuv{[d-");
      try { 
        jSONObject0.getLong("Bl.kwW#MR.?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Bl.kwW#MR.?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      byte byte0 = (byte)85;
      Byte byte1 = new Byte((byte)85);
      hashMap0.putIfAbsent(byte1, byte1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "wheel.json.JSONException";
      hashMap0.entrySet();
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONException", "wheel.json.JSONException");
      try { 
        jSONObject1.getJSONObject("TAv=JEe]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"TAv=JEe]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSONObject[", false);
      JSONObject jSONObject2 = jSONObject1.accumulate("JSONObject[", "JSONObject[");
      JSONObject.valueToString(jSONObject2, 10, 10);
      jSONObject2.put("JSONObject[", false);
      JSONObject.quote(",:]}/\"[{;=#");
      jSONObject0.toString();
      JSONObject.getNames(jSONObject0);
      boolean boolean0 = jSONObject1.optBoolean(",:]}/\"[{;=#", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("ks:wG>", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("ks:wG>");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("", (double) (short)0);
      String string0 = jSONObject0.optString("-912.93650", "-912.93650");
      assertEquals("-912.93650", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      Long long0 = new Long((-3618L));
      Long.sum((-3618L), (-3618L));
      JSONObject.valueToString(long0, 1, (-2642));
      stringArray0[1] = "";
      stringArray0[2] = "KjUA@s,KS{l=";
      stringArray0[3] = "*&q/Fc>ql1IzC";
      stringArray0[4] = "@#1Fi.0>g/B";
      stringArray0[6] = "";
      stringArray0[7] = "}iK6[LJT48B=";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("", (-1L));
      jSONObject2.optBoolean("@#1Fi.0>g/B");
      jSONObject0.has((String) null);
      jSONObject1.optDouble("P}&wj=`4qh(c7UYU][@");
      try { 
        jSONObject2.accumulate((String) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "] is not a Boolean.";
      JSONObject.quote("] is not a Boolean.");
      HashMap<JSONArray, Double> hashMap1 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0";
      stringArray0[1] = "0";
      JSONObject jSONObject0 = new JSONObject("0", stringArray0);
      try { 
        jSONObject0.getString("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = " {V";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(" {V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of  {V
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Short short0 = new Short((short)54);
      short short1 = (short)0;
      Short.toUnsignedInt((short)0);
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.toUnsignedLong((short)54);
      String string0 = "*mg49)`";
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\b";
      stringArray0[1] = "\b";
      stringArray0[2] = "\b";
      stringArray0[3] = "\b";
      stringArray0[4] = "\b";
      JSONObject jSONObject0 = new JSONObject("\b", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("\b", false);
      int int0 = jSONObject1.optInt("YL", 0);
      jSONObject0.isNull("kEo");
      JSONObject jSONObject2 = jSONObject0.put("F}", 2011);
      jSONObject2.getBoolean("\b");
      jSONObject1.toString(0, 0);
      JSONObject.quote("\b");
      int int1 = jSONObject2.length();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("gC", true);
      jSONObject1.put("gC", 0L);
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      jSONObject1.put("", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter((short)0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter0.append('\\');
      stringWriter1.write((int) (short)0);
      Writer writer0 = jSONObject1.write(stringWriter2);
      jSONObject1.write(writer0);
      jSONObject1.put("", (-12469270));
      String string0 = jSONObject1.toString(2641, 91);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Float float0 = new Float((-1.0));
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.max((-273.772F), 0.0F);
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      Float.min(0.0F, (-273.772F));
      JSONObject jSONObject1 = jSONObject0.put("M4-A[oG_4$-!&=F", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("M4-A[oG_4$-!&=F", (Object) jSONObject0);
      jSONObject1.getJSONObject("M4-A[oG_4$-!&=F");
      // Undeclared exception!
      jSONObject2.toString(128, 128);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-30.86908977026892));
      assertEquals("-30.86908977026892", string0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      
      JSONObject.quote((String) null);
      Byte byte0 = new Byte((byte) (-9));
      boolean boolean0 = new Boolean((String) null);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, (-1014), (-1014));
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      String string0 = "OI@mLvtEXOK)ku5gXo";
      try { 
        jSONObject0.getJSONObject("OI@mLvtEXOK)ku5gXo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"OI@mLvtEXOK)ku5gXo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      jSONObject0.length();
      JSONObject jSONObject1 = jSONObject0.put("X7^)F})@qeES9_a3", (Object) iterator0);
      String string0 = "";
      jSONObject0.optBoolean("");
      String string1 = "";
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = new JSONObject((Object) "gC");
      JSONObject jSONObject2 = jSONObject1.put("gC", (-12L));
      StringWriter stringWriter0 = new StringWriter((short)0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter0.append('\\');
      stringWriter1.write((int) (short)0);
      jSONObject1.write(stringWriter2);
      JSONObject.quote("rev");
      jSONObject1.getLong("gC");
      jSONObject2.optDouble("");
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt((String) null, 57);
      Long long0 = new Long(57);
      try { 
        jSONObject0.append((String) null, long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      
      linkedList0.listIterator();
      String string1 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject.quote("wheel.json.JSONTokener");
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject2.keys();
      Float float0 = new Float(0.0);
      jSONObject2.put("\"wheel.json.JSONTokener\"", (Object) null);
      jSONObject2.putOpt("\"wheel.json.JSONTokener\"", "\"wheel.json.JSONTokener\"");
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Float float0 = new Float((-3401.7));
      Float.sum(0.0F, 0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put(jSONObject0, jSONObject0);
      Object object0 = null;
      JSONObject jSONObject1 = jSONObject0.accumulate("[+DQS'5<kPD?SV2", (Object) null);
      jSONObject1.optBoolean("Missing value");
      String string0 = "$rFk3nA49";
      int int0 = 2900;
      Integer integer0 = new Integer(2900);
      int int1 = (-2437);
      Integer.divideUnsigned(2900, (-2437));
      JSONObject jSONObject2 = jSONObject0.put("[+DQS'5<kPD?SV2", 2900);
      Integer.compare(9, 2900);
      try { 
        jSONObject2.getString("*)rbV kmzdFLcc.Mf#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*)rbV kmzdFLcc.Mf#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Short short0 = new Short((short)54);
      Short.toUnsignedInt((short)0);
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.toUnsignedLong((short)54);
      jSONObject0.optLong("*mg49)`", 262L);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = "";
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("L~gM0ra.8a,~&", object0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      String string1 = "";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\b";
      stringArray0[1] = "\b";
      stringArray0[2] = "\b";
      stringArray0[3] = "\b";
      stringArray0[4] = "\b";
      JSONObject jSONObject0 = new JSONObject("\b", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("\b", false);
      jSONObject1.optInt("YL", 0);
      jSONObject0.isNull("kEo");
      jSONObject0.optBoolean("");
      StringWriter stringWriter0 = new StringWriter(0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[1];
      Short.compare((short)0, (short)0);
      stringArray0[0] = ",\n";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      Short.toUnsignedInt((short)0);
      int int0 = new Short((short)0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("", object0);
      JSONObject.quote(",\n");
      jSONObject1.toString();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "{f?\"UvT$NxzJe8[Pt";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{f?\"UvT$NxzJe8[Pt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {f?\"UvT$NxzJe8[Pt
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short.compare((short)0, (short)0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(0);
      JSONObject jSONObject1 = jSONObject0.put(",\n", false);
      jSONObject1.accumulate("is", "{}");
      JSONObject.quote("z|UD'");
      jSONObject1.toString();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of false
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "/gBjOh26J|xyU*I";
      String string1 = "A,}G%lqPd2OjLhW";
      jSONObject0.optLong("/gBjOh26J|xyU*I", 94L);
      try { 
        Integer.valueOf("A,}G%lqPd2OjLhW");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"A,}G%lqPd2OjLhW\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Byte byte0 = new Byte((byte)8);
      JSONObject jSONObject0 = new JSONObject(byte0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "l";
      stringArray0[1] = "wheel.json.JSONObject$1";
      stringArray0[2] = "8*mJ'H2i";
      stringArray0[3] = "islogicalXor";
      stringArray0[4] = "";
      Byte.toUnsignedLong((byte)0);
      jSONObject0.put("", (double) (byte)0);
      stringArray0[5] = "";
      stringArray0[6] = ".";
      stringArray0[7] = "TL;,]t[%T%i)-7}";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = jSONObject1.optString("t#>/r#]-L");
      assertEquals(2, jSONObject0.length());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject.testValidity(object0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Short short0 = new Short((short)8448);
      short short1 = (short)4032;
      Short.toUnsignedInt((short)57);
      Short.compare((short)118, (short)118);
      Short.compare((short) (-770), (short)4032);
      JSONObject.getNames((Object) short0);
      String string0 = "2O'F";
      JSONTokener jSONTokener0 = new JSONTokener("2O'F");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 2O'F
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      short short0 = (short) (-4030);
      Short short1 = new Short((short) (-4030));
      JSONObject.numberToString(short1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java.lang.Short@0000000001";
      stringArray0[1] = "java.lang.Short@0000000001";
      stringArray0[2] = "java.lang.Short@0000000001";
      String string0 = "JSONArray initial value should be a string or collection or array.";
      stringArray0[3] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[4] = "java.lang.Short@0000000001";
      JSONObject jSONObject0 = new JSONObject(short1, stringArray0);
      String string1 = "iswait";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("iswait", (Collection) linkedList0);
      try { 
        jSONObject1.getJSONObject("2_60[V%'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2_60[V%'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(19);
      JSONObject jSONObject1 = jSONObject0.put("{}", false);
      JSONObject jSONObject2 = jSONObject1.accumulate("{}", (Object) null);
      String string1 = JSONObject.quote("fIYI>LYd%E7*9!");
      assertEquals("\"fIYI>LYd%E7*9!\"", string1);
      
      String string2 = jSONObject0.toString();
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = JSONObject.getNames(jSONObject2);
      assertEquals(1, stringArray0.length);
      
      String string3 = jSONObject0.toString((-476), (-476));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("yq'pC}}9,6&sjzfGAuc", false);
      jSONObject1.isNull("yq'pC}}9,6&sjzfGAuc");
      JSONObject jSONObject2 = jSONObject0.putOpt("R?#>", "R?#>");
      try { 
        jSONObject2.getLong("yq'pC}}9,6&sjzfGAuc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"yq'pC}}9,6&sjzfGAuc\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONObject$1", (-1534.2053354921889));
      double double0 = jSONObject0.optDouble("is");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("\t", (Object) null);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      Long.getLong("{}");
      long long0 = 0L;
      Long.toUnsignedString(0L);
      Float float0 = new Float(6.8234075087);
      Float.max(0.0F, 0L);
      hashMap0.put((Object) null, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("wheel.json.JSONObject");
      JSONObject.getNames(jSONObject0);
      String string0 = "'{)7Zv{!.cx+nU!";
      jSONObject0.isNull("'{)7Zv{!.cx+nU!");
      String string1 = "2";
      try { 
        jSONObject0.getLong("' and instead saw '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"' and instead saw '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = new JSONObject();
      Byte.toUnsignedLong((byte)44);
      jSONObject1.put("!`b`", 785.7391025700347);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      JSONObject.valueToString(hashMap0);
      Double.isFinite((-1.0));
      Boolean boolean0 = new Boolean(";L87");
      jSONObject1.keys();
      JSONObject jSONObject3 = new JSONObject();
      jSONObject0.putOpt("byL`", "byL`");
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject4 = new JSONObject();
      jSONObject4.toString();
      JSONTokener jSONTokener0 = new JSONTokener("byL`");
      JSONTokener jSONTokener1 = new JSONTokener("{5Qr'Yf0=aR*-}?`vZ");
      JSONObject jSONObject5 = new JSONObject(jSONTokener1);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "C5Qt7f$e";
      stringArray0[1] = "OL&+~+]_Zq1<vszC@";
      stringArray0[2] = "] is not a number.";
      stringArray0[3] = "<&";
      stringArray0[4] = "\r";
      stringArray0[5] = "null";
      stringArray0[6] = "wheel.json.JSONObject";
      stringArray0[7] = "1BHqpzGbQu&Dpe|l~l,";
      stringArray0[8] = "";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.optInt("OL&+~+]_Zq1<vszC@", (-129));
      jSONObject0.toString();
      jSONObject0.has("1BHqpzGbQu&Dpe|l~l,");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.containsAll(linkedList1);
      JSONObject jSONObject1 = jSONObject0.put("\r", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject0.put("", (-1L));
      assertSame(jSONObject0, jSONObject2);
      
      JSONObject.getNames(jSONObject1);
      int int0 = jSONObject1.length();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("n0>n2=Y\u0005", 0.0);
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(19);
      JSONObject jSONObject1 = jSONObject0.put("{}", false);
      JSONObject jSONObject2 = jSONObject1.accumulate("{}", (Object) null);
      JSONObject.valueToString(jSONObject2);
      jSONObject0.toString();
      JSONObject.getNames(jSONObject2);
      jSONObject0.put("ishashCode", (Collection) null);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "6{RJFEn";
      stringArray0[1] = "Expected a ',' or ']'";
      stringArray0[2] = "nPhoMy";
      stringArray0[3] = "-650.40";
      stringArray0[4] = "wheel.json.JSONException";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String string0 = jSONObject0.optString("wheel.json.JSONException");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "wheel.json.JSONTokener";
      JSONObject.quote("wheel.json.JSONTokener");
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject2.keys();
      Float float0 = new Float(0.0);
      JSONObject jSONObject3 = jSONObject2.put("\"wheel.json.JSONTokener\"", (Object) null);
      jSONObject3.toString();
      Integer integer0 = new Integer(2);
      jSONObject3.putOpt("wheel.json.JSONTokener", integer0);
      JSONObject jSONObject4 = new JSONObject();
      jSONObject4.optString("\"wheel.json.JSONTokener\"", "{}");
      try { 
        jSONObject1.getDouble("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\b", true);
      String string0 = "";
      jSONObject0.put("", (-628L));
      Long long0 = new Long((-1L));
      Long.remainderUnsigned(0L, (-1L));
      jSONObject0.accumulate("getvalueOf", long0);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-3661);
      jSONObject1.optInt("");
      try { 
        jSONArray0.get((-1716));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1716] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = new JSONObject((Object) "gC");
      JSONObject jSONObject2 = jSONObject1.put("gC", 0L);
      StringWriter stringWriter0 = new StringWriter((short)0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter0.append('\\');
      stringWriter1.write((int) (short)0);
      jSONObject1.write(stringWriter2);
      JSONObject.quote("rev");
      jSONObject1.getLong("gC");
      double double0 = jSONObject2.optDouble("");
      assertEquals(4, jSONObject1.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.optDouble("");
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optDouble("D2");
      jSONObject0.put("] is not a Boolean.", true);
      JSONObject jSONObject2 = jSONObject0.put("] is not a Boolean.", 0L);
      jSONObject2.getInt("] is not a Boolean.");
      jSONObject2.optInt("] is not a Boolean.", (-8323580));
      jSONObject0.put("G|Xw~vUAZ<yq]4vFm", 69);
      jSONObject1.put("G|Xw~vUAZ<yq]4vFm", 0L);
      jSONObject0.toString((-1059), (-1059));
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = JSONObject.getNames((Object) long0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.pollFirst();
      jSONObject0.put(",", (Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("gC", false);
      jSONObject1.put("gC", 0L);
      JSONObject.valueToString("", (short)0, (short)0);
      StringWriter stringWriter0 = new StringWriter((short)0);
      double double0 = jSONObject1.optDouble(": ");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add(jSONObject0);
      JSONObject jSONObject2 = jSONObject1.put("wheel.json.JSONObject$1", (Collection) linkedList0);
      JSONObject.getNames(jSONObject0);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      jSONObject1.put("wheel.json.JSONObject$1", (Map) hashMap0);
      jSONObject2.getJSONObject("wheel.json.JSONObject$1");
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject(object0);
      int int0 = (-522);
      jSONObject1.toString((-522));
      String string0 = "";
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      double double0 = jSONObject0.optDouble("\t", (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt("");
      try { 
        jSONObject0.getInt("T8kx_g1/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"T8kx_g1/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("6c&k");
      jSONObject0.remove("");
      try { 
        jSONObject0.getBoolean("6c&k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6c&k\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      stringArray0[2] = "{}";
      stringArray0[3] = "{}";
      stringArray0[4] = "{}";
      stringArray0[5] = "{}";
      stringArray0[6] = "{}";
      stringArray0[7] = "{}";
      stringArray0[8] = "{}";
      JSONObject jSONObject1 = new JSONObject(jSONArray0, stringArray0);
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\b";
      stringArray0[1] = "\b";
      stringArray0[2] = "\b";
      stringArray0[3] = "\b";
      stringArray0[4] = "\b";
      JSONObject jSONObject0 = new JSONObject("\b", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("\b", false);
      int int0 = jSONObject1.optInt("YL", 0);
      assertEquals(0, int0);
      
      boolean boolean0 = jSONObject0.isNull("kEo");
      assertTrue(boolean0);
      
      jSONObject0.put("F}", 2011);
      jSONObject1.toString(0, 0);
      String string0 = JSONObject.quote("\b");
      assertEquals("\"\\b\"", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("gC", true);
      StringWriter stringWriter0 = new StringWriter((short)0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      stringWriter1.write((int) (short)0);
      jSONObject1.write(stringWriter1);
      jSONObject1.toString(61, 2656);
      jSONObject0.optLong("{\"java.lang.String@0000000002\": java.lang.Boolean@0000000003}", (long) (short)0);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.getDouble("gC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gC\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = JSONObject.quote("\"`.HNo;a~QLeg");
      assertEquals("\"\\\"`.HNo;a~QLeg\"", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("h4XB7@U;?QO, *(7JS", "h4XB7@U;?QO, *(7JS");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("-1.0");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("6%4cZ", false);
      assertFalse(boolean0);
      
      Object object0 = JSONObject.NULL;
      int int0 = jSONObject0.optInt("Y  <kj _Bd1");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      String string0 = "!8IK,Nyfu=@jlbY\";";
      JSONObject jSONObject1 = jSONObject0.put("!8IK,Nyfu=@jlbY\";", 2706.081880478043);
      jSONObject1.optDouble("!8IK,Nyfu=@jlbY\";", 2706.081880478043);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject2 = jSONObject0.put("] not found.", (-2183.9));
      String string1 = ".";
      jSONObject2.optLong(".");
      try { 
        jSONObject1.getString(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = JSONObject.quote("wheel.json.JSONTokener");
      assertEquals("\"wheel.json.JSONTokener\"", string0);
      
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{/bB*7iKqgLm5l5G+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 1 of {/bB*7iKqgLm5l5G+
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("=Opu6LI9TW7ob|", (-1226));
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Long long0 = new Long((-2084L));
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      Object object0 = JSONObject.NULL;
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 1782L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject.doubleToString(9.010593715422338);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "9.010593715422338";
      stringArray0[1] = "9.010593715422338";
      JSONObject jSONObject0 = new JSONObject("9.010593715422338", stringArray0);
      try { 
        jSONObject0.getString("9.010593715422338");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"9.010593715422338\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "nC@Im{vxFCAfRLzA";
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("nC@Im{vxFCAfRLzA", 0L);
      try { 
        jSONObject1.getBoolean("nC@Im{vxFCAfRLzA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nC@Im{vxFCAfRLzA\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", (Object) "A JSONArray text must start with '['");
      String string0 = jSONObject1.optString("A JSONArray text must start with '['");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-1058));
      jSONObject0.putOpt((String) null, short0);
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Short short0 = new Short((short)13);
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.compare((short)13, (short)128);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@HJxE/w:H,*:jdA";
      Byte byte0 = new Byte((byte)0);
      Byte.toUnsignedInt((byte)0);
      Byte.toUnsignedLong((byte)0);
      jSONObject0.append("sum", byte0);
      Boolean boolean0 = new Boolean("@HJxE/w:H,*:jdA");
      Boolean.compare(true, true);
      jSONObject0.append("sum", boolean0);
      stringArray0[1] = "sum";
      stringArray0[2] = "Z|8Rk(;78%wG3";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString();
      try { 
        jSONObject1.get("wu:x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wu:x\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ">NvZ^OF'RIK\"a&72@&f");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(">NvZ^OF'RIK\"a&72@&f");
      jSONObject0.optDouble("gB8y{zwW75", 2689.266);
      JSONObject jSONObject1 = jSONObject0.put(">NvZ^OF'RIK\"a&72@&f", (Collection) linkedList0);
      Object object0 = JSONObject.NULL;
      jSONObject0.put(">NvZ^OF'RIK\"a&72@&f", 2689.266);
      JSONObject.getNames(object0);
      jSONObject0.getDouble(">NvZ^OF'RIK\"a&72@&f");
      jSONObject0.put("Bbz%nJaLQV{zS0P", (Collection) linkedList0);
      jSONObject1.optLong(">NvZ^OF'RIK\"a&72@&f");
      JSONObject.doubleToString(2689L);
      Double double0 = new Double((-1824.2693021097));
      Double.isFinite((-1126.25));
      JSONObject.getNames((Object) double0);
      try { 
        jSONObject0.getJSONObject(">NvZ^OF'RIK\"a&72@&f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">NvZ^OF'RIK\\\"a&72@&f\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", 0.0);
      try { 
        jSONObject1.append("wheel.json.JSONArray", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[wheel.json.JSONArray] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Double double0 = new Double(1037.5931142336);
      Double.isFinite(1037.5931142336);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "gC";
      stringArray0[1] = "";
      stringArray0[2] = "] is not a Boolean.";
      stringArray0[3] = "";
      stringArray0[4] = "";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", false);
      StringWriter stringWriter0 = new StringWriter(2641);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "gC");
      StringWriter stringWriter2 = stringWriter1.append(']');
      stringWriter2.write(2641);
      jSONObject1.write(stringWriter2);
      jSONObject0.toString((-439), 61);
      jSONObject0.optLong("] is not a Boolean.", 1L);
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-102));
      Byte.compare((byte) (-102), (byte)19);
      Byte.toUnsignedInt((byte)34);
      Byte.toUnsignedInt((byte) (-60));
      JSONObject.testValidity(byte0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("isvalueOf", 1651.0);
      JSONObject.valueToString("_HAg|?~#B7", (-2284), 34);
      jSONObject0.keys();
      JSONObject jSONObject2 = jSONObject1.putOpt("B'oAe](WM9=T", "B'oAe](WM9=T");
      JSONObject.valueToString(hashMap0, (-394), 2749);
      JSONObject jSONObject3 = jSONObject2.put("\"java.lang.String@0000000004\"", false);
      jSONObject3.toString();
      JSONObject.numberToString(byte0);
      try { 
        jSONObject0.getBoolean("B'oAe](WM9=T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"B'oAe](WM9=T\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Double double0 = new Double(1037.5931142336);
      Double.isFinite(1037.5931142336);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "gC";
      stringArray0[1] = "";
      stringArray0[2] = "] is not a Boolean.";
      stringArray0[3] = "";
      stringArray0[4] = "wheel.json.JSONObject$1";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", false);
      StringWriter stringWriter0 = new StringWriter(2641);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "gC");
      JSONObject.quote("");
      StringWriter stringWriter2 = stringWriter1.append(']');
      stringWriter2.write(2641);
      jSONObject1.write(stringWriter2);
      jSONObject0.toString((-439), 61);
      jSONObject0.optLong("] is not a Boolean.", 1L);
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Long long0 = Long.getLong("(gU>Eg", (-5073L));
      hashMap0.put((Object) null, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "A JSONArray text must start with '['";
      hashMap0.entrySet();
      stringArray0[1] = "isdoubleToString";
      stringArray0[2] = "3~ Hj$KikfV(^";
      stringArray0[3] = "isoptLong";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      jSONObject1.toString(943);
      String string0 = "\\u";
      jSONObject2.optDouble(string0);
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject2, stringArray0);
      JSONObject.valueToString(hashMap0);
      try { 
        jSONObject3.get("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("ks:wG>");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optJSONObject("kz{*{Mbvzgt");
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(123, (-339));
      Short short0 = new Short((short) (-2807));
      String string1 = JSONObject.valueToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "C5Qt7f$e";
      stringArray0[1] = "OL&+~+]_Zq1<vszC@";
      stringArray0[2] = "] is not a number.";
      stringArray0[3] = "<&";
      stringArray0[4] = "\r";
      stringArray0[5] = "null";
      stringArray0[6] = "wheel.json.JSONObject";
      stringArray0[7] = "1BHqpzGbQu&Dpe|l~l,";
      stringArray0[8] = "] is not a number.";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.optInt("OL&+~+]_Zq1<vszC@", (-121));
      jSONObject0.toString();
      jSONObject0.has("1BHqpzGbQu&Dpe|l~l,");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      boolean boolean1 = new Boolean("");
      JSONObject jSONObject1 = jSONObject0.put("\r", (Collection) linkedList0);
      jSONObject0.put("", (-1L));
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\b";
      stringArray0[2] = "\b";
      stringArray0[3] = "\b";
      stringArray0[4] = "\b";
      JSONObject jSONObject0 = new JSONObject("\b", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("CjnsgOV", false);
      jSONObject0.optBoolean("\b");
      jSONObject1.optInt("\b", 0);
      jSONObject0.isNull("\b");
      JSONObject jSONObject2 = jSONObject0.put("F}", 0);
      jSONObject2.toString(1948, 101);
      try { 
        jSONObject0.getDouble("5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 59, 91);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Float float0 = Float.valueOf(2452.857F);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      String string0 = "";
      stringArray0[1] = "";
      stringArray0[2] = "Gws?F";
      stringArray0[3] = ".";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "", 353, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject", (Collection) linkedList0);
      boolean boolean0 = jSONObject1.isNull("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "2+C=)\"d#Rp&";
      jSONObject0.put("2+C=)\"d#Rp&", (Map) hashMap0);
      jSONObject0.put("2+C=)\"d#Rp&", 729L);
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = jSONObject0.put("~-6CxD,rS?yJA", 65);
      jSONObject1.optDouble("~-6CxD,rS?yJA");
      try { 
        jSONObject1.getJSONArray("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gC", true);
      JSONObject jSONObject2 = jSONObject1.put("gC", 0L);
      jSONObject2.put("getcompare", true);
      JSONObject jSONObject3 = jSONObject2.put("", 59);
      jSONObject3.getLong("");
      jSONObject3.put("", 1109L);
      String string0 = jSONObject2.toString((-1059), (-1059));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject.doubleToString((-2237.783480140094));
      jSONObject0.toString();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("[]", jSONArray0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wheel.json.JSONObject$Null";
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("gC", true);
      JSONObject jSONObject2 = jSONObject1.put("gC", 0L);
      StringWriter stringWriter0 = new StringWriter((short)0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter0.append('\\');
      stringWriter1.write((int) (short)0);
      jSONObject1.write(stringWriter2);
      jSONObject2.put("", 59);
      String string0 = jSONObject2.toString((-1059), (-1059));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject.getNames((Object) "wheel.json.JSONObject$Null");
      Byte byte0 = new Byte((byte) (-51));
      String string0 = JSONObject.valueToString(byte0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("iscompareTo", (-2455));
      long long0 = jSONObject1.optLong("iscompareTo");
      assertEquals((-2455L), long0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("jGy7.0`Nkb0CAq&Q", "] is not a JSONObject.");
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("h-", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(1.0F);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) float0);
      jSONObject1.optLong("}L3h~@j4k=+");
      String string0 = jSONObject0.toString(3048, 3048);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", true);
      String string0 = jSONObject0.optString("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(hashMap0);
      try { 
        jSONObject0.put((String) null, 29);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "Z";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("Z");
      jSONObject0.put("Z", (Object) "Z");
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.getJSONArray("Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Z\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble((String) null, 88.704534);
      int int0 = 882;
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("Expected a ':' after a key", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\b";
      stringArray0[1] = "\b";
      stringArray0[2] = "\b";
      stringArray0[3] = "\b";
      stringArray0[4] = "\b";
      JSONObject jSONObject0 = new JSONObject("\b", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("\b", false);
      Double double0 = new Double((-1370.719927892));
      jSONObject0.optInt("1x2xHN^C|E8u;?", 76);
      jSONObject0.append(",:]}/\"[{;=#", double0);
      jSONObject1.optInt("YL", 0);
      jSONObject0.isNull("kEo");
      JSONObject jSONObject2 = jSONObject0.put("F}", 2011);
      jSONObject2.getBoolean("\b");
      jSONObject1.toString(0, 0);
      JSONObject.quote("\b");
      jSONObject2.length();
      jSONObject0.optString("Zs3>?VpMFA");
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      try { 
        jSONObject2.getJSONObject("F}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"F}\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("A JSONObject text must begin with '{'");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble((String) null, (-1054.792009008457));
      String string0 = null;
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Byte.compare((byte) (-102), (byte)19);
      Byte byte0 = new Byte((byte)19);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("isvalueOf", (double) byte0);
      JSONObject.valueToString("_HAg|?~#B7", (byte)19, (-121));
      jSONObject0.keys();
      jSONObject1.putOpt("B'oAe](WM9=T", "B'oAe](WM9=T");
      JSONObject.valueToString(hashMap0, (-121), 2749);
      jSONObject1.toString();
      jSONObject1.names();
      jSONObject0.length();
      jSONObject1.opt("B'oAe](WM9=T");
      try { 
        jSONObject0.getInt("dou");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"dou\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-898));
      String string0 = jSONObject0.toString(16, 16);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      JSONObject.testValidity("0");
      Object object0 = new Object();
      String string1 = JSONObject.valueToString(object0, (-679), (-679));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      String[] stringArray0 = new String[1];
      String string0 = ",\n";
      Short.compare((short)0, (short)0);
      stringArray0[0] = ",\n";
      JSONObject jSONObject0 = new JSONObject(short1, stringArray0);
      Short.toUnsignedInt((short)0);
      try { 
        jSONObject0.getInt(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      hashMap0.getOrDefault((Object) null, long0);
      Integer integer0 = new Integer((-1889));
      Long long1 = new Long(1607L);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("' and instead saw '");
      assertEquals(0, int0);
      
      String string0 = JSONObject.valueToString(jSONObject0, 0, 13);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("dec", (-1247));
      jSONObject1.getInt("dec");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((double) (-1247));
      linkedList0.add(float0);
      JSONObject jSONObject2 = jSONObject1.put("dec", (Collection) linkedList0);
      assertSame(jSONObject0, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("true", 0.0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = null;
      JSONObject.quote((String) null);
      JSONTokener jSONTokener0 = null;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject.quote("");
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONObject("&;}%6(#q");
      jSONObject0.optJSONArray("");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = "{";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)13);
      Short.toUnsignedLong((short)13);
      Short.compare((short)1201, (short)1980);
      JSONObject.valueToString(short0, (short)13, 8448);
      String string0 = "";
      try { 
        jSONObject0.get("Null pointer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null pointer\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      jSONObject0.toString(234, 1690);
      JSONObject.doubleToString((-3700.7));
      jSONObject0.names();
      jSONObject0.put("-3700.7", 8L);
      JSONObject jSONObject1 = new JSONObject("{}");
      boolean boolean0 = new Boolean("-3700.7");
      String string0 = JSONObject.valueToString("tS}'mG>&zO");
      Integer integer0 = new Integer(15);
      JSONObject.numberToString(integer0);
      String string1 = JSONObject.numberToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("null");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("gC", true);
      JSONObject jSONObject2 = jSONObject1.put("gC", 0L);
      StringWriter stringWriter0 = new StringWriter((short)0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter0.append('\\');
      stringWriter1.write((int) (short)0);
      jSONObject1.write(stringWriter2);
      jSONObject1.toString(61, 2641);
      jSONObject0.optLong("gC", (long) 2641);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      double double0 = jSONObject2.getDouble("gC");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("nC@Im{vxFCAfRLzA", 0L);
      jSONObject1.optInt("S#vj< 4Cx(]}'", 18);
      jSONObject0.isNull((String) null);
      JSONObject.valueToString(jSONObject1);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not a number.";
      jSONObject0.put("u2r/~p(a", false);
      jSONObject0.optLong("] is not a number.");
      try { 
        jSONObject0.getLong("N7{%p=o-/J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"N7{%p=o-/J\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.put("wheel.json.JSONObject@0000000001", 1427.217956581);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0";
      stringArray0[1] = "0";
      Long long0 = new Long(1058L);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(10);
      hashMap0.put(integer0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      Object object0 = JSONObject.NULL;
      JSONObject.getNames((Object) "0");
      jSONObject0.optInt("0");
      String string1 = JSONObject.valueToString(hashMap0, 8192, 14);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-9));
      Byte.toUnsignedInt((byte) (-9));
      linkedList0.offerLast(byte0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(linkedList0, (byte) (-9), (-741));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.putOpt("90suQA5\"u~", double0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("^!]tOj8U");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ^!]tOj8U
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("BHm $1ELlbNH", "BHm $1ELlbNH");
      jSONObject0.opt("^7\u0000.|?^WZ(,vs~O");
      String string0 = jSONObject1.optString("A JSONObject text must end with '}'");
      assertEquals(1, jSONObject0.length());
      assertEquals("", string0);
  }
}
