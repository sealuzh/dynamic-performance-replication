/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:59:48 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Currency;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.set((-1650), 0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1650' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.random((-515), (-515), 2809.3856678, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1157, 1157, 1157);
      int int0 = (-515);
      cCSMatrix0.determinant();
      cCSMatrix0.getColumn(int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 3505.105628688751;
      doubleArray1[1] = 519.11;
      doubleArray1[2] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertEquals((-1.0), cCSMatrix0.min(), 0.01);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-3014.384);
      doubleArray1[2] = 2.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = 0.0;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 8;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(8);
      cCSMatrix0.determinant();
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1157);
      cCSMatrix0.toColumnVector();
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      cCSMatrix0.setAll(0);
      CCSMatrix.zero(0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix.identity(1157);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1157, (-3014.384));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      int int0 = (-4742);
      cCSMatrix0.minInColumn((-4742));
      int int1 = (-2146771472);
      CCSMatrix cCSMatrix1 = new CCSMatrix(int1, int0);
      cCSMatrix1.determinant();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(8, 8, 8);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(8, 8);
      cCSMatrix0.multiply((Matrix) cCSMatrix1);
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 4;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(4, 4, 4);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(4, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1157);
      cCSMatrix0.nonZeroIteratorOfRow((-515));
      cCSMatrix0.toColumnMajorSparseMatrix();
      cCSMatrix0.determinant();
      int int0 = 332;
      int int1 = (-289);
      CCSMatrix.zero(int0, int1);
      int int2 = (-664);
      cCSMatrix0.maxInColumn(int2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 1;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1, 1);
      cCSMatrix0.copyOfShape(1, 1);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.random(1, 1, 4.9E-324, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)24;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("JSRyf1=`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 3, 3);
      cCSMatrix0.rank();
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(1292);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1293
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 3, 3);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.randomSymmetric(3, 1.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("i$");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int[] intArray0 = new int[1];
      intArray0[0] = (-2553);
      cCSMatrix0.iteratorOrNonZeroColumns();
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2553' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 10;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(10, 1000);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.random(1000, 10, (-4573.1599205326), (Random) mockRandom0);
      cCSMatrix0.swapRows(int0, int0);
      String string0 = null;
      CCSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1, 1, doubleArray0);
      cCSMatrix0.removeFirstColumn();
      cCSMatrix0.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(13, (-3014.384));
      cCSMatrix0.determinant();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.getRow(13);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(27, (-3014.384));
      SparseVector sparseVector0 = SparseVector.zero(13, 13);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      cCSMatrix0.insertRow(1, sparseVector0);
      cCSMatrix0.minInColumn(int0);
      double[][] doubleArray0 = new double[0][3];
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 1;
      CCSMatrix.diagonal(4, (-3014.384));
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, 131.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("org.la4j.matrix.sparse.CCSMatrix");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 134;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(134);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.eachNonZeroInRow(int0, vectorProcedure0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1, 1, doubleArray0);
      Matrix matrix0 = cCSMatrix0.copyOfShape(1, 1);
      CCSMatrix.zero(4, 1);
      // Undeclared exception!
      try { 
        matrix0.swapRows(0, (-1605));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1605' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      cCSMatrix0.toDenseMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      CCSMatrix cCSMatrix0 = new CCSMatrix(4, 4);
      cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(4);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix1.foldNonZeroInRow(4, vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)131).when(vectorAccumulator0).accumulate();
      matrix0.foldColumn(131, vectorAccumulator0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      cCSMatrix0.setAll(131);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(15, 15, 15);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(15);
      cCSMatrix1.setAll(1530.48811583);
      cCSMatrix0.determinant();
      cCSMatrix0.getColumn(15);
      int int0 = (-1233);
      cCSMatrix1.getRow(int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      CCSMatrix cCSMatrix0 = new CCSMatrix(4, 4);
      cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      CCSMatrix.identity(4);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(13, (-3014.384));
      cCSMatrix0.minInColumn(1);
      CCSMatrix.identity(13);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 1;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      cCSMatrix0.copyOfShape(1, 1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(3872, 3435.0);
      CCSMatrix cCSMatrix2 = CCSMatrix.block(cCSMatrix1, cCSMatrix0, cCSMatrix0, cCSMatrix1);
      cCSMatrix2.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 3390, 1);
      cCSMatrix0.maxInColumn(32);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)3390).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumn(1, vectorAccumulator0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix1, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 3, 3);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix1 = CCSMatrix.randomSymmetric(3, 1.0, (Random) mockRandom0);
      ColumnMajorSparseMatrix.random(3, 1, 4.9E-324, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cCSMatrix1.foldNonZeroInRow(1, (VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 2522, 13);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.randomSymmetric(13, (double) 1, (Random) mockRandom0);
      CCSMatrix.identity(4);
      CCSMatrix.random(2522, 1, 1.0, (Random) mockRandom0);
      int int0 = (-1507);
      cCSMatrix0.set(1, 2522, 13);
      cCSMatrix0.getColumn(int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      Matrix matrix0 = cCSMatrix0.copyOfShape(1, 1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      CCSMatrix.block(matrix0, matrix0, matrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.manhattanNorm();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1157);
      cCSMatrix0.blankOfRows(622);
      cCSMatrix0.manhattanNorm();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3412);
      Matrix matrix0 = cCSMatrix0.copy();
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      Currency currency0 = decimalFormat0.getCurrency();
      decimalFormat0.setCurrency(currency0);
      cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      CCSMatrix.identity(1746);
      int[] intArray0 = new int[5];
      intArray0[0] = 3412;
      intArray0[1] = 1746;
      intArray0[2] = 3412;
      intArray0[3] = 1746;
      intArray0[4] = 3412;
      int[] intArray1 = new int[5];
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 2317;
      doubleArray0[2] = (double) 3412;
      doubleArray0[3] = (double) 3412;
      doubleArray0[4] = (double) 1746;
      doubleArray0[5] = (double) 1746;
      doubleArray0[6] = (double) 3412;
      doubleArray0[7] = (double) 3412;
      doubleArray0[8] = (double) 1746;
      CCSMatrix.diagonal(3412, 1746);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(2054, vectorProcedure0);
      matrix0.set(1733, 2054, 519.11);
      cCSMatrix0.copyOfShape((-776), (-1285));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 3412;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3412);
      cCSMatrix0.copy();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(1746);
      CCSMatrix cCSMatrix2 = CCSMatrix.zero(810, 1662);
      cCSMatrix2.copyOfShape(1662, 810);
      cCSMatrix2.determinant();
      cCSMatrix1.getColumn(int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1746);
      int int0 = 810;
      CCSMatrix.zero(810, 3412);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)810, 1864.944816096696, 1864.944816096696, (double)3412, 1864.944816096696).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      org.evosuite.runtime.Random.setNextRandom(int0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, 1.0);
      Matrix matrix0 = cCSMatrix0.copyOfShape(1, 1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1157);
      int int0 = (-515);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.transform(matrixFunction0);
      cCSMatrix0.determinant();
      cCSMatrix0.getColumn(int0);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1, 1, doubleArray0);
      cCSMatrix0.copyOfShape(1, 1);
      CCSMatrix.zero(1, 10);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 3, 3);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2599);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 3;
      cCSMatrix1.select(intArray0, intArray0);
      cCSMatrix1.to((MatrixFactory<Matrix>) null);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1157);
      cCSMatrix0.minInColumn(8);
      cCSMatrix0.determinant();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix0.to(matrixFactory0);
      int int0 = (-2582);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(int0);
      CCSMatrix.block(cCSMatrix1, cCSMatrix0, cCSMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1643, 1643, 3);
      int[] intArray0 = new int[1];
      intArray0[0] = 1643;
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1643' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 3, 3);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix1 = CCSMatrix.randomSymmetric(3, 1.0, (Random) mockRandom0);
      int int0 = 2599;
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix1.foldNonZero(matrixAccumulator0);
      // Undeclared exception!
      try { 
        cCSMatrix1.foldNonZeroInRow(1, (VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3354, 3353);
      Matrix matrix0 = cCSMatrix0.copyOfShape(3352, 3354);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      CCSMatrix.block(matrix0, matrix0, cCSMatrix0, cCSMatrix0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 0;
      int int1 = 8;
      CCSMatrix.zero(int0, int1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1157);
      cCSMatrix0.copyOfShape(1120, 1120);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal((-1347), 1879.06641);
      int int0 = 1263;
      int int1 = 1102;
      cCSMatrix1.swapRows(int0, int1);
      String string0 = "a";
      CCSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 1, 1);
      cCSMatrix0.copyOfShape(1, 1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateColumn(1, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1, 1, doubleArray0);
      Matrix matrix0 = cCSMatrix0.copyOfShape(1, 1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      Matrix matrix1 = matrix0.removeLastColumn();
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, matrix1, matrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1, 1);
      Matrix matrix0 = cCSMatrix0.copyOfShape(373, 501);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      CCSMatrix.block(matrix0, matrix0, cCSMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1157);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow((-2350), vectorAccumulator0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      int int0 = 3387;
      int int1 = (-487);
      CCSMatrix.zero(int1, int1);
      cCSMatrix1.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3412);
      Matrix matrix0 = cCSMatrix0.copy();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(1759);
      CCSMatrix cCSMatrix2 = CCSMatrix.zero(810, 2556);
      cCSMatrix0.copyOfShape(810, 1088);
      cCSMatrix0.update((MatrixFunction) null);
      CCSMatrix.block(matrix0, matrix0, cCSMatrix0, cCSMatrix2);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 1;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.update(matrixFunction0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix1, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 1170;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1170, 1170, 1170);
      double double0 = new Integer(1170);
      cCSMatrix0.max();
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn(1952);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1952
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1643, 1643, 3);
      int[] intArray0 = new int[1];
      intArray0[0] = 1643;
      cCSMatrix0.maxInColumn(3);
      cCSMatrix0.min();
      cCSMatrix0.toBinary();
  }
}
