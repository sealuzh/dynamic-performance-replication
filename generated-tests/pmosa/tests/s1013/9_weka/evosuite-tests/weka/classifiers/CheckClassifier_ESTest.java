/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 02:39:31 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.util.ArrayList;
import java.util.Arrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.CheckClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.lazy.KStar;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.LMT;
import weka.core.Attribute;
import weka.core.CheckScheme;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CheckClassifier_ESTest extends CheckClassifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean[] booleanArray0 = checkClassifier0.canHandleOnlyClass(true, false, false, true, true, 4);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean[] booleanArray1 = checkClassifier0.testToString();
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(true, false, true, false, true, false, (-2900));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-2900' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.weightedInstancesHandler();
      checkClassifier0.canHandleNClasses(false, true, true, true, false, true, 48);
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(true, false, false, false, false, false, 1112);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1112' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      Bagging bagging0 = new Bagging();
      checkClassifier0.setClassifier(bagging0);
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleClassAsNthAttribute(true, true, true, false, false, true, 1985, 14);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1985' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.testToString();
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(true, true, false, true, false, false, 5);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '5' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.updatingEquality(false, true, false, false, true, false, 3);
      boolean[] booleanArray0 = checkClassifier0.canTakeOptions();
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      int int0 = 1;
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(true, true, true, true, true, true, 1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getRevision();
      checkClassifier0.getClassifier();
      checkClassifier0.printAttributeSummary(false, false, true, false, true, true, (-2166));
      checkClassifier0.testToString();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.testsPerClassType((-993), true, true, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-993' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.listOptions();
      boolean boolean0 = false;
      int int0 = 0;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleNClasses(false, false, false, false, false, false, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: null
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(true, true, true, true, true, true, 1985, true, true, 1985);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1985' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = true;
      checkClassifier0.setSilent(true);
      boolean boolean3 = false;
      boolean boolean4 = true;
      LMT lMT0 = new LMT();
      lMT0.toString();
      checkClassifier0.setClassifier(lMT0);
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleOnlyClass(true, true, true, false, true, 34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '34' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SGDText sGDText0 = new SGDText();
      PipedReader pipedReader0 = new PipedReader();
      boolean[] booleanArray0 = checkClassifier0.correctBuildInitialisation(true, true, true, true, true, false, 1);
      boolean[] booleanArray1 = checkClassifier0.canTakeOptions();
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(false, false, false, true, true, true, 2855);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '2855' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getWords();
      checkClassifier0.setNumInstancesRelational(0);
      checkClassifier0.getOptions();
      checkClassifier0.setWordSeparators("The,quick,brown,fox,jumps,over,the,lazy,dog");
      checkClassifier0.declaresSerialVersionUID();
      boolean boolean0 = false;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.testsPerClassType(0, true, true, false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Problem determining ZeroR performance: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      checkClassifier0.getOptions();
      checkClassifier0.setNumNominal(34);
      checkClassifier0.setDebug(true);
      boolean boolean1 = true;
      boolean boolean2 = true;
      boolean boolean3 = false;
      checkClassifier0.doTests();
      boolean boolean4 = false;
      int int0 = 976;
      checkClassifier0.canHandleNClasses(boolean2, boolean2, boolean1, boolean3, boolean0, boolean4, int0);
      checkClassifier0.canTakeOptions();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      boolean boolean1 = true;
      checkClassifier0.canPredict(true, true, true, true, false, false, 0);
      boolean boolean2 = true;
      boolean boolean3 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(true, false, true, true, true, true, 34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '34' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(true, false, false, false, true, false, 48);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '48' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      int int0 = (-2005);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(true, true, true, false, true, false, (-2005), true, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-2005' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      boolean boolean1 = true;
      checkClassifier0.printAttributeSummary(true, false, true, false, true, true, 1461);
      checkClassifier0.testToString();
      boolean boolean2 = false;
      boolean boolean3 = true;
      checkClassifier0.getWords();
      int int0 = 4;
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(false, true, false, false, true, true, 4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SGDText sGDText0 = new SGDText();
      PipedReader pipedReader0 = new PipedReader();
      CheckClassifier checkClassifier1 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier1.instanceWeights(false, true, true, false, false, true, 1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SGDText sGDText0 = new SGDText();
      PipedReader pipedReader0 = new PipedReader();
      PipedReader pipedReader1 = new PipedReader();
      boolean[] booleanArray0 = checkClassifier0.instanceWeights(false, true, false, true, true, false, 1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      CheckClassifier checkClassifier1 = new CheckClassifier();
      boolean[] booleanArray1 = checkClassifier1.canTakeOptions();
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean[] booleanArray0 = checkClassifier0.weightedInstancesHandler();
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      boolean[] booleanArray1 = checkClassifier0.canTakeOptions();
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = false;
      int int0 = 393;
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(false, true, false, true, false, false, 393);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '393' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-455), false, true);
      checkClassifier0.m_Classifier = (Classifier) simpleLogistic0;
      checkClassifier0.testToString();
      simpleLogistic0.getOptions();
      checkClassifier0.canHandleMissing(false, false, false, false, true, false, 0, true, false, 0);
      checkClassifier0.multiInstanceHandler();
      CheckScheme.PostProcessor checkScheme_PostProcessor0 = new CheckScheme.PostProcessor();
      checkScheme_PostProcessor0.getRevision();
      checkScheme_PostProcessor0.getRevision();
      checkScheme_PostProcessor0.getRevision();
      Utils.SMALL = 3407.66702274849;
      checkScheme_PostProcessor0.getRevision();
      checkScheme_PostProcessor0.getRevision();
      checkScheme_PostProcessor0.getRevision();
      checkScheme_PostProcessor0.getRevision();
      checkClassifier0.setPostProcessor(checkScheme_PostProcessor0);
      simpleLogistic0.getTechnicalInformation();
      // Undeclared exception!
      try { 
        checkClassifier0.testsPerClassType((-4688), true, true, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-4688' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(false, false, false, false, false, true, 400);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '400' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "N3";
      stringArray0[1] = "As4H+2<";
      CheckClassifier.main(stringArray0);
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = 939;
      int int1 = 18;
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(false, false, false, false, false, true, 18);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '18' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      int int0 = (-1425);
      boolean boolean1 = true;
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(false, false, false, false, false, true, (-1425), true, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1425' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getOptions();
      checkClassifier0.setDebug(true);
      boolean[] booleanArray0 = checkClassifier0.canHandleNClasses(true, true, true, false, true, false, 976);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      boolean[] booleanArray1 = checkClassifier0.canTakeOptions();
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.getOptions();
      checkClassifier0.setDebug(true);
      CheckScheme.PostProcessor checkScheme_PostProcessor0 = new CheckScheme.PostProcessor();
      checkClassifier0.setPostProcessor(checkScheme_PostProcessor0);
      checkClassifier0.canHandleNClasses(true, true, true, false, true, false, 976);
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(true, true, true, true, false, true, 76, false, false, 76);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '76' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean[] booleanArray0 = checkClassifier0.doesntUseTestClassVal(false, false, false, true, false, false, 1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SGDText sGDText0 = new SGDText();
      PipedReader pipedReader0 = new PipedReader();
      checkClassifier0.updatingEquality(false, false, true, false, false, true, 1);
      boolean[] booleanArray0 = checkClassifier0.canTakeOptions();
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SGDText sGDText0 = new SGDText();
      PipedReader pipedReader0 = new PipedReader();
      checkClassifier0.canTakeOptions();
      checkClassifier0.datasetIntegrity(true, true, true, true, false, false, 1, true, false);
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleNClasses(false, false, false, false, false, false, 87);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Problem determining ZeroR performance: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.getOptions();
      checkClassifier0.setDebug(true);
      CheckScheme.PostProcessor checkScheme_PostProcessor0 = new CheckScheme.PostProcessor();
      checkClassifier0.setPostProcessor(checkScheme_PostProcessor0);
      checkClassifier0.doesntUseTestClassVal(false, true, false, false, false, false, 1);
      boolean[] booleanArray0 = checkClassifier0.multiInstanceHandler();
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SGDText sGDText0 = new SGDText();
      PipedReader pipedReader0 = new PipedReader();
      checkClassifier0.canTakeOptions();
      checkClassifier0.datasetIntegrity(true, true, true, true, false, false, 1, true, false);
      checkClassifier0.correctBuildInitialisation(false, true, false, true, true, false, 1);
      checkClassifier0.canTakeOptions();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SGDText sGDText0 = new SGDText();
      PipedReader pipedReader0 = new PipedReader();
      checkClassifier0.correctBuildInitialisation(true, false, false, false, true, false, 1);
      checkClassifier0.canTakeOptions();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.canTakeOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = checkClassifier0.getOptions();
      checkClassifier0.setOptions(stringArray0);
      System.setCurrentTimeMillis(19L);
      // Undeclared exception!
      try { 
        checkClassifier0.canPredict(false, false, false, true, false, true, (-2287));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-2287' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SGDText sGDText0 = new SGDText();
      PipedReader pipedReader0 = new PipedReader();
      checkClassifier0.correctBuildInitialisation(true, true, false, true, false, false, 0);
      checkClassifier0.canTakeOptions();
      checkClassifier0.multiInstanceHandler();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SGDText sGDText0 = new SGDText();
      PipedReader pipedReader0 = new PipedReader();
      checkClassifier0.canTakeOptions();
      checkClassifier0.datasetIntegrity(true, true, true, true, false, false, 1, false, false);
      checkClassifier0.updatingEquality(false, false, false, false, false, false, 0);
      checkClassifier0.canTakeOptions();
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SGDText sGDText0 = new SGDText();
      PipedReader pipedReader0 = new PipedReader();
      checkClassifier0.correctBuildInitialisation(false, true, false, true, true, false, 3);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.canTakeOptions();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = 0;
      checkClassifier0.getWords();
      checkClassifier0.setNumInstancesRelational(0);
      String[] stringArray0 = checkClassifier0.getOptions();
      checkClassifier0.setWordSeparators("The,quick,brown,fox,jumps,over,the,lazy,dog");
      checkClassifier0.declaresSerialVersionUID();
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = false;
      checkClassifier0.testsPerClassType(0, true, false, false);
      checkClassifier0.getClassifier();
      checkClassifier0.canHandleClassAsNthAttribute(false, false, true, false, false, true, Integer.MIN_VALUE, Integer.MIN_VALUE);
      CheckClassifier.main(stringArray0);
      checkClassifier0.getWords();
      checkClassifier0.testsPerClassType(int0, boolean0, boolean0, boolean1);
      checkClassifier0.canTakeOptions();
      checkClassifier0.updateableClassifier();
      boolean boolean3 = false;
      int int1 = (-1795);
      checkClassifier0.canHandleOnlyClass(boolean3, boolean2, boolean2, boolean3, boolean1, int1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getOptions();
      checkClassifier0.setDebug(true);
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(false, false, false, true, true, true, 2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = 0;
      checkClassifier0.getWords();
      checkClassifier0.setNumInstancesRelational(0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      checkClassifier0.m_Classifier = (Classifier) regressionByDiscretization0;
      checkClassifier0.getOptions();
      checkClassifier0.setWordSeparators("The,quick,brown,fox,jumps,over,the,lazy,dog");
      checkClassifier0.declaresSerialVersionUID();
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = false;
      checkClassifier0.testsPerClassType(0, true, false, false);
      checkClassifier0.getClassifier();
      boolean boolean3 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleClassAsNthAttribute(false, false, true, false, false, true, Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-2147483648' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }
}
