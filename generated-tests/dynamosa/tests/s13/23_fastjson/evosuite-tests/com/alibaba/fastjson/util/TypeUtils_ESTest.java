/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 23:57:20 GMT 2019
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormatSymbols;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("@nhZp");
      assertEquals((-3235456837208822317L), long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("fastjson.parser.autoTypeAccept");
      assertEquals(8329203921934333819L, long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TypeUtils.toLocale("get");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      BiFunction<String, Object, Field> biFunction0 = (BiFunction<String, Object, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakHashMap0.computeIfPresent("gettoString", biFunction0);
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      Class<Rectangle> class1 = Rectangle.class;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[3]);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class com.alibaba.fastjson.util.ParameterizedTypeImpl, create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {CTT=Asia/Shanghai, ART=Africa/Cairo, CNT=America/St_Johns, PRT=America/Puerto_Rico, PNT=America/Phoenix, PLT=Asia/Karachi, AST=America/Anchorage, BST=Asia/Dhaka, CST=America/Chicago, EST=-05:00, HST=-10:00, JST=Asia/Tokyo, IST=Asia/Kolkata, AGT=America/Argentina/Buenos_Aires, NST=Pacific/Auckland, MST=-07:00, AET=Australia/Sydney, BET=America/Sao_Paulo, PST=America/Los_Angeles, ACT=Australia/Darwin, SST=Pacific/Guadalcanal, VST=Asia/Ho_Chi_Minh, CAT=Africa/Harare, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, IET=America/Indiana/Indianapolis, MIT=Pacific/Apia, NET=Asia/Yerevan}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "in", (-1551L));
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.Labels", classLoader0);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      JSONField jSONField0 = TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      assertNull(jSONField0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("java.util.HashMap");
      assertFalse(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Point> class0 = Point.class;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertEquals("class java.awt.Point", class1.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("L>] ");
      assertEquals(890350113878438050L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Float float0 = new Float((-1906.9263F));
      Long long0 = TypeUtils.castToLong(float0);
      assertEquals((-1906L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Short short0 = new Short((short)2295);
      Integer integer0 = TypeUtils.castToInt(short0);
      assertEquals(2295, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[5] = 'w';
      Character character0 = TypeUtils.castToChar(charArray0[5]);
      assertEquals('w', (char)character0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(0L);
      Byte byte0 = TypeUtils.castToByte(atomicLong0);
      assertEquals((byte)0, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("istoString", (ClassLoader) null, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = TypeUtils.isKotlin((Class) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      boolean boolean0 = TypeUtils.isKotlin(propertyProcessableDeserializer0.type);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      boolean boolean0 = TypeUtils.isHibernateInitialized(propertyNamingStrategy0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      Field[] fieldArray0 = new Field[5];
      // Undeclared exception!
      try { 
        TypeUtils.getField(class1, "getParameters", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertEquals(1, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("Ljava.lang.AutoCloseable").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class1 = TypeUtils.getCollectionItemClass(type0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("");
      assertEquals((-3750763034362895579L), long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("");
      assertEquals((-3750763034362895579L), long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<String> class0 = String.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, map0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<TimeUnit> class0 = TimeUnit.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, treeMap0, false, parserConfig0.propertyNamingStrategy);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("[boolean");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, map0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<InterruptedException> class0 = InterruptedException.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("[boolean");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<MapDeserializer> class0 = MapDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<MapDeserializer> class0 = MapDeserializer.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<Character> class0 = Character.TYPE;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<Rectangle> class0 = Rectangle.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      weakHashMap0.put("UY3D4|m", (Field) null);
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) hashtable0, false, parserConfig0.propertyNamingStrategy);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      Class<Annotation> class0 = Annotation.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) linkedHashMap0, true, (PropertyNamingStrategy) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Insets insets0 = new Insets(3726, (-1953710015), 1821, 696);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.awt.Insets[top=3726,left=-1953710015,bottom=1821,right=696]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      String string0 = TypeUtils.castToString(timeUnit0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Insets insets0 = new Insets(1712, 1285, 0, (-207));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.Insets[top=1712,left=1285,bottom=0,right=-207]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Insets insets0 = new Insets(47, 47, 19, 47);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.Insets[top=47,left=47,bottom=19,right=47]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Type[] typeArray0 = new Type[2];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[0]);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.util.ParameterizedTypeImpl@e1781
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : SnakeCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<RenderingHints> class0 = RenderingHints.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.BACKGROUND;
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jSONObject0.put("1.2.46", (Object) bufferCapabilities_FlipContents0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.sql.ClientInfoStatus
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Collection<Field> collection0 = weakHashMap0.values();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(collection0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ConcurrentHashMap<Date, DecimalFormatSymbols> concurrentHashMap0 = new ConcurrentHashMap<Date, DecimalFormatSymbols>();
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) concurrentHashMap0, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<StackOverflowError> class0 = StackOverflowError.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("2b/U%o5j");
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) mockIllegalAccessException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.StackOverflowError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : [checksum=0xcba403eb]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(mockIllegalArgumentException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(fileSystemHandling0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : org.evosuite.runtime.testdata.FileSystemHandling@5ff019c0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "mX");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(aSMDeserializerFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException((String) null, (Throwable) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockIllegalArgumentException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("andDecrement");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(mockIllegalAccessException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"o\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("(/=/h+JU)jN");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(mockPrintStream0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("FNlNu`FGzV>]Xq?").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      DateFormatSymbols dateFormatSymbols0 = TypeUtils.cast((Object) null, type0, parserConfig0);
      assertNull(dateFormatSymbols0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      parserConfig0.setAsmEnable(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalAccessError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.lang.IllegalAccessError -> java.text.StringCharacterIterator
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      Class<Integer> class0 = Integer.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SQLClientInfoException sQLClientInfoException0 = TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNull(sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackOverflowError0, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("FNlNu`FGzV>]Xq?").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<PropertyProcessableDeserializer> class1 = PropertyProcessableDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Float> class0 = Float.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("has", "has");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<BigDecimal> class0 = BigDecimal.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, parserConfig0.propertyNamingStrategy);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isProxy((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isPath((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getSerializeFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<JobAttributes> class0 = JobAttributes.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "long", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, type0, type0);
      // Undeclared exception!
      try { 
        TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        TypeUtils.getAnnotation((Class<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) hashMap0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) null, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException();
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) interruptedException0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLDataException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      LinkedHashMap<BigDecimal, String> linkedHashMap0 = new LinkedHashMap<BigDecimal, String>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) linkedHashMap0, (ParameterizedType) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ObjectDeserializer objectDeserializer0 = parserConfig0.createJavaBeanDeserializer(class0, class0);
      assertEquals(12, objectDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<MapDeserializer> class0 = MapDeserializer.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class class0 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertFalse(class0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      Class class1 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("j");
      assertEquals("j", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = TypeUtils.decapitalize(";Ljava/lang/reflect/Type;Ljava/lang/Object;Ljava/lang/Object;I[I)Ljava/lang/Object;");
      assertEquals(";Ljava/lang/reflect/Type;Ljava/lang/Object;Ljava/lang/Object;I[I)Ljava/lang/Object;", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("KPoMzGv");
      assertEquals("KPoMzGv", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertTrue(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("[B");
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Class<TimeUnit> class0 = TimeUnit.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) concurrentHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<ClassLoader> class0 = ClassLoader.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("e,Un(Ot", classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<NumberFormatException> class0 = NumberFormatException.class;
      Class<?> class1 = parserConfig0.checkAutoType("Ljava.awt.Rectangle", class0, (-565));
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "double");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("[C", classLoader0, false);
      assertEquals(1041, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<?> class0 = TypeUtils.loadClass((String) null, (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      boolean boolean1 = TypeUtils.isPath(class1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = TypeUtils.cast((Object) null, class0, parserConfig0);
      assertNull(propertyProcessableDeserializer0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("scanDate");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Constructor<StackTraceElementDeserializer>[] constructorArray0 = (Constructor<StackTraceElementDeserializer>[]) Array.newInstance(Constructor.class, 1);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Constructor<SQLException>[] constructorArray0 = (Constructor<SQLException>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("bean-info");
      assertEquals(4113284555606900387L, long0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("t*b\"UW>e_6W[x8pe");
      assertEquals(4057864635771057660L, long0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("com.alibaba.fastjson.JSONPathException");
      TypeUtils.isHibernateInitialized(class0);
      boolean boolean0 = TypeUtils.isHibernateInitialized(noSuchMethodError0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      Class<ChoiceFormat> class1 = ChoiceFormat.class;
      Type[] typeArray0 = new Type[2];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      FieldInfo fieldInfo0 = new FieldInfo("RP [bRB2Q'fQ>_XQ`+;", class0, class1, parameterizedTypeImpl0, (Field) null, 49, 51, 51);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(fieldInfo0.declaringClass);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [I", class1.toString());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [C", class1.toString());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, (String) null, fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "Ljava.awt.Rectangle", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "[J", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      Class<Integer> class0 = Integer.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      TypeUtils.unwrapOptional(class0);
      Class<InterruptedException> class1 = InterruptedException.class;
      Class class2 = (Class)TypeUtils.unwrapOptional(class1);
      assertEquals(1, class2.getModifiers());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertSame(type0, parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<InternalError> class0 = InternalError.class;
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer(class0, (Type) null);
      assertEquals(12, objectDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Collator> class1 = Collator.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class0, parserConfig0.propertyNamingStrategy);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass((String) null, (ClassLoader) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>();
      Class<SQLException> class0 = SQLException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      SQLException sQLException0 = TypeUtils.castToJavaBean((Map<String, Object>) identityHashMap0, class0, parserConfig0);
      assertEquals(0, sQLException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<Point> class0 = Point.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) weakHashMap0, true, (PropertyNamingStrategy) null);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<Field> class0 = Field.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      assertEquals(11, list0.size());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, map0, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<AtomicLong> class0 = AtomicLong.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<InternalError> class0 = InternalError.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(serializeBeanInfo0);
      Class<?> class1 = javaBeanSerializer0.getType();
      Class<?> class2 = TypeUtils.getRawClass(class1);
      assertFalse(class2.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("com.alibaba.fastjson.JSONPathException", class0, 19);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. com.alibaba.fastjson.JSONPathException -> java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      weakHashMap0.values();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.GuavaCodec", classLoader0, true);
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("int");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "get");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("", classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[0]);
      ParserConfig parserConfig0 = ParserConfig.global;
      TimeDeserializer timeDeserializer0 = TypeUtils.cast((Object) parserConfig0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
      assertNull(timeDeserializer0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Type[] typeArray0 = new Type[2];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[1]);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "com.alibaba.fastjson.JSONPathException", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@e1781
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ";Ljava/lang/String;)Z", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Insets insets0 = new Insets(24, 512, 54, (-393));
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) insets0, (Type) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TypeUtils.toLocale("get");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      BiFunction<String, Object, Field> biFunction0 = (BiFunction<String, Object, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakHashMap0.computeIfPresent("gettoString", biFunction0);
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      Class<Rectangle> class1 = Rectangle.class;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class1;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[3]);
      ParserConfig parserConfig0 = ParserConfig.global;
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("<_Mpk9AvV");
      assertEquals("<_MPK9AVV", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "fastjson.parser.autoTypeSupport", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      TreeSet<IllegalArgumentException> treeSet0 = new TreeSet<IllegalArgumentException>();
      Class<java.sql.Date> class0 = java.sql.Date.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) treeSet0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "has", (Type) class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : float
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) point0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.awt.Point[x=0,y=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sqlDateDeserializer0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer@96
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.lang.Byte
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Class<Object> class0 = Object.class;
      Object object0 = TypeUtils.castToJavaBean((Object) timeZone0, class0);
      assertSame(timeZone0, object0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<Integer> class0 = Integer.TYPE;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      NumberDeserializer numberDeserializer0 = TypeUtils.cast((Object) weakHashMap0, (Type) class0, parserConfig0);
      assertNull(numberDeserializer0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = TypeUtils.cast((Object) sQLFeatureNotSupportedException0, class0, parserConfig0);
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(fileSystemHandling0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.testdata.FileSystemHandling@48c75ad
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("com.alibaba.fastjson.serializer.Labels");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.alibaba.fastjson.serializer.Labels\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Double double0 = new Double((-2016.3427274478347));
      Integer integer0 = TypeUtils.castToInt(double0);
      assertEquals((-2016), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Integer integer0 = new Integer((-2417));
      Integer integer1 = TypeUtils.castToInt(integer0);
      assertEquals((-2417), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ConcurrentHashMap<SQLDataException, Byte> concurrentHashMap0 = new ConcurrentHashMap<SQLDataException, Byte>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      WeakHashMap<ImageCapabilities, Float> weakHashMap0 = new WeakHashMap<ImageCapabilities, Float>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("ok75PLK^m$)e]1cbc}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : ok75PLK^m$)e]1cbc}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Double double0 = new Double(0.0);
      Long long0 = TypeUtils.castToLong(double0);
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("(I)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("GhCl5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : GhCl5
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Byte byte0 = new Byte((byte)29);
      Timestamp timestamp0 = TypeUtils.castToTimestamp(byte0);
      assertEquals(29000000, timestamp0.getNanos());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2508), (-2508), 4184, (-2508), 4184);
      Timestamp timestamp0 = TypeUtils.castToTimestamp(mockGregorianCalendar0);
      assertEquals("1970-01-01 00:00:00.0", timestamp0.toString());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Byte byte0 = new Byte((byte)32);
      Time time0 = TypeUtils.castToSqlTime(byte0);
      assertEquals("00:00:00", time0.toString());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("GhCl5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : GhCl5
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1911063896), 97, (-1629653793), 3, 97, (-1911063896));
      java.sql.Date date0 = TypeUtils.castToSqlDate(mockGregorianCalendar0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      java.sql.Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Long long0 = new Long(491L);
      java.sql.Date date0 = TypeUtils.castToSqlDate(long0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Float float0 = new Float((float) 1004);
      Date date0 = TypeUtils.castToDate(float0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Date date0 = TypeUtils.castToDate(calendar0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("cause");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"cause\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("){");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double double1 = TypeUtils.castToDouble(double0);
      assertEquals((double)double1, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("fastjson.parser.deny");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException(1);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(stringIndexOutOfBoundsException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.StringIndexOutOfBoundsException: String index out of range: 1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Float float0 = new Float(207.99643);
      Float float1 = TypeUtils.castToFloat(float0);
      assertEquals((float)float1, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(map0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-1L), 67);
      BigDecimal bigDecimal1 = TypeUtils.castToBigDecimal(bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(hashMap0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("java.time.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.time.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      char[] charArray0 = new char[9];
      Character character0 = TypeUtils.castToChar(charArray0[0]);
      assertEquals('\u0000', (char)character0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("_><\rpm.>M@=xB;`*%D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : _><\rpm.>M@=xB;`*%D
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("ishashCode");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ishashCode\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Short short0 = new Short((short) (-1972));
      Byte byte0 = TypeUtils.castToByte(short0);
      assertEquals((byte)76, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("1N^d0]KgO5X?");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      //  // Unstable assertion: assertTrue(TypeUtils.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      GridBagConstraints gridBagConstraints0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(gridBagConstraints0);
  }
}
