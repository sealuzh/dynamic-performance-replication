/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 02:30:14 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-2049);
      Class<Annotation> class0 = Annotation.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-2049));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int1 = 1422;
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      JSON.parseObject("", featureArray0);
      jSONArray0.set(1422, (Object) null);
      jSONArray0.getShortValue(1379);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONArray0);
      jSONArray1.remove((Object) null);
      jSONArray2.getLong(1407);
      jSONArray2.getTimestamp((short)0);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(1422);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1422, Size: 1422
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      file0.toURL();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      jSONArray0.getIntValue(3089);
      jSONArray1.getSqlDate(382);
      jSONArray0.getBigInteger(1);
      jSONArray0.add((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.toJavaObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, 3089);
      int int0 = 939;
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("1.2.46", "yyyy-MM-dd HH:mm:ss");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      jSONArray0.getFloatValue(939);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      jSONArray1.getByteValue(0);
      jSONArray1.getComponentType();
      jSONArray0.getJSONObject((byte)0);
      jSONArray0.getComponentType();
      jSONArray0.retainAll(jSONArray0);
      Integer integer1 = new Integer(1407);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) dataInputStream0);
      jSONArray0.getInteger(989);
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        jSONArray2.toArray(integerArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, 989);
      MockFile.createTempFile("@type", "1.2.46");
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      jSONArray0.getShortValue(989);
      jSONArray0.getLongValue((short)989);
      jSONArray0.getFloat(989);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSON.defaultTimeZone = jSONArray1.defaultTimeZone;
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.reflect.Field
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = new JSONArray();
      JSONArray jSONArray3 = new JSONArray();
      String string0 = JSON.DEFAULT_TYPE_KEY;
      // Undeclared exception!
      try { 
        jSONArray3.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      JSON.parseObject("", featureArray0);
      jSONArray0.set(0, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(1379);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1379, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>(concurrentHashMap0);
      ParserConfig.getFieldFromCache("@type", treeMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      jSONArray0.isEmpty();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "utf8 decode error, ");
      jSONArray1.add(0, (Object) null);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-2036), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1454, integer0);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      file0.mkdir();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      jSONArray0.getByteValue(989);
      jSONArray1.getComponentType();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/1.2.4601.2.46");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      jSONArray0.setRelatedArray(jSONArray1);
      jSONArray1.getObject(1421, (Type) null);
      jSONArray0.isEmpty();
      jSONArray1.getString(1413);
      jSONArray0.remove(731);
      assertEquals(1454, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1454;
      jSONArray0.fluentSet(1454, 989);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      file0.mkdir();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(1454);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1419, 3089);
      ClassLoader.getSystemClassLoader();
      jSONArray0.getDoubleValue(989);
      File file0 = MockFile.createTempFile("1.2.46", "yyyy-MM-dd HH:mm:ss");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      jSONArray0.getFloatValue(989);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("7#W}%)JUoYolh.y", concurrentHashMap0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(989, hashMap0);
      jSONArray1.getByteValue(40);
      jSONArray1.getComponentType();
      JSONArray jSONArray3 = new JSONArray(jSONArray0);
      jSONArray0.getComponentType();
      jSONArray0.retainAll(jSONArray3);
      // Undeclared exception!
      try { 
        jSONArray2.getIntValue(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, integer0);
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      Class<Object> class0 = Object.class;
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      jSONArray2.getObject(1398, class0);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("yyyy-MM-dd HH:mm:ss", concurrentHashMap0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[3] = serializerFeature3;
      jSONArray2.getObject(989, (Type) class0);
      SerializerFeature serializerFeature4 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[5] = serializerFeature5;
      jSONArray1.isEmpty();
      jSONArray2.getString(1423);
      assertEquals(1424, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, 3089);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("1.2.46", "yyyy-MM-dd HH:mm:ss");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      jSONArray0.getFloatValue(939);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("7#W}%)JUoYolh.y", concurrentHashMap0);
      Integer integer1 = new Integer(3089);
      hashMap0.remove((Object) integer1, (Object) classLoader0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(939, hashMap0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7#W}%)JUoYolh.y");
      JSONArray jSONArray3 = new JSONArray();
      jSONArray1.isEmpty();
      String string0 = JSON.DEFAULT_TYPE_KEY;
      jSONArray0.containsAll(jSONArray2);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.getObject(25, (Type) parameterizedTypeImpl0);
      assertEquals(990, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, 3089);
      ClassLoader.getSystemClassLoader();
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("1.2.46", "yyyy-MM-dd HH:mm:ss");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      jSONArray0.getFloatValue(939);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("7#W}%)JUoYolh.y", concurrentHashMap0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(939, hashMap0);
      jSONArray1.getByteValue(0);
      jSONArray1.getComponentType();
      jSONArray0.getComponentType();
      LinkedHashSet<InputStream> linkedHashSet0 = new LinkedHashSet<InputStream>();
      jSONArray0.retainAll(jSONArray0);
      jSONArray2.getIntValue(989);
      jSONArray1.getBoolean(3089);
      MockFile mockFile0 = new MockFile(file0, "j@~nrxL,juZdWPdfh");
      jSONArray1.fluentRemove((Object) linkedHashSet0);
      jSONArray0.subList(1116, 1423);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(linkedHashSet0);
      JSONArray jSONArray4 = jSONArray3.fluentRetainAll(jSONArray2);
      assertSame(jSONArray0, jSONArray4);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1419, 3089);
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("1.2.46", "yyyy-MM-dd HH:mm:ss");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      jSONArray1.getFloatValue(1419);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("yyyy-MM-dd HH:mm:ss", concurrentHashMap0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(939, hashMap0);
      jSONArray1.getByteValue(0);
      jSONArray1.getComponentType();
      jSONArray0.getJSONObject(939);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      jSONArray3.getComponentType();
      LinkedHashSet<InputStream> linkedHashSet0 = new LinkedHashSet<InputStream>();
      jSONArray1.retainAll(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray3.getIntValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1420
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(1419);
      ConcurrentHashMap<String, UTF8Decoder> concurrentHashMap0 = new ConcurrentHashMap<String, UTF8Decoder>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1419, concurrentHashMap0);
      ClassLoader.getSystemClassLoader();
      jSONArray0.getDoubleValue(989);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      jSONArray0.getFloatValue(989);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      ConcurrentHashMap<String, Field> concurrentHashMap1 = new ConcurrentHashMap<String, Field>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("JT$VUzApOPgn& zvk:[", hashMap0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, "@type");
      jSONArray1.getByteValue(0);
      jSONArray1.getComponentType();
      jSONArray0.getJSONObject(0);
      JSONArray jSONArray3 = new JSONArray(jSONArray0);
      jSONArray3.getComponentType();
      LinkedHashSet<InputStream> linkedHashSet0 = new LinkedHashSet<InputStream>();
      jSONArray2.retainAll(jSONArray0);
      jSONArray3.getIntValue(1412);
      JSONArray jSONArray4 = new JSONArray();
      jSONArray4.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray3.getBoolean(1419);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, 3089);
      ClassLoader.getSystemClassLoader();
      jSONArray0.getDoubleValue(939);
      MockFile.createTempFile("1.2.46", "yyyy-MM-dd HH:mm:ss");
      jSONArray0.getFloatValue(939);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray1.getShort(989);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray2 = jSONArray0.fluentRemove(939);
      JSONArray jSONArray3 = jSONArray1.fluentSet(939, jSONArray2);
      jSONArray3.getByteValue(68);
      jSONArray2.getByte(491);
      jSONArray1.getComponentType();
      int int0 = 2194;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(2194);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2194, Size: 989
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1430, 3089);
      ClassLoader.getSystemClassLoader();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>((Map<? extends String, ? extends Field>) treeMap0);
      ParserConfig.getFieldFromCache(".bq4t2J+7^ym U/s}", treeMap1);
      JSONArray jSONArray2 = jSONArray1.fluentSet(487, (Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bq4t2J+7^ym U/s}");
      JSONArray jSONArray3 = new JSONArray();
      jSONArray2.isEmpty();
      String string0 = JSON.DEFAULT_TYPE_KEY;
      jSONArray2.containsAll(jSONArray3);
      jSONArray1.getBoolean(933);
      JSONArray jSONArray4 = jSONArray1.fluentAdd((Object) classLoader0);
      jSONArray4.getByte(1430);
      JSONArray jSONArray5 = new JSONArray(3089);
      JSONArray jSONArray6 = jSONArray2.fluentRemove(1430);
      jSONArray1.getDate(989);
      Class<Object> class0 = Object.class;
      Object object0 = JSON.toJavaObject((JSON) jSONArray6, class0);
      JSONArray jSONArray7 = jSONArray6.fluentRemove(object0);
      // Undeclared exception!
      try { 
        jSONArray7.getJSONArray(1241579778);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1241579778, Size: 1431
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(468);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>(concurrentHashMap0);
      ParserConfig.getFieldFromCache("@type", treeMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      JSONArray jSONArray2 = new JSONArray();
      JavaBeanInfo.getBuilderClass((JSONType) null);
      jSONArray1.getObject(0, (Type) null);
      String string0 = JSON.DEFAULT_TYPE_KEY;
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-4023));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 192;
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.set(192, jSONArray1);
      jSONArray1.getInteger(0);
      MockFile.createTempFile("yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd HH:mm:ss");
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-1537));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      Integer integer1 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1419, integer0);
      ClassLoader.getSystemClassLoader();
      jSONArray0.getDoubleValue(939);
      MockFile.createTempFile("1.2.46", "yyyy-MM-dd HH:mm:ss");
      MockFile.createTempFile("@type", "");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      jSONArray1.getShortValue(989);
      jSONArray2.getLongValue((short)0);
      jSONArray2.getComponentType();
      jSONArray0.getFloat(1398);
      jSONArray1.getComponentType();
      LinkedHashSet<InputStream> linkedHashSet0 = new LinkedHashSet<InputStream>();
      jSONArray1.retainAll(jSONArray0);
      jSONArray1.getDate(189);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-102));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, integer0);
      jSONArray1.getString(989);
      jSONArray0.getDoubleValue(939);
      MockFile.createTempFile("@type", "1.2.46");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray0.getComponentType();
      jSONArray0.getFloat(1423);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("yyyy-MM-dd HH:mm:ss", parserConfig0, 989);
      defaultJSONParser0.getFieldTypeResolver();
      jSONArray0.getJSONArray(1);
      // Undeclared exception!
      try { 
        jSONArray0.addAll(939, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.isEmpty();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      JSON.parseObject("", featureArray0);
      jSONArray0.set(1447, (Object) null);
      jSONArray0.getShortValue(1379);
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray2.getObject(2210, (Type) parameterizedTypeImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2210, Size: 1448
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      Integer integer1 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1419, integer0);
      ClassLoader.getSystemClassLoader();
      jSONArray0.getDoubleValue(939);
      MockFile.createTempFile("1.2.46", "yyyy-MM-dd HH:mm:ss");
      MockFile.createTempFile("@type", "");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      jSONArray1.getShortValue(0);
      jSONArray2.getLongValue((short)0);
      jSONArray2.getComponentType();
      jSONArray0.getFloat(1398);
      jSONArray1.getComponentType();
      LinkedHashSet<InputStream> linkedHashSet0 = new LinkedHashSet<InputStream>();
      jSONArray1.retainAll(jSONArray0);
      int int0 = jSONArray1.getIntValue(1378);
      assertEquals(1420, jSONArray0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      Integer integer1 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1419, integer0);
      ClassLoader.getSystemClassLoader();
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("1.2.46", "yyyy-MM-dd HH:mm:ss");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      jSONArray0.getFloatValue(939);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("7#W}%)JUoYolh.y", concurrentHashMap0);
      jSONArray0.fluentSet(939, hashMap0);
      jSONArray1.getByteValue(0);
      jSONArray0.getByte(989);
      jSONArray1.getComponentType();
      jSONArray0.getJSONObject(939);
      int int0 = (-1262);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray((-1591));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      int int0 = 914;
      JSONArray jSONArray3 = jSONArray2.fluentSet(914, jSONArray1);
      jSONArray1.setRelatedArray(jSONArray0);
      ConcurrentHashMap<SequenceInputStream, ByteArrayInputStream> concurrentHashMap0 = new ConcurrentHashMap<SequenceInputStream, ByteArrayInputStream>();
      BiConsumer<SequenceInputStream, ByteArrayInputStream> biConsumer0 = (BiConsumer<SequenceInputStream, ByteArrayInputStream>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEach(biConsumer0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) concurrentHashMap0, 0, serializerFeatureArray0);
      jSONArray3.set(989, (Object) null);
      jSONArray1.contains((Object) null);
      jSONArray2.toArray();
      jSONArray1.getLong(753);
      Integer[] integerArray0 = null;
      TypeReference<MockFile> typeReference0 = null;
      try {
        typeReference0 = new TypeReference<MockFile>();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.TypeReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(2264, jSONArray0);
      jSONArray0.getInteger(989);
      MockFile.createTempFile("@type", "1.2.46");
      JSONArray jSONArray1 = jSONArray0.getJSONArray(2264);
      int int0 = 33;
      jSONArray0.getShort(33);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("yyyy-MM-dd HH:mm:ss", concurrentSkipListMap0);
      jSONArray0.getIntValue(989);
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate(2264);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(468);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>(concurrentHashMap0);
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer", concurrentHashMap0);
      JSONObject jSONObject0 = new JSONObject(1, true);
      jSONArray0.fluentSet(468, jSONObject0);
      ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.class;
      jSONArray0.toJavaList(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@type");
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.isEmpty();
      String string0 = JSON.DEFAULT_TYPE_KEY;
      jSONArray1.containsAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(989, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, integer0);
      jSONArray0.getDoubleValue(939);
      MockFile.createTempFile("@type", "1.2.46");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/M5V=T>'a9D01.2.46");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "yyyy-MM-dd HH:mm:ss");
      jSONArray2.getShortValue(132);
      jSONArray0.getLongValue(132);
      jSONArray1.getComponentType();
      jSONArray2.getFloat(1398);
      jSONArray0.getComponentType();
      LinkedHashSet<InputStream> linkedHashSet0 = new LinkedHashSet<InputStream>();
      jSONArray0.retainAll(jSONArray1);
      jSONArray0.getDouble(1423);
      assertEquals(1424, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      Integer integer1 = new Integer(989);
      jSONArray0.fluentSet(1419, integer0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1420
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, 989);
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("1.2.46", " 4PVOX[dBUF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      jSONArray0.getIntValue(989);
      jSONArray0.getSqlDate(939);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray2.getBigInteger(1406);
      jSONArray2.add((Object) null);
      CodingErrorAction codingErrorAction2 = CodingErrorAction.REPLACE;
      jSONArray1.isEmpty();
      jSONArray1.getString(0);
      jSONArray1.getSqlDate(989);
      jSONArray1.contains(codingErrorAction1);
      jSONArray1.remove(0);
      assertEquals(2848, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      jSONArray0.fluentSet(1423, integer0);
      jSONArray0.getDoubleValue(939);
      MockFile.createTempFile("@type", "1.2.46");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>(3089);
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wdc");
      JSONArray jSONArray1 = new JSONArray(989);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("'UkJ#_%!<Eo0~", concurrentSkipListMap0);
      Class<String> class1 = String.class;
      Class<String> class2 = String.class;
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class1, class2, class2, (Field) null, (-1040), (-1040), 561);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getField();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray2 = new JSONArray();
      jSONArray2.isEmpty();
      String string0 = JSON.DEFAULT_TYPE_KEY;
      jSONArray2.containsAll(list0);
      // Undeclared exception!
      try { 
        jSONArray2.getBoolean(562);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 562, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(468);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>(concurrentHashMap0);
      ParserConfig.getFieldFromCache("@type", treeMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "zH&+)2");
      JSONArray jSONArray2 = new JSONArray(1404);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      Class<String> class1 = String.class;
      Class<InputStream> class2 = InputStream.class;
      FieldInfo fieldInfo0 = new FieldInfo("@type", class1, class2, class1, (Field) null, 0, 441, 1732);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getField();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.");
      JSONArray jSONArray3 = new JSONArray();
      jSONArray3.isEmpty();
      String string0 = JSON.DEFAULT_TYPE_KEY;
      jSONArray2.containsAll(list0);
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean(34);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 34, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.isEmpty();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      JSON.parseObject("", featureArray0);
      jSONArray0.set(1447, (Object) null);
      jSONArray0.getShortValue(1379);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONArray0);
      jSONArray2.getLong(1407);
      jSONArray2.getTimestamp((short)0);
      jSONArray0.getBoolean(1447);
      Class<Object> class0 = Object.class;
      jSONArray0.getObject((int) 0, class0);
      jSONArray1.getByteValue(1447);
      jSONArray0.indexOf("1.2.46");
      jSONArray2.getDouble(1379);
      String string0 = JSON.DEFAULT_TYPE_KEY;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@type");
      JSONArray jSONArray3 = new JSONArray();
      jSONArray2.isEmpty();
      String string1 = JSON.DEFAULT_TYPE_KEY;
      jSONArray0.containsAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray3.getBoolean(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(468);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>(concurrentHashMap0);
      ParserConfig.getFieldFromCache("@type", treeMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.class;
      jSONArray0.toJavaList(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hd0b");
      JSONArray jSONArray2 = new JSONArray(1404);
      Class<Object> class1 = Object.class;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("hd0b", treeMap0);
      Class<Integer> class2 = Integer.class;
      FieldInfo fieldInfo0 = new FieldInfo("java.lang.", class2, class1, class2, (Field) null, (-1), 989, 3089);
      BeanContext beanContext0 = new BeanContext(fieldInfo0.fieldClass, fieldInfo0);
      beanContext0.getField();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray3 = new JSONArray();
      jSONArray1.isEmpty();
      String string0 = JSON.DEFAULT_TYPE_KEY;
      jSONArray1.containsAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.getBoolean((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)19;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray((byte)100);
      // Undeclared exception!
      try { 
        jSONArray0.subList((-2899), (-871));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -2899
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(2264, jSONArray0);
      jSONArray0.getInteger(2263);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-128);
      byteArray0[0] = (byte) (-128);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Class<Object> class0 = Object.class;
      jSONArray0.getObject(2264, class0);
      int int0 = 873;
      jSONArray0.getByteValue(873);
      jSONArray0.indexOf((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-744));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3680);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3680, (Object) null);
      ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.class;
      jSONArray1.toJavaList(class0);
      jSONArray0.getJSONArray(3089);
      MockFile.createTempFile("yyyy-MM-dd HH:mm:ss", "LZj,`;cz.3Z@36Q");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      Class<Object> class1 = Object.class;
      jSONArray0.getObject(1398, class1);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("p}n", concurrentHashMap0);
      jSONArray2.getShortValue(989);
      jSONArray0.getLongValue(3680);
      jSONArray0.getComponentType();
      jSONArray2.getFloat(989);
      jSONArray1.getComponentType();
      LinkedHashSet<InputStream> linkedHashSet0 = new LinkedHashSet<InputStream>();
      // Undeclared exception!
      try { 
        jSONArray0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) sequenceInputStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)83;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray2.fluentRetainAll(jSONArray1);
      JSONArray jSONArray3 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray1.getBigDecimal(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 15;
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      int int1 = 939;
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(15);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, integer0);
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      jSONArray0.getIntValue(61);
      jSONArray1.getSqlDate(382);
      jSONArray0.getBigInteger(1);
      jSONArray0.add((Object) null);
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(jSONArray1);
      uTF8Decoder0.malformedInputAction();
      jSONArray2.isEmpty();
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      jSONArray2.setRelatedArray(sequenceInputStream0);
      // Undeclared exception!
      try { 
        jSONArray0.getString(158);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 158, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(102);
      jSONArray0.isEmpty();
      Class<Object> class0 = Object.class;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("yyyy-MM-dd HH:mm:ss", concurrentSkipListMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class0, class0, (Field) null, 1629, 1400, 989);
      Class<String> class1 = String.class;
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getFieldType();
      Type type0 = jSONArray0.componentType;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(989, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, integer0);
      jSONArray0.getDoubleValue(1423);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      jSONArray0.getDoubleValue(989);
      MockFile.createTempFile("yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd HH:mm:ss");
      MockFile.createTempFile("1.2.46", "=\")uHSs{7#GP?");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      jSONArray1.getFloatValue(1423);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("yyyy-MM-dd HH:mm:ss", hashMap0);
      ParserConfig.getFieldFromCache("@type", hashMap0);
      jSONArray0.getByteValue(1423);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray1.getByte(989);
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      Integer integer1 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, integer0);
      ClassLoader.getSystemClassLoader();
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("1.2.46", "yyyy-MM-dd HH:mm:ss");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      jSONArray0.getFloatValue(0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("7#W}%)JUoYolh.y", concurrentHashMap0);
      ParserConfig.getFieldFromCache("@type", concurrentHashMap0);
      jSONArray1.getByteValue(0);
      jSONArray0.getByte(989);
      jSONArray1.getComponentType();
      jSONArray0.getJSONObject(939);
      int int0 = (-1262);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray((-1591));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, integer0);
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      JSONArray jSONArray2 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray1.getObject(17, class0);
      jSONArray1.getByteValue(17);
      jSONArray0.indexOf((Object) null);
      int int0 = 18;
      jSONArray0.getDouble(18);
      jSONArray0.getByte(1416);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(1423);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, integer0);
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      JSONArray jSONArray2 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray1.getObject(17, class0);
      jSONArray1.getByteValue(17);
      jSONArray0.indexOf((Object) null);
      jSONArray0.getDouble(18);
      jSONArray1.getString(27);
      jSONArray2.isEmpty();
      jSONArray2.listIterator();
      jSONArray0.getFloat(939);
      assertEquals(1424, jSONArray0.size());
      
      jSONArray0.getIntValue(0);
      // Undeclared exception!
      try { 
        jSONArray2.getFloat(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, integer0);
      jSONArray0.getDoubleValue(939);
      MockFile.createTempFile("@type", "1.2.46");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      CodingErrorAction codingErrorAction2 = CodingErrorAction.REPLACE;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", hashMap0);
      jSONArray0.getByteValue(939);
      jSONArray1.getByte((byte)0);
      jSONArray1.getJSONObject(939);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(1423);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1423;
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, integer0);
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      file0.setReadable(true, true);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(3089, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1424
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.isEmpty();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      int int0 = 1447;
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      JSON.parseObject("", featureArray0);
      jSONArray0.set(1447, (Object) null);
      jSONArray0.getShortValue(1379);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONArray0);
      jSONArray2.getLong(1407);
      // Undeclared exception!
      try { 
        jSONArray1.remove(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1448
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, integer0);
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      Object object0 = new Object();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      jSONArray0.getByteValue(1398);
      jSONArray1.getByte(1423);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-2173));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 1423;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      jSONArray0.fluentSet(1423, integer0);
      jSONArray0.getDoubleValue(939);
      MockFile.createTempFile("@type", "1.2.46");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.getObject(1398, class0);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("yyyy-MM-dd HH:mm:ss", concurrentHashMap0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1424
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, integer0);
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      JSONArray jSONArray2 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray1.getObject(17, class0);
      jSONArray1.getByteValue(17);
      jSONArray0.indexOf((Object) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      jSONArray1.sort(comparator0);
      jSONArray0.getDouble(18);
      jSONArray1.getString(27);
      boolean boolean0 = jSONArray2.isEmpty();
      jSONArray2.listIterator();
      jSONArray0.getFloat(939);
      assertEquals(1424, jSONArray0.size());
      
      LinkedHashSet<InputStream> linkedHashSet0 = new LinkedHashSet<InputStream>();
      boolean boolean1 = jSONArray0.retainAll(linkedHashSet0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentSet(592, jSONArray2);
      JSONArray jSONArray4 = jSONArray3.fluentRetainAll(jSONArray0);
      jSONArray4.getJSONArray(74);
      // Undeclared exception!
      try { 
        jSONArray3.getShort(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 593
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, integer0);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      jSONArray1.indexOf(dataInputStream0);
      JSONArray jSONArray2 = jSONArray0.fluentAdd(1225, (Object) codingErrorAction1);
      // Undeclared exception!
      try { 
        jSONArray2.getDouble((-406));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-3320));
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, integer0);
      ClassLoader.getSystemClassLoader();
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("yyyy-MM-dd HH:mm:ss", "1.2.46");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray2.getFloatValue(989);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      jSONArray2.contains(integer0);
      jSONArray1.add((Object) "yyyy-MM-dd HH:mm:ss");
      assertEquals(1425, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.isEmpty();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      JSON.parseObject("", featureArray0);
      jSONArray0.set(1447, (Object) null);
      jSONArray0.getShortValue(1379);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(0, concurrentSkipListMap0);
      // Undeclared exception!
      try { 
        jSONArray2.getShortValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1448
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, integer0);
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      Class<Object> class0 = Object.class;
      jSONArray1.getObject(17, class0);
      jSONArray1.getByteValue(17);
      jSONArray0.indexOf((Object) null);
      jSONArray1.getDouble(0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-1386), (Object) "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1386, Size: 1424
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSON.parseObject((String) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, (Object) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      Class<Object> class0 = Object.class;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("create url error", concurrentSkipListMap0);
      FieldInfo fieldInfo0 = new FieldInfo("yyyy-MM-dd HH:mm:ss", class0, class0, class0, (Field) null, 15, 3089, (-1424));
      Class<Annotation> class1 = Annotation.class;
      fieldInfo0.getAnnation(class1);
      Class<JSONObject> class2 = JSONObject.class;
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      jSONArray1.isEmpty();
      String string0 = JSON.DEFAULT_TYPE_KEY;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      int int0 = jSONArray0.lastIndexOf(dataInputStream0);
      assertEquals(990, jSONArray0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, integer0);
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      Class<Object> class0 = Object.class;
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      jSONArray2.getObject(1398, class0);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("yyyy-MM-dd HH:mm:ss", concurrentHashMap0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[5] = serializerFeature5;
      jSONArray1.isEmpty();
      jSONArray2.getString(1423);
      assertEquals(1424, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3680);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3680, (Object) null);
      ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.class;
      jSONArray1.toJavaList(class0);
      jSONArray0.getJSONArray(3089);
      jSONArray1.getShortValue(0);
      jSONArray0.equals(jSONArray1);
      jSONArray1.fluentAdd((Object) "J~");
      String string0 = "gkNB&3g<PbU2R";
      // Undeclared exception!
      try { 
        JSON.parseArray("gkNB&3g<PbU2R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.isEmpty();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      JSON.parseObject("", featureArray0);
      jSONArray0.set(1447, (Object) null);
      int int0 = 1379;
      jSONArray0.getShortValue(1379);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONArray0);
      jSONArray2.getLong(1407);
      jSONArray2.getTimestamp((short)0);
      jSONArray0.getBoolean(1447);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      jSONArray0.set((-1), sequenceInputStream0);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(2263);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2263, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      jSONArray0.fluentSet(1423, integer0);
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.getObject(1398, class0);
      Class<JSONArray> class1 = JSONArray.class;
      Class<Field> class2 = Field.class;
      Class<SequenceInputStream> class3 = SequenceInputStream.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("yyyy-MM-dd HH:mm:ss", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class2, class3, class3, (Field) null, 989, 989, 989);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      Class<Annotation> class4 = Annotation.class;
      beanContext0.getAnnation(class4);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[5] = serializerFeature5;
      JSON.toJSONString((Object) null, 989, serializerFeatureArray0);
      jSONArray1.getByteValue(557);
      jSONArray0.getByte(267);
      assertEquals(1424, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.DEFFAULT_DATE_FORMAT = jSONArray0.DEFFAULT_DATE_FORMAT;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", treeMap0);
      Class<Field> class0 = Field.class;
      Class<Object> class1 = Object.class;
      FieldInfo fieldInfo0 = new FieldInfo("jr}Yg]d+C N7", class0, class1, class1, (Field) null, 1420, 989, 0);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getFieldType();
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1414, fieldInfo0.fieldType);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1414, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.isEmpty();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      JSON.parseObject("", featureArray0);
      jSONArray0.set(1447, (Object) null);
      jSONArray0.getShortValue(1379);
      jSONArray0.fluentRemove((Object) feature0);
      // Undeclared exception!
      try { 
        jSONArray0.getLong(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1448
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.subList(0, 0);
      jSONArray0.fluentClear();
      jSONArray0.fluentAddAll(0, (Collection<?>) list0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, integer0);
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      jSONArray0.getIntValue(61);
      jSONArray1.getSqlDate(382);
      jSONArray0.getBigInteger(1);
      jSONArray0.add((Object) null);
      boolean boolean0 = jSONArray0.getBooleanValue(939);
      assertEquals(1425, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.isEmpty();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, integer0);
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      Class<Object> class0 = Object.class;
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      jSONArray2.addAll(939, (Collection<?>) jSONArray1);
      jSONArray2.getObject(1398, class0);
      jSONArray2.getByteValue(557);
      jSONArray0.indexOf((Object) null);
      assertEquals(2848, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      jSONArray0.fluentSet(1423, integer0);
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.getObject(1398, class0);
      jSONArray1.getByteValue(557);
      jSONArray0.indexOf((Object) null);
      assertEquals(1424, jSONArray0.size());
      
      jSONArray0.getDouble(989);
      assertEquals(1424, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(1423);
      int int0 = 1049;
      JSONArray jSONArray1 = jSONArray0.fluentSet(1049, integer0);
      jSONArray1.getDoubleValue(1049);
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "g]|'R-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-3320));
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, integer0);
      ClassLoader.getSystemClassLoader();
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      jSONArray1.getIntValue(1272);
      jSONArray1.getSqlDate(389);
      jSONArray1.getBigInteger(1252);
      jSONArray0.add((Object) null);
      assertEquals(1425, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.parse((String) null);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray0.contains(jSONArray1);
      jSONArray0.setRelatedArray((Object) null);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-3320));
      jSONArray0.fluentSet(1423, integer0);
      ClassLoader.getSystemClassLoader();
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.getObject(1398, class0);
      assertEquals(1424, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3680);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3680, (Object) null);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-83);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray0.fluentRemove(3089);
      jSONArray1.removeAll(jSONArray0);
      TypeReference<String> typeReference0 = null;
      try {
        typeReference0 = new TypeReference<String>();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.TypeReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-3320));
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, integer0);
      ClassLoader.getSystemClassLoader();
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      uTF8Decoder0.onUnmappableCharacter(codingErrorAction1);
      int int0 = jSONArray1.getIntValue(1272);
      assertEquals(1424, jSONArray0.size());
      assertEquals(0, int0);
      
      jSONArray1.getSqlDate(389);
      jSONArray1.getBigInteger(1252);
      assertEquals(1424, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 592;
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray0.fluentSet(592, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(592);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-3320));
      jSONArray0.fluentSet(1423, integer0);
      ClassLoader.getSystemClassLoader();
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.IGNORE;
      jSONArray0.getDate(1423);
      assertEquals(1424, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(39);
      File file0 = MockFile.createTempFile(";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;", "Jz");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream1);
      jSONArray0.set(39, dataInputStream0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, 1090);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      File file0 = MockFile.createTempFile("i5&~xidM78O!sZN.L", "@type");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      jSONArray0.set(3089, (Object) null);
      jSONArray0.toArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.fluentSet(5222, integer0);
      assertEquals(5223, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-3320));
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, integer0);
      ClassLoader.getSystemClassLoader();
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      jSONArray1.getFloatValue(939);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      uTF8Decoder0.malformedInputAction();
      jSONArray1.isEmpty();
      jSONArray0.getString(989);
      assertEquals(1424, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentSet(592, jSONArray2);
      jSONArray2.add(563, (Object) jSONArray3);
      assertEquals(594, jSONArray3.size());
      assertEquals(594, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-3320));
      JSONArray jSONArray1 = jSONArray0.fluentSet(1423, integer0);
      ClassLoader.getSystemClassLoader();
      jSONArray0.getDoubleValue(939);
      File file0 = MockFile.createTempFile("@type", "1.2.46");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      uTF8Decoder0.malformedInputAction();
      jSONArray1.isEmpty();
      jSONArray0.getString(989);
      assertEquals(1424, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      Feature[] featureArray0 = new Feature[0];
      JSON.parse("", featureArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        jSONArray0.add(596, (Object) sequenceInputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 596, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray0.contains(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue((-2168));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.DEFFAULT_DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";
      Integer integer0 = new Integer(37);
      jSONArray0.set(966, integer0);
      short short0 = jSONArray0.getShortValue(539);
      assertEquals(967, jSONArray0.size());
      assertEquals((short)0, short0);
      
      jSONArray0.fluentRemove((Object) "yyyy-MM-dd HH:mm:ss");
      jSONArray0.getLong(539);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(1703);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1703, Size: 967
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(1349, jSONArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hc,zp_j,I<u}\"H");
      JSONArray jSONArray3 = new JSONArray();
      jSONArray2.lastIndexOf((Object) null);
      jSONArray2.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray2.getString(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1350
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(39);
      // Undeclared exception!
      try { 
        jSONArray0.toArray((Class<String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) enumeration0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray0.contains(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray0.add((-1182), (Object) jSONArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1182, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3680);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3680, (Object) null);
      ClassLoader.getSystemClassLoader();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd(3680, (Object) sequenceInputStream0);
      jSONArray1.set(371, jSONArray2);
      jSONArray1.getInteger(2263);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      JSONArray jSONArray3 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.getBoolean((-793));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray0.fluentSet(592, jSONArray2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      JSONArray jSONArray3 = new JSONArray();
      jSONArray1.lastIndexOf(jSONArray3);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray3.getString(592);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 592, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3680);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3680, (Object) null);
      ClassLoader.getSystemClassLoader();
      jSONArray1.getDoubleValue(939);
      File file0 = MockFile.createTempFile("xb5", "yyyy-MM-dd HH:mm:ss");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray1.addAll((Collection<?>) jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3680);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3680, (Object) null);
      ClassLoader.getSystemClassLoader();
      jSONArray1.getDoubleValue(939);
      File file0 = MockFile.createTempFile("xb5", "yyyy-MM-dd HH:mm:ss");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      int int0 = 1;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.AllowComment;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SortFeidFastMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableSpecialKeyDetect;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.SupportAutoType;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.UseObjectArray;
      featureArray0[4] = feature4;
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 989, 939, charsetDecoder0, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.DEFFAULT_DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";
      int int0 = 966;
      Integer integer0 = new Integer(37);
      jSONArray0.set(966, integer0);
      jSONArray0.getLong(966);
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(1710);
      jSONArray1.fluentSet(3089, jSONArray0);
      ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray1.toJavaList(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.isEmpty();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) sequenceInputStream0);
      // Undeclared exception!
      try { 
        jSONArray1.getShort(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 989);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, (InputStream) null);
      boolean boolean0 = jSONArray1.contains(sequenceInputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      boolean boolean0 = jSONArray1.contains(jSONArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      jSONArray0.toJavaList(class0);
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
      
      jSONArray0.hashCode();
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.remove((-2676));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 11;
      // Undeclared exception!
      try { 
        jSONArray0.add(2054, (Object) "yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2054, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1373);
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) list0);
      JSONArray jSONArray4 = jSONArray3.fluentRemove((Object) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray4.fluentAdd(989, (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-2046);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-2046));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      jSONArray0.getComponentType();
      jSONArray0.lastIndexOf((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((-540));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      List<SequenceInputStream> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.addAll((-2040), (Collection<?>) jSONArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2040, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("yyyy-MM-dd HH:mm:ss", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1454, integer0);
      jSONArray0.getDoubleValue(939);
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      String string0 = "7#W}%)JUoY\\olh.y";
      ParserConfig.getFieldFromCache("-`-qf/vj", concurrentHashMap0);
      ParserConfig.getFieldFromCache("yyyy-MM-dd HH:mm:ss", concurrentHashMap0);
      jSONArray0.getByteValue(1454);
      int int0 = (-2613);
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue((-2613));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1427, sequenceInputStream0);
      byte byte0 = jSONArray1.getByteValue(989);
      assertEquals(1428, jSONArray0.size());
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      jSONArray0.setComponentType(class0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      int int0 = JSON.DEFAULT_GENERATE_FEATURE;
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) sequenceInputStream0);
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.set((-2996), jSONArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(2222);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2222, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-294), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      Integer integer0 = new Integer(989);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-777));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(183);
      jSONArray0.fluentAdd((Object) null);
      jSONArray0.size();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-2097));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.retainAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(2264);
      jSONArray0.set(2264, jSONArray1);
      jSONArray0.getInteger(2263);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-70);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.NonStringKeyAsString;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableASM;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.IgnoreNotMatch;
      featureArray0[2] = feature2;
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, 989, 2263, (CharsetDecoder) uTF8Decoder0, (Type) null, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(2236);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      jSONArray0.removeAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(2257);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2257, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONObject jSONObject0 = new JSONObject(3089);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      JSONObject jSONObject2 = jSONObject1.fluentRemove(jSONArray1);
      JSONArray jSONArray2 = jSONArray0.fluentRemove((Object) jSONObject2);
      assertTrue(jSONArray2.isEmpty());
      
      JSONArray jSONArray3 = jSONArray0.fluentAdd((Object) jSONArray2);
      assertFalse(jSONArray3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-2440));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      Integer integer0 = new Integer(3089);
      boolean boolean0 = jSONArray0.add((Object) iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        JSON.parse("yyyy-MM-dd HH:mm:ss", 3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSONArray0;
      objectArray0[1] = (Object) jSONArray0;
      jSONArray0.toArray(objectArray0);
      Class<InputStream> class0 = InputStream.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("yyyy-MM-dd HH:mm:ss", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getRelatedArray();
      Collection<JSONObject> collection0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.addAll(0, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-1588));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(1000);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1000, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 2129;
      JSONArray jSONArray0 = new JSONArray(2129);
      // Undeclared exception!
      try { 
        jSONArray0.subList(2129, (-1549));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2129) > toIndex(-1549)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(957);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 957, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONArray0.addAll((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-1933));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pT)[Rr2 J5");
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger((-2584));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "default constructor not found. ");
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((-1099));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1;
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(1610);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1610, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeWriter serializeWriter0 = new SerializeWriter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.PrettyFormat;
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-2194));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(576);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 576, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(989);
      jSONArray1.add((Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getShort(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-2225));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList(920, 90);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 90
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-1774));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(539);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 539, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONArray0.fluentRemoveAll(linkedHashSet0);
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-118);
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.SupportNonPublicField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SortFeidFastMatch;
      featureArray0[1] = feature1;
      JSON.parse(byteArray0, featureArray0);
      jSONArray1.set(3089, (Object) null);
      assertEquals(3090, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      com.alibaba.fastjson.util.ParameterizedTypeImpl parameterizedTypeImpl0 = new com.alibaba.fastjson.util.ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[0]);
      Type type0 = FieldInfo.getFieldType(class0, class0, parameterizedTypeImpl0);
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.CustomMapDeserializer;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowUnQuotedFieldNames;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableASM;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.CustomMapDeserializer;
      featureArray0[3] = feature3;
      JSON.parseObject(charArray0, 572, type0, featureArray0);
      jSONArray0.remove((Object) null);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.setRelatedArray(jSONArray1);
      assertTrue(jSONArray0.equals((Object)jSONArray1));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(false);
      jSONArray0.fluentRemoveAll(jSONArray0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(553);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 553
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Integer integer0 = new Integer(561);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) integer0);
      ParserConfig.getGlobalInstance();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(22);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 22, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(581);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 581, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.isEmpty();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLong(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(3001);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3001, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1305;
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(1305);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1305, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      JSONArray jSONArray1 = jSONArray0.fluentSet((-1), linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(561);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 561, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.addAll((Collection<?>) list0);
      jSONArray0.fluentRemoveAll(list0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("java.lang.StackTraceElement");
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-980), (Object) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -980, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.remove(1392510721);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1392510721, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(3089);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) linkedList0);
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(linkedList0);
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportArrayToBean;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SupportNonPublicField;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowSingleQuotes;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.IgnoreNotMatch;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.SortFeidFastMatch;
      featureArray0[5] = feature5;
      JSON.parse((String) null, featureArray0);
      Iterator<Object> iterator0 = jSONArray2.iterator();
      jSONArray0.clear();
      jSONArray0.setRelatedArray(jSONArray1);
      Iterator<Object> iterator1 = jSONArray1.iterator();
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.getShort(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.isEmpty();
      Class<Object> class0 = Object.class;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class0, class0, (Field) null, 0, 2107, 3089);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Type type0 = beanContext0.getFieldType();
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, type0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.isEmpty();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(555);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 555, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(83);
      // Undeclared exception!
      try { 
        jSONArray0.getString(999999999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 999999999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(989);
      jSONArray0.isEmpty();
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      Class<Integer> class0 = Integer.class;
      jSONArray0.toJavaList(class0);
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("yyyy-MM-dd HH:mm:ss", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      Collection<Object> collection0 = treeMap0.values();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(collection0);
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      jSONArray0.fluentRemove((Object) "1.2.46");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(104, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 104, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      jSONArray1.fluentAdd((Object) jSONArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll(989, (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject((-3865));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 592;
      Class<Integer> class0 = Integer.class;
      jSONArray0.toJavaList(class0);
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = '\\';
      charArray0[2] = '/';
      charArray0[3] = '*';
      charArray0[4] = '\\';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 989);
      Class<Object> class1 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class1);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(592, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 592, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(3664);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3664, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.getLong((-4166));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSON.parse("", 3665);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "@type";
      stringArray0[2] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[3] = "1.2.46";
      stringArray0[4] = "1.2.46";
      stringArray0[5] = "@type";
      jSONArray3.toArray(stringArray0);
      JSONArray jSONArray4 = jSONArray0.fluentRemoveAll(jSONArray2);
      jSONArray4.getRelatedArray();
      // Undeclared exception!
      try { 
        jSONArray2.add(1026, (Object) stringArray0[0]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1026, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      jSONArray0.size();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(linkedHashSet0);
      JSONObject jSONObject0 = new JSONObject(100, false);
      boolean boolean0 = jSONArray1.remove((Object) jSONObject0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSONArray2.getDate(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Object> class0 = Object.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      List<Object> list0 = new JSONArray();
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONArray0.removeAll(list0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      javaBeanSerializer0.getFieldValues("com.alibaba.fastjson.JSONArray");
      JSONArray jSONArray1 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONArray0.fluentRemove((Object) javaBeanSerializer0);
      // Undeclared exception!
      try { 
        jSONArray1.getShort((-1106));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShort(3664);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3664, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-1690));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(1434);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1434, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Object> class0 = Object.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues("com.alibaba.fastjson.JSONArray");
      JSONArray jSONArray0 = new JSONArray(list0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSONArray0.sort(comparator0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(151);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 151, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.listIterator();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(464);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 464, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) list0);
      JSON.parse("", (-1));
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@type";
      jSONArray2.toArray(stringArray0);
      jSONArray3.fluentRemoveAll(jSONArray1);
      assertTrue(jSONArray3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@type";
      stringArray0[1] = "@type";
      stringArray0[2] = "@type";
      stringArray0[3] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[4] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[5] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[6] = "@type";
      jSONArray0.clone();
      stringArray0[7] = "@type";
      String[] stringArray1 = jSONArray0.toArray(stringArray0);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) list0);
      JSON.parse("", (-1));
      jSONArray1.fluentAdd((Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.getLong(2044);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2044, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-4756);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-4756));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.fluentAddAll(0, (Collection<?>) list0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreNonFieldGetter;
      serializeConfig0.setTypeKey("@type");
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[2] = serializerFeature2;
      // Undeclared exception!
      try { 
        jSONArray0.get(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      List<String> list0 = jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.addAll(1192, (Collection<?>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1192, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSONArray jSONArray0 = new JSONArray(2794);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-1490), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.get((-4756));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3680);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3680, (Object) null);
      ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.class;
      jSONArray1.toJavaList(class0);
      jSONArray1.fluentAddAll(3089, (Collection<?>) jSONArray0);
      String string0 = "J~";
      // Undeclared exception!
      try { 
        JSON.parse("J~", 3680);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : J~
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray0.getComponentType();
      jSONArray1.setComponentType((Type) null);
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(83);
      JSONArray jSONArray1 = new JSONArray();
      Object[] objectArray0 = jSONArray0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Object> class0 = Object.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      javaBeanSerializer0.getFieldValues("com.alibaba.fastjson.JSONArray");
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) hashMap0);
      // Undeclared exception!
      try { 
        jSONArray1.getShort(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Class<JSONObject> class0 = JSONObject.class;
      SerializeFilter serializeFilter0 = null;
      serializeConfig0.addFilter(class0, (SerializeFilter) null);
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      JSON.toJSONBytes((Object) null, serializeConfig0, (SerializeFilter) null, serializerFeatureArray0);
      int int0 = (-1549);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-1549), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreNonFieldGetter;
      serializeConfig0.setTypeKey("@type");
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[5] = serializerFeature5;
      JSON.toJSONString((Object) jSONArray0, serializeConfig0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(464);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 464, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      Class<Integer> class1 = Integer.class;
      jSONArray0.toJavaList(class1);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll((-3002), (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3002, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.fluentAddAll(0, (Collection<?>) list0);
      JSON.parse("", (-1));
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = new JSONArray(989);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@type";
      jSONArray3.toArray(stringArray0);
      int int0 = jSONArray0.indexOf("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) list0);
      JSON.parse("", (-1));
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(184);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 184, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray0.getComponentType();
      jSONArray1.setComponentType((Type) null);
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = null;
      typeArray0[1] = null;
      typeArray0[2] = null;
      typeArray0[3] = null;
      typeArray0[4] = null;
      TypeReference<JSONArray> typeReference0 = null;
      try {
        typeReference0 = new TypeReference<JSONArray>(typeArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.TypeReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      int int0 = 363;
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray(363);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 363, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray((-2146));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(43);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 43, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int int0 = 78;
      JSONArray jSONArray0 = new JSONArray(78);
      int int1 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(131072);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(274, (Object) "yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 274, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(83);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(83, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 83, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<Object> class0 = Object.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues("com.alibaba.fastjson.JSONArray");
      JSONArray jSONArray0 = new JSONArray(list0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(151);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 151, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) list0);
      JSON.parse("", (-1));
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      JSONArray jSONArray4 = jSONArray3.fluentRetainAll(jSONArray2);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@type";
      jSONArray4.toArray(stringArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.parse("");
      jSONArray0.fluentAdd((Object) null);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("yyyy-MM-dd HH:mm:ss", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.isEmpty();
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("com.alibaba.fastjson.JSONArray", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("$A-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int int0 = 3680;
      JSONArray jSONArray0 = new JSONArray(3680);
      jSONArray0.fluentSet(3680, (Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      try { 
        aSMClassLoader0.loadClass("yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }
}
