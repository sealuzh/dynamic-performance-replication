/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:41:31 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      ByteString byteString0 = ByteString.decodeHex("");
      int int0 = byteString0.lastIndexOf(byteArray0, 83);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("9 LiWD41j8dhNWi");
      String string0 = byteString0.toString();
      assertEquals("[text=9 LiWD41j8dhNWi]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString.codePointIndexToCharIndex("y6]2K_]I4b", 1);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("HmacSHA256");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: H
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeString("ISIZE", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)17;
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.rangeEquals((-1572), byteArray0, 910, (-1572));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      ByteString byteString0 = new ByteString((byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object1 = new Object();
      byteString0.equals(object1);
      byteString0.internalArray();
      // Undeclared exception!
      try { 
        byteString0.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      byteArray0[1] = (byte)91;
      byteArray0[3] = (byte)63;
      Charset.defaultCharset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Charset.defaultCharset();
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.indexOf(byteArray0);
      byteString0.endsWith(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null, (int) (byte)63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      realBufferedSource0.readAll(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.rangeEquals(1, (byte[]) null, (-1001), 1);
      // Undeclared exception!
      try { 
        byteString0.startsWith((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = ByteString.of(byteArray0, 0, (int) (byte)0);
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      assertEquals(0, byteBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSource0);
      realBufferedSource0.readAll(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      ByteString byteString1 = hashingSource0.hash();
      byteString0.rangeEquals(3, (byte[]) null, (-1001), 3);
      ByteString byteString2 = byteString1.sha256();
      assertEquals(32, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("}");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString1.indexOf(byteString0, 8192);
      assertEquals((-1), int0);
      assertEquals(1, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      byteString0.hashCode();
      byteString0.toString();
      byteString0.base64();
      byteString0.rangeEquals((int) (byte)8, byteArray0, 1216, 0);
      // Undeclared exception!
      try { 
        byteString0.substring((-2632));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSource0);
      ByteString byteString0 = hashingSource0.hash();
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      boolean boolean0 = byteString0.rangeEquals(57, (byte[]) null, (-1), 57);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)5;
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe((byte)7);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      Buffer buffer0 = pipe0.buffer;
      byteString0.write(buffer0);
      int int0 = byteString0.lastIndexOf(byteArray0, 47);
      assertSame(byteString0, byteString1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        byteString0.substring(240);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[3] = (byte)63;
      Charset.defaultCharset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("duration <= 0: ", charset0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring((int) (byte)14, (int) (byte)14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)6;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha1();
      ByteString byteString1 = ByteString.encodeUtf8("5(Pv[F5E&NZIjS'm[");
      assertEquals(17, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSource0);
      ByteString byteString0 = hashingSource0.hash();
      Charset.defaultCharset();
      byteString0.toString();
      ByteString byteString1 = realBufferedSource0.readByteString(0L);
      // Undeclared exception!
      try { 
        byteString0.hmacSha512(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        ByteString.read(pipedInputStream0, 28);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, (-178));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("}");
      byteString0.EMPTY.hex();
      byte[] byteArray0 = null;
      ByteString byteString1 = new ByteString((byte[]) null);
      Object object0 = new Object();
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf(byteString1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-68);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      boolean boolean0 = byteString1.startsWith(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = ByteString.encodeUtf8(" text=");
      byteString0.lastIndexOf(byteArray0);
      byteString0.hex();
      Charset.defaultCharset();
      String string0 = byteString0.toString();
      byteString0.utf8();
      String string1 = byteString0.base64();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      byteArray0[1] = (byte)0;
      byteArray0[24] = (byte)63;
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Charset charset1 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("duration <= 0: ", charset1);
      ByteString byteString1 = byteString0.EMPTY.substring((int) (byte)0, (int) (byte)0);
      byteString1.hex();
      byteString1.EMPTY.startsWith(byteString0);
      // Undeclared exception!
      try { 
        charset0.encode((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("}");
      byte[] byteArray0 = new byte[1];
      byteString0.toAsciiUppercase();
      ByteString.of(byteArray0);
      byteString0.indexOf(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("bytes isempty");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: bytes isempty
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      ByteString byteString0 = ByteString.decodeBase64("");
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.compareTo(byteString1);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("[text=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: [
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("}");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      ByteString byteString1 = new ByteString(byteArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      byteString1.lastIndexOf(byteString0, (int) (byte) (-93));
      byteString0.compareTo(byteString1);
      // Undeclared exception!
      try { 
        byteString1.substring((int) (byte) (-93));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("}");
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = byteString0.toString();
      assertEquals("[text=}]", string0);
      
      boolean boolean0 = byteString0.startsWith(byteString0);
      int int0 = byteString0.compareTo(byteString0);
      assertEquals(0, int0);
      
      Object object2 = new Object();
      byteString0.EMPTY.asByteBuffer();
      Object object3 = new Object();
      Object object4 = new Object();
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString0;
      byteString0.asByteBuffer();
      Options options0 = Options.of(byteStringArray0);
      ByteString byteString1 = options0.get(0);
      byteString0.equals(byteString0);
      Object object5 = new Object();
      boolean boolean1 = byteString1.equals(object5);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      ByteString byteString2 = new ByteString(byteArray0);
      byteString2.internalArray();
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[34];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)91;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "v");
      String string0 = "";
      ByteString byteString1 = ByteString.decodeBase64("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteString0.lastIndexOf(byteArray0, 97);
      byteString0.compareTo(byteString1);
      byteString0.getByte(1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        pipedOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = ByteString.decodeBase64("No deadline");
      byteString0.equals(fileSystemHandling0);
      String string0 = byteString0.utf8();
      assertEquals("6\uFFFD^i\uFFFDb\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      ByteString byteString0 = new ByteString(byteArray0);
      Object object0 = new Object();
      byteString0.EMPTY.hashCode = 98;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteString0.EMPTY.equals(object0);
      byteString0.toString();
      byte byte0 = ObjectStreamConstants.SC_WRITE_METHOD;
      ByteString byteString1 = byteString0.sha512();
      byteString1.indexOf(byteArray0);
      ByteString byteString2 = byteString1.hmacSha512(byteString0);
      byteString0.compareTo(byteString2);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("V<?4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: V
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString(" > ", charset0);
      byteString0.toString();
      byteString0.toAsciiUppercase();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("8)J4R(&B<XHna");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-93);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.indexOf(byteArray0);
      byteString1.toAsciiUppercase();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("bytes isempty");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: bytes isempty
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      Charset charset0 = Charset.defaultCharset();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ByteString byteString0 = ByteString.encodeString("okio.GzipSource", charset0);
      String string0 = byteString0.toString();
      assertEquals("[text=okio.GzipSource]", string0);
      
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.sha1();
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.base64Url();
      byteString0.EMPTY.startsWith(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.sha512();
      byteString1.asByteBuffer();
      byteString0.EMPTY.indexOf(byteArray0, 2234);
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      HashingSource.hmacSha256(inflaterSource0, byteString1);
      ByteString byteString2 = hashingSource0.hash();
      byteString1.toAsciiUppercase();
      HashingSink.md5(buffer0);
      // Undeclared exception!
      try { 
        byteString2.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      byteString0.hashCode();
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSource0);
      ByteString byteString1 = hashingSource0.hash();
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      byteString0.hex();
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
      
      byteString0.utf8();
      String string1 = byteString0.hex();
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("u'N#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: u
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)8;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=3eedd5dddd]", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("delegate == null");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      assertEquals(16, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ByteString.decodeHex("file == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: i
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)13;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)70, (byte) (-53), (byte)125, (byte)10, (byte)52, (byte)57, (byte)13}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)91;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("", charset0);
      int int0 = 4491;
      // Undeclared exception!
      try { 
        byteString1.lastIndexOf((byte[]) null, 4491);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      boolean boolean0 = byteString0.EMPTY.startsWith(byteArray0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)10;
      boolean boolean1 = byteString1.endsWith(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString1.EMPTY.hmacSha256(byteString0);
      ByteString byteString3 = byteString0.toAsciiLowercase();
      ByteString byteString4 = byteString2.sha1();
      byteString4.hmacSha1(byteString2);
      ByteString byteString5 = byteString2.substring(0, 0);
      Charset.defaultCharset();
      ByteString byteString6 = byteString3.hmacSha256(byteString1);
      byteString6.toString();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byteString5.hashCode();
      // Undeclared exception!
      try { 
        Charset.forName("[hex=0e4b3b536adb9eef2dbf46d846306a7256a204f0bf635e0a2646ca0ac1948ce9]");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // [hex=0e4b3b536adb9eef2dbf46d846306a7256a204f0bf635e0a2646ca0ac1948ce9]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("}");
      byte[] byteArray0 = new byte[1];
      ByteString byteString1 = new ByteString(byteArray0);
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = byteString1.equals(byteString0);
      assertFalse(boolean0);
      assertEquals(1, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)58;
      byteArray0[0] = (byte)58;
      byte byte1 = (byte)28;
      byteArray0[1] = (byte)28;
      byte byte2 = (byte) (-42);
      byteArray0[2] = (byte) (-42);
      byte byte3 = (byte) (-59);
      byteArray0[6] = (byte) (-59);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
      byteString0.toByteArray();
      // Undeclared exception!
      try { 
        byteString0.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = ByteString.encodeUtf8("dN+4@h[");
      byteString0.md5();
      assertEquals(7, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = null;
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.endsWith((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("}");
      ByteString byteString1 = new ByteString((byte[]) null);
      Object object0 = new Object();
      ByteString byteString2 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.equals(byteString2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("}");
      byte[] byteArray0 = new byte[19];
      ByteString byteString1 = new ByteString(byteArray0);
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString1.equals(byteString0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        ByteString.read(byteArrayInputStream0, 5635);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("\"uJN#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: \"uJN#
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)10;
      ByteString byteString0 = new ByteString(byteArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      byteString0.equals(object0);
      Object object2 = new Object();
      byteString0.toString();
      String string0 = "Unexpected hex string: ";
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Unexpected hex string: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: Unexpected hex string: 
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      // Undeclared exception!
      try { 
        ByteString.read(pipedInputStream0, (-1646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1646
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ByteString.encodeUtf8("}");
      byte[] byteArray0 = new byte[1];
      ByteString.decodeBase64("\"xmf-yM2>!S");
      // Undeclared exception!
      try { 
        ByteString.decodeHex("6ry$/D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: r
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.equals(byteString1);
      byteString1.equals("[4");
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = byteString0.toString();
      assertEquals("[hex=dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd]", string0);
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("'R", charset0);
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ByteString byteString1 = byteString0.substring(1);
      assertEquals(31, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.rangeEquals((-1849), byteArray0, (-1849), 50);
      byteString0.EMPTY.hashCode();
      byteString0.hashCode();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byteString0.write(mockPrintStream0);
      String string0 = byteString0.base64Url();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("BUH,:r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: U
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)91;
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 1775, 2302);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray1 = null;
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        byteString0.EMPTY.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)91;
      byteArray0[3] = (byte)63;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      byteString0.EMPTY.string(charset0);
      byteString0.EMPTY.base64();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteString0.toString();
      ByteString byteString1 = ByteString.encodeUtf8("[hex=0e5b003f00000000000000000000000000000000000000000000000000000000]");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Charset.defaultCharset();
      byteString0.hex();
      byteString0.hmacSha512(byteString1);
      MockFile mockFile0 = new MockFile("phJ,Q#9+X[P", "0e5b003f00000000000000000000000000000000000000000000000000000000");
      MockFile mockFile1 = new MockFile(mockFile0, "phJ,Q#9+X[P");
      MockPrintStream mockPrintStream0 = new MockPrintStream("0e5b003f00000000000000000000000000000000000000000000000000000000");
      mockPrintStream0.print((float) 0);
      PrintStream printStream0 = mockPrintStream0.append('');
      byteString0.write(printStream0);
      byteString1.toAsciiLowercase();
      byteString0.rangeEquals(0, byteArray0, 43, (int) (byte)14);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteString byteString2 = ByteString.read(pipedInputStream0, 0);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      byte byte0 = (byte)14;
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[3] = (byte)63;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      byteString0.EMPTY.string(charset0);
      byteString0.EMPTY.base64();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteString0.toString();
      ByteString byteString1 = ByteString.encodeUtf8("[hex=0e0e003f00000000000000000000000000000000000000000000000000000000]");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Charset.defaultCharset();
      byteString1.toString();
      // Undeclared exception!
      try { 
        HashingSource.sha256((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Charset.defaultCharset();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("dubration <= 0: ", charset0);
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      byteArray0[3] = (byte)63;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      byteString0.base64();
      byteString0.base64();
      ByteString byteString2 = ByteString.encodeUtf8("AAAAPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Charset charset1 = Charset.defaultCharset();
      byteString1.toString();
      ByteString byteString3 = byteString2.hmacSha512(byteString0);
      MockFile mockFile0 = new MockFile("[hex=0000003f00000000000000000000000000000000000000000000000000000000]", "[hex=0000003f00000000000000000000000000000000000000000000000000000000]");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockFile mockFile1 = new MockFile("\u0000\u0000\u0000?\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream("source is closed");
      mockPrintStream0.print((float) 1);
      ByteString.encodeString("phJ,Q#9+X[P", charset1);
      byteString3.toString();
      ByteString byteString4 = new ByteString(byteArray0);
      byteString4.indexOf(byteArray0, (int) (byte)63);
      byteString4.toString();
      // Undeclared exception!
      try { 
        charset1.encode((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetEncoder", e);
      }
  }
}
