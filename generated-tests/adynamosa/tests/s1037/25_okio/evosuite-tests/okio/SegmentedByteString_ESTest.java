/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 12:43:37 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.ByteString;
import okio.Pipe;
import okio.RealBufferedSource;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe(112);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 112);
      segmentedByteString0.hashCode();
      segmentedByteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("\r");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      ByteString byteString0 = segmentedByteString0.sha1();
      segmentedByteString0.equals(byteString0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      boolean boolean0 = segmentedByteString0.equals(segmentedByteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe(10);
      buffer0.readShortLe();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)36);
      boolean boolean0 = segmentedByteString0.endsWith((ByteString) segmentedByteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      buffer0.readShortLe();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)19);
      ByteString byteString0 = segmentedByteString0.toAsciiLowercase();
      boolean boolean0 = segmentedByteString0.equals(byteString0);
      assertEquals(19, byteString0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      buffer0.readShortLe();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)19);
      byte byte0 = segmentedByteString0.getByte(1);
      assertEquals((byte) (-1), byte0);
      assertEquals(19, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe(112);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 112);
      ByteString byteString0 = segmentedByteString0.substring(112, 112);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      Buffer buffer1 = buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)19);
      ByteString byteString0 = segmentedByteString0.substring((int) (byte)19);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 4);
      Charset charset0 = Charset.defaultCharset();
      String string0 = segmentedByteString0.string(charset0);
      assertEquals("\uFFFD\uFFFD\uFFFD\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("\r");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      int int0 = segmentedByteString0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)19);
      boolean boolean0 = segmentedByteString0.rangeEquals(100, (ByteString) segmentedByteString0, (int) (byte) (-1), (-1203));
      assertEquals(19, segmentedByteString0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)19);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      int int0 = segmentedByteString0.lastIndexOf(byteArray0, 48);
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      Buffer buffer1 = buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)19);
      byte[] byteArray0 = new byte[8];
      int int0 = segmentedByteString0.lastIndexOf(byteArray0, 122);
      assertEquals(19, segmentedByteString0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe(10);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)36);
      byte[] byteArray0 = segmentedByteString0.internalArray();
      assertEquals(36, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)19);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      int int0 = segmentedByteString0.indexOf(byteArray0, (-1));
      assertEquals(19, segmentedByteString0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 112);
      byte[] byteArray0 = new byte[0];
      int int0 = segmentedByteString0.indexOf(byteArray0, (int) (byte)19);
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe(10);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)36);
      byte byte0 = segmentedByteString0.getByte(1);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("\r");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      byte byte0 = segmentedByteString0.getByte(0);
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)46);
      byte byte0 = segmentedByteString0.getByte((byte)13);
      assertEquals(46, segmentedByteString0.size());
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.write(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 102;
      Buffer buffer1 = buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)19);
      segmentedByteString0.write(buffer1);
      assertEquals(125L, buffer1.size());
      assertEquals(125L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        segmentedByteString0.rangeEquals(775, byteArray0, (int) (byte)0, (-2484));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("\r");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = segmentedByteString0.rangeEquals(2755, byteArray0, 1, 42);
      assertFalse(boolean0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      boolean boolean0 = segmentedByteString0.rangeEquals((-1412), (ByteString) segmentedByteString0, (-1412), 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.rangeEquals(24, (ByteString) segmentedByteString0, 0, (-4375));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.rangeEquals(0, (ByteString) null, (-4375), (-2484));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf((byte[]) null, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)36);
      byte[] byteArray0 = new byte[0];
      int int0 = segmentedByteString0.lastIndexOf(byteArray0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)19);
      byte[] byteArray0 = new byte[1];
      int int0 = segmentedByteString0.indexOf(byteArray0, (-1));
      assertEquals(19, segmentedByteString0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("\r");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      ByteString byteString0 = segmentedByteString0.hmacSha256(segmentedByteString0);
      assertEquals(32, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 112);
      ByteString byteString0 = segmentedByteString0.hmacSha1(segmentedByteString0);
      assertEquals(20, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      boolean boolean0 = segmentedByteString0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 4);
      // Undeclared exception!
      try { 
        segmentedByteString0.write((Buffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("\r");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        segmentedByteString0.write(filterOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.utf8();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiUppercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiLowercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)19);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring((-1696), (-2106));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 112);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring((-554));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(68);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        segmentedByteString0.string(charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.size();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha256();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000L);
      Buffer buffer0 = pipe0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.rangeEquals(24, (ByteString) segmentedByteString0, 24, 24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.md5();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.internalArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)19);
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf((byte[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf(byteArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)19);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256((ByteString) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 112);
      ByteString byteString0 = ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hex();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte((-5247));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 102;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)19);
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte((byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=19 offset=-1 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.equals(byteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64Url();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.asByteBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      SegmentedByteString segmentedByteString0 = null;
      try {
        segmentedByteString0 = new SegmentedByteString(buffer0, 112);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = null;
      try {
        segmentedByteString0 = new SegmentedByteString(buffer0, (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)36);
      ByteString byteString0 = segmentedByteString0.toAsciiLowercase();
      boolean boolean0 = byteString0.endsWith((ByteString) segmentedByteString0);
      assertEquals(36, segmentedByteString0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 112);
      byte[] byteArray0 = segmentedByteString0.toByteArray();
      boolean boolean0 = segmentedByteString0.rangeEquals(65, byteArray0, 88, (-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 112);
      ByteString byteString0 = ByteString.EMPTY;
      boolean boolean0 = segmentedByteString0.rangeEquals(22, byteString0, 22, 22);
      assertEquals(112, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)19);
      segmentedByteString0.hashCode();
      segmentedByteString0.hashCode();
      assertEquals(19, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 112);
      ByteString byteString0 = ByteString.EMPTY;
      boolean boolean0 = segmentedByteString0.equals(byteString0);
      assertEquals(112, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)46);
      Object object0 = new Object();
      boolean boolean0 = segmentedByteString0.equals(object0);
      assertFalse(boolean0);
      assertEquals(46, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 77;
      buffer0.writeIntLe(77);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)36);
      ByteString byteString0 = segmentedByteString0.toAsciiLowercase();
      boolean boolean0 = byteString0.endsWith((ByteString) segmentedByteString0);
      assertFalse(boolean0);
      assertEquals(36, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)19);
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = segmentedByteString0.rangeEquals((int) (byte)19, byteArray0, 31, (int) (byte) (-1));
      assertEquals(19, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 112);
      ByteString byteString0 = ByteString.EMPTY;
      boolean boolean0 = byteString0.endsWith((ByteString) segmentedByteString0);
      assertEquals(112, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)46);
      byte[] byteArray0 = new byte[8];
      segmentedByteString0.rangeEquals(0, byteArray0, (-1), (int) (byte)91);
      assertEquals(46, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe(10);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)36);
      boolean boolean0 = segmentedByteString0.rangeEquals((-1), (byte[]) null, 3, 0);
      assertFalse(boolean0);
      assertEquals(36, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 77;
      buffer0.writeIntLe(77);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)36);
      ByteString byteString0 = segmentedByteString0.toAsciiLowercase();
      boolean boolean0 = segmentedByteString0.equals(byteString0);
      assertEquals(36, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("\r");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      boolean boolean0 = segmentedByteString0.rangeEquals(2755, (ByteString) null, 1, 26);
      assertEquals(1, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      Buffer buffer1 = buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)19);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer.write((ByteString) segmentedByteString0);
      assertEquals(19L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)46);
      // Undeclared exception!
      try { 
        segmentedByteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe(10);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)36);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      segmentedByteString0.write(pipedOutputStream0);
      assertEquals(36, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe(10);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)36);
      segmentedByteString0.compareTo((ByteString) segmentedByteString0);
      assertEquals(36, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)36);
      String string0 = segmentedByteString0.toString();
      assertEquals("[hex=ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff]", string0);
      assertEquals(36, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("\r");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      // Undeclared exception!
      try { 
        segmentedByteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha1((ByteString) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)46);
      ByteString byteString0 = segmentedByteString0.toAsciiUppercase();
      assertEquals(46, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe(10);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)36);
      String string0 = segmentedByteString0.hex();
      assertEquals("0a0000000a0000000a0000000a0000000a0000000a0000000a0000000a0000000a000000", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)46);
      ByteString byteString0 = segmentedByteString0.substring(0);
      assertEquals(46, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 77;
      buffer0.writeIntLe(77);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)36);
      String string0 = segmentedByteString0.base64();
      assertEquals("TQAAAE0AAABNAAAATQAAAE0AAABNAAAATQAAAE0AAABNAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe(10);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)36);
      segmentedByteString0.sha256();
      assertEquals(36, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)46);
      segmentedByteString0.md5();
      assertEquals(46, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe(10);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)36);
      assertEquals(36, segmentedByteString0.size());
      
      ByteString byteString0 = segmentedByteString0.substring(10, (int) (byte)36);
      assertEquals(26, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)46);
      String string0 = segmentedByteString0.utf8();
      assertEquals(46, segmentedByteString0.size());
      assertEquals("\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (long) 112;
      buffer0.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)46);
      String string0 = segmentedByteString0.base64Url();
      assertEquals("_____________________________________________________________w==", string0);
      assertEquals(46, segmentedByteString0.size());
  }
}
