/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 23:26:18 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.common.TextTranslator;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.schememode.SchemeMode;
import freemind.view.mindmapview.MultipleImage;
import java.awt.AWTEventMulticaster;
import java.awt.Choice;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Dialog;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.image.ImageObserver;
import java.awt.image.ImageProducer;
import java.awt.image.MemoryImageSource;
import java.io.File;
import java.io.InputStream;
import java.sql.Time;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Vector;
import javax.help.ForwardAction;
import javax.swing.DebugGraphics;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.JToolTip;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.basic.BasicSplitPaneUI;
import javax.swing.plaf.metal.MetalToolBarUI;
import javax.swing.plaf.synth.SynthPanelUI;
import javax.swing.plaf.synth.SynthToolBarUI;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import javax.swing.text.StyleContext;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.DocumentLoader;
import org.apache.batik.bridge.SVGColorProfileElementBridge;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.dom.GenericDocumentType;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.gvt.ImageNode;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.script.InterpreterPool;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.crimson.tree.XmlDocument;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.pdf.PDFObject;
import org.apache.fop.pdf.PDFPage;
import org.apache.fop.pdf.PDFResourceContext;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.xalan.processor.ProcessorCharacters;
import org.apache.xalan.templates.ElemCopyOf;
import org.apache.xalan.templates.NamespaceAlias;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.apache.xerces.parsers.XML11NonValidatingConfiguration;
import org.apache.xerces.util.SymbolTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.lib.HsqlByteArrayOutputStream;
import org.hsqldb.persist.HsqlProperties;
import org.hsqldb.rowio.RowInputBinary;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.Coordinate;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.MemoryTileCache;
import org.w3c.dom.DOMException;
import org.xml.sax.SAXParseException;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ProcessorCharacters processorCharacters0 = new ProcessorCharacters();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      rowOutputBinary0.getOutputStream();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true, rowOutputBinary0, (-1827), (-1827));
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D();
      pDFDocumentGraphics2D1.getPDFDocument();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getMaxDayCharacters();
      Date date0 = jDayChooser0.getMinSelectableDate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setMonth(226);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Element element0 = defaultStyledDocument0.getCharacterElement(210);
      LabelView labelView0 = new LabelView(element0);
      Color color0 = labelView0.getForeground();
      jDayChooser1.setForeground(color0);
      JDayChooser jDayChooser2 = new JDayChooser();
      JDayChooser jDayChooser3 = new JDayChooser(true);
      jDayChooser3.getSundayForeground();
      JDayChooser jDayChooser4 = new JDayChooser(true);
      jDayChooser2.setDay((-3089));
      assertEquals(1, jDayChooser2.getDay());
      
      jDayChooser4.isDayBordersVisible();
      jDayChooser4.getDaysInMonth();
      Time time0 = new Time(1);
      jDayChooser0.setSelectableDateRange(date0, time0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getGraphics();
      Color.getColor("day");
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 19968, false);
      jDayChooser0.focusGained(focusEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setYear(12315);
      jDayChooser0.setForeground((Color) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setDay(128);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.requestFocus(true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rotate");
      JEditorPane jEditorPane0 = new JEditorPane();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setEnabled(false);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getMinSelectableDate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setMonth(39);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      defaultStyledDocument0.getCharacterElement(49);
      defaultStyledDocument0.getDefaultRootElement();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getSundayForeground();
      assertEquals(30, jDayChooser0.getDay());
      
      jDayChooser1.setDay(796);
      jDayChooser1.isDayBordersVisible();
      jDayChooser1.setEnabled(false);
      assertEquals(28, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.requestFocus(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, (-532), 0L, (-532), 31, 'j');
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser0.getDaysInMonth();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = jDayChooser0.getLocale();
      locale0.getDisplayVariant(locale1);
      jDayChooser1.setLocale(locale0);
      jDayChooser1.setEnabled(false);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getMinSelectableDate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser1.setMonth(0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Element element0 = defaultStyledDocument0.getCharacterElement(31);
      LabelView labelView0 = new LabelView(element0);
      Color color0 = labelView0.getForeground();
      jDayChooser1.setForeground(color0);
      jDayChooser1.keyReleased(keyEvent0);
      LabelView labelView1 = null;
      try {
        labelView1 = new LabelView((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.GlyphView", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(6);
      jDayChooser0.getDaysInMonth();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setFocus();
      GraphicContext graphicContext0 = new GraphicContext();
      graphicContext0.getFont();
      jDayChooser0.setFocus();
      GraphicContext graphicContext1 = new GraphicContext();
      graphicContext0.getFont();
      jDayChooser0.getFont();
      jDayChooser0.setFont((Font) null);
      ColorUIResource colorUIResource0 = (ColorUIResource)jDayChooser0.oldDayBackgroundColor;
      SystemColor systemColor0 = SystemColor.controlText;
      jDayChooser0.setSundayForeground(colorUIResource0);
      jDayChooser0.getMaxSelectableDate();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 28, 6, (-1), 'g', 0);
      jDayChooser0.getSundayForeground();
      jDayChooser0.setDay((-615));
      jDayChooser0.isDayBordersVisible();
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(128);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.requestFocus(true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rotate");
      JEditorPane jEditorPane0 = new JEditorPane();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setEnabled(false);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getMinSelectableDate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setMonth(39);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      defaultStyledDocument0.getCharacterElement(49);
      Element element0 = defaultStyledDocument0.getDefaultRootElement();
      LabelView labelView0 = new LabelView(element0);
      Color color0 = labelView0.getForeground();
      jDayChooser0.setForeground(color0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getSundayForeground();
      assertEquals(30, jDayChooser0.getDay());
      
      jDayChooser1.setDay(796);
      boolean boolean0 = jDayChooser1.isDayBordersVisible();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      int int0 = 0;
      jDayChooser0.setDay(0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("day");
      int int1 = (-1672);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true, mockFileOutputStream0, 0, (-1672));
      pDFDocumentGraphics2D0.getFontInfo();
      jDayChooser0.setMinSelectableDate((Date) null);
      JMapViewer jMapViewer0 = null;
      SchemeMode schemeMode0 = new SchemeMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(schemeMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = (-560);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.requestFocus(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, (-560), 0L, (-560), 31, '(');
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser0.getDaysInMonth();
      Locale locale0 = Locale.CANADA;
      jDayChooser1.setLocale(locale0);
      ImageNode imageNode0 = new ImageNode();
      Locale.lookup(imageNode0, imageNode0);
      locale0.getDisplayScript((Locale) null);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(128);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.requestFocus(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0");
      jDayChooser_DecoratorButton0.getHeight();
      JEditorPane jEditorPane0 = new JEditorPane();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jEditorPane0.addInputMethodListener((InputMethodListener) null);
      int int0 = 11;
      KeyEvent keyEvent0 = new KeyEvent(jEditorPane0, 0, 1L, 63713, 11, ':');
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getDayPanel();
      JYearChooser jYearChooser0 = new JYearChooser();
      String[] stringArray0 = new String[17];
      stringArray0[0] = "0";
      jDayChooser1.keyReleased(keyEvent0);
      NamespaceAlias namespaceAlias0 = new NamespaceAlias(11);
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGraphics2D.buildSVGGeneratorContext(namespaceAlias0, imageHandlerBase64Encoder0, defaultExtensionHandler0);
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawWeeks();
      ProcessorCharacters processorCharacters0 = new ProcessorCharacters();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      HsqlByteArrayOutputStream hsqlByteArrayOutputStream0 = rowOutputBinary0.getOutputStream();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false, hsqlByteArrayOutputStream0, 1, 226);
      pDFDocumentGraphics2D0.getFontInfo();
      pDFDocumentGraphics2D0.getPDFDocument();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.getName();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMonth(1);
      jDayChooser0.getSelectedDay();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setEnabled(false);
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getMaxDayCharacters();
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.removeNotify();
      jDayChooser0.drawDays();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      Locale locale0 = Locale.GERMAN;
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      pDFDocumentGraphics2D0.getFontInfo();
      pDFDocumentGraphics2D0.getPDFDocument();
      PDFResources pDFResources0 = new PDFResources((-1466));
      PDFObject.encode("x");
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setMonth((-1));
      JPanel jPanel0 = jDayChooser0.weekPanel;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "day";
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1466), false, jPanel0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setEnabled(false);
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(6);
      JYearChooser jYearChooser0 = new JYearChooser();
      StyleContext styleContext0 = new StyleContext();
      Font font0 = styleContext0.getFont("-12-", 6, (-1212));
      jDayChooser0.setFont(font0);
      ColorUIResource colorUIResource0 = (ColorUIResource)jDayChooser0.oldDayBackgroundColor;
      SystemColor systemColor0 = SystemColor.info;
      Color color0 = null;
      try {
        color0 = new Color(0.0F, 434.5F, (-1251.0411F), 532.3F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Alpha Green Blue
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("day");
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true, mockFileOutputStream0, 0, (-1672));
      pDFDocumentGraphics2D0.getFontInfo();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JPanel jPanel0 = jDayChooser1.weekPanel;
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.drawDays();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, (-1672), "day", 19, 0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.removeNotify();
      jDayChooser0.drawDays();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      Locale locale0 = Locale.GERMAN;
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      pDFDocumentGraphics2D0.getFontInfo();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("81nkYPa");
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(true, mockFileOutputStream0, 1336, (-105));
      PDFDocumentGraphics2D pDFDocumentGraphics2D2 = new PDFDocumentGraphics2D();
      pDFDocumentGraphics2D2.getFontInfo();
      pDFDocumentGraphics2D0.getPDFDocument();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-105), (-3906L), 1336, 2864, '\u0017');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Boolean boolean0 = new Boolean(false);
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      JMapViewer jMapViewer0 = new JMapViewer();
      Coordinate coordinate0 = jMapViewer0.getPosition(18, 18);
      coordinate0.toString();
      coordinate0.toString();
      coordinate0.setLat(0);
      jMapViewer0.getY();
      MapDialog mapDialog0 = new MapDialog();
      MapDialog.ResultTableModel mapDialog_ResultTableModel0 = mapDialog0.new ResultTableModel(coordinate0, (TextTranslator) null);
      JToolTip jToolTip0 = jDayChooser0.createToolTip();
      KeyEvent keyEvent0 = new KeyEvent(jToolTip0, (-2141), (-1533), 3453, 0, '');
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.focusLost((FocusEvent) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(128);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.requestFocus(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0");
      jDayChooser_DecoratorButton0.getHeight();
      JEditorPane jEditorPane0 = new JEditorPane();
      KeyEvent keyEvent0 = new KeyEvent(jEditorPane0, (-1545), 1L, 63713, 11, ':');
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getDayPanel();
      PDFDocument pDFDocument0 = new PDFDocument("x");
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.getCreationDate();
      jDayChooser1.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser1.setMaxSelectableDate((Date) null);
      jDayChooser1.setDecorationBordersVisible(false);
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(128);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.requestFocus(true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0");
      jDayChooser_DecoratorButton0.getHeight();
      JEditorPane jEditorPane0 = new JEditorPane();
      KeyEvent keyEvent0 = new KeyEvent(jEditorPane0, (-1545), 1L, 63713, 11, ':');
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getDayPanel();
      PDFDocument pDFDocument0 = new PDFDocument("x");
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.getCreationDate();
      jDayChooser1.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser1.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isWeekOfYearVisible();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1132), (-1132), (-1533), 42, 'c');
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser1.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getBorder();
      MockFile mockFile0 = new MockFile("day", "day");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "day", 1, 1);
      Locale locale0 = Locale.KOREA;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1, 11, 1, 11, '}', 1);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getDayPanel();
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockLocalDate.ofYearDay(91, 17);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      java.sql.Date date0 = java.sql.Date.valueOf(localDate0);
      jDayChooser0.setSelectableDateRange(date0, (Date) null);
      Font font0 = Font.decode("day");
      jDayChooser0.setFont(font0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-7207), (-7207), (-7207), 614, '\\');
      MapDialog mapDialog0 = new MapDialog();
      JMapViewer jMapViewer0 = new JMapViewer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WZZs+*zxT`a|DI");
      Coordinate coordinate0 = jMapViewer0.getPosition(23, (-7207));
      coordinate0.setLat((-2895.9655108003));
      MapDialog.ResultTableModel mapDialog_ResultTableModel0 = mapDialog0.new ResultTableModel(coordinate0, (TextTranslator) null);
      KeyEvent.getKeyModifiersText(614);
      keyEvent0.setSource(mapDialog_ResultTableModel0);
      keyEvent0.setSource(jDayChooser0);
      jDayChooser0.keyPressed(keyEvent0);
      Date date0 = jDayChooser0.getMinSelectableDate();
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.setYear(8575);
      Date date2 = jDayChooser0.getMaxSelectableDate();
      assertNotSame(date2, date1);
      
      jDayChooser0.drawWeeks();
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-429), 0L, 722, (-1744), 'C');
      jDayChooser0.keyReleased(keyEvent0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "Y";
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 861, 0L, (-1744), (-1744), '>');
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.keyReleased(keyEvent0);
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 48, 0L, 48, 12, 'E');
      jDayChooser0.keyReleased(keyEvent0);
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 100, 861, 861, 861, '>');
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.keyReleased(keyEvent0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = new Locale("", "accessories.plugins.time.JDayChooser", "JDayChooser");
      locale0.stripExtensions();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getMaxDayCharacters();
      JTable jTable0 = new JTable((Vector) null, (Vector) null);
      jTable0.scrollRectToVisible((Rectangle) null);
      Color color0 = jTable0.getSelectionForeground();
      jDayChooser0.setWeekdayForeground(color0);
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>();
      KeyEvent keyEvent0 = new KeyEvent(jComboBox0, 6, 0, 8941, 0, '{');
      keyEvent0.paramString();
      jDayChooser0.keyReleased(keyEvent0);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.getLocale();
      jDayChooser0.setDayBordersVisible(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "JDayChooser";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawWeeks();
      Color color0 = jDayChooser0.getWeekdayForeground();
      Color.getColor("}c69H@>", color0);
      jDayChooser0.setSundayForeground(color0);
      assertEquals((-16754012), color0.getRGB());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.removeNotify();
      jDayChooser0.drawDays();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = new Locale("day", "bVI2p$$}/Ci,o");
      locale0.getDisplayScript(locale1);
      JComponent.setDefaultLocale(locale0);
      ComponentOrientation componentOrientation0 = ComponentOrientation.getOrientation(locale1);
      jDayChooser0.applyComponentOrientation(componentOrientation0);
      jDayChooser0.setMaxDayCharacters((-1));
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setDay((-1));
      jDayChooser0.getDaysInMonth();
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String[] stringArray0 = new String[1];
      jDayChooser0.isPaintingTile();
      stringArray0[0] = "day";
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      java.sql.Date date0 = new java.sql.Date(0L);
      jDayChooser0.setMinSelectableDate(date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      LocalDate localDate0 = MockLocalDate.ofYearDay(36, 36);
      java.sql.Date date0 = java.sql.Date.valueOf(localDate0);
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.getFont();
      jDayChooser0.setFont((Font) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 30, true);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getGraphics();
      Color.getColor("day");
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.getDayPanel();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 2198, (-9223372036854775808L), 12, 36, '|', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getGraphics();
      jDayChooser0.setFocus();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      jDayChooser0.getGraphics();
      jDayChooser0.getInputMethodListeners();
      MockDate mockDate0 = new MockDate();
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.NO_EXCLUDE;
      jDayChooser0.getWeekdayForeground();
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getGraphics();
      jDayChooser0.setFocus();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      jDayChooser0.getGraphics();
      jDayChooser0.getInputMethodListeners();
      MockDate mockDate0 = new MockDate();
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.NO_EXCLUDE;
      ActionEvent actionEvent0 = new ActionEvent(dialog_ModalExclusionType0, 0, "day", (-1114L), (-763));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.Dialog$ModalExclusionType cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDayPanel();
      jDayChooser0.requestFocus(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2152, 2152, (-1175), (-532), 'D');
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
      
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.setMinimum(1728);
      jDayChooser0.setYearChooser(jYearChooser0);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getGraphics();
      jDayChooser0.getInputMethodListeners();
      jDayChooser0.getMaxSelectableDate();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-421), false, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDayPanel();
      jDayChooser0.requestFocus(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2152, 2152, (-1175), (-532), 'D');
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
      
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMaxDayCharacters(34);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = DebugGraphics.flashColor();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      InterpreterPool interpreterPool0 = new InterpreterPool();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      documentLoader0.checkCache("day");
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, interpreterPool0, documentLoader0);
      ElemCopyOf elemCopyOf0 = new ElemCopyOf();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = 1313.18F;
      color0.getRGBColorComponents(floatArray0);
      jDayChooser0.init();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setSundayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = DebugGraphics.flashColor();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      InterpreterPool interpreterPool0 = new InterpreterPool();
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getDockingColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-127);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDecorationBackgroundVisible();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(228, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      synthToolBarUI0.getDockingColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.requestFocus();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      jDayChooser0.setWeekdayForeground((Color) null);
      jDayChooser0.getWeekdayForeground();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setAlwaysFireDayProperty(true);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.drawDays();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.isDecorationBackgroundVisible();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      int int0 = 2237;
      long long0 = 91L;
      char char0 = '\'';
      MenuElement[] menuElementArray0 = new MenuElement[6];
      MultipleImage multipleImage0 = new MultipleImage(0.0);
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("14", multipleImage0);
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getFreeMindMapController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.MapDialog", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.PRC;
      jDayChooser0.setLocale(locale0);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("", "day", "West");
      CoreDocumentImpl coreDocumentImpl0 = null;
      try {
        coreDocumentImpl0 = new CoreDocumentImpl(genericDocumentType0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // WRONG_DOCUMENT_ERR: A node is used in a different document than the one that created it.
         //
         verifyException("org.apache.xerces.dom.CoreDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 7, "day", 7, 7);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = "day";
      stringArray0[1] = "day";
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-2276), 0L, (-1011), (-2377), '\\', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setMaxDayCharacters((-2276));
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getBackground();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 10131, "day", 10131);
      jDayChooser0.getClientProperty(color0);
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String[] stringArray0 = new String[15];
      stringArray0[0] = "";
      Color color0 = Color.ORANGE;
      jDayChooser0.setForeground(color0);
      stringArray0[1] = "uri.malformed";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      JList<String> jList0 = new JList<String>(stringArray0);
      jList0.getPreferredScrollableViewportSize();
      Color color1 = jList0.getSelectionBackground();
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 101;
      floatArray0[1] = (float) 101;
      floatArray0[2] = (float) 101;
      floatArray0[3] = (float) 101;
      floatArray0[4] = (float) 101;
      floatArray0[5] = (float) 16;
      floatArray0[6] = (float) 101;
      floatArray0[7] = 0.0F;
      floatArray0[8] = (float) 101;
      color1.getColorComponents(floatArray0);
      jDayChooser0.setForeground(color1);
      jDayChooser0.setWeekdayForeground(color1);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setWeekdayForeground(color1);
      jDayChooser0.updateUI();
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(128);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MouseEvent mouseEvent0 = new MouseEvent(jDayChooser0, 128, 0L, 1, 1, 128, 128, false);
      jDayChooser_DecoratorButton0.getToolTipText(mouseEvent0);
      jDayChooser_DecoratorButton0.requestFocus(true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rotate");
      JEditorPane jEditorPane0 = new JEditorPane();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1545), 128, 2103, 16, 'L');
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser();
      java.sql.Date date0 = new java.sql.Date((-1545));
      jDayChooser1.setMaxSelectableDate(date0);
      jDayChooser0.getDaysInMonth();
      SystemColor systemColor0 = SystemColor.inactiveCaption;
      Color color0 = Color.PINK;
      jDayChooser1.setDecorationBackgroundColor(color0);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("rZ5O!/[wb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'r'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.drawWeeks();
      jDayChooser0.init();
      Color color0 = Color.lightGray;
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawWeeks();
      jDayChooser0.init();
      Color color0 = Color.lightGray;
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getInputMap();
      jDayChooser0.setMonth(3524);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.setAlignmentY(1415.477F);
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.removeInputMethodListener((InputMethodListener) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setFocus();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.drawWeeks();
      jDayChooser0.getDay();
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.drawDays();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setDay(3524);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "b#c-pW";
      stringArray0[7] = "(;I[6!6|c{%3to@EO";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertTrue(boolean0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3201, (-2836L), 0, (-111), '\u0017');
      jDayChooser0.keyPressed(keyEvent0);
      JPanel jPanel0 = jDayChooser0.weekPanel;
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setDay(128);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.batik.extension.svg.BatikDomExtension$BatikHistogramNormalizationElementFactory");
      jDayChooser_DecoratorButton0.getHeight();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 754, 99L, 2564, 128, 'E');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDayPanel();
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setDay(0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.isWeekOfYearVisible();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 8594, 0, (-1339), 2352, '\"');
      jDayChooser_DecoratorButton0.addNotify();
      keyEvent0.setKeyChar('\"');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters(57);
      jDayChooser0.getSelectedDay();
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JComponent.isLightweightComponent(jDayChooser0);
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.UK;
      jDayChooser0.getInputMap(0);
      InputMap inputMap0 = jDayChooser0.getInputMap(0);
      jDayChooser0.setInputMap(0, inputMap0);
      locale0.getDisplayLanguage(locale1);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setEnabled(false);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      JToolBar jToolBar0 = new JToolBar("org.apache.batik.dom.svg.SVGOMException", 0);
      KeyEvent keyEvent0 = new KeyEvent(jToolBar0, 0, 0, 8, 0, 'e');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 0, 3999L, 0, 8, 'e', 0);
      jDayChooser0.keyPressed(keyEvent1);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)90;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInputMethodListeners();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "day";
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (byte)3, (byte)3, (byte)90, (-3316), 's');
      jDayChooser1.keyPressed(keyEvent0);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setDay(0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.isWeekOfYearVisible();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2352, 0L, 2352, 0, '\"');
      keyEvent0.setKeyChar('\"');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_LTR;
      int int0 = 13;
      Integer.sum(13, 13);
      jDayChooser0.putClientProperty(integer0, integer0);
      jDayChooser0.addListeners(33);
      jDayChooser0.setMonth(33);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      RowInputBinary rowInputBinary0 = new RowInputBinary(rowOutputBinary0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2564, false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setDayBordersVisible(true);
      try { 
        XmlDocument.createXmlDocument((InputStream) rowInputBinary0, true);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Document root element is missing.
         //
         verifyException("org.apache.crimson.parser.Parser2", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isPaintingTile();
      ActionEvent actionEvent0 = new ActionEvent("BOobPc_LM", 951, "7");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setDay(0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("day");
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true, mockFileOutputStream0, 0, (-1672));
      pDFDocumentGraphics2D0.getFontInfo();
      pDFDocumentGraphics2D0.getPDFDocument();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 36, 0L, 0, 36, '\u0017');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDayPanel();
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      Color color0 = Color.ORANGE;
      jDayChooser0.setForeground(color0);
      stringArray0[1] = "uri.malformed";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      JList<String> jList0 = new JList<String>(stringArray0);
      jList0.getPreferredScrollableViewportSize();
      Color color1 = jList0.getSelectionBackground();
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 101;
      floatArray0[1] = (float) 101;
      floatArray0[2] = (float) 101;
      floatArray0[3] = (float) 101;
      floatArray0[4] = (float) 101;
      floatArray0[5] = (float) 16;
      floatArray0[6] = (float) 101;
      floatArray0[7] = 0.0F;
      floatArray0[8] = (float) 101;
      color1.getColorComponents(floatArray0);
      jDayChooser0.setForeground(color1);
      jDayChooser0.setWeekdayForeground(color1);
      jDayChooser0.getMaxDayCharacters();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setWeekdayForeground(color1);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = false;
      jDayChooser0.grabFocus();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setWeekOfYearVisible(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "RFDmz{Z1s0\"+r";
      stringArray0[3] = "accessories.plugins.time.JDayChooser$1";
      stringArray0[4] = "vS:U<%|i";
      stringArray0[5] = "vS:U<%|i";
      stringArray0[7] = "vS:U<%|i";
      stringArray0[8] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)118;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte)42;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)90;
      JDayChooser jDayChooser0 = new JDayChooser();
      Object object0 = new Object();
      jDayChooser0.getInputMethodListeners();
      ActionEvent actionEvent0 = new ActionEvent(object0, (byte)3, "1", 182);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = new Locale("", "HW^g^,?)2G<,x=k");
      ActionEvent actionEvent0 = new ActionEvent("Windows", (-669), "", (-1786));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int[] intArray0 = new int[5];
      intArray0[0] = (-4204);
      intArray0[1] = (-856);
      intArray0[2] = (-856);
      intArray0[3] = (-856);
      intArray0[4] = (-856);
      MemoryImageSource memoryImageSource0 = new MemoryImageSource((-856), (-4204), intArray0, (-856), 18);
      Image image0 = jDayChooser0.createImage((ImageProducer) memoryImageSource0);
      BasicSplitPaneUI basicSplitPaneUI0 = new BasicSplitPaneUI();
      basicSplitPaneUI0.getNonContinuousLayoutDivider();
      jDayChooser0.prepareImage(image0, 24, 18, (ImageObserver) null);
      jDayChooser0.setVisible(false);
      jDayChooser0.setDecorationBordersVisible(true);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("day");
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true, mockFileOutputStream0, 0, (-1672));
      FontInfo fontInfo0 = pDFDocumentGraphics2D0.getFontInfo();
      PDFDocument pDFDocument0 = pDFDocumentGraphics2D0.getPDFDocument();
      PDFResources pDFResources0 = new PDFResources((-2143));
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(false, fontInfo0, pDFDocument0, pDFResourceContext0, "day", "ISO-8859-1", 0);
      jDayChooser_DecoratorButton0.paint(pDFGraphics2D0);
      jDayChooser0.setMonth(0);
      ForwardAction forwardAction0 = new ForwardAction(mockFileOutputStream0);
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      jDayChooser0.setEnabled(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertEquals(1, jDayChooser0.getDay());
      
      jDayChooser0.initDecorations();
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      sVGGeneratorContext_GraphicContextDefaults0.getBackground();
      jDayChooser0.setSundayForeground((Color) null);
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("day");
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true, mockFileOutputStream0, 0, (-1672));
      pDFDocumentGraphics2D0.getFontInfo();
      pDFDocumentGraphics2D0.getPDFDocument();
      StyleContext styleContext0 = new StyleContext();
      AttributeSet attributeSet0 = styleContext0.getEmptySet();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      defaultStyledDocument0.getBackground(attributeSet0);
      Element element0 = defaultStyledDocument0.getParagraphElement(1);
      LabelView labelView0 = new LabelView(element0);
      Color color0 = labelView0.getForeground();
      jDayChooser0.setForeground(color0);
      jDayChooser_DecoratorButton0.isSelected();
      Color color1 = Color.BLACK;
      jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setDecorationBackgroundVisible(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_LTR;
      Integer.sum(13, 13);
      jDayChooser0.putClientProperty(integer0, integer0);
      jDayChooser0.addListeners(0);
      jDayChooser0.setMonth(0);
      assertEquals(14, jDayChooser0.getDay());
      
      BrowseMode browseMode0 = new BrowseMode();
      jDayChooser0.setDay(26);
      jDayChooser0.setMaxDayCharacters(326);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isWeekOfYearVisible();
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = new Locale("1", "Windows");
      jDayChooser0.locale = locale0;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1744), 2352, 113, 0, '\u0017');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("day");
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true, mockFileOutputStream0, 0, (-1672));
      pDFDocumentGraphics2D0.getFontInfo();
      pDFDocumentGraphics2D0.getPDFDocument();
      Class<SynthPanelUI> class0 = SynthPanelUI.class;
      jDayChooser0.getListeners(class0);
      jDayChooser0.getGraphics();
      jDayChooser0.paintAll(pDFDocumentGraphics2D0);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.addAncestorListener(ancestorListener0);
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_LTR;
      Integer.sum(13, 13);
      jDayChooser0.transferFocus();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setFocus();
      GraphicContext graphicContext0 = new GraphicContext();
      graphicContext0.getFont();
      Font.getFont("w4)RD");
      jDayChooser0.setFont((Font) null);
      jDayChooser0.getMinSelectableDate();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setYear(26);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 26, true, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isWeekOfYearVisible();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2352, 2352, 2352, 2352, '\'');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDay();
      // Undeclared exception!
      try { 
        HsqlProperties.argArrayToProps((String[]) null, "day");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.persist.HsqlProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      boolean boolean0 = true;
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.isDecorationBackgroundVisible();
      Choice choice0 = null;
      try {
        choice0 = new Choice();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("day");
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true, mockFileOutputStream0, 0, (-1672));
      pDFDocumentGraphics2D0.getFontInfo();
      pDFDocumentGraphics2D0.getPDFDocument();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setFocus();
      GraphicContext graphicContext0 = new GraphicContext();
      Font font0 = graphicContext0.getFont();
      Font.getFont("1");
      jDayChooser0.setFont(font0);
      jDayChooser0.getMinSelectableDate();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_LTR;
      Integer.sum(13, 13);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Metal");
      File file0 = MockFile.createTempFile("FrYy^&~]5ln", "Metal");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false, mockPrintStream0, 26, 26);
      FontInfo fontInfo0 = pDFDocumentGraphics2D0.getFontInfo();
      PDFDocument pDFDocument0 = pDFDocumentGraphics2D0.getPDFDocument();
      PDFResources pDFResources0 = new PDFResources(13);
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFPage pDFPage0 = new PDFPage(pDFResources0, 3186, 13);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(false, fontInfo0, pDFDocument0, pDFPage0, "FrYy^&~]5ln", "FrYy^&~]5ln", 2971.957F);
      jDayChooser_DecoratorButton0.paint(pDFGraphics2D0);
      jDayChooser1.setMonth((-2233));
      JButton jButton0 = jDayChooser0.selectedDay;
      ForwardAction forwardAction0 = new ForwardAction((Object) null);
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      jDayChooser0.setEnabled(true);
      jDayChooser1.setAlwaysFireDayProperty(false);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_LTR;
      Integer.sum(13, 13);
      jDayChooser0.putClientProperty(integer0, integer0);
      jDayChooser0.setBounds(27, 27, 1672, 591);
      Locale locale0 = Locale.GERMAN;
      SymbolTable symbolTable0 = new SymbolTable(7);
      XML11NonValidatingConfiguration xML11NonValidatingConfiguration0 = new XML11NonValidatingConfiguration(symbolTable0);
      Locale locale1 = xML11NonValidatingConfiguration0.getLocale();
      locale0.getDisplayScript(locale1);
      jDayChooser0.setLocale(locale1);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Element element0 = defaultStyledDocument0.getDefaultRootElement();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      AttributeSet attributeSet0 = styleContext0.getEmptySet();
      Color color0 = defaultStyledDocument0.getBackground(attributeSet0);
      LabelView labelView0 = new LabelView(element0);
      labelView0.getForeground();
      jDayChooser0.setForeground(color0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.isDayBordersVisible();
      jDayChooser0.getSundayForeground();
      jDayChooser0.setDay(7);
      assertEquals(7, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getBackground();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-671));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_LTR;
      jDayChooser0.getBackground();
      jDayChooser0.grabFocus();
      jDayChooser0.setWeekOfYearVisible(true);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getColorModel();
      jDayChooser1.requestFocus();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.setDoubleBuffered(false);
      jDayChooser1.drawWeeks();
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true);
      focusEvent0.paramString();
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 833, 9);
      mockGregorianCalendar0.isLeapYear((-2052));
      Locale locale0 = Locale.KOREA;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar1.clear();
      jDayChooser0.setCalendar(mockGregorianCalendar1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 239, 833, 44, (-928), '?');
      jDayChooser0.keyTyped(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JComponent.isLightweightComponent(jDayChooser0);
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.UK;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      InputMap inputMap0 = jDayChooser0.getInputMap(0);
      inputMap0.getParent();
      jDayChooser0.setInputMap(0, (InputMap) null);
      locale1.getDisplayScript(locale0);
      locale0.getDisplayLanguage(locale1);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setEnabled(false);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setFocus();
      GraphicContext graphicContext0 = new GraphicContext();
      Font font0 = graphicContext0.getFont();
      jDayChooser0.setFont(font0);
      ColorUIResource colorUIResource0 = (ColorUIResource)jDayChooser0.oldDayBackgroundColor;
      jDayChooser0.setSundayForeground(colorUIResource0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_LTR;
      int int0 = 13;
      Integer.sum(13, 13);
      jDayChooser0.putClientProperty(integer0, integer0);
      jDayChooser0.addListeners(33);
      jDayChooser0.setMonth(33);
      BrowseMode browseMode0 = new BrowseMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_LTR;
      Color color0 = jDayChooser0.getBackground();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.grabFocus();
      jDayChooser1.setWeekOfYearVisible(false);
      jDayChooser1.getColorModel();
      jDayChooser1.requestFocus();
      jDayChooser1.setDoubleBuffered(false);
      jDayChooser0.drawWeeks();
      jDayChooser1.setYear((-2459));
      jDayChooser1.setWeekdayForeground(color0);
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("day");
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true, mockFileOutputStream0, 0, (-1672));
      pDFDocumentGraphics2D0.getFontInfo();
      pDFDocumentGraphics2D0.getPDFDocument();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Element element0 = defaultStyledDocument0.getDefaultRootElement();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      AttributeSet attributeSet0 = styleContext0.getEmptySet();
      Color color0 = defaultStyledDocument0.getBackground(attributeSet0);
      LabelView labelView0 = new LabelView(element0);
      labelView0.getForeground();
      jDayChooser0.setForeground(color0);
      jDayChooser0.isDayBordersVisible();
      Color color1 = Color.BLACK;
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_LTR;
      Integer.sum(13, 13);
      jDayChooser0.putClientProperty(integer0, integer0);
      int int0 = 0;
      jDayChooser0.addListeners(0);
      jDayChooser0.setMonth(0);
      BrowseMode browseMode0 = new BrowseMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      KeyEvent keyEvent0 = new KeyEvent(jMonthChooser0, 2375, 901L, 2375, 454, '}');
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.transferFocus();
      Class<SynthPanelUI> class0 = SynthPanelUI.class;
      jDayChooser0.getListeners(class0);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.getGraphics();
      jDayChooser0.paintAll((Graphics) null);
      jDayChooser0.addAncestorListener(ancestorListener0);
      jDayChooser0.isWeekOfYearVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals((-16754012), color0.getRGB());
      
      jDayChooser0.setDayBordersVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JComponent.isLightweightComponent(jDayChooser0);
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.UK;
      InputMap inputMap0 = jDayChooser0.getInputMap(0);
      inputMap0.getParent();
      jDayChooser0.setInputMap(0, (InputMap) null);
      locale1.getDisplayScript(locale0);
      locale0.getDisplayLanguage(locale1);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setEnabled(false);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setFocus();
      GraphicContext graphicContext0 = new GraphicContext();
      Font font0 = graphicContext0.getFont();
      jDayChooser0.setFont(font0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.repaint(2814L, 246, 246, 246, 246);
      jDayChooser0.setAlwaysFireDayProperty(true);
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      Color color0 = systemColor0.brighter();
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 246;
      floatArray0[1] = (float) 2814L;
      floatArray0[2] = (float) 246;
      color0.getRGBColorComponents(floatArray0);
      jDayChooser0.setWeekdayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true);
      focusEvent0.paramString();
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      MockDate mockDate0 = new MockDate(0, 0, (-4401));
      mockDate0.toInstant();
      mockDate0.clone();
      MockDate.UTC(0, (-4401), (-2710), 0, (-1417), (-4401));
      // Undeclared exception!
      try { 
        MockDate.parse("0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-2534));
      mockGregorianCalendar0.isLeapYear(239);
      mockGregorianCalendar0.clear();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0L, 488, 488, '?');
      jDayChooser0.keyTyped(keyEvent0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.FRENCH;
      jDayChooser0.setBounds(2144, 3222, 1672, 2144);
      Locale locale1 = Locale.GERMAN;
      locale0.getDisplayScript(locale1);
      jDayChooser0.setLocale(locale0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Element element0 = defaultStyledDocument0.getDefaultRootElement();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      AttributeSet attributeSet0 = styleContext0.getEmptySet();
      defaultStyledDocument0.getBackground(attributeSet0);
      LabelView labelView0 = new LabelView(element0);
      Color color0 = labelView0.getForeground();
      jDayChooser0.setForeground(color0);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      Color color1 = jDayChooser0.getSundayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals((-6029312), color1.getRGB());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "vS:U<%|i";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(164, color0.getBlue());
      
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getBackground();
      jDayChooser0.grabFocus();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getColorModel();
      jDayChooser0.requestFocus();
      jDayChooser0.setDoubleBuffered(true);
      jDayChooser0.drawWeeks();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      String string0 = "";
      int int0 = 2;
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      jDayChooser0.selectedDay = null;
      jDayChooser0.getSelectedDay();
      jDayChooser0.getBaselineResizeBehavior();
      jDayChooser0.getDaysInMonth();
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, 28, "day", 1625);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }
}
