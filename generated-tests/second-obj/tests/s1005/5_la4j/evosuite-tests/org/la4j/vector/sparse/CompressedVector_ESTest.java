/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:58:42 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.VectorVectorOperation;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      Vector vector0 = compressedVector0.to(vectorFactory0);
      assertNull(vector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-627));
      Integer integer1 = new Integer(2146819006);
      hashMap0.put(integer0, integer1);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1002);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1002).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1002, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = (double) 32;
      doubleArray0[2] = (double) 551;
      doubleArray0[3] = (double) 551;
      doubleArray0[4] = (double) 551;
      CompressedVector compressedVector0 = new CompressedVector(32, 551, doubleArray0, (int[]) null);
      // Undeclared exception!
      try { 
        compressedVector0.nonZeroAt((-806));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.eachNonZero((VectorProcedure) null);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toDiagonalMatrix();
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength((-16));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -16
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1002);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1002, vectorFunction0);
      assertEquals(1002, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.nonZeroIterator();
      compressedVector0.setAll((-32.0));
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1856, 1856);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.setAll(1856);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("ox8dt,Bx+z7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4.205622097067954);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      int int0 = 0;
      compressedVector0.swapElements(0, 16);
      VectorFunction vectorFunction0 = null;
      // Undeclared exception!
      try { 
        compressedVector0.update((VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      double double0 = compressedVector0.sum();
      assertEquals((-1.0), double0, 0.01);
      
      compressedVector0.swapElements(843, (-1));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction1);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      compressedVector0.setAll(2877.0);
      assertEquals(2, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.934921267867286;
      doubleArray0[8] = 1054.66160801738;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.nonZeroAt((-2146636514));
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength((-2146636514));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2146636514
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 511.087;
      doubleArray0[3] = 511.087;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.2222222222222222, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 511.087, 511.087, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = Byte.compare((byte)10, (byte)1);
      assertEquals(9, int0);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = compressedVector0.nonZeroAt(2);
      assertTrue(boolean0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.2222222222222222, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 511.087, 511.087, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      compressedVector0.set(0, (-954));
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 511.087, 511.087, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = (-1168);
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("Check your map: Index must be 0..n-1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1073741836);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1073741836, compressedVector0.length());
      
      MockRandom mockRandom0 = new MockRandom(1073741836);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random(1073741836, (double) 1073741836, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      CompressedVector compressedVector0 = new CompressedVector(8, 0, (double[]) null, intArray0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertArrayEquals(new int[] {8, 0, 0, 0, 0, 0, 0}, intArray0);
      
      compressedVector0.setAll(0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertArrayEquals(new int[] {8, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(8);
      assertNotNull(compressedVector0);
      assertEquals(8, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random((-2825), (double) (-2825), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)7).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(7, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 17);
      assertNotNull(compressedVector0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(17, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3702.0202126916).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-370), vectorFunction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.058823529411764705, compressedVector0.density(), 0.01);
      assertEquals(17, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 4234);
      assertNotNull(compressedVector0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(4234, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(4234);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(4234, compressedVector0.length());
      assertEquals(4234, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(16);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(16, compressedVector0.length());
      
      double double0 = compressedVector0.get(5);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(16, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.set(1393, 1393);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1393' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(90, (-2146667439));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -2146667439.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(4242);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4242, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      double double0 = compressedVector0.euclideanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4242, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements(4242, 14);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4242, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)14).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(4242, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4242, compressedVector0.length());
      assertEquals(2.3573785950023574E-4, compressedVector0.density(), 0.01);
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      double double1 = compressedVector0.getOrElse(32, 1.0);
      assertEquals(1.0, double1, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4242, compressedVector0.length());
      assertEquals(2.3573785950023574E-4, compressedVector0.density(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4242, compressedVector0.length());
      assertEquals(2.3573785950023574E-4, compressedVector0.density(), 0.01);
      
      compressedVector0.set(32, 0.0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4242, compressedVector0.length());
      assertEquals(2.3573785950023574E-4, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 511.087;
      doubleArray0[2] = 1054.66160801738;
      doubleArray0[4] = 1054.66160801738;
      doubleArray0[5] = 511.087;
      doubleArray0[7] = 2051.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {2.0, 511.087, 1054.66160801738, 0.0, 1054.66160801738, 511.087, 0.0, 2051.0, 0.0}, doubleArray0, 0.01);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CompressedVector compressedVector1 = (CompressedVector)Vector.fromMap(hashMap0, 7);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(7, compressedVector1.length());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      compressedVector0.set(7, (-25.0));
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {2.0, 511.087, 1054.66160801738, 0.0, 1054.66160801738, 511.087, 0.0, 2051.0, 0.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      double double0 = compressedVector0.getOrElse(7, 301.84);
      assertEquals((-25.0), double0, 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {2.0, 511.087, 1054.66160801738, 0.0, 1054.66160801738, 511.087, 0.0, 2051.0, 0.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1017);
      assertNotNull(mockRandom0);
      
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer(1017);
      assertNotNull(integer0);
      assertEquals(1017, (int)integer0);
      
      Float float0 = new Float((double) 1017);
      assertNotNull(float0);
      assertEquals(1017.0F, (float)float0, 0.01F);
      
      Float float1 = hashMap0.put(integer0, float0);
      assertNull(float1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 1017);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(3, 1378);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 1378.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = (double) 32;
      doubleArray0[2] = (double) 32;
      doubleArray0[3] = (double) 32;
      doubleArray0[4] = 1235316.9679094595;
      doubleArray0[5] = (double) 32;
      int[] intArray0 = new int[8];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = (-2893);
      intArray0[3] = 32;
      intArray0[4] = 32;
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[7] = 32;
      CompressedVector compressedVector0 = new CompressedVector(32, 32, doubleArray0, intArray0);
      assertNotNull(compressedVector0);
      assertEquals(32, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(32, compressedVector0.length());
      assertArrayEquals(new double[] {32.0, 32.0, 32.0, 32.0, 1235316.9679094595, 32.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {32, 32, (-2893), 32, 32, Integer.MAX_VALUE, 0, 32}, intArray0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(32, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(32, compressedVector0.length());
      assertArrayEquals(new double[] {32.0, 32.0, 32.0, 32.0, 1235316.9679094595, 32.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {32, 32, (-2893), 32, 32, Integer.MAX_VALUE, 0, 32}, intArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1017);
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(1017, 1.0, (Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1017, compressedVector0.cardinality());
      assertEquals(1017, compressedVector0.length());
      
      double double0 = compressedVector0.product();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1017, compressedVector0.cardinality());
      assertEquals(1017, compressedVector0.length());
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotNull(vectorIterator0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1017, compressedVector0.cardinality());
      assertEquals(1017, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1642);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1642, compressedVector0.length());
      
      compressedVector0.swapElements(1642, 1);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1642, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 2051.0;
      doubleArray0[3] = 2051.0;
      doubleArray0[7] = 2051.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 2051.0, 2051.0, 0.0, 0.0, 0.0, 2051.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 7;
      compressedVector0.swapElements(7, (-983));
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 2051.0, 2051.0, 0.0, 0.0, 0.0, 2051.0, 0.0}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        compressedVector0.toDiagonalMatrix();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-983' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(4242);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(4242, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.to(vectorFactory0);
      assertNotNull(compressedVector1);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(4242, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(4242, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1695.59760326)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(4242, vectorFunction0);
      assertSame(compressedVector0, compressedVector1);
      assertEquals(4242, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2.3573785950023574E-4, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2406, vectorFunction1);
      assertSame(compressedVector0, compressedVector1);
      assertEquals(4242, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2.3573785950023574E-4, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(4242);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(4242, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.to(vectorFactory0);
      assertNotNull(compressedVector1);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(4242, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4242, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1695.59760326)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(4242.0).when(vectorAccumulator0).accumulate();
      double double0 = compressedVector1.fold(vectorAccumulator0);
      assertEquals(4242.0, double0, 0.01);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(4242, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4242, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      
      compressedVector0.updateAt(4242, vectorFunction0);
      assertSame(compressedVector0, compressedVector1);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4242, compressedVector0.length());
      assertEquals(2.3573785950023574E-4, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements(4242, 2406);
      assertSame(compressedVector0, compressedVector1);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4242, compressedVector0.length());
      assertEquals(2.3573785950023574E-4, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toDiagonalMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals((-1.0), cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(2, cRSMatrix0.rows());
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      
      compressedVector0.swapElements((-1290), 342);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      
      int int0 = Byte.compare((byte)0, (byte)8);
      assertEquals((-8), int0);
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      CompressedVector compressedVector1 = (CompressedVector)SparseVector.fromMap(hashMap0, 3);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(3, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(37);
      assertNotNull(compressedVector0);
      assertEquals(37, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt(15);
      assertFalse(boolean0);
      assertEquals(37, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(32);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(37, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(32, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[7] = (-4226.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-4226.0), 0.0}, doubleArray0, 0.01);
      
      compressedVector0.swapElements(4253, 4253);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-4226.0), 0.0}, doubleArray0, 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)4253).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(4253, vectorFunction0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.2222222222222222, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-4226.0), 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.2222222222222222, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-4226.0), 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray1 = compressedVector0.toBinary();
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.2222222222222222, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-4226.0), 0.0}, doubleArray0, 0.01);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.2222222222222222, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertEquals(2, compressedVector1.cardinality());
      assertEquals(0.2222222222222222, compressedVector1.density(), 0.01);
      assertEquals(9, compressedVector1.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-4226.0), 0.0}, doubleArray0, 0.01);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      
      CompressedVector compressedVector1 = new CompressedVector(771, 771, doubleArray0, (int[]) null);
      assertNotNull(compressedVector1);
      assertEquals(771, compressedVector1.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(771, compressedVector1.length());
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      // Undeclared exception!
      try { 
        compressedVector1.toBinary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[7] = (-4226.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-4226.0), 0.0}, doubleArray0, 0.01);
      
      int int0 = 4253;
      int int1 = 7;
      compressedVector0.swapElements(7, 4253);
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-4226.0), 0.0}, doubleArray0, 0.01);
      
      VectorFunction vectorFunction0 = null;
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(4253, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(4242);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4242, compressedVector0.length());
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.to(vectorFactory0);
      assertNotNull(compressedVector1);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4242, compressedVector0.length());
      assertEquals(4242, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      
      double double0 = (-1695.59760326);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1695.59760326)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double1 = compressedVector1.fold(vectorAccumulator0);
      assertEquals(0.0, double1, 0.01);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4242, compressedVector0.length());
      assertEquals(4242, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      compressedVector0.updateAt(4242, vectorFunction0);
      assertSame(compressedVector0, compressedVector1);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4242, compressedVector0.length());
      assertEquals(2.3573785950023574E-4, compressedVector0.density(), 0.01);
      
      int int0 = 2406;
      // Undeclared exception!
      try { 
        compressedVector0.hadamardProduct(compressedVector1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '4242' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(803);
      assertNotNull(integer0);
      assertEquals(803, (int)integer0);
      
      Float float0 = new Float((double) 803);
      assertNotNull(float0);
      assertEquals(803.0F, (float)float0, 0.01F);
      
      Float float1 = hashMap0.put(integer0, float0);
      assertNull(float1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 511.087;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(9, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 511.087, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-497)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-497), vectorFunction0);
      assertEquals(9, compressedVector0.length());
      assertEquals(0.2222222222222222, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 511.087, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-497' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[30];
      String string0 = "1";
      CompressedVector compressedVector0 = CompressedVector.fromCSV("1");
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      Vector vector0 = Vector.constant(1293, 1293);
      assertNotNull(vector0);
      assertEquals(1293, vector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toDiagonalMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(24);
      assertNotNull(integer0);
      assertEquals(24, (int)integer0);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 511.087;
      doubleArray0[3] = 511.087;
      doubleArray0[7] = 1235316.9679094595;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(9, compressedVector0.length());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 511.087, 511.087, 0.0, 0.0, 0.0, 1235316.9679094595, 0.0}, doubleArray0, 0.01);
      
      int int0 = 7;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(7, vectorFunction0);
      assertEquals(9, compressedVector0.length());
      assertEquals(0.2222222222222222, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 511.087, 511.087, 0.0, 0.0, 0.0, 1235316.9679094595, 0.0}, doubleArray0, 0.01);
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        compressedVector0.to((VectorFactory<Vector>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1073741801);
      assertNotNull(compressedVector0);
      assertEquals(1073741801, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertNotNull(sparseVector0);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertEquals(1073741801, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1073741801, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      
      double double0 = sparseVector0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertEquals(1073741801, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1073741801, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(48.155, (-1.0)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction1);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (-1.0)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      
      CompressedVector compressedVector1 = new CompressedVector();
      assertNotNull(compressedVector1);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.shuffle();
      assertNotNull(compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector2.length());
      assertEquals(2, compressedVector2.cardinality());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector1.toDiagonalMatrix();
      assertNotNull(cRSMatrix0);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector3 = new CompressedVector(1);
      assertNotNull(compressedVector3);
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(1, compressedVector3.length());
      assertEquals(0.0, compressedVector3.density(), 0.01);
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      
      // Undeclared exception!
      try { 
        compressedVector2.swapElements((-1507), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[7] = (-4226.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-4226.0), 0.0}, doubleArray0, 0.01);
      
      compressedVector0.swapElements(4253, 7);
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-4226.0), 0.0}, doubleArray0, 0.01);
      
      int int0 = 7;
      compressedVector0.swapElements(7, 4253);
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-4226.0), 0.0}, doubleArray0, 0.01);
      
      VectorFunction vectorFunction0 = null;
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(4253, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = 511.087;
      doubleArray0[3] = 511.087;
      doubleArray0[7] = 511.087;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(8, compressedVector0.length());
      assertEquals(0.375, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 511.087, 511.087, 0.0, 0.0, 0.0, 511.087}, doubleArray0, 0.01);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector1.length());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      compressedVector0.swapElements(3, 7);
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(8, compressedVector0.length());
      assertEquals(0.375, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 511.087, 511.087, 0.0, 0.0, 0.0, 511.087}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (-1.0)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.to(vectorFactory0);
      assertNotNull(compressedVector1);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      CompressedVector compressedVector2 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector2);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(2, compressedVector2.length());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      
      CompressedVector compressedVector3 = (CompressedVector)compressedVector0.shuffle();
      assertNotNull(compressedVector3);
      assertNotSame(compressedVector0, compressedVector3);
      assertSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector3.density(), 0.01);
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(2, compressedVector3.length());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector3.equals((Object)compressedVector0));
      assertTrue(compressedVector3.equals((Object)compressedVector2));
      assertTrue(compressedVector3.equals((Object)compressedVector1));
      
      CompressedVector compressedVector4 = new CompressedVector(0);
      assertNotNull(compressedVector4);
      assertEquals(0, compressedVector4.length());
      assertEquals(0, compressedVector4.cardinality());
      assertEquals(Double.NaN, compressedVector4.density(), 0.01);
      assertFalse(compressedVector4.equals((Object)compressedVector2));
      assertFalse(compressedVector4.equals((Object)compressedVector3));
      assertFalse(compressedVector4.equals((Object)compressedVector0));
      assertFalse(compressedVector4.equals((Object)compressedVector1));
      
      double double0 = compressedVector4.product();
      assertEquals(1.0, double0, 0.01);
      assertNotSame(compressedVector4, compressedVector2);
      assertNotSame(compressedVector4, compressedVector3);
      assertNotSame(compressedVector4, compressedVector0);
      assertNotSame(compressedVector4, compressedVector1);
      assertEquals(0, compressedVector4.length());
      assertEquals(0, compressedVector4.cardinality());
      assertEquals(Double.NaN, compressedVector4.density(), 0.01);
      assertFalse(compressedVector4.equals((Object)compressedVector2));
      assertFalse(compressedVector4.equals((Object)compressedVector3));
      assertFalse(compressedVector4.equals((Object)compressedVector0));
      assertFalse(compressedVector4.equals((Object)compressedVector1));
      
      CompressedVector compressedVector5 = CompressedVector.zero(0, 0);
      assertNotNull(compressedVector5);
      assertNotSame(compressedVector5, compressedVector2);
      assertNotSame(compressedVector5, compressedVector0);
      assertNotSame(compressedVector5, compressedVector4);
      assertNotSame(compressedVector5, compressedVector3);
      assertNotSame(compressedVector5, compressedVector1);
      assertEquals(0, compressedVector5.length());
      assertEquals(0, compressedVector5.cardinality());
      assertEquals(Double.NaN, compressedVector5.density(), 0.01);
      assertFalse(compressedVector5.equals((Object)compressedVector2));
      assertFalse(compressedVector5.equals((Object)compressedVector0));
      assertFalse(compressedVector5.equals((Object)compressedVector3));
      assertFalse(compressedVector5.equals((Object)compressedVector1));
      assertTrue(compressedVector5.equals((Object)compressedVector4));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte) (-18);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }
}
