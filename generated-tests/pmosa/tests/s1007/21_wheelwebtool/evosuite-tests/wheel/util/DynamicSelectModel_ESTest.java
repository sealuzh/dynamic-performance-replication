/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 10:25:12 GMT 2018
 */

package wheel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;
import wheel.ErrorPage;
import wheel.components.Component;
import wheel.components.ElExpression;
import wheel.components.StandaloneComponent;
import wheel.util.DynamicSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DynamicSelectModel_ESTest extends DynamicSelectModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      String string0 = "v.qD|ll2lT+u=L+b3";
      dynamicSelectModel0.value("v.qD|ll2lT+u=L+b3");
      String string1 = "onselect";
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getLabel(2905);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ElExpression elExpression0 = new ElExpression("2");
      DynamicSelectModel dynamicSelectModel0 = null;
      try {
        dynamicSelectModel0 = new DynamicSelectModel(elExpression0, elExpression0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.translator((String) null);
      // Undeclared exception!
      try { 
        dynamicSelectModel1.getValue(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("kR:Z/Fk %3a[_MVf");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.empty(mockThaiBuddhistDate0);
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.value("kR:Z/Fk %3a[_MVf");
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel3.label("");
      DynamicSelectModel dynamicSelectModel5 = dynamicSelectModel4.translator("e34B]");
      dynamicSelectModel5.reset();
      assertSame(dynamicSelectModel1, dynamicSelectModel5);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("~3y");
      // Undeclared exception!
      try { 
        dynamicSelectModel1.getOptionCount();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression ~3y to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.empty(mockMinguoDate0);
      String string0 = "Attributes must be given in name, value pairs.";
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.value("Attributes must be given in name, value pairs.");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.collection("Attributes must be given in name, value pairs.");
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel3.label("YQ*gKB.J");
      DynamicSelectModel dynamicSelectModel5 = dynamicSelectModel4.translator("YQ*gKB.J");
      dynamicSelectModel0.getTopLevelComponent();
      dynamicSelectModel5.setTopLevelComponent((StandaloneComponent) null);
      // Undeclared exception!
      try { 
        dynamicSelectModel5.getObjects();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression Attributes must be given in name, value pairs. to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.getComponent();
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getOptionCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.setComponent((Component) null);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      String string0 = "&";
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("&");
      // Undeclared exception!
      try { 
        dynamicSelectModel1.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Label attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("~3y");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.empty((Object) null);
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.label(" standalone=");
      dynamicSelectModel0.reset();
      dynamicSelectModel1.value("~3y");
      String string0 = "";
      dynamicSelectModel0.empty("");
      dynamicSelectModel2.label("Te%B2Id>LX{\"K<i");
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel3.value("toString()");
      dynamicSelectModel4.value("()S");
      dynamicSelectModel3.validate();
      // Undeclared exception!
      try { 
        dynamicSelectModel4.getObjects();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression ~3y.values() to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }
}
