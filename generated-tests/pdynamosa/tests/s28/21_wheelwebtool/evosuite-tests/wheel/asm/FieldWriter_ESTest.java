/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 15:42:34 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      classWriter0.version = (-14);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-14), "", "", "", "");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      classWriter0.version = (-14);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-14), "", "", "", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(990);
      classWriter0.index = (-1917);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 990, "", "", "", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-12));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-694), "", ";=tpcyHC' -`L", "RuntimeVisibleAnnotations", (Object) null);
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-12));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "{M", "", "Ky,rv", "{M");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-12));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-12), "d", "d", "org.apache.commons.io.filefilter.CanReadFileFilter", (Object) null);
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2540);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 593, "PRc\"4.", "PRc\"4.", "PRc\"4.", "(Ea=LwbK>");
      ByteVector byteVector0 = new ByteVector(2540);
      fieldWriter0.visitAnnotation("]Ek|i0(", false);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2540);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2540, "ConstantValue", "ConstantValue", (String) null, (Object) null);
      ByteVector byteVector0 = new ByteVector(2);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1004);
      String[] stringArray0 = new String[0];
      classWriter0.visit(49, 1004, "", ":J2l*EhA\"Vb", "LocalVariableTypeTable", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "P'Zx@", "he strings must not be nll", "he strings must not be nll", ":J2l*EhA\"Vb");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1004);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "P'Zx@", "he strings must not be nll", "he strings must not be nll", ":J2l*EhA\"Vb");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2540);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2540, "Pc?4", "Pc?4", "Pc?4", "Pc?4");
      Attribute attribute0 = new Attribute("Pc?4");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "org.apache.commons.io.filefilter.FileFileFilter", "org.apache.commons.io.filefilter.FileFileFilter", "org.apache.commons.io.filefilter.FileFileFilter", "org.apache.commons.io.filefilter.FileFileFilter");
      fieldWriter0.visitAnnotation("org.apache.commons.io.filefilter.FileFileFilter", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2540);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2540, "PRc\"4.", "PRc\"4.", "PRc\"4.", "PRc\"4.");
      fieldWriter0.visitAnnotation("PRc\"4.", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2540);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2540, "ConstantValue", "ConstantValue", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1004);
      String[] stringArray0 = new String[0];
      classWriter0.visit(49, 1004, "", ":J2l*EhA\"Vb", "LocalVariableTypeTable", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "P'Zx@", "he strings must not be nll", "he strings must not be nll", ":J2l*EhA\"Vb");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1004);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "P'Zx@", "he strings must not be nll", "he strings must not be nll", ":J2l*EhA\"Vb");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(19);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "%7-", "", "/@w\"Q");
      fieldWriter0.visitAnnotation("", true);
      ByteVector byteVector0 = new ByteVector(99);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2540);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2540, ">PRH\"4.", ">PRH\"4.", ">PRH\"4.", ">PRH\"4.");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 2540, "ConstantValue", "ConstantValue", (String) null, (Object) null);
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2540);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 593, "PRc\"4.", "", "PRc\"4.", "(Ea=LwbK>");
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1749);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-12), "PRc\"4.", "N09D0,", "", "PRc\"4.");
      Attribute attribute0 = new Attribute("wheel.asm.ClassWriter");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector(4096);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }
}
