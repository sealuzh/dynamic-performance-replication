/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 04:55:52 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.commons.io.filefilter.AbstractFileFilter";
      stringArray0[1] = "&\"Vhn";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "org.apache.commons.io.filefilter.AbstractFileFilter";
      stringArray0[5] = "";
      classWriter0.visit((-1916), (-1916), "org.apache.commons.io.filefilter.AbstractFileFilter", "org.apache.commons.io.filefilter.AbstractFileFilter", "org.apache.commons.io.filefilter.AbstractFileFilter", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1916), "&\"Vhn", "&\"Vhn", "/LLy[flNZ,b&g~NnzL'", (Object) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(193, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1886);
      classWriter0.index = (-1809);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1886, "U_h@usa-JXa;b&}$yIA", "U_h@usa-JXa;b&}$yIA", "U_h@usa-JXa;b&}$yIA", "U_h@usa-JXa;b&}$yIA");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "VXV3NkO;Z4J!3LIy3$o", "");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2995));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), "Signature", "Signature", "(FI8vJHIb,Ym{DENR]?", "Signature");
      fieldWriter0.next = fieldWriter0;
      // Undeclared exception!
      try { 
        fieldWriter0.next.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "VXV3NkO;Z4J!3LIy3$o", "");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      Object object0 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 0, "/", "", "", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@7b5febb8
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(755);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2312, "Synthetic", "The prefix must not be null", "", "");
      fieldWriter0.next = fieldWriter0;
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = classWriter0.pool;
      // Undeclared exception!
      try { 
        fieldWriter0.next.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(755);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2312, "Synthetic", "The prefix must not be null", "", "");
      fieldWriter0.next = fieldWriter0;
      fieldWriter0.next.visitAnnotation("`pZW|#", true);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.next.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 9, "", "", (String) null, (Object) null);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(755);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2312, "Synthetic", "The prefix must not be null", "", "");
      fieldWriter0.next = fieldWriter0;
      Attribute attribute0 = new Attribute("");
      fieldWriter0.next.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(755);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2312, "Synthetic", "The prefix must not be null", "", "");
      fieldWriter0.visitAnnotation("C'|", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(755);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2312, "Q:-3'IrF_a*G!3", "Q:-3'IrF_a*G!3", "", (Object) null);
      fieldWriter0.visitAnnotation("Mzv*oHf1.", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 9, "", "", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "value ";
      stringArray0[1] = "value ";
      stringArray0[2] = "wheel.asm.Edge";
      stringArray0[3] = "wheel.asm.Edge";
      stringArray0[4] = "value ";
      classWriter0.visit(49, (-812), "Dt*6 bsN|8w!W!", "value ", "wheel.asm.Edge", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2600), "Hy{4X  3azG7o_;k^", "Hy{4X  3azG7o_;k^", "", "Dt*6 bsN|8w!W!");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(197, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2600), "Hy{4X  3azG7o_;k^", "Hy{4X  3azG7o_;k^", "", "Dt*6 bsN|8w!W!");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(156, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1916), "&\"Vhn", "&\"Vhn", "/LLy[flNZ,b&g~NnzL'", (Object) null);
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-190), "", "?/x1ai,~WFDj", "Invalid IOCase name: ", "?/x1ai,~WFDj");
      fieldWriter0.visitAnnotation(":=cYkLMO\"te([)ZM/B\"", false);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 9, "", "", (String) null, (Object) null);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 9, "", " 4l$QF+[", "x4 RE[-~KS)", "");
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "VXV3NkO;Z4J!3LIy3$o", "");
      fieldWriter0.visitEnd();
  }
}
