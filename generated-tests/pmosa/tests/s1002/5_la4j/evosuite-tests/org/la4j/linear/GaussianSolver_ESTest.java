/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 19:22:33 GMT 2018
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.linear.GaussianSolver;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.vector.DenseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GaussianSolver_ESTest extends GaussianSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(3);
      GaussianSolver gaussianSolver0 = new GaussianSolver(sparseMatrix0);
      DenseVector denseVector0 = DenseVector.unit(3);
      Vector vector0 = gaussianSolver0.solve(denseVector0);
      assertTrue(vector0.equals((Object)denseVector0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2, 2);
      GaussianSolver gaussianSolver0 = new GaussianSolver(sparseMatrix0);
      DenseVector denseVector0 = DenseVector.unit(2);
      // Undeclared exception!
      try { 
        gaussianSolver0.solve(denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system can't be solved.
         //
         verifyException("org.la4j.linear.GaussianSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 578.68;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 578.68;
      doubleArray2[1] = 578.68;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 578.68;
      doubleArray3[1] = 578.68;
      doubleArray3[2] = 578.68;
      doubleArray3[3] = 578.68;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 578.68;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 578.68;
      doubleArray5[1] = 578.68;
      doubleArray5[2] = (-1491.3295284049);
      doubleArray5[3] = 578.68;
      doubleArray5[4] = 578.68;
      doubleArray5[5] = 578.68;
      doubleArray5[6] = 578.68;
      doubleArray5[7] = (-676.903678540207);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 578.68;
      doubleArray6[1] = (-676.903678540207);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = (-676.903678540207);
      doubleArray7[1] = 578.68;
      doubleArray7[2] = 578.68;
      doubleArray7[3] = 578.68;
      doubleArray7[4] = 578.68;
      doubleArray7[5] = (-1491.3295284049);
      doubleArray7[6] = 578.68;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = 578.68;
      doubleArray8[1] = 578.68;
      doubleArray8[2] = 578.68;
      doubleArray8[3] = 578.68;
      doubleArray8[4] = (-1491.3295284049);
      doubleArray0[7] = doubleArray8;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      GaussianSolver gaussianSolver0 = null;
      try {
        gaussianSolver0 = new GaussianSolver(rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }
}
