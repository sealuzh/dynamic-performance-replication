/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:04:47 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.FieldWriter;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("G}<<@t|{xCA:xbtiEP");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      ClassWriter classWriter0 = new ClassWriter(4);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classAdapter0, (-2097));
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = 'q';
      charArray0[2] = 's';
      ClassWriter classWriter1 = new ClassWriter(classReader0, 4);
      ClassWriter classWriter2 = new ClassWriter(classReader0.EXPAND_FRAMES);
      ClassAdapter classAdapter1 = new ClassAdapter(classWriter1);
      Attribute[] attributeArray0 = new Attribute[2];
      String string0 = "+sPG>wyr!}U!QT%)X";
      Attribute attribute0 = new Attribute(string0);
      int int0 = (-806);
      int int1 = 7;
      Label[] labelArray0 = new Label[1];
      Edge edge0 = new Edge();
      Label label0 = edge0.successor;
      labelArray0[0] = label0;
      Attribute attribute1 = attribute0.read(classReader0, int0, classReader0.SKIP_FRAMES, charArray0, int1, labelArray0);
      Attribute attribute2 = attribute1.next;
      attributeArray0[0] = attribute2;
      int int2 = (-1649);
      Attribute attribute3 = attribute2.read(classReader0, classReader0.SKIP_DEBUG, classWriter0.COMPUTE_FRAMES, charArray0, int2, labelArray0);
      attributeArray0[1] = attribute3;
      classReader0.accept((ClassVisitor) classAdapter1, attributeArray0, classWriter0.COMPUTE_FRAMES);
      classReader0.readUTF8(classWriter2.COMPUTE_MAXS, charArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      ClassReader classReader0 = new ClassReader("java/lang/String");
      String string0 = classReader0.getSuperName();
      assertNotNull(string0);
      
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.newField("java/lang/Object", "2Bog!!", "Exceptions");
      long long0 = classReader0.readLong(3);
      assertEquals(6892, classReader0.header);
      assertEquals((-4755801205630688246L), long0);
      
      String string1 = classReader0.getClassName();
      assertEquals("java/lang/String", string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = 'x';
      charArray0[2] = '~';
      Object object0 = classReader0.readConst((byte)62, charArray0);
      assertEquals(65536, object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      classReader0.getSuperName();
      int int0 = (-1014);
      ClassWriter classWriter0 = new ClassWriter(9564);
      classReader0.accept((ClassVisitor) classWriter0, (int) (byte)62);
      boolean boolean2 = false;
      FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean2, boolean1);
      classReader0.getSuperName();
      classReader0.readInt(classReader0.header);
      ClassWriter classWriter1 = new ClassWriter(classReader0, int0);
      int int1 = 1703;
      classReader0.readLong(int1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      ClassAdapter classAdapter0 = new ClassAdapter((ClassVisitor) null);
      Attribute[] attributeArray0 = new Attribute[9];
      Attribute attribute0 = new Attribute("java/lang/Class");
      Attribute attribute1 = new Attribute("~");
      ClassWriter classWriter0 = new ClassWriter(1);
      classReader0.getInterfaces();
      ClassReader classReader1 = new ClassReader("org.apache.commons.io.filefilter.FileFileFilter");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ClassAdapter classAdapter1 = new ClassAdapter(classAdapter0);
      // Undeclared exception!
      try { 
        classReader1.accept((ClassVisitor) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      assertNotNull(classReader0);
      assertEquals(19569, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(49, classReader0.getAccess());
      
      String string0 = classReader0.getSuperName();
      assertNotNull(string0);
      assertEquals(19569, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals("java/lang/Object", string0);
      assertEquals(49, classReader0.getAccess());
      
      char[] charArray0 = new char[8];
      ClassWriter classWriter0 = new ClassWriter(2);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classReader0.accept((ClassVisitor) classWriter0, 2);
      int int0 = (-3337);
      classReader0.readUTF8(int0, charArray0);
      classReader0.getAccess();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      ClassWriter classWriter0 = new ClassWriter(4);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classAdapter0, (-2068));
      char char0 = 'Z';
      int int0 = 40;
      char[] charArray0 = new char[2];
      charArray0[0] = char0;
      charArray0[1] = char0;
      classReader0.readConst(int0, charArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      classReader0.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(2552);
      classReader0.accept((ClassVisitor) classWriter0, (-4406));
      char[] charArray0 = null;
      classReader0.readUTF8(classWriter0.COMPUTE_MAXS, charArray0);
      int int0 = (-793);
      classReader0.readClass(int0, charArray0);
      int int1 = 174;
      classReader0.readInt(int1);
      ClassWriter classWriter1 = new ClassWriter(classReader0, classReader0.EXPAND_FRAMES);
      classReader0.readClass(classWriter0.COMPUTE_FRAMES, charArray0);
      classReader0.getInterfaces();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      ClassWriter classWriter0 = new ClassWriter(4);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      int int0 = (-2072);
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = 'q';
      charArray0[2] = 's';
      // Undeclared exception!
      try { 
        classReader0.readConst(1040, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ClassReader classReader0 = new ClassReader("java/lang/String");
      classReader0.getSuperName();
      classReader0.readInt((byte)62);
      ClassWriter classWriter0 = new ClassWriter(classReader0, 20711936);
      ClassWriter classWriter1 = new ClassWriter(2049);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      char[] charArray0 = new char[9];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[3] = 'q';
      charArray0[4] = 'H';
      charArray0[6] = 's';
      charArray0[7] = 's';
      charArray0[8] = 'h';
      // Undeclared exception!
      try { 
        classReader0.readConst(1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      ClassReader classReader0 = new ClassReader("java/lang/String");
      classReader0.getSuperName();
      classReader0.readInt((byte)62);
      ClassWriter classWriter0 = new ClassWriter(classReader0, 20711936);
      classReader0.readLong(1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'K';
      charArray0[1] = '9';
      classReader0.accept((ClassVisitor) classWriter0, 20711936);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ClassReader classReader0 = new ClassReader("java/lang/String");
      classReader0.getSuperName();
      classReader0.readInt((byte)62);
      ClassWriter classWriter0 = new ClassWriter(classReader0, 20711936);
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      ClassVisitor classVisitor0 = null;
      Attribute attribute0 = new Attribute((String) null);
      Attribute attribute1 = new Attribute("checkPackageAccess");
      ClassWriter classWriter1 = new ClassWriter((byte)62);
      classReader1.getInterfaces();
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
          ClassReader classReader0 = new ClassReader("java/lang/String");
          classReader0.getSuperName();
          classReader0.readInt(176);
          ClassWriter classWriter0 = new ClassWriter(classReader0, 10929);
          FieldWriter fieldWriter0 = classWriter0.firstField;
          classReader0.readLong(175);
          ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
          classReader0.accept((ClassVisitor) classWriter0, 1);
          char[] charArray0 = new char[0];
          classReader0.getAccess();
          // Undeclared exception!
          try { 
            classReader0.readConst(606, charArray0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // 606
             //
             verifyException("wheel.asm.ClassReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ClassReader classReader0 = new ClassReader("java/lang/String");
      classReader0.getSuperName();
      classReader0.readInt((byte)62);
      ClassWriter classWriter0 = new ClassWriter(6892);
      FieldWriter fieldWriter0 = classWriter0.firstField;
      classWriter0.lastField = null;
      classReader0.readLong(1);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classWriter0, (int) (byte)62);
      classAdapter0.visitAnnotation("java/lang/String", true);
      char[] charArray0 = new char[1];
      Object object0 = new Object();
      classReader0.accept((ClassVisitor) classAdapter0, 749);
  }
}
