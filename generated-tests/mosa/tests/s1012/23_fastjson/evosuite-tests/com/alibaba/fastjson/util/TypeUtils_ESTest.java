/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:40:55 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Rectangle2D;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.BitSet;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError((String) null);
      TypeUtils.castToString((Object) null);
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.isProxy(class0);
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class1, map0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class com.alibaba.fastjson.util.ParameterizedTypeImpl
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      ConcurrentHashMap<UUID, InternalError> concurrentHashMap0 = new ConcurrentHashMap<UUID, InternalError>();
      NoClassDefFoundError noClassDefFoundError0 = TypeUtils.castToJavaBean((Object) concurrentHashMap0, class0);
      assertNull(noClassDefFoundError0.getMessage());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      parameterizedTypeImpl0.getTypeName();
      ParserConfig parserConfig0 = new ParserConfig();
      Exception exception0 = TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNull(exception0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("$K%(:[>");
      assertEquals((-5768204741966069476L), long0);
      
      Hashtable<NoSuchMethodException, Float> hashtable0 = new Hashtable<NoSuchMethodException, Float>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      IllegalArgumentException illegalArgumentException0 = TypeUtils.castToJavaBean((Object) hashtable0, class0);
      assertNotNull(illegalArgumentException0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(illegalArgumentException0.getMessage());
      assertEquals("java.lang.IllegalArgumentException", illegalArgumentException0.toString());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
      
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      assertNotNull(list0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      Object object0 = linkedHashMap0.put("7Xnki_:EPs>56[", class1);
      assertNull(object0);
      assertEquals(1, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Object object1 = linkedHashMap0.put(".", class0);
      assertNull(object1);
      assertEquals(2, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      parserConfig0.setAutoTypeSupport(false);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class1, parserConfig0);
      assertNotNull(sQLTransientConnectionException0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(2, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      VerifyError verifyError0 = new VerifyError(".");
      assertNotNull(verifyError0);
      assertEquals("java.lang.VerifyError: .", verifyError0.toString());
      assertEquals(".", verifyError0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("7Xnki_:EPs>56[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7Xnki_:EPs>56[\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("RQ");
      assertEquals(638458947568368300L, long0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      System.setCurrentTimeMillis(638458947568368300L);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      Class<Rectangle> class0 = Rectangle.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) null, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      MockThread.dumpStack();
      Class<Exception> class0 = Exception.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
      assertTrue(concurrentHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<TimeUnit> class1 = TimeUnit.class;
      ParserConfig parserConfig1 = new ParserConfig((ClassLoader) null);
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class0);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig2 = new ParserConfig((ClassLoader) null);
      assertNotNull(parserConfig2);
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(parserConfig2.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertTrue(parserConfig2.isAsmEnable());
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      
      ParserConfig parserConfig3 = ParserConfig.global;
      assertNotNull(parserConfig3);
      assertNotSame(parserConfig3, parserConfig0);
      assertNotSame(parserConfig3, parserConfig1);
      assertNotSame(parserConfig3, parserConfig2);
      assertTrue(parserConfig3.compatibleWithJavaBean);
      assertFalse(parserConfig3.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig3.isAsmEnable());
      assertFalse(parserConfig3.isAutoTypeSupport());
      assertFalse(parserConfig3.equals((Object)parserConfig0));
      assertFalse(parserConfig3.equals((Object)parserConfig1));
      assertFalse(parserConfig3.equals((Object)parserConfig2));
      
      Exception exception0 = TypeUtils.cast((Object) parserConfig0, (ParameterizedType) parameterizedTypeImpl0, parserConfig3);
      assertNotNull(exception0);
      assertNotSame(parserConfig0, parserConfig2);
      assertNotSame(parserConfig0, parserConfig1);
      assertNotSame(parserConfig0, parserConfig3);
      assertNotSame(parserConfig3, parserConfig0);
      assertNotSame(parserConfig3, parserConfig1);
      assertNotSame(parserConfig3, parserConfig2);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig3.compatibleWithJavaBean);
      assertFalse(parserConfig3.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig3.isAsmEnable());
      assertFalse(parserConfig3.isAutoTypeSupport());
      assertFalse(parserConfig0.equals((Object)parserConfig2));
      assertFalse(parserConfig0.equals((Object)parserConfig1));
      assertFalse(parserConfig0.equals((Object)parserConfig3));
      assertFalse(parserConfig3.equals((Object)parserConfig0));
      assertFalse(parserConfig3.equals((Object)parserConfig1));
      assertFalse(parserConfig3.equals((Object)parserConfig2));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) serializeBeanInfo0, class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLNonTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(map0);
      assertNotNull(weakHashMap0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("c`UA\"", classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<OutOfMemoryError> class0 = OutOfMemoryError.class;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      assertNotNull(parameterizedTypeImpl0);
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      assertNotNull(decimalFormatSymbols0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals(',', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('\u00A0', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("EUR", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals(',', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("\u20AC", decimalFormatSymbols0.getCurrencySymbol());
      
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Exception exception0 = TypeUtils.cast((Object) decimalFormatSymbols0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNotNull(exception0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals(',', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('\u00A0', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("EUR", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals(',', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("\u20AC", decimalFormatSymbols0.getCurrencySymbol());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
      assertNotNull(list0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      Long long0 = new Long((-57L));
      assertNotNull(long0);
      assertEquals((-57L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      String string0 = TypeUtils.castToString(propertyNamingStrategy0);
      assertNotNull(string0);
      
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo1);
      assertNotSame(serializeBeanInfo1, serializeBeanInfo0);
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
      
      System.setCurrentTimeMillis(1029L);
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "NULL", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(6, 6);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(6, rectangle0.width);
      assertEquals(6, rectangle0.height);
      assertEquals(6.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(6.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(3.0, rectangle0.getCenterY(), 0.01);
      assertEquals(6.0, rectangle0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle0.getCenterX(), 0.01);
      assertEquals(6.0, rectangle0.getMaxX(), 0.01);
      
      Dimension dimension0 = new Dimension(0, (-1620016031));
      assertNotNull(dimension0);
      assertEquals((-1620016031), dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals((-1.620016031E9), dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<TimeUnit> class0 = TimeUnit.class;
      ParserConfig parserConfig1 = new ParserConfig((ClassLoader) null);
      assertNotNull(parserConfig1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[0]);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig2 = new ParserConfig((ClassLoader) null);
      assertNotNull(parserConfig2);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(parserConfig2.fieldBased);
      assertTrue(parserConfig2.isAsmEnable());
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      
      TypeUtils.cast((Object) parameterizedTypeImpl0, (ParameterizedType) parameterizedTypeImpl0, parserConfig2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(mockThaiBuddhistDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@5bb2d688
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      NoClassDefFoundError noClassDefFoundError0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(noClassDefFoundError0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InstantiationError instantiationError0 = new InstantiationError();
      assertNotNull(instantiationError0);
      assertNull(instantiationError0.getMessage());
      assertEquals("java.lang.InstantiationError", instantiationError0.toString());
      
      Class<TimeUnit> class0 = TimeUnit.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) instantiationError0, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<Rectangle> class0 = Rectangle.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      byte[] byteArray0 = new byte[6];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      
      Double double0 = new Double((-2969.382));
      assertNotNull(double0);
      assertEquals((-2969.382), (double)double0, 0.01);
      
      Integer integer0 = TypeUtils.castToInt(double0);
      assertNotNull(integer0);
      assertEquals((-2969), (int)integer0);
      
      System.setCurrentTimeMillis(1314L);
      Class<Double> class1 = Double.TYPE;
      assertNotNull(class1);
      assertSame(class1, class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertEquals("double", class1.toString());
      assertFalse(class1.isAnnotation());
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertNotNull(class2);
      assertSame(class1, class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertEquals("double", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Hashtable<SQLException, Double> hashtable0 = new Hashtable<SQLException, Double>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      
      MockThread.dumpStack();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      Class<OutOfMemoryError> class1 = OutOfMemoryError.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class class2 = (Class)TypeUtils.unwrapOptional(class1);
      assertNotNull(class2);
      assertEquals("class java.lang.OutOfMemoryError", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Class<Annotation> class3 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class1, class3);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.awt.ImageCapabilities
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockThread mockThread0 = new MockThread("L");
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      Character character0 = TypeUtils.castToChar("L");
      assertNotNull(character0);
      assertEquals('L', (char)character0);
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertNotNull(class1);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals("double", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InstantiationError instantiationError0 = new InstantiationError();
      assertNotNull(instantiationError0);
      assertNull(instantiationError0.getMessage());
      assertEquals("java.lang.InstantiationError", instantiationError0.toString());
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(mockJapaneseDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@69801eb2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError((String) null);
      assertNotNull(outOfMemoryError0);
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
      
      Class<Byte> class0 = Byte.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException((String) null);
      assertNotNull(mockNullPointerException0);
      
      Boolean boolean1 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      Class<NoSuchMethodException> class1 = NoSuchMethodException.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Field field0 = ParserConfig.getFieldFromCache("o`o#zDzyJiwBkU=", linkedHashMap0);
      assertNull(field0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      FieldInfo fieldInfo0 = new FieldInfo("o`o#zDzyJiwBkU=", class0, class0, class1, (Field) null, 1330, 1759, 1330);
      assertNotNull(fieldInfo0);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(1759, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(1330, fieldInfo0.parserFeatures);
      assertTrue(fieldInfo0.isEnum);
      assertNull(fieldInfo0.getFormat());
      assertEquals("o`o#zDzyJiwBkU=", fieldInfo0.toString());
      
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      assertNotNull(beanContext0);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(1759, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(1330, fieldInfo0.parserFeatures);
      assertTrue(fieldInfo0.isEnum);
      assertNull(fieldInfo0.getFormat());
      assertEquals("o`o#zDzyJiwBkU=", fieldInfo0.toString());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(beanContext0.getFormat());
      assertEquals("o`o#zDzyJiwBkU=", beanContext0.getName());
      assertEquals("", beanContext0.getLabel());
      assertEquals(1759, beanContext0.getFeatures());
      
      Field field1 = beanContext0.getField();
      assertNull(field1);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(1759, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(1330, fieldInfo0.parserFeatures);
      assertTrue(fieldInfo0.isEnum);
      assertNull(fieldInfo0.getFormat());
      assertEquals("o`o#zDzyJiwBkU=", fieldInfo0.toString());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(beanContext0.getFormat());
      assertEquals("o`o#zDzyJiwBkU=", beanContext0.getName());
      assertEquals("", beanContext0.getLabel());
      assertEquals(1759, beanContext0.getFeatures());
      
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("0lH_");
      assertNotNull(outOfMemoryError0);
      assertEquals("java.lang.OutOfMemoryError: 0lH_", outOfMemoryError0.toString());
      assertEquals("0lH_", outOfMemoryError0.getMessage());
      
      String string0 = TypeUtils.castToString("0lH_");
      assertNotNull(string0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "0lH_", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : 0lH_
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertNotNull(outOfMemoryError0);
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(outOfMemoryError0.getMessage());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "toG", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Type type0 = null;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) byteArray0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockThread mockThread0 = new MockThread("s");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0, "Ljava.awt.Color", 655701488918567152L);
      assertNotNull(mockThread1);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertNotNull(classLoader0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Color", (ClassLoader) aSMDeserializerFactory0.classLoader);
      assertNull(class0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
      
      Class<Annotation> class1 = Annotation.class;
      Type type0 = TypeUtils.getGenericParamType(class1);
      assertNull(type0);
      
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeAccept");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type1);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class2, (Map<String, String>) null, true, propertyNamingStrategy0);
      assertNotNull(list0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      
      Class<BitSet> class3 = BitSet.class;
      int int0 = TypeUtils.getSerializeFeatures(class3);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Type[] typeArray0 = new Type[6];
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      int int0 = (-949);
      Class<?> class1 = parserConfig0.checkAutoType("Ljava.awt.Point", class0, (-949));
      assertNull(class1);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      typeArray0[0] = (Type) null;
      String string0 = null;
      Method method0 = null;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, (String) null, fieldArray0);
      assertNull(field0);
      
      int int1 = 1769;
      Class<RenderingHints> class2 = RenderingHints.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class2, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("d1\tcOs");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("d1\tcOs", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: d1\tcOs", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("&a_?C,L*/.[", sQLTransientConnectionException0);
      assertNotNull(sQLTransientConnectionException1);
      assertEquals("d1\tcOs", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: d1\tcOs", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: &a_?C,L*/.[", sQLTransientConnectionException1.toString());
      assertEquals("&a_?C,L*/.[", sQLTransientConnectionException1.getMessage());
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      
      String string0 = TypeUtils.castToString(sQLTransientConnectionException1);
      assertNotNull(string0);
      assertNotSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertNotSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      assertEquals("d1\tcOs", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: d1\tcOs", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: &a_?C,L*/.[", sQLTransientConnectionException1.toString());
      assertEquals("&a_?C,L*/.[", sQLTransientConnectionException1.getMessage());
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Hashtable<SQLException, Double> hashtable0 = new Hashtable<SQLException, Double>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      Double double0 = new Double(1894.01567704);
      assertNotNull(double0);
      assertEquals(1894.01567704, (double)double0, 0.01);
      
      Function<Exception, Double> function0 = (Function<Exception, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(function0).apply(any(java.lang.Exception.class));
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("float", class0.toString());
      assertFalse(class0.isSynthetic());
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertNotNull(class1);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("float", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("float", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      
      Double double1 = hashtable0.computeIfAbsent(sQLRecoverableException0, function0);
      assertNotNull(double1);
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(1894.01567704, (double)double1, 0.01);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(hashtable0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jav\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpCookie httpCookie0 = new HttpCookie("to", "to");
      assertNotNull(httpCookie0);
      assertEquals((-1L), httpCookie0.getMaxAge());
      assertNull(httpCookie0.getPath());
      assertNull(httpCookie0.getComment());
      assertEquals(1, httpCookie0.getVersion());
      assertNull(httpCookie0.getDomain());
      assertFalse(httpCookie0.getDiscard());
      assertFalse(httpCookie0.isHttpOnly());
      assertFalse(httpCookie0.hasExpired());
      assertEquals("to=\"to\"", httpCookie0.toString());
      assertEquals("to", httpCookie0.getValue());
      assertEquals("to", httpCookie0.getName());
      assertFalse(httpCookie0.getSecure());
      assertNull(httpCookie0.getPortlist());
      assertNull(httpCookie0.getCommentURL());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(httpCookie0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : to=\"to\"
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("double", class0.toString());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)19;
      byteArray0[3] = (byte)19;
      byteArray0[5] = (byte)110;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)110, (byte)19, (byte)0, (byte)19, (byte)0, (byte)110}, byteArray0);
      assertEquals((short)110, bigInteger0.shortValue());
      assertEquals((byte)110, bigInteger0.byteValue());
      
      Date date0 = TypeUtils.castToSqlDate(bigInteger0);
      assertNotNull(date0);
      assertArrayEquals(new byte[] {(byte)110, (byte)19, (byte)0, (byte)19, (byte)0, (byte)110}, byteArray0);
      assertEquals((short)110, bigInteger0.shortValue());
      assertEquals((byte)110, bigInteger0.byteValue());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      
      Double double0 = TypeUtils.castToDouble(bigInteger0);
      assertNotNull(double0);
      assertArrayEquals(new byte[] {(byte)110, (byte)19, (byte)0, (byte)19, (byte)0, (byte)110}, byteArray0);
      assertEquals((short)110, bigInteger0.shortValue());
      assertEquals((byte)110, bigInteger0.byteValue());
      assertEquals(1.21027884679278E14, (double)double0, 0.01);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("xuD,#~Imy");
      assertNull(class0);
      
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
      
      Rectangle rectangle0 = new Rectangle();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xuD,#~Imy");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Dimension dimension0 = new Dimension();
      assertNotNull(dimension0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      
      Dimension dimension1 = new Dimension(0, 0);
      assertNotNull(dimension1);
      assertEquals(0, dimension1.width);
      assertEquals(0, dimension1.height);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertTrue(dimension1.equals((Object)dimension0));
      
      String string0 = rectangle0.toString();
      assertNotNull(string0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", string0);
      
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("");
      assertNotNull(mockNullPointerException0);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertFalse(locale1.equals((Object)locale0));
      
      AtomicLong atomicLong0 = new AtomicLong(0);
      assertNotNull(atomicLong0);
      assertEquals(0L, atomicLong0.get());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0, atomicLong0.intValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.longValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals((byte)0, atomicLong0.byteValue());
      
      Boolean boolean2 = TypeUtils.castToBoolean(atomicLong0);
      assertNotNull(boolean2);
      assertEquals(0L, atomicLong0.get());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0, atomicLong0.intValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.longValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Hashtable<SQLException, Double> hashtable0 = new Hashtable<SQLException, Double>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      Class<?> class0 = TypeUtils.loadClass((String) null, classLoader0);
      assertNull(class0);
      
      Hashtable<String, String> hashtable1 = new Hashtable<String, String>();
      assertNotNull(hashtable1);
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertNotNull(outOfMemoryError0);
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(outOfMemoryError0.getMessage());
      
      MockThread mockThread0 = new MockThread("isEmpty");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("isEmpty");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : isEmpty
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Hashtable<SQLException, Double> hashtable0 = new Hashtable<SQLException, Double>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      byte[] byteArray0 = TypeUtils.castToBytes("");
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long long0 = TypeUtils.fnv1a_64_lower("cause");
      assertEquals((-5245656472792837248L), long0);
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = TypeUtils.decapitalize("L");
      assertNotNull(string0);
      assertEquals("l", string0);
      
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      
      ConcurrentHashMap<Point, Boolean> concurrentHashMap0 = new ConcurrentHashMap<Point, Boolean>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      boolean boolean0 = TypeUtils.isNumber("fastjson.parser.deny");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("xuD,#~Imy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : xuD,#~Imy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException();
      assertNotNull(instantiationException0);
      assertNull(instantiationException0.getMessage());
      assertEquals("java.lang.InstantiationException", instantiationException0.toString());
      
      boolean boolean0 = TypeUtils.isNumber("+-dDZ{w7s");
      assertFalse(boolean0);
      
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      assertNotNull(jSONPDeserializer0);
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Class<Boolean> class1 = Boolean.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("boolean", class1.toString());
      assertTrue(class1.isPrimitive());
      
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class0);
      assertNotNull(parameterizedTypeImpl0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("boolean", class1.toString());
      assertTrue(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      InstantiationException instantiationException0 = new InstantiationException("");
      assertNotNull(instantiationException0);
      assertEquals("java.lang.InstantiationException: ", instantiationException0.toString());
      assertEquals("", instantiationException0.getMessage());
      
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      SQLClientInfoException sQLClientInfoException0 = TypeUtils.castToJavaBean((Object) treeMap0, class1);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, treeMap0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      assertNotNull(numberDeserializer0);
      assertEquals(2, numberDeserializer0.getFastMatchToken());
      
      JSONScanner jSONScanner0 = new JSONScanner("", (-996));
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-996), jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals("Unknown", jSONScanner0.tokenName());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      assertNotNull(defaultJSONParser0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals((-996), jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("EOF", jSONScanner0.tokenName());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = TypeUtils.castToLong(long0);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      assertTrue(long1.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      Class<?> class1 = TypeUtils.getClassFromMapping("J#");
      assertNull(class1);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
      
      Rectangle rectangle0 = new Rectangle();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance();
      assertNotNull(decimalFormat0);
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      Hashtable<SQLException, Double> hashtable0 = new Hashtable<SQLException, Double>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      Function<Object, Double> function0 = (Function<Object, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Double double0 = hashtable0.computeIfAbsent(sQLRecoverableException0, function0);
      assertNull(double0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockThread mockThread0 = new MockThread("L");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      Character character0 = TypeUtils.castToChar("L");
      assertNotNull(character0);
      assertEquals('L', (char)character0);
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError((String) null);
      assertNotNull(outOfMemoryError0);
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(outOfMemoryError0.getMessage());
      
      String string0 = TypeUtils.castToString(outOfMemoryError0);
      assertNotNull(string0);
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(outOfMemoryError0.getMessage());
      
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      String string1 = TypeUtils.decapitalize("parseDouble error, field : ");
      assertNotNull(string1);
      assertEquals("parseDouble error, field : ", string1);
      assertFalse(string1.equals((Object)string0));
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class org.evosuite.runtime.mock.java.text.MockSimpleDateFormat", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(outOfMemoryError0);
      assertNotNull(batchUpdateException0);
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(outOfMemoryError0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.lang.OutOfMemoryError", batchUpdateException0.toString());
      assertEquals("java.lang.OutOfMemoryError", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)45;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)45, (byte)45}, byteArray0);
      assertEquals((short)11565, bigInteger0.shortValue());
      assertEquals((byte)45, bigInteger0.byteValue());
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)103;
      int int0 = bigInteger0.signum();
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)45, (byte)45}, byteArray0);
      assertEquals((short)11565, bigInteger0.shortValue());
      assertEquals((byte)45, bigInteger0.byteValue());
      assertEquals(1, int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)103}, byteArray1);
      assertEquals((byte)103, bigInteger1.byteValue());
      assertEquals((short)103, bigInteger1.shortValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      boolean boolean1 = TypeUtils.isNumber("0$mk<F_:)aVY0");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      assertNotNull(jSONPDeserializer0);
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      
      int int1 = TypeUtils.getParserFeatures(class0);
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      Class<SQLTransientException> class1 = SQLTransientException.class;
      boolean boolean2 = TypeUtils.isKotlin(class1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      Long long0 = new Long((byte)45);
      assertNotNull(long0);
      assertEquals(45L, (long)long0);
      
      Long long1 = TypeUtils.castToLong(long0);
      assertNotNull(long1);
      assertEquals(45L, (long)long1);
      assertTrue(long1.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<OutOfMemoryError> class0 = OutOfMemoryError.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.OutOfMemoryError", class1.toString());
      assertFalse(class1.isAnnotation());
      
      long long0 = TypeUtils.fnv1a_64("m7P`]4/0.SDAD]}$b");
      assertEquals(7722057698449925697L, long0);
      
      System.setCurrentTimeMillis((-9223372036854775808L));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class java.sql.SQLNonTransientConnectionException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      Dimension dimension0 = new Dimension(17, 17);
      assertNotNull(dimension0);
      assertEquals(17, dimension0.height);
      assertEquals(17, dimension0.width);
      assertEquals(17.0, dimension0.getHeight(), 0.01);
      assertEquals(17.0, dimension0.getWidth(), 0.01);
      
      Dimension dimension1 = new Dimension(17, 17);
      assertNotNull(dimension1);
      assertEquals(17, dimension1.height);
      assertEquals(17, dimension1.width);
      assertEquals(17.0, dimension1.getWidth(), 0.01);
      assertEquals(17.0, dimension1.getHeight(), 0.01);
      assertTrue(dimension1.equals((Object)dimension0));
      
      long long0 = TypeUtils.fnv1a_64_lower(")/");
      assertEquals(566742202120869489L, long0);
      
      Byte byte0 = new Byte((byte) (-120));
      assertNotNull(byte0);
      assertEquals((byte) (-120), (byte)byte0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<TimeUnit> class0 = TimeUnit.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) byte0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      InstantiationException instantiationException0 = new InstantiationException("");
      assertNotNull(instantiationException0);
      assertEquals("java.lang.InstantiationException: ", instantiationException0.toString());
      assertEquals("", instantiationException0.getMessage());
      
      MessageFormat messageFormat0 = new MessageFormat("");
      assertNotNull(messageFormat0);
      
      InstantiationException instantiationException1 = new InstantiationException("springfox.documentation.spring.web.json.Json");
      assertNotNull(instantiationException1);
      assertEquals("java.lang.InstantiationException: springfox.documentation.spring.web.json.Json", instantiationException1.toString());
      assertEquals("springfox.documentation.spring.web.json.Json", instantiationException1.getMessage());
      assertFalse(instantiationException1.equals((Object)instantiationException0));
      
      boolean boolean0 = TypeUtils.isNumber("");
      assertTrue(boolean0);
      
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      assertNotNull(jSONPDeserializer0);
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(instantiationException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.InstantiationException: springfox.documentation.spring.web.json.Json
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("L");
      assertNotNull(string0);
      assertEquals("l", string0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"L\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(mockJapaneseDate0);
      assertTrue(boolean0);
      
      WeakHashMap<SQLTimeoutException, Dimension> weakHashMap0 = new WeakHashMap<SQLTimeoutException, Dimension>();
      assertNotNull(weakHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      MockThread mockThread0 = new MockThread("Dsjo4?)");
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ThreadGroup threadGroup0 = new ThreadGroup("Dsjo4?)");
      assertNotNull(threadGroup0);
      assertEquals("Dsjo4?)", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "$");
      assertNotNull(threadGroup1);
      assertEquals("Dsjo4?)", threadGroup0.getName());
      assertEquals("$", threadGroup1.getName());
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      MockThread mockThread1 = new MockThread(threadGroup1, mockThread0, "GMT", 31968768753712L);
      assertNotNull(mockThread1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals("Dsjo4?)", threadGroup0.getName());
      assertEquals("$", threadGroup1.getName());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertNotNull(classLoader0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread1, mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals("Dsjo4?)", threadGroup0.getName());
      assertEquals("$", threadGroup1.getName());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals("Dsjo4?)", threadGroup0.getName());
      assertEquals("$", threadGroup1.getName());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      Class<?> class1 = TypeUtils.loadClass("$U/BX_z(!d`a#4m", classLoader0);
      assertNull(class1);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread1, mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals("Dsjo4?)", threadGroup0.getName());
      assertEquals("$", threadGroup1.getName());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread1.equals((Object)mockThread0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava.awt.Color");
      assertFalse(boolean0);
      
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      assertNotNull(mockNullPointerException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("&M]''`7q:]vQ]AV#W12");
      assertFalse(boolean0);
      
      InstantiationError instantiationError0 = new InstantiationError("can not cast to byte, value : ");
      assertNotNull(instantiationError0);
      assertEquals("java.lang.InstantiationError: can not cast to byte, value : ", instantiationError0.toString());
      assertEquals("can not cast to byte, value : ", instantiationError0.getMessage());
      
      Throwable[] throwableArray0 = instantiationError0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals("java.lang.InstantiationError: can not cast to byte, value : ", instantiationError0.toString());
      assertEquals("can not cast to byte, value : ", instantiationError0.getMessage());
      
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      assertNotNull(jSONPDeserializer0);
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(instantiationError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.InstantiationError: can not cast to byte, value : 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TypeUtils.clearClassMapping();
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-3275.7972545661555), 0.0, 0.0, 0.75);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals((-3275.7972545661555), rectangle2D_Double0.x, 0.01);
      assertEquals(0.75, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.75, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.375, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-3275.7972545661555), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3275.7972545661555), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-3275.7972545661555), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals((-3275.7972545661555), rectangle2D_Double0.x, 0.01);
      assertEquals(0.75, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0, rectangle0.y);
      assertEquals(1, rectangle0.width);
      assertEquals(1, rectangle0.height);
      assertEquals((-3276), rectangle0.x);
      assertEquals(0.75, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.375, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-3275.7972545661555), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3275.7972545661555), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-3275.7972545661555), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-3276.0), rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(0.5, rectangle0.getCenterY(), 0.01);
      assertEquals(1.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals((-3276.0), rectangle0.getMinX(), 0.01);
      assertEquals((-3275.5), rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals((-3275.0), rectangle0.getMaxX(), 0.01);
      
      long long0 = TypeUtils.fnv1a_64_lower("nFaIJY300a3'x-n");
      assertEquals((-3766899431379073022L), long0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("fastjson.parser.deny");
      assertNotNull(outOfMemoryError0);
      assertEquals("fastjson.parser.deny", outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError: fastjson.parser.deny", outOfMemoryError0.toString());
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(mockThaiBuddhistDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@24223ddc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      
      RoundingMode roundingMode0 = RoundingMode.UP;
      decimalFormat0.setRoundingMode(roundingMode0);
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.UP, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      
      ParsePosition parsePosition0 = new ParsePosition(1414);
      assertNotNull(parsePosition0);
      assertEquals(1414, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1414,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(decimalFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.text.DecimalFormat@674dc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertNotNull(outOfMemoryError0);
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(outOfMemoryError0.getMessage());
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      WeakHashMap<String, Field> weakHashMap1 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap1);
      
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      int int0 = Opcodes.ICONST_0;
      assertEquals(3, int0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException((String) null);
      assertNotNull(mockNullPointerException0);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(locale0.equals((Object)locale1));
      
      AtomicLong atomicLong0 = new AtomicLong(3);
      assertNotNull(atomicLong0);
      assertEquals("3", atomicLong0.toString());
      assertEquals((byte)3, atomicLong0.byteValue());
      assertEquals(3L, atomicLong0.longValue());
      assertEquals((short)3, atomicLong0.shortValue());
      assertEquals(3L, atomicLong0.get());
      assertEquals(3.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(3.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(3, atomicLong0.intValue());
      
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("]kA>MI8(C");
      assertNotNull(stringCharacterIterator0);
      assertEquals(0, stringCharacterIterator0.getIndex());
      assertEquals(']', stringCharacterIterator0.current());
      assertEquals(0, stringCharacterIterator0.getBeginIndex());
      assertEquals(9, stringCharacterIterator0.getEndIndex());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(stringCharacterIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.text.StringCharacterIterator@249aaec5
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockThread mockThread0 = new MockThread("L");
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      Character character0 = TypeUtils.castToChar("L");
      assertNotNull(character0);
      assertEquals('L', (char)character0);
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      
      JSONField jSONField0 = TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      assertNull(jSONField0);
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Class<Long> class0 = Long.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) boolean0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : true
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertNotNull(string0);
      assertEquals("fastjson.parser.autoTypeSupport", string0);
      
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      assertNotNull(treeMap1);
      assertEquals(0, treeMap1.size());
      assertTrue(treeMap1.equals((Object)treeMap0));
      
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("fastjson.parser.autoTypeSupport");
      assertNotNull(mockNullPointerException0);
      
      JSONObject jSONObject0 = new JSONObject(27);
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      Date date0 = jSONObject0.getSqlDate("fastjson.parser.autoTypeSupport");
      assertNull(date0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(treeMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockThread mockThread0 = new MockThread("L");
          assertNotNull(mockThread0);
          assertFalse(mockThread0.isInterrupted());
          assertFalse(mockThread0.isDaemon());
          assertEquals(0, mockThread0.countStackFrames());
          
          ClassLoader classLoader0 = mockThread0.getContextClassLoader();
          assertNotNull(classLoader0);
          assertFalse(mockThread0.isInterrupted());
          assertFalse(mockThread0.isDaemon());
          assertEquals(0, mockThread0.countStackFrames());
          
          ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
          assertNotNull(classLoader1);
          assertFalse(classLoader1.equals((Object)classLoader0));
          
          Class<?> class0 = TypeUtils.loadClass("L", classLoader1, false);
          assertNull(class0);
          assertFalse(classLoader1.equals((Object)classLoader0));
          
          Class<Short> class1 = Short.TYPE;
          assertNotNull(class1);
          assertEquals(1041, class1.getModifiers());
          assertFalse(class1.isInterface());
          assertFalse(class1.isArray());
          assertTrue(class1.isPrimitive());
          assertEquals("short", class1.toString());
          assertFalse(class1.isEnum());
          assertFalse(class1.isSynthetic());
          assertFalse(class1.isAnnotation());
          
          Class<Long> class2 = Long.TYPE;
          assertNotNull(class2);
          assertTrue(class2.isPrimitive());
          assertFalse(class2.isInterface());
          assertEquals("long", class2.toString());
          assertFalse(class2.isArray());
          assertEquals(1041, class2.getModifiers());
          assertFalse(class2.isEnum());
          assertFalse(class2.isSynthetic());
          assertFalse(class2.isAnnotation());
          
          Class<Boolean> class3 = Boolean.TYPE;
          assertNotNull(class3);
          assertEquals(1041, class3.getModifiers());
          assertFalse(class3.isInterface());
          assertFalse(class3.isArray());
          assertEquals("boolean", class3.toString());
          assertFalse(class3.isAnnotation());
          assertTrue(class3.isPrimitive());
          assertFalse(class3.isEnum());
          assertFalse(class3.isSynthetic());
          
          Class class4 = (Class)TypeUtils.getCollectionItemType(class1);
          assertNotNull(class4);
          assertEquals(1041, class1.getModifiers());
          assertFalse(class1.isInterface());
          assertFalse(class1.isArray());
          assertTrue(class1.isPrimitive());
          assertEquals("short", class1.toString());
          assertFalse(class1.isEnum());
          assertFalse(class1.isSynthetic());
          assertFalse(class1.isAnnotation());
          assertFalse(class4.isAnnotation());
          assertFalse(class4.isPrimitive());
          assertEquals(1, class4.getModifiers());
          assertFalse(class4.isInterface());
          assertFalse(class4.isArray());
          assertEquals("class java.lang.Object", class4.toString());
          assertFalse(class4.isEnum());
          assertFalse(class4.isSynthetic());
          
          Type[] typeArray0 = new Type[2];
          GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
          doReturn((String) null).when(genericArrayType0).toString();
          doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
          Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
          assertNotNull(type0);
          
          typeArray0[0] = (Type) class2;
          ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class2, typeArray0[0]);
          assertNotNull(parameterizedTypeImpl0);
          assertTrue(class2.isPrimitive());
          assertFalse(class2.isInterface());
          assertEquals("long", class2.toString());
          assertFalse(class2.isArray());
          assertEquals(1041, class2.getModifiers());
          assertFalse(class2.isEnum());
          assertFalse(class2.isSynthetic());
          assertFalse(class2.isAnnotation());
          
          MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
          assertNotNull(mockJapaneseDate0);
          
          MessageFormat messageFormat0 = new MessageFormat("L");
          assertNotNull(messageFormat0);
          
          Exception exception0 = TypeUtils.cast((Object) messageFormat0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
          assertNull(exception0);
          assertTrue(class2.isPrimitive());
          assertFalse(class2.isInterface());
          assertEquals("long", class2.toString());
          assertFalse(class2.isArray());
          assertEquals(1041, class2.getModifiers());
          assertFalse(class2.isEnum());
          assertFalse(class2.isSynthetic());
          assertFalse(class2.isAnnotation());
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)60;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)45, (byte)103, (byte)60}, byteArray0);
      assertEquals((short)26428, bigInteger0.shortValue());
      assertEquals((byte)60, bigInteger0.byteValue());
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)103;
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)103}, byteArray1);
      assertEquals((byte)103, bigInteger1.byteValue());
      assertEquals((short)103, bigInteger1.shortValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
      assertNotNull(bigInteger2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)45, (byte)103, (byte)60}, byteArray0);
      assertArrayEquals(new byte[] {(byte)103}, byteArray1);
      assertEquals((short)26428, bigInteger0.shortValue());
      assertEquals((byte)60, bigInteger0.byteValue());
      assertEquals((byte)103, bigInteger1.byteValue());
      assertEquals((short)103, bigInteger1.shortValue());
      assertEquals((byte)24, bigInteger2.byteValue());
      assertEquals((short)26392, bigInteger2.shortValue());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      
      Integer integer0 = TypeUtils.castToInt(bigInteger0);
      assertNotNull(integer0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)45, (byte)103, (byte)60}, byteArray0);
      assertEquals((short)26428, bigInteger0.shortValue());
      assertEquals((byte)60, bigInteger0.byteValue());
      assertEquals((-1121097924), (int)integer0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      
      Class<?> class1 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      assertNotNull(class1);
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class1.toString());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, class1);
      assertNotNull(parameterizedTypeImpl1);
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class1.toString());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InstantiationError instantiationError0 = new InstantiationError();
      assertNotNull(instantiationError0);
      assertEquals("java.lang.InstantiationError", instantiationError0.toString());
      assertNull(instantiationError0.getMessage());
      
      Rectangle rectangle0 = new Rectangle(26, 1143);
      assertNotNull(rectangle0);
      assertEquals(1143, rectangle0.height);
      assertEquals(26, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(26.0, rectangle0.getWidth(), 0.01);
      assertEquals(1143.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(1143.0, rectangle0.getMaxY(), 0.01);
      assertEquals(13.0, rectangle0.getCenterX(), 0.01);
      assertEquals(26.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(571.5, rectangle0.getCenterY(), 0.01);
      
      Dimension dimension0 = new Dimension(636, 1143);
      assertNotNull(dimension0);
      assertEquals(1143, dimension0.height);
      assertEquals(636, dimension0.width);
      assertEquals(636.0, dimension0.getWidth(), 0.01);
      assertEquals(1143.0, dimension0.getHeight(), 0.01);
      
      String string0 = "VQ)h#NJ";
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("VQ)h#NJ");
      assertNotNull(mockIllegalAccessException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("VQ)h#NJ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"VQ)h#NJ\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
      
      Class<ImageCapabilities> class2 = ImageCapabilities.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class2);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-3400), 1026);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(1026, rectangle0.height);
      assertEquals((-3400), rectangle0.width);
      assertEquals(1026.0, rectangle0.getHeight(), 0.01);
      assertEquals(1026.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-1700.0), rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals((-3400.0), rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(513.0, rectangle0.getCenterY(), 0.01);
      assertEquals((-3400.0), rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      
      Dimension dimension0 = new Dimension((-3400), (-3400));
      assertNotNull(dimension0);
      assertEquals((-3400), dimension0.width);
      assertEquals((-3400), dimension0.height);
      assertEquals((-3400.0), dimension0.getWidth(), 0.01);
      assertEquals((-3400.0), dimension0.getHeight(), 0.01);
      
      Class<Long> class0 = Long.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("oaCGc2Y*;4#Uj@");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"oaCGc2Y*;4#Uj@\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Hashtable<SQLException, Double> hashtable0 = new Hashtable<SQLException, Double>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      System.setCurrentTimeMillis(1314L);
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-3400), 1026);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(1026, rectangle0.height);
      assertEquals((-3400), rectangle0.width);
      assertEquals((-3400.0), rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals((-1700.0), rectangle0.getCenterX(), 0.01);
      assertEquals(1026.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-3400.0), rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(513.0, rectangle0.getCenterY(), 0.01);
      assertEquals(1026.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      
      Dimension dimension0 = new Dimension();
      assertNotNull(dimension0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      
      Dimension dimension1 = new Dimension((-3400), (-3400));
      assertNotNull(dimension1);
      assertEquals((-3400), dimension1.width);
      assertEquals((-3400), dimension1.height);
      assertEquals((-3400.0), dimension1.getHeight(), 0.01);
      assertEquals((-3400.0), dimension1.getWidth(), 0.01);
      assertFalse(dimension1.equals((Object)dimension0));
      
      Class<Long> class0 = Long.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower(")/");
      assertEquals(566742202120869489L, long0);
      
      Long long1 = new Long((-3400));
      assertNotNull(long1);
      assertEquals((-3400L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      java.util.Date date0 = TypeUtils.castToDate(long1);
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:59:56 GMT 1969", date0.toString());
      assertFalse(long1.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(6, 6);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(6, rectangle0.height);
      assertEquals(6, rectangle0.width);
      assertEquals(6.0, rectangle0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle0.getCenterX(), 0.01);
      assertEquals(6.0, rectangle0.getMaxX(), 0.01);
      assertEquals(6.0, rectangle0.getWidth(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(3.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(6.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      
      Dimension dimension0 = new Dimension(0, 6);
      assertNotNull(dimension0);
      assertEquals(0, dimension0.width);
      assertEquals(6, dimension0.height);
      assertEquals(6.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      
      Dimension dimension1 = new Dimension(0, (-1620016031));
      assertNotNull(dimension1);
      assertEquals((-1620016031), dimension1.height);
      assertEquals(0, dimension1.width);
      assertEquals((-1.620016031E9), dimension1.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertFalse(dimension1.equals((Object)dimension0));
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Object object0 = linkedHashMap0.put(".", dimension0);
      assertNull(object0);
      assertNotSame(dimension0, dimension1);
      assertEquals(0, dimension0.width);
      assertEquals(6, dimension0.height);
      assertEquals(6.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(1, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      assertFalse(dimension0.equals((Object)dimension1));
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      parserConfig0.setAutoTypeSupport(true);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      SQLTransientConnectionException sQLTransientConnectionException0 = TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class0, parserConfig0);
      assertNotNull(sQLTransientConnectionException0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertEquals(1, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      VerifyError verifyError0 = new VerifyError("fastjson.parser.autoTypeSupport");
      assertNotNull(verifyError0);
      assertEquals("java.lang.VerifyError: fastjson.parser.autoTypeSupport", verifyError0.toString());
      assertEquals("fastjson.parser.autoTypeSupport", verifyError0.getMessage());
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Hashtable<SQLException, Double> hashtable0 = new Hashtable<SQLException, Double>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      Double double0 = new Double(1894.01567704);
      assertNotNull(double0);
      assertEquals(1894.01567704, (double)double0, 0.01);
      
      Function<Exception, Double> function0 = (Function<Exception, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(function0).apply(any(java.lang.Exception.class));
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertNotNull(class1);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertEquals("float", class1.toString());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      Double double1 = hashtable0.computeIfAbsent(sQLRecoverableException0, function0);
      assertNotNull(double1);
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(1894.01567704, (double)double1, 0.01);
      
      Long long0 = new Long(31968768229424L);
      assertNotNull(long0);
      assertEquals(31968768229424L, (long)long0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {java.sql.SQLRecoverableException=1894.01567704}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockThread mockThread0 = new MockThread("L");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ClassLoader classLoader2 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader2);
      assertSame(classLoader2, classLoader0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(classLoader2.equals((Object)classLoader1));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader2);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(classLoader2.equals((Object)classLoader1));
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(classLoader2.equals((Object)classLoader1));
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertEquals("double", class0.toString());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class0.isInterface());
      assertEquals("double", class0.toString());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory1);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, parameterizedTypeImpl0);
      assertNotNull(parameterizedTypeImpl1);
      assertFalse(class0.isInterface());
      assertEquals("double", class0.toString());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "L", (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@daa
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      ThreadGroup threadGroup0 = new ThreadGroup("z'Avv-Yg\"tO2z`");
      assertNotNull(threadGroup0);
      assertEquals("z'Avv-Yg\"tO2z`", threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread(threadGroup0, "kotlin.jvm.internal.DefaulCostructorMarker");
      assertNotNull(mockThread0);
      assertEquals("z'Avv-Yg\"tO2z`", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      MockThread mockThread1 = new MockThread(mockThread0, "z'Avv-Yg\"tO2z`");
      assertNotNull(mockThread1);
      assertEquals("z'Avv-Yg\"tO2z`", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertNotNull(classLoader0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertEquals("z'Avv-Yg\"tO2z`", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(mockThread1);
      assertNotNull(mockThread2);
      assertEquals("z'Avv-Yg\"tO2z`", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      
      ClassLoader classLoader1 = mockThread2.getContextClassLoader();
      assertNotNull(classLoader1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertSame(classLoader1, classLoader0);
      assertEquals("z'Avv-Yg\"tO2z`", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      
      MockThread mockThread3 = new MockThread("z'Avv-Yg\"tO2z`");
      assertNotNull(mockThread3);
      assertFalse(mockThread3.isDaemon());
      assertEquals(0, mockThread3.countStackFrames());
      assertFalse(mockThread3.isInterrupted());
      assertFalse(mockThread3.equals((Object)mockThread2));
      assertFalse(mockThread3.equals((Object)mockThread1));
      assertFalse(mockThread3.equals((Object)mockThread0));
      
      ClassLoader classLoader2 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader2);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread3);
      assertNotSame(mockThread0, mockThread1);
      assertSame(classLoader2, classLoader0);
      assertSame(classLoader2, classLoader1);
      assertEquals("z'Avv-Yg\"tO2z`", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread1));
      
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
      
      Class<Double> class1 = Double.TYPE;
      assertNotNull(class1);
      assertSame(class1, class0);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("double", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-3400), 1026);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(1026, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals((-3400), rectangle0.width);
      assertEquals((-3400.0), rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(1026.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(1026.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-3400.0), rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(513.0, rectangle0.getCenterY(), 0.01);
      assertEquals((-1700.0), rectangle0.getCenterX(), 0.01);
      
      Dimension dimension0 = new Dimension(0, (-3400));
      assertNotNull(dimension0);
      assertEquals((-3400), dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals((-3400.0), dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      
      Dimension dimension1 = new Dimension((-3400), (-3400));
      assertNotNull(dimension1);
      assertEquals((-3400), dimension1.width);
      assertEquals((-3400), dimension1.height);
      assertEquals((-3400.0), dimension1.getHeight(), 0.01);
      assertEquals((-3400.0), dimension1.getWidth(), 0.01);
      assertFalse(dimension1.equals((Object)dimension0));
      
      long long0 = TypeUtils.fnv1a_64_lower(")/");
      assertEquals(566742202120869489L, long0);
      
      Byte byte0 = new Byte((byte)69);
      assertNotNull(byte0);
      assertEquals((byte)69, (byte)byte0);
      
      Class<TimeUnit> class0 = TimeUnit.class;
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) byte0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertNotNull(outOfMemoryError0);
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Ljava.lang.AutoCloseable", (String) null, 669, outOfMemoryError0);
      assertNotNull(sQLRecoverableException0);
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertEquals("java.sql.SQLRecoverableException: Ljava.lang.AutoCloseable", sQLRecoverableException0.toString());
      assertEquals(669, sQLRecoverableException0.getErrorCode());
      assertEquals("Ljava.lang.AutoCloseable", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("Ljava.lang.AutoCloseable");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, true, propertyNamingStrategy1);
      assertNotNull(list0);
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      
      List<FieldInfo> list1 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.equals((Object)list0));
      
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      List<FieldInfo> list2 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertNotNull(list2);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertFalse(list2.isEmpty());
      assertEquals(10, list2.size());
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertNotNull(string0);
      assertEquals("fastjson.parser.autoTypeSupport", string0);
      
      Class<?> class1 = TypeUtils.loadClass("", (ClassLoader) null);
      assertNull(class1);
      
      Class<?> class2 = TypeUtils.loadClass("", (ClassLoader) null);
      assertNull(class2);
      
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap1);
      assertEquals(0, identityHashMap1.size());
      assertTrue(identityHashMap1.isEmpty());
      assertTrue(identityHashMap1.equals((Object)identityHashMap0));
      
      Class<SQLWarning> class3 = SQLWarning.class;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo((Class<?>) class3, (Map<String, String>) identityHashMap0, propertyNamingStrategy1);
      assertNotNull(serializeBeanInfo1);
      assertNotSame(identityHashMap0, identityHashMap1);
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      assertNotSame(serializeBeanInfo1, serializeBeanInfo0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertTrue(identityHashMap0.equals((Object)identityHashMap1));
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
      
      Class<DecimalFormatSymbols> class4 = DecimalFormatSymbols.class;
      int int0 = TypeUtils.getSerializeFeatures(class4);
      assertEquals(0, int0);
      
      Class<SQLInvalidAuthorizationSpecException> class5 = SQLInvalidAuthorizationSpecException.class;
      List<FieldInfo> list3 = TypeUtils.computeGetters((Class<?>) class5, (Map<String, String>) identityHashMap0, true);
      assertNotNull(list3);
      assertNotSame(identityHashMap0, identityHashMap1);
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertNotSame(list3, list0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(identityHashMap0.equals((Object)identityHashMap1));
      assertTrue(list3.equals((Object)list1));
      assertFalse(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)19;
      byteArray0[3] = (byte)19;
      byteArray0[5] = (byte)48;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)29, (byte)19, (byte)0, (byte)19, (byte)0, (byte)48}, byteArray0);
      assertEquals((byte)48, bigInteger0.byteValue());
      assertEquals((short)48, bigInteger0.shortValue());
      
      Date date0 = TypeUtils.castToSqlDate(bigInteger0);
      assertNotNull(date0);
      assertArrayEquals(new byte[] {(byte)29, (byte)19, (byte)0, (byte)19, (byte)0, (byte)48}, byteArray0);
      assertEquals((byte)48, bigInteger0.byteValue());
      assertEquals((short)48, bigInteger0.shortValue());
      
      java.util.Date date1 = TypeUtils.castToDate(date0);
      assertNotNull(date1);
      assertSame(date0, date1);
      assertSame(date1, date0);
      assertArrayEquals(new byte[] {(byte)29, (byte)19, (byte)0, (byte)19, (byte)0, (byte)48}, byteArray0);
      assertEquals((byte)48, bigInteger0.byteValue());
      assertEquals((short)48, bigInteger0.shortValue());
      
      Boolean boolean0 = TypeUtils.castToBoolean(bigInteger0);
      assertNotNull(boolean0);
      assertArrayEquals(new byte[] {(byte)29, (byte)19, (byte)0, (byte)19, (byte)0, (byte)48}, byteArray0);
      assertEquals((byte)48, bigInteger0.byteValue());
      assertEquals((short)48, bigInteger0.shortValue());
      assertFalse(boolean0);
      
      Class<Long> class1 = Long.class;
      boolean boolean1 = TypeUtils.isKotlin(class1);
      assertFalse(boolean1);
      
      Long long0 = new Long((-13L));
      assertNotNull(long0);
      assertEquals((-13L), (long)long0);
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("AhisY/{S'w");
      assertNotNull(mockNullPointerException0);
      
      JSONObject jSONObject0 = new JSONObject((byte)48);
      assertNotNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      Date date2 = jSONObject0.getSqlDate("AhisY/{S'w");
      assertNull(date2);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      Boolean boolean2 = TypeUtils.castToBoolean(boolean0);
      assertNotNull(boolean2);
      assertArrayEquals(new byte[] {(byte)29, (byte)19, (byte)0, (byte)19, (byte)0, (byte)48}, byteArray0);
      assertEquals((byte)48, bigInteger0.byteValue());
      assertEquals((short)48, bigInteger0.shortValue());
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean1));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)19;
      byteArray0[3] = (byte)19;
      byteArray0[5] = (byte)19;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)32, (byte)19, (byte)0, (byte)19, (byte)0, (byte)19}, byteArray0);
      assertEquals((byte)19, bigInteger0.byteValue());
      assertEquals((short)19, bigInteger0.shortValue());
      
      Date date0 = TypeUtils.castToSqlDate(bigInteger0);
      assertNotNull(date0);
      assertArrayEquals(new byte[] {(byte)32, (byte)19, (byte)0, (byte)19, (byte)0, (byte)19}, byteArray0);
      assertEquals((byte)19, bigInteger0.byteValue());
      assertEquals((short)19, bigInteger0.shortValue());
      
      java.util.Date date1 = TypeUtils.castToDate(date0);
      assertNotNull(date1);
      assertSame(date0, date1);
      assertSame(date1, date0);
      assertArrayEquals(new byte[] {(byte)32, (byte)19, (byte)0, (byte)19, (byte)0, (byte)19}, byteArray0);
      assertEquals((byte)19, bigInteger0.byteValue());
      assertEquals((short)19, bigInteger0.shortValue());
      
      Boolean boolean0 = TypeUtils.castToBoolean(bigInteger0);
      assertNotNull(boolean0);
      assertArrayEquals(new byte[] {(byte)32, (byte)19, (byte)0, (byte)19, (byte)0, (byte)19}, byteArray0);
      assertEquals((byte)19, bigInteger0.byteValue());
      assertEquals((short)19, bigInteger0.shortValue());
      assertFalse(boolean0);
      
      Class<Long> class1 = Long.class;
      boolean boolean1 = TypeUtils.isKotlin(class1);
      assertFalse(boolean1);
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      assertSame(classLoader0, classLoader1);
      
      Class<?> class2 = TypeUtils.loadClass("java.util.List", classLoader1);
      assertNotNull(class2);
      assertSame(classLoader1, classLoader0);
      assertSame(classLoader0, classLoader1);
      assertEquals(1537, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals("interface java.util.List", class2.toString());
      assertTrue(class2.isInterface());
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TypeUtils.clearClassMapping();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)99;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)99}, byteArray0);
      assertFalse(boolean0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("ARFX=(w]Ma");
      assertNotNull(outOfMemoryError0);
      assertEquals("java.lang.OutOfMemoryError: ARFX=(w]Ma", outOfMemoryError0.toString());
      assertEquals("ARFX=(w]Ma", outOfMemoryError0.getMessage());
      
      String string0 = TypeUtils.castToString("ARFX=(w]Ma");
      assertNotNull(string0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<AtomicInteger> class0 = AtomicInteger.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("javax.xml.datatype.XMLGregorianCalendar", "java.lang.String@0000000001", "ARFX=(w]Ma", (byte)99);
      assertNotNull(stackTraceElement0);
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("javax.xml.datatype.XMLGregorianCalendar", stackTraceElement0.getClassName());
      assertEquals("ARFX=(w]Ma", stackTraceElement0.getFileName());
      assertEquals(99, stackTraceElement0.getLineNumber());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(stackTraceElement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : javax.xml.datatype.XMLGregorianCalendar.java.lang.String@0000000001(ARFX=(w]Ma:99)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("_asm_list_item_deser__");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("J#");
      assertNull(class0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      assertNotNull(numberDeserializer0);
      assertEquals(2, numberDeserializer0.getFastMatchToken());
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      Double double0 = TypeUtils.castToDouble(bigDecimal0);
      assertNotNull(double0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(71, 71, 71);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=71,MONTH=71,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=71,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      Class<String> class0 = String.class;
      Date date0 = new Date(1379L);
      assertNotNull(date0);
      
      mockGregorianCalendar0.setTime(date0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1379,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=1,MILLISECOND=379,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      String string0 = TypeUtils.cast((Object) mockGregorianCalendar0, class0, parserConfig0);
      assertNotNull(string0);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1379,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=1,MILLISECOND=379,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockThread mockThread0 = new MockThread(" &u");
          assertNotNull(mockThread0);
          assertFalse(mockThread0.isInterrupted());
          assertFalse(mockThread0.isDaemon());
          assertEquals(0, mockThread0.countStackFrames());
          
          ClassLoader classLoader0 = mockThread0.getContextClassLoader();
          assertNotNull(classLoader0);
          assertFalse(mockThread0.isInterrupted());
          assertFalse(mockThread0.isDaemon());
          assertEquals(0, mockThread0.countStackFrames());
          
          ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
          assertNotNull(classLoader1);
          assertFalse(classLoader1.equals((Object)classLoader0));
          
          Class<Short> class0 = Short.TYPE;
          assertNotNull(class0);
          assertFalse(class0.isEnum());
          assertFalse(class0.isSynthetic());
          assertTrue(class0.isPrimitive());
          assertEquals("short", class0.toString());
          assertFalse(class0.isAnnotation());
          assertFalse(class0.isInterface());
          assertFalse(class0.isArray());
          assertEquals(1041, class0.getModifiers());
          
          Class<Long> class1 = Long.TYPE;
          assertNotNull(class1);
          assertFalse(class1.isInterface());
          assertTrue(class1.isPrimitive());
          assertFalse(class1.isArray());
          assertEquals("long", class1.toString());
          assertFalse(class1.isAnnotation());
          assertEquals(1041, class1.getModifiers());
          assertFalse(class1.isEnum());
          assertFalse(class1.isSynthetic());
          
          Class<Boolean> class2 = Boolean.TYPE;
          assertNotNull(class2);
          assertTrue(class2.isPrimitive());
          assertFalse(class2.isArray());
          assertFalse(class2.isInterface());
          assertFalse(class2.isEnum());
          assertEquals("boolean", class2.toString());
          assertFalse(class2.isAnnotation());
          assertFalse(class2.isSynthetic());
          assertEquals(1041, class2.getModifiers());
          
          Class<Double> class3 = Double.TYPE;
          assertNotNull(class3);
          assertEquals(1041, class3.getModifiers());
          assertFalse(class3.isEnum());
          assertFalse(class3.isSynthetic());
          assertFalse(class3.isInterface());
          assertTrue(class3.isPrimitive());
          assertFalse(class3.isArray());
          assertEquals("double", class3.toString());
          assertFalse(class3.isAnnotation());
          
          Type[] typeArray0 = new Type[3];
          typeArray0[0] = (Type) class0;
          typeArray0[1] = (Type) class0;
          typeArray0[2] = (Type) class0;
          ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[2]);
          assertNotNull(parameterizedTypeImpl0);
          
          ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
          assertNotNull(aSMDeserializerFactory0);
          
          ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
          assertNotNull(parserConfig0);
          assertFalse(ParserConfig.AUTO_SUPPORT);
          assertFalse(parserConfig0.fieldBased);
          assertTrue(parserConfig0.compatibleWithJavaBean);
          assertTrue(parserConfig0.isAsmEnable());
          assertFalse(parserConfig0.isAutoTypeSupport());
          
          NumberFormatException numberFormatException0 = new NumberFormatException("fastjson.parser.autoTypeSupport");
          assertNotNull(numberFormatException0);
          assertEquals("fastjson.parser.autoTypeSupport", numberFormatException0.getMessage());
          assertEquals("java.lang.NumberFormatException: fastjson.parser.autoTypeSupport", numberFormatException0.toString());
          
          SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(numberFormatException0);
          assertNotNull(sQLTimeoutException0);
          assertEquals("fastjson.parser.autoTypeSupport", numberFormatException0.getMessage());
          assertEquals("java.lang.NumberFormatException: fastjson.parser.autoTypeSupport", numberFormatException0.toString());
          assertEquals("java.sql.SQLTimeoutException: java.lang.NumberFormatException: fastjson.parser.autoTypeSupport", sQLTimeoutException0.toString());
          assertEquals("java.lang.NumberFormatException: fastjson.parser.autoTypeSupport", sQLTimeoutException0.getMessage());
          assertNull(sQLTimeoutException0.getSQLState());
          assertEquals(0, sQLTimeoutException0.getErrorCode());
          
          // Undeclared exception!
          try { 
            TypeUtils.cast((Object) sQLTimeoutException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // autoType is not support. java.sql.SQLTimeoutException
             //
             verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockThread mockThread0 = new MockThread("L");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      Class<Byte> class0 = Byte.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertNotNull(class1);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals("byte", class1.toString());
      assertTrue(class1.isPrimitive());
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(boolean0);
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      int int0 = Byte.compare((byte)1, (byte)92);
      assertEquals((-91), int0);
      
      Dimension dimension0 = new Dimension();
      assertNotNull(dimension0);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(dimension0);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) timeUnit0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : MILLISECONDS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<?> class0 = TypeUtils.getClassFromMapping("k(Mw0(mHt::5([#r");
      assertNull(class0);
      
      Class<Object> class1 = Object.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class1, map0);
      assertNotNull(list0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = TypeUtils.decapitalize("k(Mw0(mHt::5([#r");
      assertNotNull(string0);
      assertEquals("k(Mw0(mHt::5([#r", string0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, map0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      boolean boolean1 = TypeUtils.isKotlin((Class) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      MockDate mockDate0 = new MockDate(31967442829360L);
      assertNotNull(mockDate0);
      assertEquals("Fri Jan 03 13:13:49 GMT 2983", mockDate0.toString());
      
      Date date0 = TypeUtils.castToSqlDate(mockDate0);
      assertNotNull(date0);
      assertEquals("Fri Jan 03 13:13:49 GMT 2983", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      InstantiationException instantiationException0 = new InstantiationException("");
      assertNotNull(instantiationException0);
      assertEquals("java.lang.InstantiationException: ", instantiationException0.toString());
      assertEquals("", instantiationException0.getMessage());
      
      MessageFormat messageFormat0 = new MessageFormat("");
      assertNotNull(messageFormat0);
      
      Time time0 = TypeUtils.castToSqlTime("");
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError((String) null);
      assertNotNull(outOfMemoryError0);
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(outOfMemoryError0.getMessage());
      
      String string0 = ParserConfig.DENY_PROPERTY;
      assertNotNull(string0);
      assertEquals("fastjson.parser.deny", string0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader2);
      assertSame(classLoader2, classLoader0);
      assertSame(classLoader2, classLoader1);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      
      Boolean boolean0 = new Boolean("fastjson.parser.deny");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("fastjson.parser.deny");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : fastjson.parser.deny
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(mockJapaneseDate0);
      assertTrue(boolean0);
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      Set<Map.Entry<String, Field>> set0 = (Set<Map.Entry<String, Field>>)treeMap0.entrySet();
      assertNotNull(set0);
      assertEquals(0, treeMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Class<Point> class0 = Point.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      assertNotNull(treeMap1);
      assertEquals(0, treeMap1.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap1, (Map<String, Field>) treeMap0, true, propertyNamingStrategy0);
      assertNotNull(list0);
      assertEquals(0, treeMap0.size());
      assertEquals(0, treeMap1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<Double> class1 = Double.TYPE;
      assertNotNull(class1);
      assertEquals("double", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class0;
      Class<Long> class2 = Long.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("scan true error", class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. scan true error
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      InstantiationException instantiationException0 = new InstantiationException("");
      assertNotNull(instantiationException0);
      assertEquals("java.lang.InstantiationException: ", instantiationException0.toString());
      assertEquals("", instantiationException0.getMessage());
      
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      SQLClientInfoException sQLClientInfoException0 = TypeUtils.castToJavaBean((Object) treeMap0, class1);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, treeMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      assertNotNull(numberDeserializer0);
      assertEquals(2, numberDeserializer0.getFastMatchToken());
      
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("");
      assertNotNull(mockNullPointerException0);
      
      java.util.Date date0 = TypeUtils.castToDate("");
      assertNull(date0);
      
      Class<?> class2 = TypeUtils.getClassFromMapping("rtP'");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Dimension dimension0 = new Dimension(1026, (-1613668925));
      assertNotNull(dimension0);
      assertEquals((-1613668925), dimension0.height);
      assertEquals(1026, dimension0.width);
      assertEquals(1026.0, dimension0.getWidth(), 0.01);
      assertEquals((-1.613668925E9), dimension0.getHeight(), 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "SUPPRESSED_SENTINEL";
      Locale locale0 = TypeUtils.toLocale("SUPPRESSED_SENTINEL");
      assertNotNull(locale0);
      assertEquals("suppressed_SENTINEL", locale0.toString());
      assertEquals("SENTINEL", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("suppressed", locale0.getLanguage());
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      // Undeclared exception!
      try { 
        MockDateFormat.getDateTimeInstance(177, 1026);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1026
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)103;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)103, (byte)103, (byte)103}, byteArray0);
      assertEquals((short)26471, bigInteger0.shortValue());
      assertEquals((byte)103, bigInteger0.byteValue());
      
      int int0 = bigInteger0.signum();
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)103, (byte)103, (byte)103}, byteArray0);
      assertEquals((short)26471, bigInteger0.shortValue());
      assertEquals((byte)103, bigInteger0.byteValue());
      assertEquals(1, int0);
      
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)103, (byte)103, (byte)103}, byteArray0);
      assertEquals((short)26471, bigInteger1.shortValue());
      assertEquals((byte)103, bigInteger1.byteValue());
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      System.setCurrentTimeMillis(1609L);
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(bigInteger1);
      assertNotNull(bigDecimal0);
      assertNotSame(bigInteger1, bigInteger0);
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)103, (byte)103, (byte)103}, byteArray0);
      assertEquals((short)26471, bigInteger1.shortValue());
      assertEquals((byte)103, bigInteger1.byteValue());
      assertEquals((short)26471, bigDecimal0.shortValue());
      assertEquals((byte)103, bigDecimal0.byteValue());
      assertTrue(bigInteger1.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("float");
      assertNotNull(outOfMemoryError0);
      assertEquals("java.lang.OutOfMemoryError: float", outOfMemoryError0.toString());
      assertEquals("float", outOfMemoryError0.getMessage());
      
      String string0 = ParserConfig.DENY_PROPERTY;
      assertNotNull(string0);
      assertEquals("fastjson.parser.deny", string0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) outOfMemoryError0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.lang.OutOfMemoryError: float
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("J#");
      assertNull(class0);
      
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "J#", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLClientInfoException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("xuD,#~Imy");
      assertNull(class0);
      
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
      
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      SQLNonTransientException sQLNonTransientException0 = TypeUtils.cast((Object) null, class1, (ParserConfig) null);
      assertNull(sQLNonTransientException0);
      
      Locale locale0 = TypeUtils.toLocale("xuD,#~Imy");
      assertNotNull(locale0);
      assertEquals("xud,#~imy", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("xud,#~imy", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      Class<MockMinguoDate> class2 = MockMinguoDate.class;
      MockMinguoDate mockMinguoDate0 = TypeUtils.castToJavaBean((Map<String, Object>) treeMap0, class2, (ParserConfig) null);
      assertNotNull(mockMinguoDate0);
      assertEquals(0, treeMap0.size());
      
      DataTruncation dataTruncation0 = new DataTruncation(47, false, false, (-1631996908), (-1881415760), (Throwable) null);
      assertNotNull(dataTruncation0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      boolean boolean1 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy1);
      assertNotNull(list0);
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      
      List<FieldInfo> list1 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      int int0 = Byte.compare((byte) (-1), (byte) (-85));
      assertEquals(84, int0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      
      Dimension dimension0 = new Dimension();
      assertNotNull(dimension0);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(propertyNamingStrategy0);
      assertNotSame(propertyNamingStrategy0, propertyNamingStrategy1);
      assertTrue(boolean0);
      assertFalse(propertyNamingStrategy0.equals((Object)propertyNamingStrategy1));
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) list0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(6, 6);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(6, rectangle0.height);
      assertEquals(6, rectangle0.width);
      assertEquals(6.0, rectangle0.getHeight(), 0.01);
      assertEquals(6.0, rectangle0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle0.getCenterX(), 0.01);
      assertEquals(6.0, rectangle0.getMaxX(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(3.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(6.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      
      Dimension dimension0 = new Dimension(0, (-1620016031));
      assertNotNull(dimension0);
      assertEquals(0, dimension0.width);
      assertEquals((-1620016031), dimension0.height);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals((-1.620016031E9), dimension0.getHeight(), 0.01);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<TimeUnit> class0 = TimeUnit.class;
      ParserConfig parserConfig1 = new ParserConfig((ClassLoader) null);
      assertNotNull(parserConfig1);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "g", class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      ThreadGroup threadGroup0 = new ThreadGroup("z'Avv-Yg\"tO2z`");
      assertNotNull(threadGroup0);
      assertEquals("z'Avv-Yg\"tO2z`", threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread(threadGroup0, "kotlin.jvm.internal.DefaulCostructorMarker");
      assertNotNull(mockThread0);
      assertEquals("z'Avv-Yg\"tO2z`", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      MockThread mockThread1 = new MockThread(mockThread0, "z'Avv-Yg\"tO2z`");
      assertNotNull(mockThread1);
      assertEquals("z'Avv-Yg\"tO2z`", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(mockThread1);
      assertNotNull(mockThread2);
      assertEquals("z'Avv-Yg\"tO2z`", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      assertNotNull(classLoader0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertEquals("z'Avv-Yg\"tO2z`", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      
      InstantiationException instantiationException0 = new InstantiationException("(`2dRhG}n2O");
      assertNotNull(instantiationException0);
      assertEquals("java.lang.InstantiationException: (`2dRhG}n2O", instantiationException0.toString());
      assertEquals("(`2dRhG}n2O", instantiationException0.getMessage());
      
      boolean boolean0 = TypeUtils.isNumber("kotlin.jvm.internal.DefaulCostructorMarker");
      assertFalse(boolean0);
      
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
      
      Class<Timestamp> class2 = Timestamp.class;
      boolean boolean1 = TypeUtils.isKotlin(class2);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("getSuppressed", ".dUB%H5b", instantiationException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.lang.InstantiationException: (`2dRhG}n2O", instantiationException0.toString());
      assertEquals("(`2dRhG}n2O", instantiationException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("getSuppressed", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: getSuppressed", sQLTimeoutException0.toString());
      assertEquals(".dUB%H5b", sQLTimeoutException0.getSQLState());
      
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Class<?> class3 = TypeUtils.loadClass("X~K1{#P_W0}k", classLoader0);
      assertNull(class3);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertEquals("z'Avv-Yg\"tO2z`", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Integer integer0 = new Integer((-1369));
      assertNotNull(integer0);
      assertEquals((-1369), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -1369
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "java.util.IdentityHashMap";
      Class<?> class0 = TypeUtils.getClassFromMapping("java.util.IdentityHashMap");
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("class java.util.IdentityHashMap", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isPrimitive());
      
      Class<?> class1 = TypeUtils.getClassFromMapping("java.util.IdentityHashMap");
      assertNotNull(class1);
      assertSame(class1, class0);
      assertFalse(class1.isAnnotation());
      assertEquals("class java.util.IdentityHashMap", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      
      boolean boolean0 = TypeUtils.isGenericParamType(class1);
      assertSame(class1, class0);
      assertFalse(class1.isAnnotation());
      assertEquals("class java.util.IdentityHashMap", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertTrue(boolean0);
      
      Rectangle rectangle0 = new Rectangle();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      DecimalFormat decimalFormat0 = new DecimalFormat("&L1T>");
      assertNotNull(decimalFormat0);
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("&L1T>#", decimalFormat0.toPattern());
      assertEquals("-&L1T>", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("&L1T>#", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("&L1T>", decimalFormat0.getPositivePrefix());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) decimalFormat0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLClientInfoException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy1);
      assertNotNull(list0);
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      
      List<FieldInfo> list1 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      MessageFormat messageFormat0 = new MessageFormat("L");
      assertNotNull(messageFormat0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      Dimension dimension0 = new Dimension();
      assertNotNull(dimension0);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("istoString");
      assertNotNull(illegalAccessError0);
      assertEquals("istoString", illegalAccessError0.getMessage());
      assertEquals("java.lang.IllegalAccessError: istoString", illegalAccessError0.toString());
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(illegalAccessError0);
      assertEquals("istoString", illegalAccessError0.getMessage());
      assertEquals("java.lang.IllegalAccessError: istoString", illegalAccessError0.toString());
      assertTrue(boolean0);
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "L", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : L
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Hashtable<SQLException, Double> hashtable0 = new Hashtable<SQLException, Double>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      Double double0 = new Double((-197.0303135150235));
      assertNotNull(double0);
      assertEquals((-197.0303135150235), (double)double0, 0.01);
      
      Function<Exception, Double> function0 = (Function<Exception, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("xuD,#~Imy");
      assertNull(class0);
      
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
      
      Rectangle rectangle0 = new Rectangle();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xuD,#~Imy");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Dimension dimension0 = new Dimension();
      assertNotNull(dimension0);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      
      rectangle0.setSize(dimension0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      
      Dimension dimension1 = new Dimension();
      assertNotNull(dimension1);
      assertEquals(0, dimension1.height);
      assertEquals(0, dimension1.width);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertTrue(dimension1.equals((Object)dimension0));
      
      Dimension dimension2 = new Dimension(0, 0);
      assertNotNull(dimension2);
      assertEquals(0, dimension2.width);
      assertEquals(0, dimension2.height);
      assertEquals(0.0, dimension2.getWidth(), 0.01);
      assertEquals(0.0, dimension2.getHeight(), 0.01);
      assertTrue(dimension2.equals((Object)dimension0));
      assertTrue(dimension2.equals((Object)dimension1));
      
      String string0 = rectangle0.toString();
      assertNotNull(string0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", string0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      Date date0 = TypeUtils.castToSqlDate(mockGregorianCalendar0);
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      int int0 = Byte.compare((byte) (-22), (byte)89);
      assertEquals((-111), int0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      assertNotNull(javaObjectDeserializer0);
      assertEquals(12, javaObjectDeserializer0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(javaObjectDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer@96
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("_asm_list_item_deser__");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : _asm_list_item_deser__
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Hashtable<SQLException, Double> hashtable0 = new Hashtable<SQLException, Double>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      
      Double double0 = new Double((-197.0303135150235));
      assertNotNull(double0);
      assertEquals((-197.0303135150235), (double)double0, 0.01);
      
      Function<Exception, Double> function0 = (Function<Exception, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      System.setCurrentTimeMillis(1314L);
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(hashtable0);
      assertNull(bigDecimal0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Set<Map.Entry<String, Field>> set0 = (Set<Map.Entry<String, Field>>)treeMap0.entrySet();
      assertNotNull(set0);
      assertEquals(0, treeMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) treeMap0, true, propertyNamingStrategy0);
      assertNotNull(list0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, treeMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<Double> class1 = Double.TYPE;
      assertNotNull(class1);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals("double", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      assertNotNull(parameterizedTypeImpl0);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals("double", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, typeArray0[0]);
      assertNotNull(parameterizedTypeImpl1);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals("double", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(6, 6);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(6, rectangle0.width);
      assertEquals(6, rectangle0.height);
      assertEquals(3.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(6.0, rectangle0.getWidth(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(6.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(6.0, rectangle0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle0.getCenterY(), 0.01);
      assertEquals(6.0, rectangle0.getMaxX(), 0.01);
      
      Dimension dimension0 = new Dimension(0, (-1620016031));
      assertNotNull(dimension0);
      assertEquals(0, dimension0.width);
      assertEquals((-1620016031), dimension0.height);
      assertEquals((-1.620016031E9), dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      
      long long0 = TypeUtils.fnv1a_64_lower("L");
      assertEquals((-5808551375595768565L), long0);
      
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) linkedHashMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      assertNotNull(list0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(301, (-1620016031), (-1620016031), 301, 45, 728);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=301,MONTH=-1620016031,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1620016031,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=301,HOUR_OF_DAY=301,MINUTE=45,SECOND=728,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      java.util.Date date0 = TypeUtils.castToDate(mockGregorianCalendar0);
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=301,MONTH=-1620016031,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1620016031,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=301,HOUR_OF_DAY=301,MINUTE=45,SECOND=728,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      
      VerifyError verifyError0 = new VerifyError(" }.jW-,b&#NA2e");
      assertNotNull(verifyError0);
      assertEquals("java.lang.VerifyError:  }.jW-,b&#NA2e", verifyError0.toString());
      assertEquals(" }.jW-,b&#NA2e", verifyError0.getMessage());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null, verifyError0);
      assertNotNull(sQLNonTransientException0);
      assertEquals("java.lang.VerifyError:  }.jW-,b&#NA2e", verifyError0.toString());
      assertEquals(" }.jW-,b&#NA2e", verifyError0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(verifyError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.VerifyError:  }.jW-,b&#NA2e
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      Type[] typeArray0 = new Type[4];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class0 = TypeUtils.loadClass("n|uk{j", classLoader1, false);
      assertNull(class0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      typeArray0[0] = (Type) null;
      Class<Short> class1 = Short.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertEquals("short", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      
      typeArray0[1] = (Type) class1;
      Class<Long> class2 = Long.TYPE;
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertEquals("long", class2.toString());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      
      typeArray0[2] = (Type) class2;
      Class<Boolean> class3 = Boolean.TYPE;
      assertNotNull(class3);
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isAnnotation());
      assertEquals("boolean", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      
      typeArray0[3] = (Type) class3;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class2, typeArray0[3]);
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertEquals("long", class2.toString());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class2, typeArray0[2]);
      assertNotNull(parameterizedTypeImpl1);
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertEquals("long", class2.toString());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      
      MockJapaneseDate mockJapaneseDate1 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate1);
      assertFalse(mockJapaneseDate1.equals((Object)mockJapaneseDate0));
      
      InterruptedException interruptedException0 = new InterruptedException();
      assertNotNull(interruptedException0);
      assertEquals("java.lang.InterruptedException", interruptedException0.toString());
      assertNull(interruptedException0.getMessage());
      
      interruptedException0.printStackTrace();
      assertEquals("java.lang.InterruptedException", interruptedException0.toString());
      assertNull(interruptedException0.getMessage());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) interruptedException0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.lang.InterruptedException -> long
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      Type[] typeArray0 = new Type[4];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader0.clearAssertionStatus();
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      Class<?> class0 = TypeUtils.loadClass("n|uk{j", classLoader1, false);
      assertNull(class0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      typeArray0[0] = (Type) null;
      Class<Short> class1 = Short.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      
      typeArray0[1] = (Type) class1;
      Class<Long> class2 = Long.TYPE;
      assertNotNull(class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertEquals("long", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, typeArray0[1]);
      assertNotNull(parameterizedTypeImpl0);
      
      NumberFormatException numberFormatException0 = new NumberFormatException("fastjson.parser.deny");
      assertNotNull(numberFormatException0);
      assertEquals("fastjson.parser.deny", numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException: fastjson.parser.deny", numberFormatException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) numberFormatException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("x<F~wM}LtZz");
      assertFalse(boolean0);
      
      Dimension dimension0 = new Dimension(1314, 1138);
      assertNotNull(dimension0);
      assertEquals(1138, dimension0.height);
      assertEquals(1314, dimension0.width);
      assertEquals(1138.0, dimension0.getHeight(), 0.01);
      assertEquals(1314.0, dimension0.getWidth(), 0.01);
      
      long long0 = TypeUtils.fnv1a_64_lower("g");
      assertEquals((-5808559072177166042L), long0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      ParserConfig parserConfig1 = new ParserConfig((ClassLoader) null);
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      Class<TimeUnit> class0 = TimeUnit.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) properties0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockThread mockThread0 = new MockThread("ZVWT5J(\"v!z#gzV");
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader1.clearAssertionStatus();
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ClassLoader classLoader2 = classLoader1.getParent();
      assertNotNull(classLoader2);
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      
      ClassLoader classLoader3 = classLoader1.getParent();
      assertNotNull(classLoader3);
      assertSame(classLoader3, classLoader2);
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader3.equals((Object)classLoader1));
      assertFalse(classLoader3.equals((Object)classLoader0));
      
      Class<?> class0 = TypeUtils.loadClass("ZVWT5J(\"v!z#gzV", classLoader1, true);
      assertNull(class0);
      assertFalse(classLoader1.equals((Object)classLoader3));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(classLoader1.equals((Object)classLoader2));
      
      Class<Short> class1 = Short.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      
      Class<Long> class2 = Long.TYPE;
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertEquals("long", class2.toString());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = TypeUtils.cast((Object) null, (Type) class1, parserConfig0);
      assertNull(sQLTransactionRollbackException0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Hashtable<SQLException, Double> hashtable0 = new Hashtable<SQLException, Double>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertNotNull(type0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockThread mockThread0 = new MockThread("L");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      
      Double double0 = new Double(1894.01567704);
      assertNotNull(double0);
      assertEquals(1894.01567704, (double)double0, 0.01);
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertNotNull(class1);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("float", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      
      Hashtable<SQLException, Double> hashtable0 = new Hashtable<SQLException, Double>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Double double1 = new Double(1894.01567704);
      assertNotNull(double1);
      assertEquals(1894.01567704, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Function<SQLException, Double> function0 = (Function<SQLException, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(double1).when(function0).apply(any(java.sql.SQLException.class));
      Double double2 = hashtable0.computeIfAbsent(sQLRecoverableException0, function0);
      assertNotNull(double2);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertEquals(1894.01567704, (double)double2, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double2);
      assertNotNull(bigInteger0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertEquals((short)1894, bigInteger0.shortValue());
      assertEquals((byte)102, bigInteger0.byteValue());
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      MockThread.dumpStack();
      Character character0 = TypeUtils.castToChar("");
      assertNull(character0);
      
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer((Class<?>) class1, (Type) class0);
      assertNotNull(objectDeserializer0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockThread0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TypeUtils.clearClassMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader0.clearAssertionStatus();
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      Class<?> class0 = TypeUtils.loadClass("float", classLoader0, true);
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      Field field0 = ParserConfig.getFieldFromCache("float", treeMap0);
      assertNull(field0);
      assertEquals(0, treeMap0.size());
      
      Field field1 = ParserConfig.getFieldFromCache("kIDt>n[o3N#rC? u;", treeMap0);
      assertNull(field1);
      assertEquals(0, treeMap0.size());
      
      WeakHashMap<String, ClientInfoStatus> weakHashMap0 = new WeakHashMap<String, ClientInfoStatus>();
      assertNotNull(weakHashMap0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("float", "n|uk{j", weakHashMap0, sQLNonTransientConnectionException0);
      assertNotNull(sQLClientInfoException0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: float", sQLClientInfoException0.toString());
      assertEquals("float", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("n|uk{j", sQLClientInfoException0.getSQLState());
      
      long long0 = TypeUtils.fnv1a_64_lower("n|uk{j");
      assertEquals((-229811795369529846L), long0);
      
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) jdk8DateCodec0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError((String) null);
      assertNotNull(outOfMemoryError0);
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      
      String string0 = ParserConfig.DENY_PROPERTY;
      assertNotNull(string0);
      assertEquals("fastjson.parser.deny", string0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "fastjson.parser.deny", (Type) class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fastjson.parser.deny\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Dimension dimension0 = new Dimension(1026, (-1613668925));
      assertNotNull(dimension0);
      assertEquals((-1613668925), dimension0.height);
      assertEquals(1026, dimension0.width);
      assertEquals(1026.0, dimension0.getWidth(), 0.01);
      assertEquals((-1.613668925E9), dimension0.getHeight(), 0.01);
      
      Double double0 = new Double(1026);
      assertNotNull(double0);
      assertEquals(1026.0, (double)double0, 0.01);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp(double0);
      assertNotNull(timestamp0);
      assertEquals(26000000, timestamp0.getNanos());
      assertEquals("1970-01-01 00:00:01.026", timestamp0.toString());
      
      Dimension dimension1 = new Dimension();
      assertNotNull(dimension1);
      assertEquals(0, dimension1.height);
      assertEquals(0, dimension1.width);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertFalse(dimension1.equals((Object)dimension0));
      
      dimension0.setSize(dimension1);
      assertNotSame(dimension0, dimension1);
      assertNotSame(dimension1, dimension0);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension1.height);
      assertEquals(0, dimension1.width);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertTrue(dimension0.equals((Object)dimension1));
      assertTrue(dimension1.equals((Object)dimension0));
      
      dimension0.height = 8;
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(8.0, dimension0.getHeight(), 0.01);
      
      Class<VerifyError> class0 = VerifyError.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(dimension0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.Dimension[width=0,height=8]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "istoLocalizedPattern");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
      
      Class<SQLDataException> class0 = SQLDataException.class;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.sql.SQLDataException", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Field field0 = ParserConfig.getFieldFromCache("scan true error", weakHashMap0);
      assertNull(field0);
      
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo((String) null, class0, class0, class1, (Field) null, (-676), (-676), 27);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      Class<TimeUnit> class0 = TimeUnit.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNotNull(type0);
  }
}
