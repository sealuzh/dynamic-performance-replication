/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:04:54 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis((-1426L));
      ClassWriter classWriter0 = new ClassWriter(4176);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "=7S@-^:db", "=7S@-^:db", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2951);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), "", "", "", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2951);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      ClassWriter classWriter1 = new ClassWriter(2);
      fieldWriter0.visitAnnotation("", false);
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2832));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 19, "Synthetic", "Synthetic", "Synthetic", "Synthetic");
      fieldWriter0.visitEnd();
      ByteVector byteVector0 = new ByteVector(2);
      ByteVector byteVector1 = byteVector0.putInt(19);
      ByteVector byteVector2 = byteVector1.put12(19, 448);
      fieldWriter0.put(byteVector2);
      assertSame(byteVector1, byteVector2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4350);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "Synthetic", "");
      fieldWriter0.getSize();
      fieldWriter0.visitAnnotation("", true);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putInt((-3413));
      ByteVector byteVector2 = byteVector1.putInt((-3413));
      fieldWriter0.put(byteVector2);
      System.setCurrentTimeMillis(2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2951);
      FieldWriter fieldWriter0 = classWriter0.firstField;
      classWriter0.firstField = null;
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 2, "", "", "", "");
      byte[] byteArray0 = ClassWriter.TYPE;
      fieldWriter1.visitAnnotation("yV3h};0.Ot[IMT", true);
      fieldWriter1.getSize();
      fieldWriter1.visitEnd();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 2951;
      ClassWriter classWriter0 = new ClassWriter(2951);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      String string0 = "";
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, 1, "", "", "", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2951);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("yV3h};0.Ot[IMT", false);
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.put12(1647, 2);
      ByteVector byteVector1 = byteVector0.putInt(2);
      fieldWriter0.put(byteVector1);
      AnnotationVisitor annotationVisitor1 = fieldWriter0.visitAnnotation("4\"O~/`lK<", false);
      assertNotSame(annotationVisitor1, annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2951);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitAnnotation("'_B", false);
      ByteVector byteVector1 = classWriter0.pool;
      byteVector0.put12(1, 1);
      fieldWriter0.getSize();
      int int0 = Type.INT;
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2951);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), "l", "l", "", (Object) null);
      classWriter0.visitAnnotation("", true);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      System.setCurrentTimeMillis(8257536);
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2832));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2832), "Synthetic", "Synthetic", "Synthetic", "Synthetic");
      fieldWriter0.visitEnd();
      ByteVector byteVector0 = new ByteVector(2);
      ByteVector byteVector1 = byteVector0.putInt((-2832));
      byteVector1.put12(2, 448);
      fieldWriter0.put(byteVector1);
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2066, "", "6irH3n[]", "{$GE]YBig", (Object) null);
      classWriter0.visitOuterClass("", "6irH3n[]", "");
      Attribute attribute0 = new Attribute("{$GE]YBig");
      fieldWriter0.visitAttribute(attribute0);
      fieldWriter0.visitAnnotation("", true);
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.put11(49, 2066);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "", (Object) null);
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      fieldWriter0.visitEnd();
      System.setCurrentTimeMillis(1L);
      fieldWriter0.visitEnd();
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2951);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), "*", "*", "", (Object) null);
      classWriter0.version = 509;
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putUTF8("@'Kdbx[W?beh`7E");
      classWriter0.threshold = 2951;
      fieldWriter0.put(byteVector0);
      byteVector0.putInt(2778);
      fieldWriter0.getSize();
      System.setCurrentTimeMillis(1);
      int int0 = ObjectStreamConstants.baseWireHandle;
      System.setCurrentTimeMillis(2778);
      fieldWriter0.visitEnd();
      fieldWriter0.getSize();
      ByteVector byteVector2 = byteVector1.putInt((-2835));
      fieldWriter0.put(byteVector2);
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }
}
