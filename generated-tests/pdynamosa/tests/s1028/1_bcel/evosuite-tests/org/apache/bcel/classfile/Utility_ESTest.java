/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 05:48:04 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)83;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.convertString("sipush\t\t21248");
      assertEquals("sipush\t\t21248", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utility.clearBit(45, (-2736));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)77;
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("4~5", "CONSTANT_Float", true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.typeOfSignature("H`D;kB[Cq%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H`D;kB[Cq%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte)16);
      Constant[] constantArray0 = new Constant[6];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      constantArray0[1] = (Constant) constantClass0;
      byteSequence0.skip(0L);
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Constant[] constantArray1 = new Constant[0];
      ConstantPool constantPool1 = new ConstantPool(constantArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("lmul", "nop", true);
      try { 
        Utility.decode("lmul", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Signature");
      assertEquals((byte)9, byte0);
      
      Utility.methodSignatureReturnType("Signature");
      String string0 = Utility.methodSignatureReturnType("Signature", false);
      assertEquals("short", string0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "short";
      objectArray0[1] = (Object) "short";
      objectArray0[2] = (Object) "short";
      objectArray0[3] = (Object) "Signature";
      objectArray0[4] = (Object) "short";
      objectArray0[5] = (Object) "Signature";
      objectArray0[6] = (Object) "Signature";
      objectArray0[7] = (Object) "Signature";
      objectArray0[8] = (Object) "short";
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals("short, short, short, Signature, short, Signature, Signature, Signature, short", string1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = new Object();
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpgt\t\t#-21703", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("RB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RB'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short short0 = Utility.searchOpcode("(qT6IC.&D");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = Utility.fillup("", (byte) (-89), true, 'k');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Q3=HHUF0*M8", "", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.getSignature("org.apache.bcel.classfile.ConstantClass");
      Utility.accessToString(1940, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-30);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)16, (byte) (-33));
      constantMethodref0.setClassIndex((-413));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.compactClassName("Illegal", "int", false);
      // Undeclared exception!
      try { 
        Utility.decode("z(BP$0!8a}4~3JbkVtX", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0!\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)30, (byte)30);
      constantMethodref0.setClassIndex((byte)30);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aaload", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-104);
      byteArray0[0] = (byte) (-104);
      byteArray0[2] = (byte) (-104);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-104), 1065);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantMethodref1;
      constantArray0[1] = (Constant) constantMethodref1;
      constantArray0[2] = (Constant) constantMethodref1;
      constantArray0[3] = (Constant) constantMethodref0;
      constantArray0[4] = (Constant) constantMethodref1;
      constantArray0[5] = (Constant) constantMethodref0;
      constantArray0[6] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 286, true);
      assertEquals("0:    dcmpg\n1:    nop\n2:    dcmpg\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Integer integer0 = new Integer((-1196));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-44);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.typeOfSignature("areturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: areturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('d');
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString(1693, true);
      assertEquals("public protected static final transient abstract", string0);
      
      String string1 = Utility.fillup("public protected static final transient abstract", 1693, true, 'd');
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.getSignature("!D>s,D1ZmgPMIcAR*Q|");
      assertEquals("L!D>s,D1ZmgPMIcAR*Q|;", string2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = Utility.compactClassName("V", "V", true);
      assertEquals("", string0);
      
      String string1 = Utility.classOrInterface(71);
      assertEquals("class", string1);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "N9iqG&>M&E5Y$ps");
      byte byte0 = Utility.typeOfSignature("[R");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      String string0 = Utility.signatureToString("LG_yt;`|NlspD", true);
      assertEquals("G_yt", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.getSignature("LG_yt;`|NlspD");
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("&5Ch72Y4*V0", stringArray0);
      assertEquals("()L&5Ch72Y4*V0;", string1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(84, false);
      int int0 = 1365;
      Utility.format(1365, 1365, false, '7');
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.compactClassName("V", "V", true);
      int int0 = 55;
      Utility.convertString("V");
      Utility.typeOfSignature("V");
      try { 
        Utility.decode("PkN$ ,$:D,", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1749), (-1749));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("l2d", string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byteSequence0;
      objectArray0[1] = (Object) "l2d";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.compactClassName("baload");
      assertEquals("baload", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte) (-115), (byte) (-115), byteSequence0, (ConstantPool) null);
      Attribute.removeAttributeReader("f2d");
      try { 
        Utility.methodSignatureToString("f2d", (String) null, "f2d", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: f2d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)44;
      Utility.equals(byteArray0, byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(46, (byte)126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -42
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-22);
      Utility.encode(byteArray0, false);
      String string0 = "8JEM'm\"F\"";
      try { 
        Utility.typeOfSignature("!{ON'wlO%w;\u0000cYGM:g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {ON'wlO%w;\u0000cYGM:g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.clearBit(761, 761);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("ineg", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ineg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.methodSignatureReturnType("ZbO", false);
      String string0 = "Wh9m0OXxR_@YcR'`x";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Wh9m0OXxR_@YcR'`x", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wh9m0OXxR_@YcR'`x'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", end_pc = ");
      Utility.compactClassName("fstore_3", "U", true);
      byte[] byteArray0 = new byte[7];
      Utility.encode(byteArray0, false);
      Utility.classOrInterface(958);
      Utility.isJavaIdentifierPart('i');
      Utility.printArray((Object[]) null, true);
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = Utility.compactClassName("V", "V", true);
      assertEquals("", string0);
      
      String string1 = Utility.methodTypeToSignature("V", (String[]) null);
      assertEquals("()LV;", string1);
      
      String string2 = Utility.methodSignatureToString("()LV;", "V", "");
      assertEquals("V V()", string2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)10;
      Utility.encode(byteArray0, false);
      String string0 = "8JEM'm\"F\"";
      try { 
        Utility.typeOfSignature("8JEM'm\"F\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8JEM'm\"F\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("CONSTANT_Float");
      assertEquals("char", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.signatureToString("CONSTANT_Float", true);
      try { 
        Utility.typeOfSignature("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wide");
      String string0 = "lshr";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lshr");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('m');
      String string1 = "lookupswitch";
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "lookupswitch", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)16, (byte) (-33));
      constantMethodref0.setClassIndex((-413));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('H');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0);
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.classOrInterface(476);
      assertEquals("class", string2);
      
      byte[] byteArray0 = new byte[0];
      String string3 = Utility.toHexString(byteArray0);
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)7;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-2), 4188);
      assertEquals("0:    impdep1\n1:    iaload\n2:    istore_0\n3:    <illegal opcode>\n4:    iconst_4\n", string0);
      
      String string1 = Utility.compactClassName("h)_RbrP4l?#q", "n^-SH)Nu@,E7V", false);
      assertEquals("h)_RbrP4l?#q", string1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = Utility.clearBit(760, 760);
      assertEquals(760, int0);
      
      ConstantDouble constantDouble0 = new ConstantDouble(760);
      Constant[] constantArray0 = new Constant[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<Unknown>");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2202), (int) (byte) (-5), false);
      assertEquals("0:    frem\n1:    monitorenter\n2:    fload\t\t%251\n4:    <illegal opcode>\n5:    iconst_2\n6:    <illegal opcode>\n7:    fcmpg\n", string0);
      
      short short0 = Utility.searchOpcode("lshr");
      assertEquals((short)123, short0);
      
      String string1 = Utility.convertString("lshr");
      assertEquals("lshr", string1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.methodSignatureReturnType("LG_yt;`|NlspD", false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "G_yt";
      objectArray0[1] = (Object) "G_yt";
      objectArray0[2] = (Object) "G_yt";
      objectArray0[3] = (Object) "G_yt";
      objectArray0[4] = (Object) "G_yt";
      objectArray0[5] = (Object) "G_yt";
      objectArray0[6] = (Object) "G_yt";
      objectArray0[7] = (Object) "LG_yt;`|NlspD";
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      int int0 = 0;
      Utility.classOrInterface(0);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.convertString("[VD_``z4!,C0!4");
      assertEquals("[VD_``z4!,C0!4", string0);
      
      Utility.typeOfSignature("[VD_``z4!,C0!4");
      byte byte0 = Utility.typeOfSignature("[VD_``z4!,C0!4");
      assertEquals((byte)13, byte0);
      
      String string1 = Utility.methodSignatureReturnType("[VD_``z4!,C0!4", false);
      assertEquals("void[]", string1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)84;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)16, 2174);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-802), (byte)16);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1, (-6469));
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)124;
      byteArray0[8] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(32.937);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(40, 0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(3226, 2983);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantMethodref1;
      constantArray0[3] = (Constant) constantDouble0;
      constantArray0[4] = (Constant) constantMethodref0;
      constantArray0[5] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantMethodref1.clone();
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-62);
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-109);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)103, 1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_2", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utility.methodSignatureReturnType("Signature");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "short";
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2174, (-1907));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantMethodref1;
      constantArray0[1] = (Constant) constantMethodref1;
      constantArray0[2] = (Constant) constantMethodref0;
      constantArray0[3] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2149, (int) (byte) (-67), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.clearBit((-2483), 91);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.isJavaIdentifierPart('!');
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)93;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte)34;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray1[3] = (byte)106;
      byteArray1[4] = (byte)34;
      byteArray1[5] = (byte)109;
      Utility.equals(byteArray1, byteArray0);
      String string0 = "4~5";
      Utility.compactClassName("", "4~5", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.accessToString(0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("-k.hz%*8(k", "areturn", "areturn", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -k.hz%*8(k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utility.clearBit((-2483), 91);
      try { 
        Utility.typeOfSignature("&k.N6bEx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &k.N6bEx
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = (-1242);
      Utility.format(1907, (-1242), true, 'o');
      try { 
        Utility.typeOfSignature("3Kl#-h@`/2s~) ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3Kl#-h@`/2s~) 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utility.isJavaIdentifierPart('g');
      Utility.compactClassName("");
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("0000", string0);
      
      String string1 = Utility.classOrInterface((byte)48);
      assertEquals("class", string1);
      
      String string2 = Utility.getSignature("\nAttribute(s) = ");
      assertEquals("LAttribute(s);", string2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(16384, 123);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(254, 16384);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)37);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("wide\t(wide)", string0);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-60);
      byteArray1[1] = (byte)74;
      byteArray1[2] = (byte) (-60);
      byteArray1[3] = (byte) (-60);
      byteArray1[4] = (byte) (-60);
      byteArray1[5] = (byte)95;
      byteArray1[6] = (byte) (-60);
      byteArray1[7] = (byte) (-60);
      byteArray1[8] = (byte)95;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)87;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)45;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)87;
      byteArray1[3] = (byte)87;
      byteArray1[4] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[21];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)10;
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("  ", stringArray0);
      assertEquals("()L;", string0);
      
      byte byte0 = Utility.typeOfMethodSignature("()L;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.methodSignatureReturnType("ZbO");
      try { 
        Utility.methodSignatureArgumentTypes(", high = ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = Utility.clearBit((-30), (-30));
      assertEquals((-30), int0);
      
      MockFile mockFile0 = new MockFile("9d$%W re5LuTN\"7\"M");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "9d$%W re5LuTN\"7\"M";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(21L, mockFile0.length());
      
      short short0 = Utility.searchOpcode("9d$%W re5LuTN\"7\"M");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.compactClassName("?aD#wA m{BAK@!6");
      String string0 = Utility.compactClassName(")");
      ConstantMethodref constantMethodref0 = new ConstantMethodref(78, 18);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-2186), (-2186));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.convertString("dadd");
      assertEquals("dadd", string0);
      
      Utility.methodSignatureReturnType("L;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;pLF6EMXNIdi;V");
      boolean boolean0 = Utility.isJavaIdentifierPart('5');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-33), (byte) (-33));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)58;
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "^yIc=3^XoIPk|=L";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "^yIc=3^XoIPk|=L";
      stringArray0[1] = "aOUP&";
      Utility.methodTypeToSignature("^yIc=3^XoIPk|=L", stringArray0);
      Utility.methodSignatureArgumentTypes("(L^yIc=3^XoIPk|=L;LaOUP&;)L^yIc=3^XoIPk|=L;", true);
      try { 
        Utility.decode("^yIc=3^XoIPk|=L", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("L<K%|NcQ?&O/y}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<K%|NcQ?&O/y}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(2473);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ifnull\t\t#-14907", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      File file0 = MockFile.createTempFile("multianewarray", (String) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "O@]s_*P!_:[", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      assertEquals(15L, file0.length());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.isJavaIdentifierPart('!');
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)93;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte)106;
      byteArray1[4] = (byte)34;
      byteArray1[5] = (byte)109;
      Utility.equals(byteArray1, byteArray0);
      String string0 = "4~5";
      Utility.compactClassName("", "4~5", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.clearBit(760, 760);
      ConstantDouble constantDouble0 = new ConstantDouble(760);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("if_icmpge\t\t#-16237");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpge\t\t#-16237
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.getSignature("8ZLN@]?J@W&]");
      assertEquals("L8ZLN@]?J@W&];", string0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-69);
      byteArray0[0] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_acmpne\t\t#0", string1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.typeOfSignature("B?");
      Utility.signatureToString("B?", true);
      try { 
        Utility.decode("null", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      String string0 = Utility.getSignature("SENS}>aVE");
      assertEquals("LSENS}>aVE;", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)96;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.convertString("H`D;kB[Cq%{>");
      Utility.compactClassName("H`D;kB[Cq%{>");
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-930), (-1299));
      constantMethodref0.setClassIndex((-1112));
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Utility.clearBit(760, 760);
      String string0 = "aOUP&";
      String string1 = ".jE`\"'7o)WeqJFs";
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature(".jE`\"'7o)WeqJFs", stringArray0);
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("aOUP&", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aOUP&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.replace("R/BfV", "R/BfV", "R/BfV");
      String string0 = "j4EeU(c";
      try { 
        Utility.typeOfSignature("R/BfV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R/BfV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byte byte0 = (byte)87;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)92;
      Utility.toHexString(byteArray0);
      Utility.searchOpcode("5b 57 7e 5c");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("5b 57 7e 5c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5b 57 7e 5c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lor", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = Utility.clearBit(255, 255);
      assertEquals(255, int0);
      
      short short0 = Utility.searchOpcode(">EqSx`/}\"i`h[b*");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.fillup(">EqSx`/}\"i`h[b*", (-1877), false, '>');
      assertEquals(">EqSx`/}\"i`h[b*", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utility.format(55, (-2043), false, 'O');
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_1", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.replace("aMT& ", "aMT& ", "aMT& ");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(Ilva8dJUh7CEFEj", ")", "aMT& ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lva8dJUh7CEFEj'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utility.clearBit(221, 221);
      Utility.compactClassName("void");
      String string0 = Utility.fillup("Double", 78, true, '0');
      ConstantDouble constantDouble0 = new ConstantDouble(78);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "_";
      try { 
        Utility.typeOfSignature("_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = Utility.fillup(";~f{fBp5e~", 10, true, 'o');
      assertEquals(";~f{fBp5e~", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utility.methodSignatureReturnType("CONSTANT_Float");
      Utility.getSignature("char");
      Utility.convertString("~:,NRKl<9|qa}+Lrj");
      try { 
        Utility.typeOfSignature(", low = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , low = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-102));
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmplt\t\t#-24159", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.compactClassName(":$%0 \"4>9e0{:9cl,%", true);
      assertEquals(":$%0 \"4>9e0{:9cl,%", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.isJavaIdentifierPart('H');
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0, false);
      Utility.classOrInterface(476);
      byte[] byteArray1 = new byte[0];
      Utility.toHexString(byteArray1);
      Utility.compactClassName("java.lang.Object@4194080d, java.lang.Object@17627d69, java.lang.Object@290bf503, java.lang.Object@4abef0b6");
      try { 
        Utility.typeOfSignature("java.lang.Object@4194080d, java.lang.Object@17627d69, java.lang.Object@290bf503, java.lang.Object@4abef0b6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@4194080d, java.lang.Object@17627d69, java.lang.Object@290bf503, java.lang.Object@4abef0b6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("LG_yt;`|NlspD", false);
      assertEquals("G_yt", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "G_yt";
      Utility.compactClassName("LG_yt;`|NlspD", "RaS?7vql2^vhm", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.getSignature("kx");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "lstore_3";
      stringArray0[1] = "LG_yt;`|NlspD";
      String string1 = Utility.methodTypeToSignature("LG_yt;`|NlspD", stringArray0);
      assertEquals("(Llstore_3;LLG_yt;`|NlspD;)LLG_yt;`|NlspD;", string1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "^yIc=3^XoIPk|=L";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)125;
      byteArray0[8] = (byte) (-82);
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)101;
      byteArray0[8] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifgt\t\t#32002", string0);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.fillup("ifgt\t\t#32002", (byte)105, true, 'L');
      assertEquals("ifgt\t\t#32002LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL", string1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "D_UOco}~J$j";
      Utility.methodSignatureReturnType("D_UOco}~J$j", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)123, (int) (byte)123, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "eSB/%8@-_3vS`K^", "eSB/%8@-_3vS`K^", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.clearBit(1042, 1042);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("irem", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("LG_yt;`|NlspD", false);
      assertEquals("G_yt", string0);
      
      String string1 = Utility.signatureToString("Fo_PxN{+sG~Xw", false);
      assertEquals("float", string1);
      
      boolean boolean0 = Utility.isSet((-4897), (-1359));
      assertTrue(boolean0);
      
      String string2 = Utility.getSignature("float");
      assertEquals("F", string2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)48;
      Utility.signatureToString("Vg`q~", true);
      Utility.compactClassName("Hx0d;JXzQa77z", "native", true);
      Utility.isJavaIdentifierPart('^');
      // Undeclared exception!
      try { 
        Utility.signatureToString("Lt7p'(S*7#N5", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lt7p'(S*7#N5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload_0", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "NewObject";
      String string1 = "ldc_w";
      Utility.compactClassName("NewObject", "ldc_w", false);
      Utility.isJavaIdentifierPart('\\');
      Utility.compactClassName("NewObject", false);
      Utility.accessToString((-838), false);
      try { 
        Utility.typeOfSignature("NewObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NewObject
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("*'Im&]T0z[xP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[xP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Utility.methodSignatureReturnType("LG_yt;`|NlspD", false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "G_yt";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      Utility.signatureToString("LG_yt;`|NlspD", false);
      try { 
        Utility.typeOfSignature("G_yt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G_yt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = Utility.compactClassName("V", "V", true);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-111);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string1 = Utility.compactClassName("U-", "V", true);
      assertEquals("U-", string1);
      
      byte[] byteArray1 = Utility.decode(";", false);
      assertArrayEquals(new byte[] {(byte)59}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.clearBit(760, 760);
      ConstantDouble constantDouble0 = new ConstantDouble(760);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble1;
      constantArray0[3] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "do~wx?Pt3Q&qSO\"v$,";
      Utility.compactClassName("do~wx?Pt3Q&qSO\"v$,");
      try { 
        Utility.methodSignatureArgumentTypes("do~wx?Pt3Q&qSO\"v$,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: do~wx?Pt3Q&qSO\"v$,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Utility.compactClassName("M2_.zs+SkB$", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = Utility.decode("M2_.zs+SkB$", false);
      assertEquals(11, byteArray1.length);
      
      String string0 = Utility.signatureToString("T&RfSaN4;T7k] z*,\"dO_E`:>UUex");
      assertEquals("&RfSaN4", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("+,^U1|.sDrF!#]N");
      String string0 = Utility.format(1348, (-1502), true, '$');
      assertEquals("1348", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)87;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)26;
      byteArray0[8] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.getSignature("1348");
      assertEquals("L1348;", string1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = (-1242);
      Utility.format(1907, (-1242), true, 'o');
      try { 
        Utility.typeOfSignature("1907");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1907
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("lmul");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lmul'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Signature");
      assertEquals("short", string0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "short";
      objectArray0[2] = (Object) "short";
      objectArray0[3] = (Object) "Signature";
      objectArray0[4] = (Object) "short";
      objectArray0[6] = (Object) "short";
      objectArray0[7] = (Object) "Signature";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore\t\t%57", string1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[7] = (byte)99;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$Q5$A$da$A$A$Ac", string0);
      
      int int0 = Utility.setBit((byte)0, (byte)0);
      assertEquals(1, int0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte) (-38);
      objectArray0[1] = (Object) (byte)53;
      objectArray0[2] = (Object) (byte)16;
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{-38, 53, 16}", string1);
      
      boolean boolean0 = Utility.isSet((byte)0, (byte)16);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Utility.isJavaIdentifierPart('H');
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      Utility.classOrInterface(476);
      int int0 = 0;
      Utility.format(0, (-495), false, 'W');
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.Object@40f7382e, java.lang.Object@56df341e, java.lang.Object@688af763, java.lang.Object@1faf15ca", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@40f7382e, java.lang.Object@56df341e, java.lang.Object@688af763, java.lang.Object@1faf15ca
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Utility.methodSignatureReturnType("Signature");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "short";
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2174, (-1907));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("LG_yt;`|NlspD", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(175, 91);
      Constant[] constantArray0 = new Constant[7];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-29);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.decode("iload_2", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Utility.getSignature("Illegal signature: ");
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)16, (byte) (-33));
      constantMethodref0.setClassIndex((-413));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("dsub", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tH");
      Utility.getSignature("tH");
      Utility.format((-1510), 164, false, 'i');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("tH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `tH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)23;
      byte byte0 = (byte) (-10);
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)23;
      byteArray0[8] = (byte)51;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 122
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)16, (byte) (-33));
      constantMethodref0.setClassIndex((-413));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      String string0 = Utility.convertString("bv00CE^,QJ9C");
      assertEquals("bv00CE^,QJ9C", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = Utility.convertString("H`D;kB[Cq%{>");
      Utility.compactClassName("H`D;kB[Cq%{>");
      Utility.fillup("H`D;kB[Cq%{>", 11, false, '0');
      ConstantDouble constantDouble0 = new ConstantDouble(11);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte) (-3);
      byteArray0[8] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("ZbO", false);
      assertEquals("boolean", string0);
      
      Utility.signatureToString("ZbO", false);
      boolean boolean0 = Utility.isSet(79, 79);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("B?", "B?", "static");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: B?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1749), (-1749));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifeq\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.signatureToString("J}$?|", true);
      try { 
        Utility.typeOfMethodSignature("J}$?|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: J}$?|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "^yIc=3^XoIPk|=L";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[1] = "aOUP&";
      String string0 = Utility.methodTypeToSignature("^yIc=3^XoIPk|=L", stringArray0);
      assertEquals("(L^yIc=3^XoIPk|=L;LaOUP&;)L^yIc=3^XoIPk|=L;", string0);
      
      Utility.methodSignatureArgumentTypes("(L^yIc=3^XoIPk|=L;LaOUP&;)L^yIc=3^XoIPk|=L;", true);
      String string1 = Utility.compactClassName("^yIc=3^XoIPk|=L", "aOUP&", true);
      assertEquals("^yIc=3^XoIPk|=L", string1);
      
      String string2 = Utility.getSignature("aOUP&");
      assertEquals("LaOUP&;", string2);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Utility.methodSignatureReturnType("CONSTANT_Float");
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-101);
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)1;
      Utility.compactClassName("void");
      Utility.searchOpcode("void");
      Utility.fillup("char", (byte)37, true, 'Z');
      try { 
        Utility.decode("charZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Utility.isSet(60, 60);
      Utility.methodTypeToSignature("}3('Al57re", (String[]) null);
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1749), (-1749));
      // Undeclared exception!
      try { 
        Utility.signatureToString("QP<gG3q", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QP<gG3q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(175, 91);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray1 = new Constant[1];
      constantArray1[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray1);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-5), (-2202), false);
      assertEquals("0:    iconst_2\n1:    fcmpg\n2:    frem\n3:    monitorenter\n4:    fload\t\t%251\n", string0);
      
      short short0 = Utility.searchOpcode("0:    iconst_2\n1:    fcmpg\n2:    frem\n3:    monitorenter\n4:    fload\t\t%251\n");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.convertString("0:    iconst_2\n1:    fcmpg\n2:    frem\n3:    monitorenter\n4:    fload\t\t%251\n");
      assertEquals("0:    iconst_2\\n1:    fcmpg\\n2:    frem\\n3:    monitorenter\\n4:    fload\t\t%251\\n", string1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((byte)123);
      ConstantLong constantLong1 = new ConstantLong(2051L);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-738), 113);
      String string0 = "monitorexit";
      ConstantUtf8.getInstance("monitorexit");
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2497), (byte)123);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-2294), 104);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[5];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null, null, null, null, null}", string0);
      
      String string1 = Utility.convertString("N|.6SyTqNL9Db[rDPt");
      assertEquals("N|.6SyTqNL9Db[rDPt", string1);
      
      String string2 = Utility.accessToString(104, true);
      assertEquals("static volatile", string2);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte) (-115);
      byteArray1[2] = (byte)27;
      byteArray1[3] = (byte) (-115);
      Utility.equals(byteArray0, byteArray1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("04[f*[%Pixs>$}H", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[f*[%Pixs>$}H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)93;
      byteArray1[2] = (byte)34;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fOi+8Jb");
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte)49;
      byteArray1[2] = (byte)49;
      byteArray1[3] = (byte) (-106);
      Utility.equals(byteArray0, byteArray1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.convertString("H`D;kB[Cq%{>");
      Utility.compactClassName("H`D;kB[Cq%{>");
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-930), (-1299));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[0] = (byte) (-77);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.methodSignatureReturnType("LG_yt;`|NlspD", false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "G_yt";
      Utility.compactClassName("LG_yt;`|NlspD", "RaS?7vql2^vhm", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = Utility.convertString("\"");
      assertEquals("\\\"", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "<illegal opcode>", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.signatureToString("Invalid type: ", true);
      try { 
        Utility.methodSignatureReturnType("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `int'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)16, (byte) (-33));
      constantMethodref0.setClassIndex((-413));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.convertString("lshl");
      assertEquals("lshl", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "long", "2hW'kCt1rV$_h1%uL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = new Integer(760);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.toString();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1015), (int) (byte)48);
      assertEquals("0:    faload\n1:    faload\n2:    faload\n", string0);
      
      String string1 = Utility.getSignature("org.apache.bcel.classfile.Utility$JavaWriter");
      assertEquals("Lorg/apache/bcel/classfile/Utility$JavaWriter;", string1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-9);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-9));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("ishr", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-18);
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      byte[] byteArray1 = Utility.decode("org.apache.bcel.classfile.Utility$1", false);
      assertEquals(33, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)50;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (-1771));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lload_2
         // 1:    <illegal opcode>
         // 2:    dcmpl
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      short short0 = Utility.searchOpcode("f|:WH!4P]7G;)1)L");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.getSignature("f|:WH!4P]7G;)1)L");
      assertEquals("Lf|:WH!4P]7G;)1)L;", string0);
      
      boolean boolean0 = Utility.isSet(3755, (-2798));
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte) (-17);
      byteArray0[7] = (byte)61;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("00 30 06 00 5b 33 ef 3d", string1);
      
      String string2 = Utility.getSignature("int");
      assertEquals("I", string2);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("IY");
      assertEquals("int", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-3593), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
      
      String string1 = Utility.fillup("", 70, true, 'u');
      assertEquals("uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", string1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_3", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fadd", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = Utility.convertString("bWFYu\"7o6jrtKi");
      assertEquals("bWFYu\\\"7o6jrtKi", string0);
      
      byte[] byteArray0 = Utility.decode("bWFYu\"7o6jrtKi", false);
      assertEquals(14, byteArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "bWFYu\"7o6jrtKi";
      objectArray0[1] = (Object) "bWFYu\"7o6jrtKi";
      objectArray0[2] = (Object) "bWFYu\"7o6jrtKi";
      objectArray0[3] = (Object) "bWFYu\"7o6jrtKi";
      objectArray0[4] = (Object) "bWFYu\"7o6jrtKi";
      objectArray0[5] = (Object) "bWFYu\"7o6jrtKi";
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "bWFYu\"7o6jrtKi";
      objectArray0[8] = (Object) "bWFYu\"7o6jrtKi";
      Utility.signatureToString("Z", false);
      boolean boolean0 = Utility.isSet((-973), (-973));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8ZLN@]?J@W&]");
      Utility.getSignature("8ZLN@]?J@W&]");
      Utility.format((-1510), 1348, false, 'i');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2d", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Utility.clearBit(78, (-1162));
      String string0 = " not found: ";
      Utility.compactClassName(" not found: ", " not found: ", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)40;
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)40;
      Utility.printArray(objectArray0, false, false);
      String string1 = "java.lang.Byte";
      Utility.compactClassName("java.lang.Byte");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, " not found: ", "00 61 ab 28", false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("ZbO", false);
      assertEquals("boolean", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.accessToString(1590, false);
      assertEquals("private protected final synchronized interface abstract", string1);
      
      String string2 = Utility.classOrInterface((byte) (-65));
      assertEquals("interface", string2);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = Utility.clearBit(760, 760);
      assertEquals(760, int0);
      
      ConstantDouble constantDouble0 = new ConstantDouble(760);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      String string0 = Utility.accessToString((int) (byte)10, false);
      assertEquals("private static", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A$A$A$A$A$A", string0);
      
      boolean boolean0 = Utility.isSet((-2292), (byte)16);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "$A$A$A$A$A$A$A$A";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Utility.printArray(objectArray0);
      Utility.convertString("{$A$A$A$A$A$A$A$A, java.lang.Object@284167a5}");
      String string1 = Utility.accessToString((-54), false);
      assertEquals("private static volatile transient native interface abstract strictfp synthetic annotation enum", string1);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('w');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-104);
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)118;
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("\"", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-85);
      byte[] byteArray1 = new byte[14];
      byteArray1[0] = (byte) (-85);
      byteArray1[1] = (byte)76;
      byteArray1[2] = (byte) (-85);
      byteArray1[3] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(12, byteSequence0.getIndex());
      assertEquals("lookupswitch\tdefault = 0, npairs = 0 ()", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)27;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("putstatic", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.printf(", class=", (Object[]) null);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      short short0 = Utility.searchOpcode(", class=");
      assertEquals((short) (-1), short0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "wide";
      stringArray0[1] = ", class=";
      stringArray0[2] = ", class=";
      String string0 = Utility.methodTypeToSignature("peUhM", stringArray0);
      assertEquals("(Lwide;L,;L,;)LpeUhM;", string0);
      
      String string1 = Utility.accessToString((-3500));
      assertEquals("protected final volatile interface synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-114);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("d2i", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1985, 62, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-33);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)16, (byte)21);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("iload\t\t%16", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.clearBit((-1165), (-1165));
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("M5CGdcB", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M5CGdcB'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", ", ", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Utility.fillup("_(^]vlq6f>A+)JDC", (-2571), false, 'q');
      String string0 = Utility.accessToString((-600), false);
      assertEquals("static synchronized transient native abstract strictfp synthetic annotation enum", string0);
      
      int int0 = Utility.clearBit(3819, (-600));
      assertEquals(3819, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType(")D");
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string1 = Utility.compactClassName("double", ")D", true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1749), (-1749));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      String string0 = ")9VQ24*a8[e~o";
      try { 
        Utility.typeOfSignature(")9VQ24*a8[e~o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )9VQ24*a8[e~o
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*+pHG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: pHG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Object object0 = new Object();
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      BCELComparator bCELComparator0 = Constant.getComparator();
      constantDouble0.clone();
      Constant.setComparator(bCELComparator0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpgt\t\t#-21703", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "if_icmpgt\t\t#-21703";
      stringArray0[3] = "";
      stringArray0[4] = "DVr";
      stringArray0[5] = "if_icmpgt\t\t#-21703";
      stringArray0[6] = "";
      String string1 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(L;L;Lif_icmpgt;L;LDVr;Lif_icmpgt;L;)L;", string1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1749), (-1749));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("oc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: oc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "'";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "'";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "'";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = "L2G_yt%`|Nl6pD";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("L2G_yt%`|Nl6pD", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L2G_yt%`|Nl6pD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-104);
      try { 
        Utility.typeOfSignature("%Q$UHo 'tFl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %Q$UHo 'tFl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      boolean boolean0 = Utility.isJavaIdentifierPart('B');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1749), (-1749));
      Utility.compactClassName("-gfy.NN2]UG", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(136);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.decode("-gfy.NN2]UG", false);
      Utility.toHexString(byteArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantMethodType0.accept(emptyVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)59, (-870), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 15278. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Utility.convertString("H`D;kB[Cq%{>");
      Utility.compactClassName("H`D;kB[Cq%{>");
      byte byte0 = (byte) (-126);
      byte[] byteArray0 = new byte[6];
      byte byte1 = (byte)48;
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-126);
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-126));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(3872, (byte) (-126));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, 1, 1, false);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.DelegateFileFilter");
      String string0 = Utility.format(1907, 1907, true, 'W');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 630, 82, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("TF");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.replace("uN#)pB:", "TF", (String) null);
      assertEquals("uN#)pB:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = null;
      int int0 = 1156;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1156, (-72));
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("\bZF`");
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantMethodref0;
      constantArray0[3] = (Constant) constantMethodref0;
      constantArray0[4] = (Constant) constantMethodref0;
      constantArray0[5] = (Constant) constantMethodref0;
      constantArray0[6] = (Constant) constantMethodref0;
      constantArray0[7] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('q');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-90);
      byteArray0[0] = (byte)74;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("77kyq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 77kyq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = Utility.compactClassName("Invalid type: ", "Invalid type: ", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte) (-65);
      byteArray0[8] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, 3, (-3135));
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.format(314, (-1314), true, 'H');
      assertEquals("314", string2);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpge\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-119);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("D_UOco}~J$j", "4~5", false);
      assertEquals("D_UOco}~J$j", string0);
      
      String string1 = Utility.signatureToString("D_UOco}~J$j", false);
      assertEquals("double", string1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(175, 91);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantDouble constantDouble0 = new ConstantDouble(91);
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantMethodref0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-98);
      ConstantClass constantClass0 = new ConstantClass((byte) (-98));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.printArray((Object[]) constantArray0);
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.Character", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Character
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Utility.methodSignatureReturnType("CONSTANT_Float");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1749), (byte)83);
      constantArray0[0] = (Constant) constantNameAndType0;
      // Undeclared exception!
      try { 
        Utility.signatureToString("QP<gG3q", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QP<gG3q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)3;
      Utility.toHexString(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.encode(byteArray0, false);
      Utility.getSignature("E$D");
      try { 
        Utility.typeOfSignature("E$D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E$D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.setBit((-3147), (-3147));
      boolean boolean0 = true;
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[2] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("aOUP&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aOUP&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      int int0 = 10;
      Object object0 = new Object();
      String string0 = "(_UA-~o*hS!7VvC";
      try { 
        Utility.typeOfMethodSignature("(_UA-~o*hS!7VvC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (_UA-~o*hS!7VvC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-71);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "m#";
      stringArray0[1] = "invokespecial";
      String string0 = Utility.methodTypeToSignature("m#", stringArray0);
      assertEquals("(Lm#;Linvokespecial;)Lm#;", string0);
      
      String string1 = Utility.methodSignatureToString("(Lm#;Linvokespecial;)Lm#;", "m#", "(Lm#;Linvokespecial;)Lm#;");
      assertEquals("(Lm#;Linvokespecial;)Lm#; m# m#(m# arg1, invokespecial arg2)", string1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)84;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-127);
      Utility.encode(byteArray0, false);
      Utility.methodTypeToSignature("y$l$c2$3d$81", (String[]) null);
      Utility.methodSignatureToString("()Ly$l$c2$3d$81;", "()Ly$l$c2$3d$81;", "y$l$c2$3d$81", true);
      try { 
        Utility.methodSignatureArgumentTypes("y$l$c2$3d$81 y$l$c2$3d$81 ()Ly$l$c2$3d$81;()");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: y$l$c2$3d$81 y$l$c2$3d$81 ()Ly$l$c2$3d$81;()
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Utility.convertString("R/BfV");
      Utility.compactClassName("j4EeU(c");
      Utility.fillup("j4EeU(c", 162, true, '0');
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      Utility.classOrInterface(178);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)37;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("#i+-|U5o4K%8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #i+-|U5o4K%8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("@ScgI8;F6Vwl5J", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `@ScgI8;F6Vwl5J'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2d", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Utility.clearBit(760, 760);
      Constant[] constantArray0 = new Constant[4];
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-110);
      byteArray0[3] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.format((-3619), 0, true, 'u');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)63;
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("lconst_0");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantInteger constantInteger0 = new ConstantInteger(dataInputStream0);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantInteger constantInteger1 = new ConstantInteger((byte) (-102));
      constantArray0[3] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.signatureToString("invokevirtual", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokevirtual'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(175, 91);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantMethodref0;
      String string0 = Utility.compactClassName("RaS?7vql2^vhm", "GQbJ+{/dn3yA", false);
      assertEquals("RaS?7vql2^vhm", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte) (-53);
      byteArray1[2] = (byte) (-65);
      byteArray1[3] = (byte)107;
      byteArray1[4] = (byte) (-115);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      short short0 = Utility.searchOpcode("<6aCV%$^~,*Mv");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-85);
      Utility.signatureToString("LG_yt;V", true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = Utility.convertString("R/BfV");
      Utility.compactClassName("j4EeU(c");
      Utility.fillup("j4EeU(c", 162, true, '0');
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      Utility.classOrInterface(178);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.typeOfSignature("F1'");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantLong constantLong0 = new ConstantLong((byte)6);
      constantArray0[0] = (Constant) constantLong0;
      ConstantLong constantLong1 = new ConstantLong(0L);
      constantArray0[1] = (Constant) constantLong1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = null;
      try {
        constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("XE90Il0c1tP3yp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XE90Il0c1tP3yp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-126);
      byteArray0[3] = (byte)36;
      ConstantClass constantClass0 = new ConstantClass(946);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("U)OH>]M0~F{.(?S[64#", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U)OH>]M0~F{.(?S[64#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.format((-3619), 0, true, 'u');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-102);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Utility.replace("Only eeme", "Only eeme", "Only eeme");
      try { 
        Utility.typeOfSignature("Only eeme");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Only eeme
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.replace(", ff9et=", ", ff9et=", ", ff9et=");
      String string0 = "f&";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureToString("tI-v", "f&", "f&", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: tI-v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-416), (-416));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore\t\t%16", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 166, (int) (byte)39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("T&x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T&x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.isJavaIdentifierPart('>');
      String string0 = Utility.accessToString(2171);
      String string1 = Utility.compactClassName("return");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)16, (byte) (-33));
      constantMethodref0.setClassIndex((-413));
      try { 
        Utility.typeOfSignature("QC^E]}3]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QC^E]}3]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Utility.accessToString(217);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "tQr9&eie(CT@*", "f|:wh!4p]7g;)1)l", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("7%_b/FZ';^9JG");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-59));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@dLFo[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @dLFo[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("8ZLN@]?J@W&]");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      int int0 = 171;
      Utility.isSet(171, 171);
      Utility.isJavaIdentifierPart('s');
      try { 
        Utility.methodSignatureArgumentTypes("<init>", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <init>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      int int0 = Utility.clearBit(3819, 814);
      assertEquals(3819, int0);
      
      String string0 = "?HH:F";
      try { 
        Utility.typeOfSignature("?HH:F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?HH:F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("dstore_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dstore_2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Utility.codeToString(byteArray0, (ConstantPool) null, (-3568), (int) (byte) (-66));
      Utility.compactClassName("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", " @R,.", false);
      Utility.decode("(SC>Qs$W1", false);
      Utility.searchOpcode("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n");
      Utility.decode("", false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-66);
      byteArray1[1] = (byte) (-66);
      byteArray1[2] = (byte) (-66);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-74), 56);
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      Utility.encode(byteArray0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(87);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "$Q$A$A$A$A$A$A$A");
      Utility.printArray(printStream0, (Object[]) null);
      assertSame(printStream0, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      int int0 = (-3);
      boolean boolean0 = true;
      Utility.accessToString((-3));
      String string0 = "GZ^`(~zhw[Uc7)3Oit";
      Utility.accessToString((-3), true);
      try { 
        Utility.typeOfMethodSignature("GZ^`(~zhw[Uc7)3Oit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GZ^`(~zhw[Uc7)3Oit
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "^yIc=3^XoIPk|=L";
      stringArray0[1] = "aOUP&";
      Utility.methodTypeToSignature("^yIc=3^XoIPk|=L", stringArray0);
      Utility.methodSignatureArgumentTypes("(L^yIc=3^XoIPk|=L;LaOUP&;)L^yIc=3^XoIPk|=L;", true);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)0, (byte)0);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      constantArray0[5] = (Constant) constantInterfaceMethodref0;
      constantArray0[6] = (Constant) constantInterfaceMethodref0;
      constantArray0[7] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.isJavaIdentifierPart('X');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 33, (-330));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Utility.clearBit(760, 760);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      boolean boolean0 = false;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-85);
      byteArray1[1] = (byte) (-85);
      byteArray1[2] = (byte) (-85);
      byteArray1[3] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readChar();
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = Utility.compactClassName("7)m?K{UBP4t5U/", "V", true);
      assertEquals("7)m?K{UBP4t5U.", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)34;
      byteArray0[8] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      byteSequence0.readUnsignedByte();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      int int0 = Utility.clearBit(760, 760);
      assertEquals(760, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)109;
      byteArray0[3] = (byte)109;
      byteArray0[6] = (byte)77;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("4~5", "4~5", false);
      assertEquals("4~5", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, false);
      String string1 = Utility.compactClassName("static", ".x2vZj", true);
      assertEquals("static", string1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Utility.setBit((-22), (-22));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-30);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Utility.typeOfSignature("LG_yt;`|NlspD");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong((byte)14);
      ConstantLong constantLong1 = new ConstantLong(2051L);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = null;
      try {
        constantInterfaceMethodref1 = new ConstantInterfaceMethodref(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Utility.clearBit(760, 760);
      ConstantDouble constantDouble0 = new ConstantDouble(760);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string0 = "";
      try { 
        Utility.methodSignatureToString("", "", "tu$KQs'Ta?Yv%SsIW,Y", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$9e$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = Utility.decode("$9e$A$A$A$A$A", false);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", end_pc = ");
      Utility.compactClassName("fstore_3", "U", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte) (-61);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)78, 80, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 20006. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8ZLN@]?J@W&]");
      Utility.getSignature("8ZLN@]?J@W&]");
      Utility.format((-1510), 1348, false, 'z');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-56);
      try { 
        Utility.typeOfSignature("eFA2cJgDZ@y@}M(zLF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: eFA2cJgDZ@y@}M(zLF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)52;
      byteArray1[1] = (byte)17;
      byteArray1[2] = (byte)17;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)13;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)52;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)83;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)17, 2627, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[2];
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)0, (-2094));
      assertEquals("0:    nop\n1:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8ZLN@]?J@W&]");
      String string0 = Utility.getSignature("8ZLN@]?J@W&]");
      assertEquals("L8ZLN@]?J@W&];", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string1 = Utility.printArray((Object[]) constantArray0, true);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Utility.getSignature("G>_k?3ZC=/*V");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)18;
      Utility.compactClassName("LG>_k?3ZC=/*V;", "g", false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("U0uToA[z~,F%KdQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U0uToA[z~,F%KdQ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(0L);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = Utility.isJavaIdentifierPart('3');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Utility.compactClassName("The size must be non-negative", "new", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("The size must be non-negative", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The size must be non-negative
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      int int0 = Utility.clearBit((-2483), 91);
      assertEquals((-134220211), int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iinc\t\t%125\t0", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = Utility.signatureToString("Invalid type: ", true);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)25, (-1306), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      int int0 = Utility.clearBit(760, 760);
      assertEquals(760, int0);
      
      ConstantDouble constantDouble0 = new ConstantDouble(760);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      constantDouble0.toString();
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.accessToString(255);
      assertEquals("public private protected static final synchronized volatile transient", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("aload_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aload_1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      int int0 = Utility.setBit(23, 23);
      assertEquals(8388631, int0);
      
      String string0 = Utility.compactClassName("8@^d", "8@^d", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Utility.clearBit(1042, 1042);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.compactClassName(". Constant pool size is: ", ". Constant pool size is: ", false);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.decode(":F#DD.kO", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)105;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)47);
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Signature");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "short";
      objectArray0[2] = (Object) "short";
      Utility.compactClassName("", "short", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-118);
      byteArray0[7] = (byte) (-118);
      byteArray0[8] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Utility.isJavaIdentifierPart('!');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1749), (byte)83);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2, 2676);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aastore", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.classOrInterface((byte)105);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-84);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("PmYSUY!/=E*GST!l0", stringArray0);
      assertEquals("()LPmYSUY!/=E*GST!l0;", string0);
      
      Utility.methodSignatureArgumentTypes("()LPmYSUY!/=E*GST!l0;", true);
      Utility.getSignature("()LPmYSUY!/=E*GST!l0;");
      String string1 = Utility.getSignature("<");
      assertEquals("L<;", string1);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)53;
      Utility.isSet((byte)53, 104);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)53;
      objectArray0[1] = (Object) (byte)16;
      objectArray0[2] = (Object) (byte)16;
      objectArray0[3] = (Object) (byte)16;
      Utility.printArray(objectArray0);
      Utility.convertString("N|.6SyTqNL9Db[rDPt");
      Utility.accessToString((-2292), false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("float", "y2", "'$XS'", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)27;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)27, (int) (byte)27, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((-2683.6423387));
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantDouble constantDouble1 = new ConstantDouble((-993.8591930219229));
      ConstantDouble constantDouble2 = new ConstantDouble(constantDouble1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("aload_1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aload_1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "^yIc=3^XoIPk|=L";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)124;
      byteArray0[8] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      int int0 = Utility.clearBit(760, 760);
      assertEquals(760, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)109;
      byteArray0[3] = (byte)109;
      byteArray0[6] = (byte)109;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("4~5", "4~5", false);
      assertEquals("4~5", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, false);
      String string1 = Utility.compactClassName("static", ".x2vZj", true);
      assertEquals("static", string1);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = "<cIjY+O(YYq";
      try { 
        Utility.typeOfSignature("<cIjY+O(YYq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <cIjY+O(YYq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Utility.classOrInterface(171);
      Utility.accessToString(171);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\"O\":+`Ae*~6\"", "HzU:y(mk)~W{-", "aload_1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"O\":+`Ae*~6\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = "9zIc:JuP54~G";
      Utility.getSignature("9zIc:JuP54~G");
      String string1 = "x2xt:3*<flOx6";
      try { 
        Utility.methodSignatureToString("", "x2xt:3*<flOx6", "", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-1844), (-1844), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "D_UOco}~J$";
      stringArray0[1] = "void";
      stringArray0[2] = "[YD_``z4!,C0!4";
      stringArray0[3] = "D_UOco}~J$";
      stringArray0[4] = "[YD_``z4!,C0!4";
      stringArray0[5] = "D_UOco}~J$";
      stringArray0[6] = "[YD_``z4!,C0!4";
      stringArray0[7] = "D_UOco}~J$";
      stringArray0[8] = "y=d+$B9b]GS7T";
      try { 
        Utility.methodTypeToSignature("D_UOco}~J$", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte) (-111));
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-68);
      byteArray0[6] = (byte)80;
      byteArray0[6] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      Utility.signatureToString("LG_yt;`|NlspD", true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("^3u$q?>@", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^3u$q?>@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("iw=U:nG^Gx$Rx9", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iw=U:nG^Gx$Rx9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("PMGClass", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PMGClass'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)36;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("iw=U:nG^Gx$Rx9", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iw=U:nG^Gx$Rx9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Utility.replace("\"", "\"", "\"");
      Utility.isJavaIdentifierPart('\"');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "\"";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "\"";
      objectArray0[3] = (Object) "\"";
      objectArray0[4] = (Object) "\"";
      objectArray0[5] = (Object) "\"";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      String string0 = "+:NEu( H(N";
      try { 
        Utility.typeOfSignature("+:NEu( H(N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :NEu( H(N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((-2174.120625931));
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)37;
      byteArray1[1] = (byte)37;
      byteArray1[2] = (byte) (-71);
      byteArray1[3] = (byte)37;
      byteArray1[4] = (byte)2;
      byteArray1[5] = (byte)37;
      byteArray1[6] = (byte)39;
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-74);
      byteArray2[1] = (byte)39;
      byteArray2[2] = (byte) (-71);
      byteArray2[3] = (byte)2;
      byteArray2[4] = (byte)2;
      byteArray2[5] = (byte) (-71);
      byteArray2[6] = (byte) (-71);
      Utility.equals(byteArray1, byteArray2);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray3, (ConstantPool) null, 134, (int) (byte)39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = Utility.format(1907, (-1242), true, 'o');
      assertEquals("1907", string0);
      
      String string1 = Utility.getSignature("1907");
      assertEquals("L1907;", string1);
      
      short short0 = Utility.searchOpcode("checkcast");
      assertEquals((short)192, short0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Utility.methodSignatureReturnType("Jz9GTI0lD[z@%x^\"85C");
      Utility.compactClassName("dreturn", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("s|2B.goZI4&#d", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `s|2B.goZI4&#d'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w!ZEwin_5pBnh");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-122);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-76), (int) (byte) (-68));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(175, 91);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantDouble constantDouble0 = new ConstantDouble(91);
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantMethodref0;
      constantArray0[4] = (Constant) constantMethodref0;
      constantArray0[5] = (Constant) constantMethodref0;
      constantArray0[6] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantMethodref0.clone();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)75;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      constantPool1.toString();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("astore_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `astore_0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte) (-115);
      byteArray1[2] = (byte)27;
      byteArray1[3] = (byte)43;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.getSignature("getConstantString called with illegal tag ");
      assertEquals("LgetConstantString;", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Utility.getSignature("+B9QSq8UGR*");
      Utility.isJavaIdentifierPart('A');
      Utility.typeOfSignature("+B9QSq8UGR*");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("PN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[S*TW09DLgTt*wJM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [S*TW09DLgTt*wJM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.reset();
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("1e 7b 1e 1e", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Utility.methodSignatureReturnType("ZbO", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-22);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = "&r/Iz$aa<3z#X#p";
      try { 
        Utility.methodSignatureArgumentTypes("&r/Iz$aa<3z#X#p", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &r/Iz$aa<3z#X#p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)125;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)39, 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("8ZLN@]?J@W&]");
      Utility.format((-1510), 186, true, 'i');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Rc^rjt", "org.apache.bcel.classfile.ConstantClass", "L8ZLN@]?J@W&];", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Rc^rjt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byte[] byteArray1 = new byte[0];
      Utility.equals(byteArray0, byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 612, 4, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.accessToString(1353, false);
      assertEquals("public static volatile native abstract", string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-92);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-92);
      byteArray1[1] = (byte) (-46);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("KGt{(ZLfXW7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KGt{(ZLfXW7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Utility.format((-3619), 0, true, 'u');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)63;
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("lconst_0");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantInteger constantInteger0 = new ConstantInteger(dataInputStream0);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantInteger constantInteger1 = new ConstantInteger((byte) (-102));
      constantArray0[3] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte) (-92);
      byteArray0[8] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)20, (int) (byte) (-60), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      int int0 = 187;
      Utility.setBit(187, 0);
      String string0 = "";
      boolean boolean0 = false;
      Utility.compactClassName("", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1614);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = Utility.getSignature("hn&9j^bT@>XWe");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-38);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Utility.clearBit(760, 760);
      try { 
        Utility.typeOfSignature(". Constant pool size is: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: . Constant pool size is: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isJavaIdentifierPart('H');
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 708, false, 'g');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = "U";
      try { 
        Utility.typeOfSignature("U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.accessToString(377);
      String string0 = "org.apache.bcel.classfile.ConstantMethodType";
      int int0 = 488;
      boolean boolean0 = true;
      Utility.fillup("org.apache.bcel.classfile.ConstantMethodType", 488, true, 'L');
      Utility.replace("public static final synchronized volatile native", "org.apache.bcel.classfile.ConstantMethodType", "org.apache.bcel.classfile.ConstantMethodType");
      Utility.compactClassName("public static final synchronized volatile native", true);
      Utility.accessToString(85, true);
      Utility.setBit((-388), 73);
      try { 
        Utility.typeOfSignature("/FsWdg.x<QWB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /FsWdg.x<QWB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)81;
      byteArray1[1] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fastore", string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(\"", "(\"", "(\"", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("2h%E5@/5tqyAuwG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2h%E5@/5tqyAuwG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Utility.methodSignatureReturnType("LG_yt;`|NlspD", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("G_yt", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G_yt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1749), (-1749));
      Utility.compactClassName("native", " ", true);
      Utility.isJavaIdentifierPart('^');
      String string0 = Utility.compactClassName(" ", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("fneg", string0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = "Only eeme";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Only eeme");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Only eeme'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Constant.getComparator();
      Constant.setComparator((BCELComparator) null);
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)19;
      byteArray0[2] = (byte) (-85);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = Utility.getSignature("Y~T?#");
      assertEquals("LY~T?#;", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte)32;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-1));
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-31), (int) (byte)8);
      assertEquals("0:    impdep2\n1:    dstore\t\t%8\n3:    castore\n4:    <illegal opcode>\n5:    lload_2\n", string1);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = "JbK9c3";
      Utility.typeOfSignature("JbK9c3");
      try { 
        Utility.typeOfSignature(" (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("5L8$f.W", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"f.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Utility.getSignature("*T;/<X");
      Utility.classOrInterface((-479));
      Utility.getSignature("3X2Ahm*CN");
      Utility.getSignature("*T;/<X");
      // Undeclared exception!
      try { 
        Utility.signatureToString("*T;/<X", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `*T;/<X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)16;
      byteArray0[3] = (byte)16;
      String string0 = Utility.encode(byteArray0, true);
      String string1 = Utility.replace("$l$8b$I$A$A$A$A$A$A$A", "&)H{@4x6f-4N91aMBt{", "$l$8b$I$A$A$A$A$A$A$A");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w!ZEwin_5pBnh");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[3] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("CONSTANT_Float");
      assertEquals("char", string0);
      
      String string1 = Utility.signatureToString("CONSTANT_Float");
      assertEquals("char", string1);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = true;
      Utility.accessToString(0, true);
      String string0 = "GZ^`(~zhw[Uc7)3Oit";
      Utility.compactClassName("GZ^`(~zhw[Uc7)3Oit", true);
      try { 
        Utility.typeOfMethodSignature("GZ^`(~zhw[Uc7)3Oit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GZ^`(~zhw[Uc7)3Oit
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", end_pc = ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)125;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("astore\t\t%199", string0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      int int0 = 0;
      Utility.accessToString(0);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = Utility.accessToString(0, true);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-104);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)126;
      Utility.toHexString(byteArray0);
      Utility.searchOpcode("+,^U1|.sDrF!#]N");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)100, 11, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("LG_yt;`|NlspD", false);
      assertEquals("G_yt", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "G_yt";
      byte[] byteArray0 = new byte[2];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, 2, (int) (byte)53, false);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)88;
      String string0 = Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)113;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "frem");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lrem", string0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte) (-109);
      byteArray1[2] = (byte) (-109);
      byteArray1[3] = (byte) (-109);
      byteArray1[4] = (byte) (-109);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Utility.convertString("'");
      Utility.decode("\\'", false);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("Ah;", "\\'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\\'\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = Utility.compactClassName("fstor-_0", "fstor-_0", false);
      assertEquals("fstor-_0", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1151), (byte)83);
      String string1 = Utility.signatureToString("CnzsU;:lyaon", false);
      assertEquals("char", string1);
      
      byte byte0 = Utility.typeOfSignature("CnzsU;:lyaon");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1749), (-1749));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-115);
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte) (-115);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-115), (int) (byte) (-108));
      try { 
        Utility.typeOfMethodSignature("0:    lcmp\n1:    f2d\n2:    f2d\n3:    f2d\n4:    nop\n5:    f2d\n6:    f2d\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    lcmp
         // 1:    f2d
         // 2:    f2d
         // 3:    f2d
         // 4:    nop
         // 5:    f2d
         // 6:    f2d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("8ZLN@]?J@W&]");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte) (-90);
      byteArray0[8] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("n:+fi[g}-FnZG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `n:+fi[g}-FnZG'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName("\"", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)124;
      byteArray0[8] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpne\t\t#18812", string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("RB", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RB'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = Utility.compactClassName("The size must be non-negative", "new", false);
      assertEquals("The size must be non-negative", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.compactClassName("istore_1", "istore_1", false);
      assertEquals("istore_1", string1);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Utility.getSignature("fload_1");
      Utility.accessToString((-1613296428), true);
      Utility.isJavaIdentifierPart('A');
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Utility.replace("invokevirtual", "invokevirtual", (String) null);
      Utility.setBit(157, (-635));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("null", (String) null, (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[3] = (Object) null;
      Utility.printArray(objectArray0, true, true);
      int int0 = 2091;
      Utility.accessToString(2091, false);
      try { 
        Utility.typeOfMethodSignature("{null, null, null, null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {null, null, null, null}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureReturnType("Exception while looking for class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exception while looking for class '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("ZbO", false);
      assertEquals("boolean", string0);
      
      Utility.signatureToString("ZbO", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.accessToString((int) (byte)107, false);
      assertEquals("public private static synchronized volatile", string1);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Utility.compactClassName("The size must be non-negative", "new", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("The size must be non-negative", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The size must be non-negative
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("4;Q1$C*Qe{(R;'5lfx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `4;Q1$C*Qe{(R;'5lfx'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      Utility.encode(byteArray0, false);
      Utility.classOrInterface((byte)0);
      Utility.getSignature("\nAttribute(s) = ");
      try { 
        Utility.methodSignatureToString("LAttribute(s);", "Invalid method signature: ", "", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LAttribute(s);
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      int int0 = Utility.clearBit(1042, 1042);
      assertEquals(1042, int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.accessToString((int) (byte)87);
      assertEquals("public private protected final volatile", string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "'";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "'";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "'";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[8] = (Object) null;
      Utility.printArray(objectArray0, false, false);
      Utility.searchOpcode("jsr");
      Utility.printArray(objectArray0, false, true);
      Utility.classOrInterface((-239));
      Utility.setBit((-239), 88);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)45;
      byteArray1[2] = (byte) (-100);
      byteArray1[3] = (byte)45;
      byteArray1[4] = (byte)51;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)45, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Utility.clearBit(1042, 1042);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.typeOfSignature(", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("LG_yt;`|NlspD", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)25;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Utility.isSet(1496, 1496);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fdiv", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("astore_1", string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.methodSignatureReturnType("FhRZ0P}Kp ");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("!|o\u0006HQ6", "FhRZ0P}Kp ", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-119);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("D_UOco}~J$j", "4~5", false);
      assertEquals("D_UOco}~J$j", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-20), (int) (byte)59, false);
      assertEquals("0:    istore_3\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    istore_0\n4:    l2f\n", string1);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "_(^]vlq6f>A+)JDC";
      objectArray0[1] = object2;
      objectArray0[2] = (Object) "_(^]vlq6f>A+)JDC";
      String string0 = Utility.printArray(objectArray0);
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.classOrInterface((-5));
      assertEquals("interface", string2);
      
      byte[] byteArray0 = new byte[0];
      String string3 = Utility.toHexString(byteArray0);
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Utility.searchOpcode("f|:WH!4P]7G;)1)L");
      Utility.getSignature("f|:WH!4P]7G;)1)L");
      int int0 = 3755;
      Utility.isSet(3755, (-2798));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      byteArray0[3] = (byte)0;
      char char0 = 'W';
      Utility.format(3746, (byte)0, false, '');
      try { 
        Utility.methodSignatureArgumentTypes("dreturn", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("0y#EGq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0y#EGq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)105;
      byteArray0[0] = (byte)47;
      byteArray0[3] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      int int0 = Utility.clearBit(3819, 814);
      assertEquals(3819, int0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false, true);
      assertEquals("", string0);
      
      String string1 = Utility.printArray(objectArray0, true, false);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte) (-102);
      byteArray0[8] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wwZEwin_5pBnh");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[3] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.fillup("land", (byte) (-68), false, 'e');
      assertEquals("land", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Utility.clearBit((-2483), 91);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      byteArray0[2] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1749), (-1749));
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byteSequence0.skipBytes(27);
      Utility.searchOpcode("nop");
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("+,^U1|.sDrF!#]N");
      String string0 = Utility.format(1348, (-1502), true, '$');
      assertEquals("1348", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)26;
      byteArray0[8] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.getSignature("1348");
      assertEquals("L1348;", string1);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2708), 1042);
      constantMethodref0.copy();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-80);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), 74, true);
      assertEquals("0:    iaload\n1:    areturn\n", string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = Utility.getSignature("UaMTm.& ");
      assertEquals("LUaMTm/&;", string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)91, (byte)91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("^yIc=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^yIc='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-85);
      byte[] byteArray1 = new byte[14];
      byteArray1[0] = (byte) (-85);
      byteArray1[1] = (byte)76;
      byteArray1[2] = (byte) (-85);
      byteArray1[3] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(12, byteSequence0.getIndex());
      assertEquals("lookupswitch\tdefault = 0, npairs = 0 ()", string0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(175, 91);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantDouble constantDouble0 = new ConstantDouble(91);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("if_icmpeq\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_3", string0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = Utility.getSignature("Illegal signature: ");
      assertEquals("LIllegal;", string0);
      
      String string1 = Utility.accessToString(1940, true);
      assertEquals("protected final transient native abstract", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('A');
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("Illegal signature: ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore\t\t%244", string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-104));
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)16, (byte)16);
      constantMethodref0.setClassIndex((byte)16);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Utility.clearBit(760, 760);
      ConstantDouble constantDouble0 = new ConstantDouble(760);
      Constant[] constantArray0 = new Constant[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<Unknown>");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark((byte)5);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("monitorenter", string0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)52, 2029, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">}^aw=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >}^aw=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte)36);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-67);
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-22);
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte) (-67);
      byteArray1[3] = (byte) (-22);
      byteArray1[4] = (byte)48;
      byteArray1[5] = (byte) (-22);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 197, 170);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("LG_yt;`|NlspD", false);
      assertEquals("G_yt", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "G_yt";
      Utility.compactClassName("LG_yt;`|NlspD", "RaS?7vql2^vhm", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.getSignature("kx");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "lstore_3";
      stringArray0[1] = "LG_yt;`|NlspD";
      String string1 = Utility.methodTypeToSignature("LG_yt;`|NlspD", stringArray0);
      assertEquals("(Llstore_3;LLG_yt;`|NlspD;)LLG_yt;`|NlspD;", string1);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("XM\"o qB0~,u]F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XM\"o qB0~,u]F'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = Utility.accessToString(0, true);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)0;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("90 ac 98 29 3f f8 00", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('~');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Utility.getSignature("org.apache.bcel.classfile.ConstantClass");
      Utility.convertString("org.apache.bcel.classfile.ConstantClass");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 230, 230, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Utility.methodSignatureReturnType("Signature");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "short";
      objectArray0[2] = (Object) "short";
      objectArray0[3] = (Object) "Signature";
      objectArray0[4] = (Object) "short";
      objectArray0[7] = (Object) "Signature";
      objectArray0[0] = (Object) "short";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Signature";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lxor", string0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Utility.clearBit(155, 0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byte byte0 = (byte)75;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-3);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("fR*(>v.PH5\"iRd),", "fR*(>v.PH5\"iRd),");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"fR*(>v.PH5\"iRd),\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String string0 = "?aD#wA m{BAK@!6";
      try { 
        Utility.typeOfSignature("?aD#wA m{BAK@!6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?aD#wA m{BAK@!6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      byteArray0[5] = (byte) (-126);
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-126));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(3872, (byte) (-126));
      ConstantMethodref constantMethodref1 = new ConstantMethodref((byte) (-126), (byte) (-126));
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantMethodref1.clone();
      Utility.codeToString(byteArray0, constantPool1, (-2), (-2), false);
      try { 
        Utility.typeOfSignature("0:    faload\n1:    ixor\n2:    ixor\n3:    ixor\n4:    nop\n5:    ixor\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    faload
         // 1:    ixor
         // 2:    ixor
         // 3:    ixor
         // 4:    nop
         // 5:    ixor
         // 6:    nop
         // 7:    nop
         // 8:    nop
         // 9:    nop
         // 10:   nop
         // 11:   nop
         // 12:   nop
         // 13:   nop
         // 14:   nop
         // 15:   nop
         // 16:   nop
         // 17:   nop
         // 18:   nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String string0 = Utility.getSignature("ifnull");
      assertEquals("Lifnull;", string0);
      
      Utility.accessToString(1940, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string1 = Utility.accessToString(244);
      assertEquals("protected final synchronized volatile transient", string1);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(175, 91);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantDouble constantDouble0 = new ConstantDouble(91);
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantMethodref0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-98);
      ConstantClass constantClass0 = new ConstantClass((byte) (-98));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.compactClassName("ifle\t\t#15518", "dJ\"2X)=IC", false);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.getSignature("ifle\t\t#15518");
      assertEquals("Lifle;", string2);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)48;
      Utility.signatureToString("Vg`q~", true);
      String string0 = Utility.compactClassName("Hx0d;JXzQa77z", "native", true);
      assertEquals("Hx0d;JXzQa77z", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('^');
      assertFalse(boolean0);
      
      String string1 = Utility.compactClassName("Lt7p'(S*7#N5", false);
      assertEquals("Lt7p'(S*7#N5", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String string0 = "N";
      // Undeclared exception!
      try { 
        Utility.signatureToString("N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-25);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("12 10 f6 ac 36 3b e7", string0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Utility.clearBit(4, 47);
      try { 
        Utility.typeOfSignature("41dm<2;F>Z<pt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 41dm<2;F>Z<pt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Utility.methodSignatureReturnType("ZbO", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-30);
      byteArray0[7] = (byte) (-30);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(175, 91);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantDouble constantDouble0 = new ConstantDouble(91);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("lload\t\t%155");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lload\t\t%155'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature(" [");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type:  [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Utility.accessToString(1332);
      Utility.compactClassName("<8q??~oALw.D1V", false);
      Utility.accessToString((-3637), false);
      Utility.getSignature("b+9JHl~T6R;|/E>u");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Y0&nSbtfQ=J$xY'W", "<8q??~oALw.D1V", "<8q??~oALw.D1V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y0&nSbtfQ=J$xY'W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(")D", ")D", ")D", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("WtD&sM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WtD&sM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String string0 = Utility.compactClassName("V", "V", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-111);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2567), (-2567), true);
      Utility.searchOpcode("'");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Utility.convertString("H`D;kB[Cq%{>");
      Utility.compactClassName("H`D;kB[Cq%{>");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-126), 46);
      // Undeclared exception!
      try { 
        Utility.signatureToString("OUZ$Q(,VR*/%a/Leg#", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OUZ$Q(,VR*_/%a/Leg#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Utility.compactClassName("]Fj>q^2';.MjLA~7");
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Utility.clearBit(760, 760);
      ConstantDouble constantDouble0 = new ConstantDouble(760);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(760, 760);
      String string0 = " ";
      Utility.compactClassName("nop", " (", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-85);
      Utility.equals(byteArray0, byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(213, 46);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("|[])HRE^1,0<\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HRE^1,0<\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("UaMTm.& ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UaMTm.& '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      byte[] byteArray0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Utility.isJavaIdentifierPart('!');
      String string0 = "long";
      Utility.fillup("long", 0, false, '!');
      // Undeclared exception!
      try { 
        Utility.signatureToString("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `long'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Utility.compactClassName("The size must be non-negative");
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-930), 13);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-77);
      byteArray1[1] = (byte) (-77);
      byteArray1[2] = (byte) (-77);
      byteArray1[3] = (byte) (-77);
      byteArray1[4] = (byte) (-77);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)16, (byte) (-15));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 43, false, '3');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      String string0 = Utility.getSignature("org.apache.bcel.classfile.ConstantClass");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((-2706));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Utility.convertString("H`D;kB[Cq%{>");
      Utility.compactClassName("H`D;kB[Cq%{>");
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-930), (-1299));
      constantMethodref0.setClassIndex((-1112));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.typeOfSignature("YT.+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YT.+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      String string0 = "H`D;kB[Cq%{>";
      Utility.convertString("H`D;kB[Cq%{>");
      Utility.compactClassName("H`D;kB[Cq%{>");
      int int0 = 11;
      boolean boolean0 = true;
      Utility.fillup("H`D;kB[Cq%{>", 11, true, '0');
      String string1 = "\t\t#";
      DataInput dataInput0 = null;
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(11);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantNameAndType constantNameAndType0 = null;
      try {
        constantNameAndType0 = new ConstantNameAndType((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantNameAndType", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      String string0 = "D_UOco}~J$j";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-75);
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)31;
      byteArray1[3] = (byte)31;
      byteArray1[4] = (byte) (-78);
      byteArray1[5] = (byte) (-75);
      byteArray1[6] = (byte) (-68);
      byteArray1[5] = (byte) (-68);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Utility.clearBit(760, 760);
      ConstantDouble constantDouble0 = new ConstantDouble(760);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Utility.compactClassName("The size must be non-negative", "new", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)2;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("The size must be non-negative", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The size must be non-negative
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Utility.convertString("H`D;kB[Cq%{>");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-126), 46);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("~,_O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~,_O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      String string0 = "Only element vales f type enum can be built wit this ctor - type specified: ";
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("B?");
      assertEquals("byte", string0);
      
      String string1 = Utility.methodTypeToSignature("B?", (String[]) null);
      assertEquals("()LB?;", string1);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      int int0 = (-617);
      Utility.setBit((-2667), (-617));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)105;
      byteArray0[0] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("ifnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifnull'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)109;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(291, (byte)109, byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("LSV;V", "line.separator", "LSV;V", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LSV;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("d2i", string0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("LG_yt;`|NlspD", false);
      assertEquals("G_yt", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "G_yt";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)2, 41);
      assertEquals("", string1);
      
      Utility.format(41, 1978, true, '%');
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)2, 1978, true);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("ret\t\t%82", string0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format(102, 102, false, '(');
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)30, (byte)30);
      constantMethodref0.setClassIndex((byte)30);
      // Undeclared exception!
      try { 
        Utility.signatureToString("E]SY)@ WVw(3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E]SY)@ WVw(3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      String string0 = "ZbO";
      Utility.methodSignatureReturnType("ZbO", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Wh9m0OXxRzYcR'`x", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wh9m0OXxRzYcR'`x'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Utility.methodSignatureReturnType("Z");
      // Undeclared exception!
      try { 
        Utility.signatureToString(">)~LLY5,T/t>kY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>)~LLY5,T/t>kY'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LG_yt;`|NlspD");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3262, (-2674), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      String string0 = "Keex-:8.V8~v{jBZw]|";
      boolean boolean0 = false;
      Utility.compactClassName("Keex-:8.V8~v{jBZw]|", false);
      String string1 = "org.apache.bcel.util.ClassPath$Zip";
      boolean boolean1 = false;
      Utility.compactClassName("Keex-:8.V8~v{jBZw]|", "org.apache.bcel.util.ClassPath$Zip", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Keex-:8.V8~v{jBZw]|", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Keex-:8.V8~v{jBZw]|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), (-1882352767), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    swap
         // 1:    lrem
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Utility.isJavaIdentifierPart('Z');
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)93;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte)106;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)109;
      byteArray1[6] = (byte)77;
      Utility.equals(byteArray1, byteArray0);
      Utility.compactClassName("", "4~5", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore\t\t%54", string0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      String string0 = Utility.compactClassName("new", "SAhi4s..xcX3@?v", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.signatureToString("SAhi4s..xcX3@?v", false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.decode("lload_3", false);
      try { 
        Utility.methodSignatureReturnType("|@f;a<M/m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `|@f;a<M/m'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
      
      int int0 = Utility.setBit(58, 76);
      assertEquals(4154, int0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Utility.clearBit(760, 760);
      ConstantDouble constantDouble0 = new ConstantDouble(760);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      try { 
        Utility.typeOfSignature("Py,Fje#Rr8l+Oz>TLB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Py,Fje#Rr8l+Oz>TLB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String string0 = Utility.convertString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      char char0 = 't';
      Utility.isJavaIdentifierPart('t');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Li2@os9i");
      Object[] objectArray0 = new Object[6];
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      mockPrintWriter0.print(charArray0);
      objectArray0[0] = (Object) "Li2@os9i";
      objectArray0[1] = (Object) "Li2@os9i";
      objectArray0[2] = (Object) "Li2@os9i";
      objectArray0[3] = (Object) "Li2@os9i";
      objectArray0[4] = (Object) "Li2@os9i";
      Object object0 = new Object();
      objectArray0[5] = object0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lstore\t\t%75", string0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)93;
      byteArray1[1] = (byte)93;
      byteArray1[2] = (byte)34;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray1[3] = (byte)34;
      Utility.equals(byteArray1, byteArray0);
      Utility.compactClassName("", "4~5", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 162, 2252, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", low = ");
      PrintWriter printWriter0 = mockPrintWriter0.append('\\');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(printWriter0, objectArray0);
      int int0 = Utility.setBit((byte)24, (byte)24);
      assertEquals(16777240, int0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)0;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-95), 332, false);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-241), (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Utility.clearBit(221, 221);
      Utility.compactClassName("instanceof", "instanceof", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(38, 38);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodref1;
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-93);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, 1014, true);
      assertEquals("0:    nop\n1:    nop\n2:    <illegal opcode>\n3:    if_icmpgt\t\t#9278\n6:    fconst_2\n7:    fneg\n8:    drem\n", string0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, true);
      Utility.methodSignatureReturnType("V", false);
      try { 
        Utility.methodSignatureReturnType("float", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `float'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Utility.clearBit(45, (-2739));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      Utility.compactClassName("4~5", "+,^U1|.sDrF!#]N", true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte)77;
      Utility.equals(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 71, (-744));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[2] = (byte)91;
      byteArray0[4] = (byte) (-15);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-15), (-3891));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup_x2", string0);
      
      String string1 = Utility.getSignature("dup_x2");
      assertEquals("Ldup_x2;", string1);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      int int0 = Utility.clearBit((-7026), 159);
      assertEquals(2147476622, int0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpgt\t\t#-21589", string0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i2s";
      stringArray0[1] = "{Gk.!(=I5WNPZ";
      stringArray0[2] = "i2s";
      stringArray0[3] = "{Gk.!(=I5WNPZ";
      stringArray0[4] = "{Gk.!(=I5WNPZ";
      stringArray0[5] = "i2s";
      stringArray0[6] = "i2s";
      Utility.methodTypeToSignature("{Gk.!(=I5WNPZ", stringArray0);
      try { 
        Utility.methodSignatureReturnType("i2s", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `i2s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      String string0 = Utility.signatureToString("LG_yt;`|NlspD", true);
      assertEquals("G_yt", string0);
      
      boolean boolean0 = Utility.isSet((byte)53, (-1359));
      assertFalse(boolean0);
      
      String string1 = Utility.getSignature("LG_yt;`|NlspD");
      assertEquals("LLG_yt;`|NlspD;", string1);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.signatureToString("LG_yt;`|NlspD", false);
      Utility.isSet((byte)0, (byte)0);
      Utility.getSignature("LG_yt;`|NlspD");
      try { 
        Utility.methodSignatureArgumentTypes("LG_yt;`|NlspD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LG_yt;`|NlspD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      String string0 = Utility.classOrInterface(244);
      assertEquals("class", string0);
      
      String string1 = Utility.compactClassName("JOkx,X$5");
      assertEquals("JOkx,X$5", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("goto_w\t\t#48385147", string2);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[2] = (byte)91;
      byteArray0[4] = (byte) (-6);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-6), (-3891));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      String string0 = Utility.getSignature("Illegal signature: ");
      assertEquals("LIllegal;", string0);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)16, (byte) (-33));
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-33);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)103;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$A$Qg$d7$dfg", string1);
      
      String string2 = Utility.classOrInterface((byte) (-33));
      assertEquals("interface", string2);
      
      String string3 = Utility.getSignature("?T['OzsG4`r6]lY");
      assertEquals("[L?T;", string3);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      int int0 = Utility.clearBit(167, (-1121));
      assertEquals(167, int0);
      
      String string0 = Utility.compactClassName("impdep1", "impdep1", false);
      assertEquals("impdep1", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("astore_2", string1);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Signature");
      assertEquals((byte)9, byte0);
      
      Utility.methodSignatureReturnType("Signature");
      String string0 = Utility.methodSignatureReturnType("Signature", false);
      assertEquals("short", string0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "short";
      objectArray0[2] = (Object) "short";
      objectArray0[3] = (Object) "Signature";
      objectArray0[4] = (Object) "short";
      objectArray0[6] = (Object) "Signature";
      objectArray0[7] = (Object) "Signature";
      objectArray0[8] = (Object) "short";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Signature";
      stringArray0[1] = "Signature";
      stringArray0[2] = "Signature";
      stringArray0[3] = "short";
      stringArray0[4] = ")w2,QVQr-kDC";
      stringArray0[5] = "short";
      stringArray0[6] = ")w2,QVQr-kDC";
      byte byte1 = Utility.typeOfSignature("Z|bj]Z,15");
      assertEquals((byte)4, byte1);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      // Undeclared exception!
      try { 
        Utility.signatureToString("X$T}>t", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X$T}>t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(1);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("dcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("W5ak#", "", "");
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      String string0 = Utility.signatureToString("B?", true);
      assertEquals("byte", string0);
      
      Utility.isJavaIdentifierPart('i');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("getfield", "l2f", "wide", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getfield
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)85;
      String string0 = "[YD_``z4!,C0!4";
      // Undeclared exception!
      try { 
        Utility.signatureToString("[YD_``z4!,C0!4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YD_``z4!,C0!4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Utility.methodSignatureReturnType("Signature");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "short";
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      Utility.isSet((byte) (-67), (byte) (-1));
      String string0 = Utility.getSignature("Signature");
      String string1 = Utility.signatureToString("Signature");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      int int0 = Utility.clearBit(760, 760);
      assertEquals(760, int0);
      
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(1011);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "w{@bH");
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ZbO");
      Utility.getSignature("ZbO");
      Utility.format((-1142), 1348, true, '@');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-65);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("i2b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i2b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Utility.compactClassName("99HkUgXX5#R0S3|0", "new", false);
      try { 
        Utility.typeOfSignature("99HkUgXX5#R0S3|0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 99HkUgXX5#R0S3|0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      String string0 = Utility.compactClassName("V", "V", true);
      assertEquals("", string0);
      
      String string1 = Utility.methodTypeToSignature("V", (String[]) null);
      assertEquals("()LV;", string1);
      
      String string2 = Utility.methodSignatureToString("()LV;", "V", "ES$e2$5b$5bS$A");
      assertEquals("ES$e2$5b$5bS$A V V()", string2);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("CONSTANT_Float");
      assertEquals("char", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1749), (byte)83);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-3212), 254);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("iflt\t\t#9473", string1);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-122);
      byteArray0[8] = (byte)127;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)127, (int) (byte) (-68));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)82;
      byteArray1[1] = (byte)81;
      byteArray1[2] = (byte)81;
      byteArray1[3] = (byte)81;
      byteArray1[4] = (byte)82;
      byteArray1[5] = (byte)82;
      byteArray1[6] = (byte)82;
      byteArray1[7] = (byte)81;
      byteArray1[8] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.markSupported();
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("dastore", string0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Utility.toHexString(byteArray0);
      Utility.searchOpcode("00 00 00 00 00 00");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)92;
      byteArray1[1] = (byte)92;
      byteArray1[2] = (byte)63;
      byteArray1[3] = (byte)92;
      byteArray1[4] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.compactClassName("00 00 00 00 00 00", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("00 00 00 00 00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `00 00 00 00 00 00'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1749), (-1749));
      String string0 = Utility.compactClassName("native", " ", true);
      assertEquals("native", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("l2d", string1);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Utility.clearBit(0, 0);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 1761, 1761);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("ZbO", false);
      assertEquals("boolean", string0);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-90);
      byteArray0[13] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.accessToString(1590, true);
      assertEquals("private protected final abstract", string1);
      
      String string2 = Utility.classOrInterface((byte) (-65));
      assertEquals("interface", string2);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1749), (-1749));
      Utility.compactClassName("native", " ", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)91;
      Utility.equals(byteArray0, byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)80, (-1620143246));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("^yIc=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^yIc='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Utility.clearBit(1, 1);
      String string0 = Utility.printArray((Object[]) null, true, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Utility.compactClassName("The magic number cannot be null", "boolean", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("N:=aR,{~>CBF", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N:=aR,{~>CBF'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("lload_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lload_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true);
      Utility.compactClassName("msf]", "{java.lang.Object@9f1a3b8, java.lang.Object@b526608, java.lang.Object@376c2017, java.lang.Object@770bf0af, java.lang.Object@73e37195, java.lang.Object@6b993bc7, java.lang.Object@3d23c23b}", true);
      try { 
        Utility.methodSignatureReturnType("msf]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `msf]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)41;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-413), (-555), false);
      assertEquals("0:    arraylength\n1:    dload_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-85);
      byte[] byteArray1 = new byte[14];
      byteArray1[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(12, byteSequence0.getIndex());
      assertEquals("lookupswitch\tdefault = 0, npairs = 0 ()", string0);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("ZbO", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.getSignature("Wh9m0OXxR_YcR'`x");
      String string0 = "kCTL,y1LGvN";
      String string1 = ":";
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("dastore", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)48;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("$b60");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $b60
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      String string0 = "61DzqT$KJy?+]lmh$";
      try { 
        Utility.typeOfSignature("61DzqT$KJy?+]lmh$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 61DzqT$KJy?+]lmh$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      int int0 = 13;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 13, (-2258), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureReturnType("ifnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifnull'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("aload\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.replace("^3:TJ[;IM@Mnd4c>1[", "imul", "imul");
      try { 
        Utility.methodSignatureArgumentTypes("imul", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: imul
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Utility.convertString("H`D;kB[Cq%{>");
      Utility.compactClassName("H`D;kB[Cq%{>");
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-930), (-1299));
      constantMethodref0.setClassIndex((-1112));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte) (-7);
      byteArray0[7] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("ZbO", false);
      assertEquals("boolean", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload_2", string1);
      
      String string2 = Utility.accessToString(1590, false);
      assertEquals("private protected final synchronized interface abstract", string2);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("iload_1", string0);
      
      String string1 = Utility.getSignature("iload_1");
      assertEquals("Liload_1;", string1);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Utility.compactClassName("The size must be non-negative", "new", true);
      ConstantDouble constantDouble0 = new ConstantDouble((-1826.475));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = null;
      File file0 = MockFile.createTempFile("new", (String) null);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "The size must be non-negative");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // The size must be non-negative
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      Utility.convertString("H`D;kB[Cq%{>");
      Utility.compactClassName("H`D;kB[Cq%{>");
      ConstantDouble constantDouble0 = new ConstantDouble(1705);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.format(83, (-1475), false, '1');
      assertEquals("83", string0);
      
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1504, 200);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantMethodref constantMethodref2 = new ConstantMethodref(constantMethodref1);
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodref2;
      constantArray0[1] = (Constant) constantMethodref0;
      try { 
        Utility.typeOfSignature("K r'UaJ]{^oK3Kdl HZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K r'UaJ]{^oK3Kdl HZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(179, (-304));
      constantMethodref0.setClassIndex(91);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte) (-74);
      byteArray0[8] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) byteSequence0;
      objectArray0[2] = (Object) null;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CONSTANT_Float");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "short");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      String string0 = Utility.compactClassName("V", "V", true);
      assertEquals("", string0);
      
      String string1 = Utility.compactClassName("", "", true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Utility.replace("jsr", "jsr", "jsr");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "jsr";
      Utility.printArray(objectArray0);
      Utility.typeOfSignature("Dq<y1*`a$]W:ty:;$RZ");
      try { 
        Utility.methodSignatureReturnType("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `? extends '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("M2_.zs+SkB$", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.decode("M2_.zs+SkB$", false);
      try { 
        Utility.typeOfSignature("M2_.zs+SkB$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M2_.zs+SkB$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      String string0 = "H`D;kB[Cq%{>";
      Utility.convertString("H`D;kB[Cq%{>");
      Utility.compactClassName("H`D;kB[Cq%{>");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("H`D;kB[Cq%{>", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H`D;kB[Cq%{>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Utility.methodSignatureReturnType("LG_yt;`|NlspD", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-127);
      byteArray0[5] = (byte)8;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-24);
      byteArray0[8] = (byte)116;
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "G_yt";
      objectArray0[1] = (Object) (byte) (-127);
      objectArray0[2] = (Object) (byte)67;
      objectArray0[3] = (Object) "G_yt";
      objectArray0[4] = (Object) "G_yt";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("%+<", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8ZLN@]?J@W&]");
      Utility.getSignature("8ZLN@]?J@W&]");
      Utility.signatureToString("JZ");
      try { 
        Utility.typeOfSignature("AWe+rep5zOC*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AWe+rep5zOC*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)99;
      Utility.encode(byteArray0, false);
      String string0 = "Y}|WeMeo";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y}|WeMeo", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y}|WeMeo'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureReturnType("MethodParameters", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MethodParameters'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      String string0 = "iconst_0";
      Utility.replace("iconst_0", "iconst_0", "");
      Utility.clearBit((-231), (-231));
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("(_UA-~o*GS!7VvC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (_UA-~o*GS!7VvC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "^yIc=3^XoIPk|=L";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      stringArray0[1] = "aOUP&";
      Utility.methodTypeToSignature("^yIc=3^XoIPk|=L", stringArray0);
      Utility.methodSignatureArgumentTypes("(L^yIc=3^XoIPk|=L;LaOUP&;)L^yIc=3^XoIPk|=L;", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      File file0 = MockFile.createTempFile("Byte code error: ", "aOUP&");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.format("BI>[oz6Kw", (Object[]) stringArray0);
      Utility.printArray(printWriter0, (Object[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("D", "0vigIrWH*@Nct6!pd^", "aOUP&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      Utility.convertString("H`D;kB[Cq%{>");
      Utility.compactClassName("H`D;kB[Cq%{>");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-126);
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-126));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(3872, (byte) (-126));
      try { 
        Utility.typeOfSignature("H`D;kB[Cq%{>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H`D;kB[Cq%{>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)103;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)16, (byte)21);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1385), (int) (byte)103, true);
      assertEquals("0:    iload\t\t%16\n2:    ishr\n3:    <illegal opcode>\n4:    dsub\n", string0);
  }
}
