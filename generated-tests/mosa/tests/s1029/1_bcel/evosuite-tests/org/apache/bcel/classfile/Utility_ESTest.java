/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 19:47:39 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.ObjectStreamConstants;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(s>n|kd``;\",c+f{xlZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (s>n|kd``;\",c+f{xlZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = Utility.replace("EXzEuE s^5 4/", "<=", "EXzEuE s^5 4/");
      assertEquals("EXzEuE s^5 4/", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-43), (int) (byte) (-43));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)87;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-76), (int) (byte)87);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)117;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)117, (int) (byte)117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("if_icmpne");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpne
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.typeOfSignature("L<clinit>;V");
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("J$A", string0);
      
      String string1 = Utility.methodSignatureReturnType("J$A");
      assertEquals("long", string1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = Utility.compactClassName("P&[]6!4oG-");
      assertEquals("P&[]6!4oG-", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Utility.format((-1334), (-1334), true, 'Z');
      assertEquals("-1334", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = Utility.format(102, 102, false, 'L');
      assertEquals("LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL102", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("ZR~NyEO");
      assertEquals((byte)4, byte0);
      
      int int0 = Utility.clearBit((byte)4, (byte)4);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = Utility.isSet(10, 34);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = Utility.convertString("arraylength");
      assertEquals("arraylength", string0);
      
      String string1 = Utility.accessToString((-3834));
      assertEquals("private protected native synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      String string1 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("2", string2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "|VmSQv ,AD4[AG?X}{";
      // Undeclared exception!
      try { 
        Utility.getSignature("|VmSQv ,AD4[AG?X}{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[AG?X}{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = Utility.signatureToString("VP&[]6!4oG-");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-118), (int) (byte) (-118));
      assertEquals("0:    l2d\n1:    nop\n", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("8a 00", string1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("/9eJ", stringArray0);
      assertEquals("()L/9eJ;", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Uh*g5xr98Xf@", "Uh*g5xr98Xf@", "Uh*g5xr98Xf@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Uh*g5xr98Xf@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = Utility.convertString("DNsd");
      assertEquals("DNsd", string0);
      
      String string1 = Utility.methodSignatureReturnType("DNsd");
      assertEquals("double", string1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = Utility.compactClassName("KX${75.4$lMl", "KX${75.4$lMl", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-5288), 95);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.SC_ENUM;
      String string0 = Utility.convertString("(s>n|kd``;\",}+f{xlZ");
      assertEquals("(s>n|kd``;\\\",}+f{xlZ", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = Utility.getSignature("jsr_w");
      assertEquals("Ljsr_w;", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "jsr_w";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"jsr_w\"}", string1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Qq=@/k=Wzb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qq=@/k=Wzb'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = Utility.replace("j9ra.~>G0", "j9ra.~>G0", "j9ra.~>G0");
      assertEquals("j9ra.~>G0", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = Utility.clearBit((-632), (-632));
      assertEquals((-888), int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Wz,$X9;1c[R^<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Wz,$X9;1c[R^<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.typeOfSignature("SimpleElementValue doesnt know how to write out type ");
      Utility.compactClassName("invokestatic", "invokestatic", false);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.signatureToString("V%beJg|4Sd1", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "V%beJg|4Sd1";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "void";
      stringArray0[1] = "multianewarray";
      try { 
        Utility.methodTypeToSignature("^}&Gy`tej_IEL", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-65);
      byteArray1[1] = (byte) (-75);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.convertString("DNsd");
      String string0 = Utility.convertString("Zknn");
      assertEquals("Zknn", string0);
      
      String string1 = Utility.methodSignatureReturnType("ConstantValue");
      assertEquals("char", string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Zknn\\";
      stringArray0[1] = "ConstantValue";
      stringArray0[2] = "Zknn\\";
      stringArray0[3] = "char";
      stringArray0[4] = "DNsd";
      stringArray0[5] = "DNsd";
      stringArray0[6] = "Zknn\\";
      stringArray0[7] = "Zknn";
      String string2 = Utility.methodTypeToSignature("Zknn", stringArray0);
      assertEquals("(LZknn\\;LConstantValue;LZknn\\;CLDNsd;LDNsd;LZknn\\;LZknn;)LZknn;", string2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = Utility.convertString("? extends ");
      assertEquals("? extends ", string0);
      
      short short0 = Utility.searchOpcode("? extends ");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.accessToString((int) (short) (-1), true);
      assertEquals("public private protected static final volatile transient native abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = Utility.setBit((byte)74, (byte)74);
      assertEquals(1098, int0);
      
      String string0 = Utility.methodSignatureReturnType("ConstantValue");
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)87;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1565), (int) (byte)87);
      try { 
        Utility.typeOfMethodSignature("0:    pop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    pop
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("7XI#J<=CCZH", (String[]) null);
      assertEquals("()L7XI#J<=CCZH;", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-117), (int) (byte) (-117));
      assertEquals("0:    f2i\n1:    nop\n2:    f2i\n", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-103), 16);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)96;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)96, (int) (byte)96);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[2] = (byte) (-86);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-86), (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-21);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("a*T6K[yg**0@umVp", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2285, 195);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("X@FNEt5ii(7>4f}oH'8", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), 162);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    pop2
         // 1:    lstore_1
         // 2:    fstore_3
         // 3:    astore_3
         // 4:    fstore_2
         // 5:    ineg
         // 6:    saload
         // 7:    lmul
         // 8:    lmul
         // 9:    dload_2
         // 10:   lstore\t\t%62
         // 12:   caload
         // 13:   fsub
         // 14:   lushr
         // 15:   ddiv
         // 16:   dstore_1
         // 17:   dload_1
         // 18:   
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, (int) (byte)10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.decode("(s>n|kd``;\",c+f{xlZ", false);
      try { 
        Utility.methodSignatureArgumentTypes("(s>n|kd``;\",c+f{xlZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `s>n|kd``;\",c+f{xlZ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<clinit>;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `clinit>;V'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      String string1 = Constants.ILLEGAL_TYPE;
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<illegal;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.classOrInterface((-128));
      Utility.classOrInterface(227);
      try { 
        Utility.typeOfSignature("\"0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-115);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 807, (int) (byte) (-115));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utility.typeOfSignature("SimpleElementValue doesnt know how to write out type ");
      Utility.classOrInterface((byte)9);
      String string0 = Utility.signatureToString("SimpleElementValue doesnt know how to write out type ");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)35, 140);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("3mR", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 400, 400);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!WAxI%hY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WAxI%hY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.methodSignatureReturnType("Illegally nested brackets:");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.searchOpcode("jsr_w");
      try { 
        Utility.typeOfSignature("jsr_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jsr_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("dreturn", stringArray0);
      assertEquals("()Ldreturn;", string0);
      
      String string1 = Utility.methodSignatureToString("()Ldreturn;", "dreturn", "Tme4rcEpb:}nH");
      assertEquals("Tme4rcEpb:}nH dreturn dreturn()", string1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6!D#xe/nz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6!D#xe/nz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), 407);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    monitorenter
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.convertString("class");
      try { 
        Utility.methodSignatureReturnType("NTmO=(BE\"|YF5lre");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NTmO=(BE\"|YF5lre'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Lgt-qS\"t>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lgt-qS\"t>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("L~aIK`8?;V", true);
      String string1 = Utility.convertString("~aIK`8?");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)25, (int) (byte)25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)80, 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Tme4rcEpb:}nH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Tme4rcEpb:}nH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DNsd");
      try { 
        Utility.methodSignatureReturnType("x6mnOZVn{)GyU#s]]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GyU#s]]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      String string1 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)126;
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2903), (int) (byte)126);
      assertEquals("0:    iand\n1:    iand\n2:    nop\n3:    nop\n", string2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "+$r;B0HTX|74tq";
      try { 
        Utility.typeOfSignature("+$r;B0HTX|74tq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $r;B0HTX|74tq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = Utility.getSignature("P&[]6!4oG-");
      assertEquals("[LP&;", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-12);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$f4$A$A", string1);
      
      String string2 = Utility.signatureToString("[LP&;", false);
      assertEquals("P&[]", string2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("G&04+MD8^&*T2_`l", stringArray0);
      assertEquals("()LG&04+MD8^&*T2_`l;", string0);
      
      Utility.methodSignatureArgumentTypes("()LG&04+MD8^&*T2_`l;");
      String string1 = Utility.convertString("G&04+MD8^&*T2_`l");
      assertEquals("G&04+MD8^&*T2_`l", string1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = Utility.convertString("F");
      assertEquals("F", string0);
      
      String string1 = Utility.methodSignatureReturnType("F");
      assertEquals("float", string1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-123);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 122, (int) (byte)95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      String string1 = Utility.methodSignatureReturnType("Zknn");
      assertEquals("boolean", string1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.typeOfSignature("F");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 116, (int) (byte)6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-34);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-34), 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("static", "static", "static");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: static
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 32, (int) (byte)43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 881, (int) (byte)80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[1] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-72), (int) (byte) (-72));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)0;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-9), 1276);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    <illegal opcode>
         // 2:    <illegal opcode>
         // 3:    lor
         // 4:    dload_2
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)74, 732);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)61;
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-4643), (int) (byte)61);
      assertEquals("0:    iload_2\n1:    iload_2\n2:    istore_2\n3:    istore_2\n4:    istore_2\n", string1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("istore_0<clinit>", false);
      int int0 = 400;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 400, 400);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)61;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 84, (-1991));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("monitorenter", false);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 77, 77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)127;
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-71);
      byteArray1[1] = (byte) (-68);
      byteArray1[2] = (byte) (-68);
      byteArray1[3] = (byte) (-71);
      byteArray1[5] = (byte) (-68);
      byteArray1[7] = (byte)127;
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      boolean boolean0 = Utility.equals(byteArray2, byteArray0);
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-68), (byte) (-68), (byte) (-68), (byte) (-71), (byte)127}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")1#g|bRzq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )1#g|bRzq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-103), (int) (byte) (-103));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)83;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3745), 898);
      assertEquals("0:    aastore\n1:    nop\n2:    nop\n3:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string1);
      assertNotNull(string1);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-85);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-85), (int) (byte) (-85));
      assertEquals("0:    lookupswitch\tdefault = 0, npairs = 0 ()\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, constantPool0.getLength());
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("_EN[?qRPdG", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)95, (byte)69, (byte)78, (byte)91, (byte)63, (byte)113, (byte)82, (byte)80, (byte)100, (byte)71}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("_EN$5b$3fqRPdG", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)95, (byte)69, (byte)78, (byte)91, (byte)63, (byte)113, (byte)82, (byte)80, (byte)100, (byte)71}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("L<init>;", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)76, (byte)60, (byte)105, (byte)110, (byte)105, (byte)116, (byte)62, (byte)59}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 164, (-141));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-54);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-54), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-54), (int) (byte) (-80));
      assertEquals("0:    areturn\n1:    breakpoint\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-54), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      short short0 = Utility.searchOpcode(")1#g|bRzq");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)68;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, (int) (byte)68);
      assertEquals("4:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)68, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      short short0 = Utility.searchOpcode("IUodz{hI");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("IUodz{hI", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)73, (byte)85, (byte)111, (byte)100, (byte)122, (byte)123, (byte)104, (byte)73}, byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short) (-1), 90);
      assertEquals("0:    dstore_2\n1:    castore\n2:    ddiv\n3:    isub\n4:    ishr\n5:    lshr\n6:    imul\n7:    dstore_2\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)73, (byte)85, (byte)111, (byte)100, (byte)122, (byte)123, (byte)104, (byte)73}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      byteArray0[7] = (byte)101;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)101, 63);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("CONSTANT_Float");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = Utility.classOrInterface((-2962));
      assertEquals("class", string0);
      assertNotNull(string0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)82, 50);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertEquals("<illegal opcode>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)96;
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)96}, byteArray0);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)2, 10);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)96}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = Utility.convertString("J-?|P<eIs:=-v'~");
      assertEquals("J-?|P<eIs:=-v\\'~", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("J-?|P<eIs:=-v'~");
      assertEquals((byte)11, byte0);
      
      int int0 = Utility.setBit((byte)11, (byte)11);
      assertEquals(2059, int0);
      
      String string1 = Utility.methodSignatureReturnType("J-?|P<eIs:=-v'~");
      assertEquals("long", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("Dont call getValueByte() on a non BYTE ElementValue");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("sqCxKAqkRi6%M/2lc,", false);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1083, 1083);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = Utility.convertString("X");
      assertEquals("X", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString(".2#Xqp");
      assertEquals(".2#Xqp", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.methodSignatureReturnType("[+1vTL%Io");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+1vTL%Io'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "*#{\\";
      try { 
        Utility.typeOfSignature("*#{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-54), 213);
      assertEquals("0:    fmul\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)106, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.convertString("0:    fmul\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n");
      assertEquals("0:    fmul\\n1:    nop\\n2:    nop\\n3:    nop\\n4:    nop\\n5:    nop\\n6:    nop\\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "? extends ";
      String string1 = Utility.convertString("? extends ");
      assertEquals("? extends ", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("&;*|x|=ew");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &;*|x|=ew
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureReturnType("R^?8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R^?8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = Utility.setBit(59, 59);
      assertEquals(134217787, int0);
      
      try { 
        Utility.typeOfSignature("0U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)31;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)83, (byte)122, (byte)31, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, (int) (byte)83);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F");
      assertEquals((byte)6, byte0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, 529);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("m\"NBYRV+lRu},XEF.'", false);
      assertNotNull(byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m\"NBYRV+lRu},XEF.'");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 5, 164);
      assertEquals("5:    dastore\n6:    sastore\n7:    aload_1\n8:    idiv\n9:    dastore\n10:   lneg\n11:   lushr\n12:   aload_2\n13:   pop2\n14:   fstore_2\n15:   fstore_3\n16:   iaload\n17:   dload_1\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[0] = (byte) (-47);
      byteArray0[2] = (byte)127;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 101, (int) (byte)127);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("X^$R\nbvZPKI$iB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X^$R
         // bvZPKI$iB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)19;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 65, (-598));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)31;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)31, 153);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)39, 1410);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-43);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1243, 3889);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-109);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-109), 179);
      assertEquals("0:    i2s\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-109), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)93;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)93, 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F");
      assertEquals((byte)6, byte0);
      
      String string0 = Utility.convertString("F");
      assertEquals("F", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)6;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)6, (int) (byte) (-99));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1090, 1090);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)95;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)61, 300);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      try { 
        Utility.methodSignatureReturnType("H~>mg#h\"Y;?a~K7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H~>mg#h\"Y;?a~K7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)57, 269);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      try { 
        Utility.typeOfSignature("G&04+MD8^&*T2_`l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G&04+MD8^&*T2_`l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9EuSN }Pv#[{1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9EuSN }Pv#[{1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      short short0 = Utility.searchOpcode(")1#g|bRzq");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode(")1#g|bRzq", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)49, (byte)35, (byte)103, (byte)124, (byte)98, (byte)82, (byte)122, (byte)113}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")1#g|bRzq");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 169, 169);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = Utility.compactClassName("\t\t#", true);
      assertEquals("\t\t#", string0);
      assertNotNull(string0);
      
      String string1 = Utility.methodSignatureReturnType("BG6M", true);
      assertEquals("byte", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("\t\t#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)58;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-96), (int) (byte)58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      try { 
        Utility.typeOfSignature("- !");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: - !
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-121);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1568, (int) (byte) (-121));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F");
      assertEquals((byte)6, byte0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[3] = (byte)22;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)13, (int) (byte)22);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3mR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3mR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)127;
      try { 
        Utility.typeOfSignature("7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2051, (-587));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("XU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XU'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), (int) (byte) (-70));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("The filter must not be null");
      assertEquals("The filter must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("8FoY@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8FoY@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)78;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$df$60N", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-33), (byte)96, (byte)78}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 65, (int) (byte)78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = Utility.convertString("arraylength");
      assertEquals("arraylength", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)13;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, 3, 43);
      assertEquals("4:    fconst_2\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-123), (byte)23, (byte) (-66), (byte)13}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("\t(wide)", stringArray0);
      assertEquals("()L(wide);", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("()L(wide);");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      byte byte0 = ObjectStreamConstants.TC_RESET;
      assertEquals((byte)121, byte0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)83;
      String string0 = Utility.classOrInterface((byte)83);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature(")1kN\n", stringArray0);
      assertEquals("()L)1kN;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray1 = Constants.ATTRIBUTE_NAMES;
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      try { 
        Utility.methodSignatureReturnType("}(5 &h#C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `}(5 &h#C'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = Utility.getSignature("P&[]6!4oG-");
      assertEquals("[LP&;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-22);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-55), (int) (byte) (-55));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)69, 188);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = Utility.convertString("The filten must not be null");
      assertEquals("The filten must not be null", string0);
      assertNotNull(string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)125;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-97), (int) (byte)105);
      assertEquals("0:    lmul\n1:    if_icmpeq\t\t#14718\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)105, (byte) (-97), (byte)57, (byte)125}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-79), (-2722));
      assertEquals("0:    return\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-79)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-106);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1004), (int) (byte)51);
      assertEquals("0:    fcmpg\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-106), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("The filter must not be null");
      assertEquals("The filter must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, 2267);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("4.bcueElOu");
      assertEquals("4.bcueElOu", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-315), (int) (byte)16);
      assertEquals("0:    bipush\t\t0\n", string0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-63), (int) (byte) (-63));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("<init>");
      assertEquals("<init>", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f?`J-.LfT9kZafk");
      assertFalse(boolean0);
      
      String string2 = Utility.classOrInterface(266);
      assertEquals("class", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      try { 
        Utility.typeOfSignature("!/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = Utility.convertString("J-?|P<eIs:=-v'~");
      assertEquals("J-?|P<eIs:=-v\\'~", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("J-?|P<eIs:=-v'~");
      assertEquals((byte)11, byte0);
      
      String string1 = Utility.convertString("J-?|P<eIs:=-v'~");
      assertEquals("J-?|P<eIs:=-v\\'~", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte byte1 = Utility.typeOfSignature("Vmm>wonfG]FB],Q&I");
      assertEquals((byte)12, byte1);
      assertFalse(byte1 == byte0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-66);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-66), (int) (byte) (-66));
      assertEquals("0:    aload_1\n1:    arraylength\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MockFile mockFile0 = new MockFile("getfield");
      assertEquals("getfield", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("getfield", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertNotNull(mockFile0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_mosa/projects/1_bcel/getfield");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)90;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "getfield");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, (int) (byte)25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5, (-1314));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 5:    l2d
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)45, 16384, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-93);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1506), (int) (byte) (-93));
      assertEquals("0:    nop\n1:    if_icmpgt\t\t#1\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-93), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'9O\"u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '9O\"u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = Utility.convertString("arraylength");
      assertEquals("arraylength", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Expected class `");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Expected class `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)60;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)60, 32767);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 60
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = Utility.convertString("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-65);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 68, (int) (byte) (-65));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      short short0 = Utility.searchOpcode("hQ:oZH8o ijCQ'w.vK");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("^dv62", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)94, (byte)100, (byte)118, (byte)54, (byte)50}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 157, 58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte) (-47);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-47), (int) (byte) (-47));
      assertEquals("0:    aload_0\n1:    aload_0\n2:    <illegal opcode>\n3:    f2l\n4:    <illegal opcode>\n5:    aload_0\n6:    aload_0\n7:    aload_0\n8:    <illegal opcode>\n", string0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)42, (byte)42, (byte) (-47), (byte) (-116), (byte) (-47), (byte)42, (byte)42, (byte)42, (byte) (-47)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)74, 2226);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)53, (int) (byte)53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Yc/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yc/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-5486), (int) (byte) (-70));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-100), (int) (byte)16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-90);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-90), (int) (byte) (-90));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      try { 
        Utility.typeOfSignature("KF]us{`QNp*M,j,08*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KF]us{`QNp*M,j,08*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), (int) (byte) (-78));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", catch_type =");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , catch_type =
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1731), (int) (byte)75);
      assertEquals("0:    aload_0\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)42, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3, (int) (byte)79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      try { 
        Utility.typeOfSignature("NprkxX6f*e_Ymc~5b`H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NprkxX6f*e_Ymc~5b`H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-4184), 1667);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = "vW<sMG@ZR#Uh8H$9yA";
      // Undeclared exception!
      try { 
        Utility.decode("vW<sMG@ZR#Uh8H$9yA", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9y\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-125);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1637, (int) (byte) (-125));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = Utility.convertString("The filten must not be null");
      assertEquals("The filten must not be null", string0);
      assertNotNull(string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-59));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = Utility.classOrInterface((-520));
      assertEquals("class", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-110);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1960, 54, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      try { 
        Utility.typeOfSignature("43j;&}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 43j;&}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 256, (-1615492241));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string1);
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("@Si<:nj) rZY}eeH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @Si<:nj) rZY}eeH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), (-1852));
      assertEquals("0:    d2f\n1:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)0}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)0}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("d2f", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte)111;
      byteArray0[8] = (byte)93;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (int) (byte) (-65));
      assertEquals("0:    l2d\n1:    <illegal opcode>\n2:    fsub\n3:    iconst_m1\n4:    iconst_5\n5:    athrow\n6:    wide\t(wide)\n7:    ddiv\n8:    dup2_x1\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-46), (byte)102, (byte)2, (byte)8, (byte) (-65), (byte) (-60), (byte)111, (byte)93}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Tme4rcEpb:}nH");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = Utility.getSignature("P&[]6!4oG-");
      assertEquals("[LP&;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-22);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-113), 990);
      assertEquals("0:    <illegal opcode>\n1:    d2l\n2:    <illegal opcode>\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-113), (byte) (-22)}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-113), (byte) (-22)}, byteArray0);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("<illegal opcode>", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-113), (byte) (-22)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("='c8D%YexxbGj|',");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ='c8D%YexxbGj|',
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)44, (int) (byte)44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-56);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-56), (int) (byte) (-56));
      assertEquals("0:    goto_w\t\t#0\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("E8w", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E8w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("The filter must not be null");
      assertEquals("The filter must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string2 = "_u0-M-@";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-101)}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = Utility.signatureToString("T;2GBm?Y0.^G*{+AR");
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte byte0 = Constants.ITEM_Null;
      assertEquals((byte)5, byte0);
      
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, (int) (byte) (-82));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("K,/0k@$X9L;D[7t48");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K,/0k@$X9L;D[7t48'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("a*T6K[yg**0@umVp", false);
      assertNotNull(byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-116);
      byteArray1[1] = (byte) (-64);
      byteArray1[2] = (byte)53;
      byteArray1[3] = (byte) (-7);
      byteArray1[4] = (byte)87;
      byteArray1[5] = (byte)45;
      byteArray1[6] = (byte)28;
      byteArray1[7] = (byte)90;
      byteArray1[8] = (byte)51;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (-1650), (-4054));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("3mR", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte)109, (byte)82}, byteArray0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)30;
      byteArray1[1] = (byte) (-105);
      byteArray1[2] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)73, 199);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      try { 
        Utility.typeOfSignature("*+H9uL},_ftC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H9uL},_ftC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      try { 
        Utility.typeOfSignature("MethodParameters");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MethodParameters
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = Utility.convertString("The filten must not be null");
      assertEquals("The filten must not be null", string0);
      assertNotNull(string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-43);
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)34;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 701);
      assertEquals("0:    nop\n1:    nop\n2:    ineg\n3:    <illegal opcode>\n4:    nop\n5:    iload\t\t%34\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)116, (byte) (-43), (byte)0, (byte)21, (byte)34}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = Utility.typeOfSignature("Illegally nested brackets:");
      assertEquals((byte)10, byte0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.typeOfSignature("AiiaBn\"a`P~hkD.+&_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AiiaBn\"a`P~hkD.+&_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)68;
      byteArray0[0] = (byte)68;
      try { 
        Utility.methodSignatureReturnType("Yb,WTMn!D={ao", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Yb,WTMn!D={ao'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-126);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-126), (int) (byte) (-59));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    ixor\n4:    nop\n5:    nop\n6:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-126), (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-79), (int) (byte) (-79));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)100;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)100, 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-95), 42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmple\t\t#-25174
         // 3:    fmul
         // 4:    iconst_2
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = Utility.convertString("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CAnsta0\ntValue");
      assertFalse(boolean0);
      
      String string1 = Utility.classOrInterface(266);
      assertEquals("class", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-108);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-65), 3483);
      assertEquals("0:    athrow\n1:    aconst_null\n2:    lcmp\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-65), (byte)1, (byte) (-108)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("lload_1", (String[]) null);
      assertEquals("()Llload_1;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-118);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)7, (-1181));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[2];
      String string0 = constantPool0.toString();
      assertEquals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n", string0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(string0);
      
      byteArray0[0] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-71), (int) (byte) (-71));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte byte0 = (byte) (-70);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.signatureToString("MT/XMw'\"uP(P>T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MT/XMw'\"uP(P>T'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertEquals("<illegal opcode>", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("ONAaX}0sKp%c\"urys6-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ONAaX}0sKp%c\"urys6-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$S", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)18}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)18, (int) (byte)18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("P!X&/6dG^y.?l", false);
      assertNotNull(byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 167, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)81;
      String string0 = Utility.codeToString(byteArray0, constantPool0, 3, 3);
      assertEquals("3:    iand\n4:    fastore\n", string0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)61, (byte)68, (byte)106, (byte)126, (byte)81}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-69));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-125);
      byteArray0[3] = (byte) (-125);
      byte byte0 = Utility.typeOfSignature("[)");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("PbR::YP`9\";E(Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PbR::YP`9\";E(Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-12);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "P&[]6!4oG-";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(U.!>eL?*Yx{,4^WhG", "K[*b:]sB=", ")", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U.!>eL?*Yx{,4^WhG'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-75);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 244, (-1347));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 159, (-3071));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)40;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1410, 84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      short short0 = Utility.searchOpcode(">=");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("hQ:oZH8o ijCQ'w.vK", false);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 89, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "1#uawe5!MQ>0G>e";
      try { 
        Utility.typeOfSignature("1#uawe5!MQ>0G>e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1#uawe5!MQ>0G>e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)28;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), 71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iload_1
         // 1:    wide\t(wide)
         // 2:    iastore
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)38;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2429, 2429);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-66);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-66), 225);
      assertEquals("0:    dload\t\t%217\n2:    arraylength\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("0:    dload\t\t%217\n2:    arraylength\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n");
      assertEquals("0:    dload\t\t%217\\n2:    arraylength\\n3:    nop\\n4:    nop\\n5:    nop\\n6:    nop\\n7:    nop\\n8:    nop\\n9:    nop\\n10:   nop\\n11:   nop\\n12:   nop\\n13:   nop\\n14:   nop\\n15:   nop\\n16:   nop\\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) byteArray0;
      String string2 = Utility.printArray(objectArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2029, 3010);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (int) (byte) (-74));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (int) (byte) (-79));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-119);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1637, (int) (byte) (-119));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-122);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 12, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string1);
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("Qd^f}HD`}Q?1tQq4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qd^f}HD`}Q?1tQq4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)32;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2345), (int) (byte)100);
      assertEquals("0:    fcmpl\n1:    iconst_3\n2:    istore\t\t%185\n4:    dup_x1\n5:    isub\n6:    lload_2\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-107), (byte)6, (byte)54, (byte) (-71), (byte)90, (byte)100, (byte)32}, byteArray0);
      
      try { 
        Utility.methodSignatureReturnType("0:    fcmpl\n1:    iconst_3\n2:    istore\t\t%185\n4:    dup_x1\n5:    isub\n6:    lload_2\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    fcmpl
         // 1:    iconst_3
         // 2:    istore\t\t%185
         // 4:    dup_x1
         // 5:    isub
         // 6:    lload_2
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      try { 
        Utility.decode("$w$s<c7qb'K`_B%F>$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-103);
      try { 
        Utility.typeOfSignature("RZr*<v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RZr*<v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<init>";
      String string1 = Utility.methodTypeToSignature("<init>", stringArray0);
      assertEquals("(L<init>;)L<init>;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)37;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      String string2 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-118), (int) (byte)37);
      assertEquals("0:    l2d\n1:    <illegal opcode>\n2:    fload_3\n", string2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-8), (byte)37}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte) (-104);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte)37);
      assertEquals("0:    fload_3\n1:    if_acmpeq\t\t#29112\n4:    imul\n5:    swap\n6:    dcmpg\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)37, (byte) (-91), (byte)113, (byte) (-73), (byte)104, (byte)95, (byte) (-104)}, byteArray0);
      
      String string1 = Utility.compactClassName(", low = ", false);
      assertEquals(", low = ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) ", low = ";
      objectArray0[2] = (Object) ", low = ";
      objectArray0[3] = (Object) "0:    fload_3\n1:    if_acmpeq\t\t#29112\n4:    imul\n5:    swap\n6:    dcmpg\n";
      String string2 = Utility.printArray(objectArray0, false, false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string1);
      assertNotNull(string1);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)64;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)76, (int) (byte)64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "}wo1v(-Jw(8yb$d@L";
      // Undeclared exception!
      try { 
        Utility.decode("}wo1v(-Jw(8yb$d@L", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"d@\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<init>";
      String string1 = Utility.methodTypeToSignature("<init>", stringArray0);
      assertEquals("(L<init>;)L<init>;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(L<init>;)L<init>;", "(L<init>;)L<init>;", "<init>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `init>;)L<init>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8M)WZug-\"{");
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-98);
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z6OG.(^,WLyfoTS;Amr*sM%CZ.N=");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, 71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = Utility.getSignature("P&[]6!4oG-");
      assertEquals("[LP&;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)123;
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte) (-12);
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte) (-12);
      String string1 = Utility.convertString("[LP&;");
      assertEquals("[LP&;", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.decode("IV3am$(+/\"3x4js", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-56);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-56), (byte) (-56), (byte) (-56)}, byteArray0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Ooops, what primitive type is ";
      stringArray0[1] = "Ooops, what primitive type is ";
      stringArray0[2] = "[]";
      stringArray0[3] = "Ooops, what primitive type is ";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("Ooops, what primitive type is ", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5j5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5j5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-21), (-1243));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = Utility.getSignature("P&[]6!4oG-");
      assertEquals("[LP&;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-12);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "P&[]6!4oG-";
      String string1 = Utility.methodTypeToSignature("iconst_0", stringArray0);
      assertEquals("([LP&;)Liconst_0;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.methodSignatureToString("([LP&;)Liconst_0;", ")", "[LP&;");
      assertEquals("[LP&; iconst_0 )(P&[] arg1)", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("U;6$=/'-J<]IUD4F+{6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U;6$=/'-J<]IUD4F+{6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
