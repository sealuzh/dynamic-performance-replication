/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:00:44 GMT 2018
 */

package org.la4j.matrix.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.Random;
import java.util.stream.LongStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Basic1DMatrix_ESTest extends Basic1DMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[4][1];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      assertEquals(4, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.fromCSV("");
      assertEquals(0, basic1DMatrix1.rows());
      assertEquals(0, basic1DMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      DenseMatrix denseMatrix0 = basic1DMatrix0.toDenseMatrix();
      assertEquals(0, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket(" m<d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Matrix matrix0 = basic1DMatrix0.rotate();
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Vector vector0 = basic1DMatrix0.getRow(3);
      assertEquals(0, vector0.length());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.swapColumns((-274), (-274));
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(10, 10);
      DenseMatrix denseMatrix0 = basic1DMatrix0.toDenseMatrix();
      assertEquals(10, denseMatrix0.columns());
      assertEquals(10, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(67);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(67, mockRandom0);
      assertEquals(67, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(0, 0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.set(0, 0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      basic1DMatrix0.setAll(905.744);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(3187, 3187, (double[]) null);
      assertEquals(3187, basic1DMatrix0.columns());
      assertEquals(3187, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      Matrix matrix0 = basic1DMatrix0.copy();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertNotNull(matrix0);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(5, 5, 5);
      assertEquals(5, basic1DMatrix0.rows());
      assertEquals(5, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      Matrix matrix0 = basic1DMatrix0.copy();
      assertEquals(5, basic1DMatrix0.rows());
      assertEquals(5, basic1DMatrix0.columns());
      assertEquals(5, matrix0.rows());
      assertEquals(5, matrix0.columns());
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertNotNull(matrix0);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(0, basic1DMatrix1.rows());
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotNull(basic1DMatrix1);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(700);
      assertEquals(700, basic1DMatrix0.columns());
      assertEquals(700, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      // Undeclared exception!
      basic1DMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(9, 9, mockRandom0);
      assertEquals(9, basic1DMatrix0.columns());
      assertEquals(9, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(9, 9, 9);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(9, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(9, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertNotNull(sparseMatrix0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(65, 65, 65);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(65, sparseMatrix0.columns());
      assertEquals(65, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertNotNull(sparseMatrix0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, sparseMatrix0, sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      basic1DMatrix0.swapColumns(2286, 9);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1, 1, 1);
      assertEquals(1, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(1, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertNotNull(sparseMatrix0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
      assertEquals(1, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(1, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(2, basic1DMatrix0.columns());
      assertEquals(2, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, sparseMatrix0, sparseMatrix0, basic1DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(311, 311);
      assertEquals(311, basic1DMatrix0.columns());
      assertEquals(311, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapColumns(311, (-386));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -386
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      basic1DMatrix0.swapRows(0, 0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromBinary(byteArray0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      basic1DMatrix0.swapRows(37, 551);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(139);
      assertEquals(139, basic1DMatrix0.rows());
      assertEquals(139, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows(139, (-862));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19321
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      Matrix matrix0 = basic1DMatrix0.copyOfRows(7);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(7, matrix0.rows());
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotNull(matrix0);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1, 1, 1);
      assertEquals(1, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(1, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertNotNull(sparseMatrix0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
      assertEquals(1, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(1, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(2, basic1DMatrix0.rows());
      assertEquals(2, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(861, 8, 8);
      assertEquals(861, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(8, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertNotNull(sparseMatrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(861, 1);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(861, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertFalse(rowMajorSparseMatrix0.equals((Object)sparseMatrix0));
      assertNotNull(rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, sparseMatrix0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1, 1, 1);
      assertEquals(1, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(1, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertNotNull(sparseMatrix0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
      assertEquals(1, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(1, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(2, basic1DMatrix0.rows());
      assertEquals(2, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      Matrix matrix0 = basic1DMatrix0.copyOfShape(1, 1);
      assertEquals(1, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(1, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(2, basic1DMatrix0.rows());
      assertEquals(2, basic1DMatrix0.columns());
      assertEquals(1, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotNull(matrix0);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      Matrix matrix0 = basic1DMatrix0.copyOfShape(778, 778);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(778, matrix0.columns());
      assertEquals(778, matrix0.rows());
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotNull(matrix0);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      assertEquals(1, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(1, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertNotNull(sparseMatrix0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
      assertEquals(1, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(1, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(2, basic1DMatrix0.columns());
      assertEquals(2, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      SparseMatrix sparseMatrix1 = basic1DMatrix0.toSparseMatrix();
      assertEquals(1, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(1, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(2, basic1DMatrix0.columns());
      assertEquals(2, basic1DMatrix0.rows());
      assertEquals(2, sparseMatrix1.columns());
      assertEquals(2, sparseMatrix1.rows());
      assertEquals(0.0, sparseMatrix1.min(), 0.01);
      assertEquals(0, sparseMatrix1.cardinality());
      assertEquals(0.0, sparseMatrix1.density(), 0.01);
      assertTrue(sparseMatrix1.isRowMajor());
      assertEquals(0.0, sparseMatrix1.max(), 0.01);
      assertFalse(sparseMatrix1.equals((Object)sparseMatrix0));
      assertNotNull(sparseMatrix1);
      assertNotSame(sparseMatrix0, sparseMatrix1);
      assertNotSame(sparseMatrix1, sparseMatrix0);
      
      LongStream longStream0 = mockRandom0.longs(1L, 828L);
      assertNotNull(longStream0);
      
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertEquals(1, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(1, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(2, basic1DMatrix0.columns());
      assertEquals(2, basic1DMatrix0.rows());
      assertFalse(sparseMatrix0.equals((Object)sparseMatrix1));
      assertNotNull(doubleArray0);
      assertNotSame(sparseMatrix0, sparseMatrix1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0, (byte)2}, byteArray0);
      
      double[][] doubleArray1 = basic1DMatrix0.toArray();
      assertEquals(1, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(1, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(2, basic1DMatrix0.columns());
      assertEquals(2, basic1DMatrix0.rows());
      assertFalse(sparseMatrix0.equals((Object)sparseMatrix1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(sparseMatrix0, sparseMatrix1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1, 1, 1);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(1, sparseMatrix0.columns());
      assertEquals(1, sparseMatrix0.rows());
      assertNotNull(sparseMatrix0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(2004, 1);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(2004, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      // Undeclared exception!
      basic1DMatrix0.toDenseMatrix();
  }
}
