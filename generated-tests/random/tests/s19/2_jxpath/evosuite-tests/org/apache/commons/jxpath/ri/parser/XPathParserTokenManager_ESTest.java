/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 03:15:05 GMT 2019
 */

package org.apache.commons.jxpath.ri.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.Reader;
import java.io.StringReader;
import org.apache.commons.jxpath.ri.parser.SimpleCharStream;
import org.apache.commons.jxpath.ri.parser.Token;
import org.apache.commons.jxpath.ri.parser.XPathParserTokenManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathParserTokenManager_ESTest extends XPathParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jP");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 57, 97, 97);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, (-2786));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2786. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&x:/4r,");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals('&', char0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 114. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-2147483646), (-2147483646), (byte) (-59));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(3, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-2147483646), simpleCharStream0.getEndLine());
      assertEquals((-2147483646), simpleCharStream0.getColumn());
      assertEquals((-2147483646), simpleCharStream0.getBeginColumn());
      assertEquals((-2147483646), simpleCharStream0.getEndColumn());
      assertEquals((-2147483646), simpleCharStream0.getLine());
      assertEquals((-2147483646), simpleCharStream0.getBeginLine());
      assertEquals('\u0000', char0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-2147483646), simpleCharStream0.getEndLine());
      assertEquals((-2147483646), simpleCharStream0.getColumn());
      assertEquals((-2147483646), simpleCharStream0.getBeginColumn());
      assertEquals((-2147483646), simpleCharStream0.getEndColumn());
      assertEquals((-2147483646), simpleCharStream0.getLine());
      assertEquals((-2147483646), simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-2147483646), simpleCharStream0.getEndLine());
      assertEquals((-2147483646), simpleCharStream0.getColumn());
      assertEquals((-2147483646), simpleCharStream0.getBeginColumn());
      assertEquals((-2147483646), simpleCharStream0.getEndColumn());
      assertEquals((-2147483646), simpleCharStream0.getLine());
      assertEquals((-2147483646), simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&x:/4r,");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals('&', char0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 0);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)106;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)106, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)106, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(dataInputStream0);
      assertEquals(6, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(dataInputStream0, 50, (-764));
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)106, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(6, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)106, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(6, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-764), simpleCharStream0.getColumn());
      assertEquals((-764), simpleCharStream0.getEndColumn());
      assertEquals(50, simpleCharStream0.getBeginLine());
      assertEquals(50, simpleCharStream0.getEndLine());
      assertEquals((-764), simpleCharStream0.getBeginColumn());
      assertEquals(50, simpleCharStream0.getLine());
      assertEquals("j", token0.toString());
      assertArrayEquals(new byte[] {(byte)106, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertEquals(6, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(50, token0.endLine);
      assertEquals(50, token0.beginLine);
      assertEquals((-764), token0.endColumn);
      assertEquals((-764), token0.beginColumn);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-764), simpleCharStream0.getColumn());
      assertEquals((-764), simpleCharStream0.getEndColumn());
      assertEquals(50, simpleCharStream0.getBeginLine());
      assertEquals(50, simpleCharStream0.getEndLine());
      assertEquals((-764), simpleCharStream0.getBeginColumn());
      assertEquals(50, simpleCharStream0.getLine());
      assertArrayEquals(new byte[] {(byte)106, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0, 104, 12, 104);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0}$I65e");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = null;
      try {
        xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, (-567));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -567. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 60, 109, 116);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      xPathParserTokenManager0.SwitchTo(0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sum");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2394, 2394);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(1644);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1644. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yz5<nt}J6:PZ-iHU: 3");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 1, 1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      simpleCharStream0.backup(8);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4087, simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4087, simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(dataInputStream0);
      assertEquals(6, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(dataInputStream0, 50, (-764));
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(6, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(6, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo((-2112));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2112. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-115);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)106, (byte) (-115), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)106, (byte) (-115), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(dataInputStream0);
      assertEquals(6, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(dataInputStream0, 50, (-764));
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)106, (byte) (-115), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(6, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)106, (byte) (-115), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(6, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-764), simpleCharStream0.getBeginColumn());
      assertEquals(50, simpleCharStream0.getBeginLine());
      assertEquals((-764), simpleCharStream0.getColumn());
      assertEquals((-764), simpleCharStream0.getEndColumn());
      assertEquals(50, simpleCharStream0.getLine());
      assertEquals(50, simpleCharStream0.getEndLine());
      assertEquals("j", token0.toString());
      assertArrayEquals(new byte[] {(byte)106, (byte) (-115), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-764), token0.endColumn);
      assertEquals((-764), token0.beginColumn);
      assertEquals(50, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(50, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-59);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-59), (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-2147483646), (-2147483646), (byte) (-59));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-59), (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-2147483646), simpleCharStream0.getBeginLine());
      assertEquals((-2147483646), simpleCharStream0.getEndColumn());
      assertEquals((-2147483646), simpleCharStream0.getLine());
      assertEquals((-2147483646), simpleCharStream0.getColumn());
      assertEquals((-2147483646), simpleCharStream0.getBeginColumn());
      assertEquals((-2147483646), simpleCharStream0.getEndLine());
      assertEquals('\u0000', char0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-59), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-2147483646), simpleCharStream0.getBeginLine());
      assertEquals((-2147483646), simpleCharStream0.getEndColumn());
      assertEquals((-2147483646), simpleCharStream0.getLine());
      assertEquals((-2147483646), simpleCharStream0.getColumn());
      assertEquals((-2147483646), simpleCharStream0.getBeginColumn());
      assertEquals((-2147483646), simpleCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-59), (byte)0}, byteArray0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -2147483646, column -2147483645.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[3] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte) (-6), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 99, (byte)25, (byte)110);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte) (-6), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(9, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte) (-6), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(9, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 99, column 34.  Encountered: <EOF> after : \"\\\"\\ufffd\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ceiling");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("ceiling", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(75, token0.kind);
      assertEquals(7, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("last");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals("last", token0.toString());
      assertNotNull(token0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(48, token0.kind);
      assertEquals(4, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("comment");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 197, 197, 197);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(197, simpleCharStream0.getLine());
      assertEquals(203, simpleCharStream0.getEndColumn());
      assertEquals(197, simpleCharStream0.getBeginLine());
      assertEquals(203, simpleCharStream0.getColumn());
      assertEquals(197, simpleCharStream0.getEndLine());
      assertEquals(197, simpleCharStream0.getBeginColumn());
      assertEquals("comment", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(197, token0.beginLine);
      assertEquals(197, token0.beginColumn);
      assertEquals(203, token0.endColumn);
      assertEquals(197, token0.endLine);
      assertEquals(33, token0.kind);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 60, 109, 116);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(60, simpleCharStream0.getLine());
      assertEquals(60, simpleCharStream0.getBeginLine());
      assertEquals(109, simpleCharStream0.getBeginColumn());
      assertEquals(60, simpleCharStream0.getEndLine());
      assertEquals(111, simpleCharStream0.getEndColumn());
      assertEquals(111, simpleCharStream0.getColumn());
      assertEquals("not", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(67, token0.kind);
      assertEquals(111, token0.endColumn);
      assertEquals(60, token0.endLine);
      assertEquals(60, token0.beginLine);
      assertEquals(109, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("processing-instruction");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-789), (-789));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-768), simpleCharStream0.getEndColumn());
      assertEquals((-789), simpleCharStream0.getLine());
      assertEquals((-789), simpleCharStream0.getBeginColumn());
      assertEquals((-768), simpleCharStream0.getColumn());
      assertEquals((-789), simpleCharStream0.getEndLine());
      assertEquals((-789), simpleCharStream0.getBeginLine());
      assertEquals("processing-instruction", token0.toString());
      assertNotNull(token0);
      assertEquals(21, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(34, token0.kind);
      assertEquals((-768), token0.endColumn);
      assertEquals((-789), token0.endLine);
      assertEquals((-789), token0.beginLine);
      assertEquals((-789), token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("child::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 30, 2139127680, 30);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2139127686, simpleCharStream0.getEndColumn());
      assertEquals(30, simpleCharStream0.getEndLine());
      assertEquals(2139127686, simpleCharStream0.getColumn());
      assertEquals(30, simpleCharStream0.getBeginLine());
      assertEquals(30, simpleCharStream0.getLine());
      assertEquals(2139127680, simpleCharStream0.getBeginColumn());
      assertEquals("child::", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(36, token0.kind);
      assertEquals(2139127680, token0.beginColumn);
      assertEquals(30, token0.endLine);
      assertEquals(30, token0.beginLine);
      assertEquals(2139127686, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lang");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 104, (-4443));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-4443), simpleCharStream0.getBeginColumn());
      assertEquals((-4440), simpleCharStream0.getEndColumn());
      assertEquals(104, simpleCharStream0.getEndLine());
      assertEquals((-4440), simpleCharStream0.getColumn());
      assertEquals(104, simpleCharStream0.getBeginLine());
      assertEquals(104, simpleCharStream0.getLine());
      assertEquals("lang", token0.toString());
      assertNotNull(token0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(104, token0.endLine);
      assertEquals((-4440), token0.endColumn);
      assertEquals((-4443), token0.beginColumn);
      assertEquals(71, token0.kind);
      assertEquals(104, token0.beginLine);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 7. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<=");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1866, 1866);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1867, simpleCharStream0.getColumn());
      assertEquals(1866, simpleCharStream0.getLine());
      assertEquals(1866, simpleCharStream0.getBeginLine());
      assertEquals(1866, simpleCharStream0.getBeginColumn());
      assertEquals(1866, simpleCharStream0.getEndLine());
      assertEquals(1867, simpleCharStream0.getEndColumn());
      assertEquals("<=", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(14, token0.kind);
      assertEquals(1867, token0.endColumn);
      assertEquals(1866, token0.endLine);
      assertEquals(1866, token0.beginColumn);
      assertEquals(1866, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~->!t:&15");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 12, 12);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 12, column 12.  Encountered: \"~\" (126), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&x:/4r,");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals('&', char0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 0);
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("x", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(78, token0.kind);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vP~0l;Zt~<.]d(f");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1907), (-1907));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-1906), simpleCharStream0.getEndColumn());
      assertEquals((-1907), simpleCharStream0.getBeginLine());
      assertEquals((-1907), simpleCharStream0.getLine());
      assertEquals((-1907), simpleCharStream0.getBeginColumn());
      assertEquals((-1906), simpleCharStream0.getColumn());
      assertEquals((-1907), simpleCharStream0.getEndLine());
      assertEquals("vP", token0.toString());
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1907), token0.endLine);
      assertEquals((-1907), token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals((-1907), token0.beginColumn);
      assertEquals((-1906), token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("substring-after");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals('s', char0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(15, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("ubstring-after", token0.toString());
      assertNotNull(token0);
      assertEquals(14, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(15, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("text");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("text", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(32, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("round");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1788), 969);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(973, simpleCharStream0.getEndColumn());
      assertEquals(973, simpleCharStream0.getColumn());
      assertEquals(969, simpleCharStream0.getBeginColumn());
      assertEquals((-1788), simpleCharStream0.getEndLine());
      assertEquals((-1788), simpleCharStream0.getLine());
      assertEquals((-1788), simpleCharStream0.getBeginLine());
      assertEquals("round", token0.toString());
      assertNotNull(token0);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(76, token0.kind);
      assertEquals(969, token0.beginColumn);
      assertEquals((-1788), token0.endLine);
      assertEquals((-1788), token0.beginLine);
      assertEquals(973, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qH5`fLz\"A3n2]9$^yOc");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1280), 2147481600);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-1280), simpleCharStream0.getEndLine());
      assertEquals((-1280), simpleCharStream0.getLine());
      assertEquals(2147481602, simpleCharStream0.getEndColumn());
      assertEquals((-1280), simpleCharStream0.getBeginLine());
      assertEquals(2147481602, simpleCharStream0.getColumn());
      assertEquals(2147481600, simpleCharStream0.getBeginColumn());
      assertEquals("qH5", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals((-1280), token0.beginLine);
      assertEquals(2147481600, token0.beginColumn);
      assertEquals((-1280), token0.endLine);
      assertEquals(2147481602, token0.endColumn);
      assertEquals(78, token0.kind);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("position");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("position", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, simpleCharStream0.bufpos);
      assertEquals(49, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(8, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nd/PH");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("nd", token0.toString());
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("local-name");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(10, simpleCharStream0.getColumn());
      assertEquals(10, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("local-name", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(9, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(53, token0.kind);
      assertEquals(10, token0.endColumn);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)107}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)107, 2740, (byte)107);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)107}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)107}, byteArray0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(107, simpleCharStream0.getBeginLine());
      assertEquals(2740, simpleCharStream0.getColumn());
      assertEquals(2740, simpleCharStream0.getEndColumn());
      assertEquals(107, simpleCharStream0.getLine());
      assertEquals(2740, simpleCharStream0.getBeginColumn());
      assertEquals(107, simpleCharStream0.getEndLine());
      assertEquals("k", token0.toString());
      assertArrayEquals(new byte[] {(byte)107}, byteArray0);
      assertNotNull(token0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2740, token0.endColumn);
      assertEquals(107, token0.endLine);
      assertEquals(107, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(2740, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("gGT:3|9| 56c88@");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 45, 62, 119);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(45, simpleCharStream0.getEndLine());
      assertEquals(62, simpleCharStream0.getBeginColumn());
      assertEquals(64, simpleCharStream0.getColumn());
      assertEquals(64, simpleCharStream0.getEndColumn());
      assertEquals(45, simpleCharStream0.getLine());
      assertEquals(45, simpleCharStream0.getBeginLine());
      assertEquals("gGT", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(64, token0.endColumn);
      assertEquals(45, token0.endLine);
      assertEquals(45, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(62, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"descendant::\"");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[5];
      int int0 = stringReader0.read(charArray0);
      assertEquals(5, int0);
      assertArrayEquals(new char[] {'\"', 'd', 'e', 's', 'c'}, charArray0);
      assertEquals(5, charArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-3468), (-3468));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-3468), simpleCharStream0.getBeginLine());
      assertEquals((-3463), simpleCharStream0.getEndColumn());
      assertEquals((-3463), simpleCharStream0.getColumn());
      assertEquals((-3468), simpleCharStream0.getEndLine());
      assertEquals((-3468), simpleCharStream0.getBeginColumn());
      assertEquals((-3468), simpleCharStream0.getLine());
      assertEquals("endant", token0.toString());
      assertNotNull(token0);
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals((-3468), token0.endLine);
      assertEquals((-3468), token0.beginLine);
      assertEquals((-3468), token0.beginColumn);
      assertEquals((-3463), token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("div");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1065, 105);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1065, simpleCharStream0.getBeginLine());
      assertEquals(1065, simpleCharStream0.getLine());
      assertEquals(105, simpleCharStream0.getBeginColumn());
      assertEquals(107, simpleCharStream0.getEndColumn());
      assertEquals(107, simpleCharStream0.getColumn());
      assertEquals(1065, simpleCharStream0.getEndLine());
      assertEquals("div", token0.toString());
      assertNotNull(token0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(30, token0.kind);
      assertEquals(107, token0.endColumn);
      assertEquals(105, token0.beginColumn);
      assertEquals(1065, token0.endLine);
      assertEquals(1065, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("concat");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 709, 1158);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(709, simpleCharStream0.getBeginLine());
      assertEquals(709, simpleCharStream0.getLine());
      assertEquals(1158, simpleCharStream0.getBeginColumn());
      assertEquals(1163, simpleCharStream0.getColumn());
      assertEquals(709, simpleCharStream0.getEndLine());
      assertEquals(1163, simpleCharStream0.getEndColumn());
      assertEquals("concat", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(1163, token0.endColumn);
      assertEquals(1158, token0.beginColumn);
      assertEquals(57, token0.kind);
      assertEquals(709, token0.beginLine);
      assertEquals(709, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("and");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 97, 108);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(97, simpleCharStream0.getEndLine());
      assertEquals(110, simpleCharStream0.getEndColumn());
      assertEquals(97, simpleCharStream0.getBeginLine());
      assertEquals(97, simpleCharStream0.getLine());
      assertEquals(108, simpleCharStream0.getBeginColumn());
      assertEquals(110, simpleCharStream0.getColumn());
      assertEquals("and", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(97, token0.beginLine);
      assertEquals(110, token0.endColumn);
      assertEquals(97, token0.endLine);
      assertEquals(108, token0.beginColumn);
      assertEquals(28, token0.kind);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(97, simpleCharStream0.getEndLine());
      assertEquals(110, simpleCharStream0.getEndColumn());
      assertEquals(97, simpleCharStream0.getBeginLine());
      assertEquals(110, simpleCharStream0.getBeginColumn());
      assertEquals(97, simpleCharStream0.getLine());
      assertEquals(110, simpleCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(97, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(97, token1.endLine);
      assertEquals(110, token1.beginColumn);
      assertEquals(110, token1.endColumn);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`z[_B1q^}'LH=';");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 43, 43);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 43, column 43.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 120, 120);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(120, simpleCharStream0.getColumn());
      assertEquals(120, simpleCharStream0.getLine());
      assertEquals(120, simpleCharStream0.getEndColumn());
      assertEquals(120, simpleCharStream0.getBeginLine());
      assertEquals(120, simpleCharStream0.getBeginColumn());
      assertEquals(120, simpleCharStream0.getEndLine());
      assertEquals("]", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(120, token0.beginLine);
      assertEquals(120, token0.beginColumn);
      assertEquals(120, token0.endColumn);
      assertEquals(85, token0.kind);
      assertEquals(120, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";Z[");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(59, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-3094), 98);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-3094), simpleCharStream0.getBeginLine());
      assertEquals((-3094), simpleCharStream0.getLine());
      assertEquals(98, simpleCharStream0.getColumn());
      assertEquals(98, simpleCharStream0.getBeginColumn());
      assertEquals(98, simpleCharStream0.getEndColumn());
      assertEquals((-3094), simpleCharStream0.getEndLine());
      assertEquals("Z", token0.toString());
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(98, token0.beginColumn);
      assertEquals((-3094), token0.beginLine);
      assertEquals(98, token0.endColumn);
      assertEquals((-3094), token0.endLine);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals((-3094), simpleCharStream0.getBeginLine());
      assertEquals((-3094), simpleCharStream0.getLine());
      assertEquals(99, simpleCharStream0.getColumn());
      assertEquals(99, simpleCharStream0.getBeginColumn());
      assertEquals(99, simpleCharStream0.getEndColumn());
      assertEquals((-3094), simpleCharStream0.getEndLine());
      assertEquals("[", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-3094), token1.endLine);
      assertEquals((-3094), token1.beginLine);
      assertEquals(99, token1.endColumn);
      assertEquals(99, token1.beginColumn);
      assertEquals(84, token1.kind);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yew-~/;5*x");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("Yew-", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(4, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Wtx;t");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 118, 118);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(118, simpleCharStream0.getBeginColumn());
      assertEquals(118, simpleCharStream0.getBeginLine());
      assertEquals(118, simpleCharStream0.getLine());
      assertEquals(120, simpleCharStream0.getEndColumn());
      assertEquals(120, simpleCharStream0.getColumn());
      assertEquals(118, simpleCharStream0.getEndLine());
      assertEquals("Wtx", token0.toString());
      assertNotNull(token0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(118, token0.beginLine);
      assertEquals(118, token0.beginColumn);
      assertEquals(120, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(118, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=N?Sr$jcr");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 3570, 66, 3570);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      StringReader stringReader1 = new StringReader("VHWZgMIMR5Fgt{e");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      simpleCharStream0.ReInit((Reader) stringReader1, 66, 66);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(78, simpleCharStream0.getColumn());
      assertEquals(66, simpleCharStream0.getLine());
      assertEquals(66, simpleCharStream0.getBeginLine());
      assertEquals(66, simpleCharStream0.getEndLine());
      assertEquals(78, simpleCharStream0.getEndColumn());
      assertEquals(66, simpleCharStream0.getBeginColumn());
      assertEquals("VHWZgMIMR5Fgt", token0.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertEquals(12, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(66, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(66, token0.beginLine);
      assertEquals(66, token0.beginColumn);
      assertEquals(78, token0.endColumn);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 66, column 79.  Encountered: \"{\" (123), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("kUEIzU&pv.<ME");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-3204), 41, 41);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int0 = stringReader0.read();
      assertEquals(107, int0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(45, simpleCharStream0.getEndColumn());
      assertEquals((-3204), simpleCharStream0.getBeginLine());
      assertEquals((-3204), simpleCharStream0.getEndLine());
      assertEquals((-3204), simpleCharStream0.getLine());
      assertEquals(41, simpleCharStream0.getBeginColumn());
      assertEquals(45, simpleCharStream0.getColumn());
      assertEquals("UEIzU", token0.toString());
      assertNotNull(token0);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-3204), token0.beginLine);
      assertEquals(45, token0.endColumn);
      assertEquals((-3204), token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(41, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T1wl/s>Jb~");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 758, (-1135), 758);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-1135), simpleCharStream0.getBeginColumn());
      assertEquals(758, simpleCharStream0.getLine());
      assertEquals((-1132), simpleCharStream0.getColumn());
      assertEquals(758, simpleCharStream0.getBeginLine());
      assertEquals((-1132), simpleCharStream0.getEndColumn());
      assertEquals(758, simpleCharStream0.getEndLine());
      assertEquals("T1wl", token0.toString());
      assertNotNull(token0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(758, token0.beginLine);
      assertEquals(758, token0.endLine);
      assertEquals((-1135), token0.beginColumn);
      assertEquals((-1132), token0.endColumn);
      assertEquals(78, token0.kind);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S>}*6keE~s");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-2408), (-2408), 14);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-2408), simpleCharStream0.getColumn());
      assertEquals((-2408), simpleCharStream0.getEndLine());
      assertEquals((-2408), simpleCharStream0.getEndColumn());
      assertEquals((-2408), simpleCharStream0.getBeginLine());
      assertEquals((-2408), simpleCharStream0.getBeginColumn());
      assertEquals((-2408), simpleCharStream0.getLine());
      assertEquals("S", token0.toString());
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-2408), token0.endLine);
      assertEquals((-2408), token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals((-2408), token0.beginColumn);
      assertEquals((-2408), token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#R.w]zRx");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(35, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 5, (-644));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-642), simpleCharStream0.getEndColumn());
      assertEquals(5, simpleCharStream0.getLine());
      assertEquals(5, simpleCharStream0.getBeginLine());
      assertEquals((-642), simpleCharStream0.getColumn());
      assertEquals((-644), simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getEndLine());
      assertEquals("R.w", token0.toString());
      assertNotNull(token0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-642), token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals((-644), token0.beginColumn);
      assertEquals(5, token0.beginLine);
      assertEquals(5, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QYc<r$$<4LcY}");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("QYc", token0.toString());
      assertNotNull(token0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0YPd1_7emp");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2411, 2411);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char[] charArray0 = new char[3];
      int int0 = stringReader0.read(charArray0);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'0', '', 'Y'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2411, simpleCharStream0.getBeginLine());
      assertEquals(2411, simpleCharStream0.getBeginColumn());
      assertEquals(2418, simpleCharStream0.getColumn());
      assertEquals(2411, simpleCharStream0.getEndLine());
      assertEquals(2418, simpleCharStream0.getEndColumn());
      assertEquals(2411, simpleCharStream0.getLine());
      assertEquals("Pd1_7emp", token0.toString());
      assertNotNull(token0);
      assertEquals(7, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2411, token0.beginColumn);
      assertEquals(2411, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(2411, token0.endLine);
      assertEquals(2418, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("OeBGI*{omOuZ'?.GB");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("OeBGI", token0.toString());
      assertNotNull(token0);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)76, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)112, (byte)90);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)76, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)76, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(112, simpleCharStream0.getLine());
      assertEquals(90, simpleCharStream0.getEndColumn());
      assertEquals(112, simpleCharStream0.getEndLine());
      assertEquals(90, simpleCharStream0.getBeginColumn());
      assertEquals(90, simpleCharStream0.getColumn());
      assertEquals(112, simpleCharStream0.getBeginLine());
      assertEquals("L", token0.toString());
      assertArrayEquals(new byte[] {(byte)76, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(90, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(90, token0.endColumn);
      assertEquals(112, token0.endLine);
      assertEquals(112, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("IFn_\"dy");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1466, (-1757), 12);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1466, simpleCharStream0.getBeginLine());
      assertEquals(1466, simpleCharStream0.getLine());
      assertEquals(1466, simpleCharStream0.getEndLine());
      assertEquals((-1755), simpleCharStream0.getEndColumn());
      assertEquals((-1755), simpleCharStream0.getColumn());
      assertEquals((-1757), simpleCharStream0.getBeginColumn());
      assertEquals("IFn", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1466, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals((-1757), token0.beginColumn);
      assertEquals((-1755), token0.endColumn);
      assertEquals(1466, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte)0}, byteArray0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("H", token0.toString());
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Error: Ignoring invalid lexical state : ");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals("Error", token0.toString());
      assertNotNull(token0);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(5, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NxTsIM|BbqL0");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1050, 1050, 1050);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1055, simpleCharStream0.getColumn());
      assertEquals(1050, simpleCharStream0.getEndLine());
      assertEquals(1055, simpleCharStream0.getEndColumn());
      assertEquals(1050, simpleCharStream0.getBeginLine());
      assertEquals(1050, simpleCharStream0.getLine());
      assertEquals(1050, simpleCharStream0.getBeginColumn());
      assertEquals("NxTsIM", token0.toString());
      assertNotNull(token0);
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1050, token0.beginColumn);
      assertEquals(1050, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1050, token0.beginLine);
      assertEquals(1055, token0.endColumn);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(1056, simpleCharStream0.getColumn());
      assertEquals(1050, simpleCharStream0.getEndLine());
      assertEquals(1050, simpleCharStream0.getBeginLine());
      assertEquals(1056, simpleCharStream0.getEndColumn());
      assertEquals(1056, simpleCharStream0.getBeginColumn());
      assertEquals(1050, simpleCharStream0.getLine());
      assertEquals("|", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1056, token1.endColumn);
      assertEquals(1056, token1.beginColumn);
      assertEquals(1050, token1.beginLine);
      assertEquals(1050, token1.endLine);
      assertEquals(8, token1.kind);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertEquals(1061, simpleCharStream0.getEndColumn());
      assertEquals(1050, simpleCharStream0.getEndLine());
      assertEquals(1061, simpleCharStream0.getColumn());
      assertEquals(1050, simpleCharStream0.getBeginLine());
      assertEquals(1057, simpleCharStream0.getBeginColumn());
      assertEquals(1050, simpleCharStream0.getLine());
      assertEquals("BbqL0", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals(11, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1050, token2.beginLine);
      assertEquals(1050, token2.endLine);
      assertEquals(1061, token2.endColumn);
      assertEquals(78, token2.kind);
      assertEquals(1057, token2.beginColumn);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'A{w+~?LBr?");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1558, 1558);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      int int0 = stringReader0.read();
      assertEquals(39, int0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1558, simpleCharStream0.getColumn());
      assertEquals(1558, simpleCharStream0.getLine());
      assertEquals(1558, simpleCharStream0.getEndColumn());
      assertEquals(1558, simpleCharStream0.getBeginLine());
      assertEquals(1558, simpleCharStream0.getBeginColumn());
      assertEquals(1558, simpleCharStream0.getEndLine());
      assertEquals("A", token0.toString());
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1558, token0.beginLine);
      assertEquals(1558, token0.beginColumn);
      assertEquals(1558, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1558, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("@", token0.toString());
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(86, token0.kind);
      assertEquals(1, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?hR{KbPgCI");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1529, 1529);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1529, column 1529.  Encountered: \"?\" (63), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=N?Sr$jcr");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 3570, 75, 75);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(3570, simpleCharStream0.getBeginLine());
      assertEquals(75, simpleCharStream0.getBeginColumn());
      assertEquals(75, simpleCharStream0.getEndColumn());
      assertEquals(3570, simpleCharStream0.getLine());
      assertEquals(3570, simpleCharStream0.getEndLine());
      assertEquals(75, simpleCharStream0.getColumn());
      assertEquals("=", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(3570, token0.endLine);
      assertEquals(3570, token0.beginLine);
      assertEquals(75, token0.endColumn);
      assertEquals(11, token0.kind);
      assertEquals(75, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";Z[");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-3094), 98);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -3094, column 98.  Encountered: \";\" (59), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5a%\"hBxWdUr/mSRm");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2061, (-1888), 2061);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2061, simpleCharStream0.getEndLine());
      assertEquals((-1888), simpleCharStream0.getColumn());
      assertEquals((-1888), simpleCharStream0.getBeginColumn());
      assertEquals((-1888), simpleCharStream0.getEndColumn());
      assertEquals(2061, simpleCharStream0.getBeginLine());
      assertEquals(2061, simpleCharStream0.getLine());
      assertEquals("5", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(20, token0.kind);
      assertEquals(2061, token0.endLine);
      assertEquals((-1888), token0.beginColumn);
      assertEquals((-1888), token0.endColumn);
      assertEquals(2061, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3$c2e'5@<");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 6, 1737, 1737);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1737, simpleCharStream0.getEndColumn());
      assertEquals(1737, simpleCharStream0.getColumn());
      assertEquals(6, simpleCharStream0.getLine());
      assertEquals(1737, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getEndLine());
      assertEquals("3", token0.toString());
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1737, token0.endColumn);
      assertEquals(1737, token0.beginColumn);
      assertEquals(6, token0.beginLine);
      assertEquals(6, token0.endLine);
      assertEquals(20, token0.kind);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertEquals(1737, simpleCharStream0.getEndColumn());
      assertEquals(1737, simpleCharStream0.getColumn());
      assertEquals(6, simpleCharStream0.getLine());
      assertEquals(1737, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getEndLine());
      assertEquals("3", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, token1.beginLine);
      assertEquals(20, token1.kind);
      assertEquals(6, token1.endLine);
      assertEquals(1737, token1.beginColumn);
      assertEquals(1737, token1.endColumn);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-O*8;prWZ)AH0\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1152), 1162, 1162);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1162, simpleCharStream0.getEndColumn());
      assertEquals((-1152), simpleCharStream0.getLine());
      assertEquals(1162, simpleCharStream0.getBeginColumn());
      assertEquals((-1152), simpleCharStream0.getBeginLine());
      assertEquals(1162, simpleCharStream0.getColumn());
      assertEquals((-1152), simpleCharStream0.getEndLine());
      assertEquals("-", token0.toString());
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1152), token0.endLine);
      assertEquals((-1152), token0.beginLine);
      assertEquals(10, token0.kind);
      assertEquals(1162, token0.beginColumn);
      assertEquals(1162, token0.endColumn);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 303);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 303. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",:}yRzA3|}T");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2879, 2879, 116);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2879, simpleCharStream0.getEndLine());
      assertEquals(2879, simpleCharStream0.getEndColumn());
      assertEquals(2879, simpleCharStream0.getLine());
      assertEquals(2879, simpleCharStream0.getBeginColumn());
      assertEquals(2879, simpleCharStream0.getColumn());
      assertEquals(2879, simpleCharStream0.getBeginLine());
      assertEquals(",", token0.toString());
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2879, token0.endLine);
      assertEquals(2879, token0.beginColumn);
      assertEquals(2879, token0.beginLine);
      assertEquals(2879, token0.endColumn);
      assertEquals(87, token0.kind);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(2879, simpleCharStream0.getEndLine());
      assertEquals(2880, simpleCharStream0.getEndColumn());
      assertEquals(2879, simpleCharStream0.getLine());
      assertEquals(2880, simpleCharStream0.getBeginColumn());
      assertEquals(2880, simpleCharStream0.getColumn());
      assertEquals(2879, simpleCharStream0.getBeginLine());
      assertEquals(":", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2880, token1.beginColumn);
      assertEquals(2879, token1.beginLine);
      assertEquals(79, token1.kind);
      assertEquals(2880, token1.endColumn);
      assertEquals(2879, token1.endLine);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"+\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char[] charArray0 = new char[1];
      int int0 = stringReader0.read(charArray0);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'\"'}, charArray0);
      assertEquals(1, charArray0.length);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("+", token0.toString());
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(9, token0.kind);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&t \"@W8;h =}");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"&\" (38), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G%");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals('G', char0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("$", token0.toString());
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(17, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)39, (byte)39);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(8, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(8, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 39, column 39.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~->!t:&15");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 12, 12);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char[] charArray0 = new char[2];
      int int0 = stringReader0.read(charArray0);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'~', '-'}, charArray0);
      assertEquals(2, charArray0.length);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(12, simpleCharStream0.getColumn());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getEndColumn());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(">", token0.toString());
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(12, token0.endLine);
      assertEquals(12, token0.beginLine);
      assertEquals(12, token0.beginColumn);
      assertEquals(12, token0.endColumn);
      assertEquals(15, token0.kind);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 12, column 14.  Encountered: \"t\" (116), after : \"!\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yz5<nt}J6:PZ-iHU: 3");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("yz5", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("<", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(4, token1.beginColumn);
      assertEquals(4, token1.endColumn);
      assertEquals(13, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i0_%");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("i0_", token0.toString());
      assertNotNull(token0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("following-sibling::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(19, simpleCharStream0.getColumn());
      assertEquals(19, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("following-sibling::", token0.toString());
      assertNotNull(token0);
      assertEquals(18, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(19, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(45, token0.kind);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".ed");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(".", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(82, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"descendant::\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-3468), (-3468));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-3468), simpleCharStream0.getEndLine());
      assertEquals((-3468), simpleCharStream0.getBeginLine());
      assertEquals((-3455), simpleCharStream0.getColumn());
      assertEquals((-3468), simpleCharStream0.getLine());
      assertEquals((-3455), simpleCharStream0.getEndColumn());
      assertEquals((-3468), simpleCharStream0.getBeginColumn());
      assertEquals("\"descendant::\"", token0.toString());
      assertNotNull(token0);
      assertEquals(13, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-3468), token0.beginLine);
      assertEquals((-3455), token0.endColumn);
      assertEquals((-3468), token0.beginColumn);
      assertEquals(18, token0.kind);
      assertEquals((-3468), token0.endLine);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sum");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2394, 2394);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2394, simpleCharStream0.getLine());
      assertEquals(2396, simpleCharStream0.getEndColumn());
      assertEquals(2396, simpleCharStream0.getColumn());
      assertEquals(2394, simpleCharStream0.getBeginColumn());
      assertEquals(2394, simpleCharStream0.getEndLine());
      assertEquals(2394, simpleCharStream0.getBeginLine());
      assertEquals("sum", token0.toString());
      assertNotNull(token0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2396, token0.endColumn);
      assertEquals(2394, token0.beginColumn);
      assertEquals(2394, token0.beginLine);
      assertEquals(73, token0.kind);
      assertEquals(2394, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("following-sibling::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      MockFile mockFile0 = new MockFile("following-sibling::");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      xPathParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("following-sibling::", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("following-sibling::", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }
}
