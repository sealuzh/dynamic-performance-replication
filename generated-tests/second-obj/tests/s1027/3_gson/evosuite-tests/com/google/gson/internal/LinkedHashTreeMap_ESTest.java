/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:03:22 GMT 2018
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.LinkedHashTreeMap;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.ToDoubleFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkedHashTreeMap_ESTest extends LinkedHashTreeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.clear();
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      Object object0 = new Object();
      linkedHashTreeMap0.containsValue(object0);
      LinkedHashTreeMap.Node<Object, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Object, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 0);
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<Object, String>[]) linkedHashTreeMap_NodeArray0);
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)linkedHashTreeMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>(comparator0);
      Integer integer0 = new Integer((-1767));
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.merge("", integer0, biFunction0);
      linkedHashTreeMap0.remove((Object) "", (Object) "");
      linkedHashTreeMap0.clear();
      assertEquals(0, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Object, Object>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<Object, Object>[] linkedHashTreeMap_NodeArray1 = LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<Object, Object>[]) linkedHashTreeMap_NodeArray0);
      assertNotNull(linkedHashTreeMap_NodeArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap0.size = 357;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap0.put("", "");
      linkedHashTreeMap_Node0.toString();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.AvlBuilder<String, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Integer>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap_AvlIterator0.reset(linkedHashTreeMap_Node1);
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_AvlIterator0.next();
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Object, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, String>();
      linkedHashTreeMap_AvlBuilder0.reset(3560);
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, String>();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.next;
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      linkedHashTreeMap_AvlBuilder0.root();
      linkedHashTreeMap_AvlBuilder0.root();
      LinkedHashTreeMap.AvlBuilder<String, Object> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<String, Object>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder1.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.size();
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Object>();
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.prev;
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, false);
      assertEquals((-1), linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Integer>();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.removeInternal((LinkedHashTreeMap.Node<Object, String>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Object>();
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      linkedHashTreeMap0.containsValue(linkedHashTreeMap_AvlBuilder0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      int int0 = linkedHashTreeMap_EntrySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>((Comparator<? super Integer>) null);
      Integer integer0 = new Integer(2);
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.merge(integer0, "w`22Tl^[Z?U/>kvm.W", biFunction0);
      linkedHashTreeMap0.keySet();
      assertEquals(1, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>(comparator0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.clear();
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      boolean boolean0 = linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, String>();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.next;
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      assertNotNull(linkedHashTreeMap_Node2);
      
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, String>(linkedHashTreeMap_Node2, linkedHashTreeMap_Node0, 12, linkedHashTreeMap_Node2, linkedHashTreeMap_Node1);
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.first();
      assertNotNull(linkedHashTreeMap_Node4);
      
      boolean boolean0 = linkedHashTreeMap_Node4.equals(linkedHashTreeMap_Node0);
      assertFalse(linkedHashTreeMap_Node2.equals((Object)linkedHashTreeMap_Node4));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Integer>();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node0 = null;
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.putIfAbsent(linkedHashTreeMap_AvlBuilder0, "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedHashTreeMap$AvlBuilder is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator2 = Comparator.nullsLast((Comparator<? super Integer>) comparator1);
      LinkedHashTreeMap<Integer, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Integer>(comparator2);
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      int int0 = 1;
      Integer integer0 = new Integer(1);
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Integer, Integer>(linkedHashTreeMap_Node1, integer0, (-2512), linkedHashTreeMap_Node0, linkedHashTreeMap_Node1);
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node3, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>((Comparator<? super Integer>) null);
      linkedHashTreeMap0.threshold = 0;
      linkedHashTreeMap0.threshold = 0;
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      int int0 = linkedHashTreeMap_KeySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator2 = Comparator.nullsLast((Comparator<? super Integer>) comparator1);
      LinkedHashTreeMap<Integer, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Integer>(comparator2);
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>(comparator3);
      linkedHashTreeMap1.entrySet();
      Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator4).compare(any() , any());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, Object>(comparator4);
      LinkedHashTreeMap<String, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = linkedHashTreeMap2.find(linkedHashTreeMap3, true);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap_Node1.getKey();
      linkedHashTreeMap2.findByEntry(linkedHashTreeMap_Node1);
      linkedHashTreeMap2.keySet();
      LinkedHashTreeMap.AvlBuilder<Object, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Integer>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_Node1.left = linkedHashTreeMap_Node0;
      linkedHashTreeMap0.size = 2021;
      linkedHashTreeMap_Node1.equals(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap_Node0.toString();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put(linkedHashTreeMap_Node2, "null=null");
      Map.Entry.comparingByKey();
      linkedHashTreeMap0.putAll(hashMap0);
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap0.isEmpty();
      linkedHashTreeMap0.putAll(hashMap0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap0.putAll(hashMap0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet2 = linkedHashTreeMap0.new KeySet();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_KeySet2.add("null=null");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, String>();
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node0, true);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap1 = new LinkedHashTreeMap<String, String>(comparator0);
      String string0 = linkedHashTreeMap1.remove((Object) linkedHashTreeMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_Node0.left = linkedHashTreeMap_Node1;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      linkedHashTreeMap0.size = 3;
      Integer integer0 = new Integer(3);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.put(linkedHashTreeMap_Node0, "3tf~-~");
      Map.Entry.comparingByKey();
      linkedHashTreeMap0.putAll(hashMap0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.containsAll(linkedHashTreeMap_KeySet1);
      // Undeclared exception!
      try { 
        linkedHashTreeMap_KeySet1.add(hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap0.putIfAbsent("key == null", "");
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap_KeySet0.forEach(consumer0);
      linkedHashTreeMap_KeySet0.remove(linkedHashTreeMap0);
      linkedHashTreeMap0.size();
      LinkedHashTreeMap.AvlIterator<Integer, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Integer, String>();
      linkedHashTreeMap_AvlIterator0.next();
      linkedHashTreeMap_AvlIterator0.next();
      linkedHashTreeMap_AvlIterator0.reset((LinkedHashTreeMap.Node<Integer, String>) null);
      linkedHashTreeMap_AvlIterator0.next();
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.findByEntry((Map.Entry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      Map.Entry.comparingByValue();
      linkedHashTreeMap_Node0.height = 1679;
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap_Node0.right = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      linkedHashTreeMap_Node2.toString();
      linkedHashTreeMap_Node1.getKey();
      LinkedHashTreeMap.AvlIterator<Object, Integer> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, Integer>();
      linkedHashTreeMap_Node1.getValue();
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node2);
      linkedHashTreeMap_AvlBuilder0.reset(4);
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      linkedHashTreeMap_Node0.value = (Object) "null=null";
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.contains(linkedHashTreeMap_Node0);
      linkedHashTreeMap0.keySet();
      LinkedHashTreeMap.AvlBuilder<Object, String> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<Object, String>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder1.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, String>();
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, String>();
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      assertNotNull(linkedHashTreeMap_Node2);
      
      linkedHashTreeMap_Node0.right = linkedHashTreeMap_Node2;
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node3);
      assertSame(linkedHashTreeMap_Node3, linkedHashTreeMap_Node2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>((Comparator<? super Integer>) null);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      String string0 = "UU0T 6-2Qe7[";
      linkedHashTreeMap0.putIfAbsent(integer0, "UU0T 6-2Qe7[");
      BiFunction<Integer, Object, String> biFunction0 = (BiFunction<Integer, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyInt() , any());
      linkedHashTreeMap0.replaceAll(biFunction0);
      String string1 = "";
      linkedHashTreeMap0.get("");
      LinkedHashTreeMap.AvlBuilder<Integer, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Integer, Object>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap_Node0.equals(linkedHashTreeMap_Node1);
      linkedHashTreeMap_Node1.first();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>(comparator1);
      String string0 = linkedHashTreeMap0.remove((Object) linkedHashTreeMap_Node1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      Map.Entry.comparingByKey();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_Node1.setValue(linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node1.equals(linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node0.toString();
      int int0 = 5;
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>(linkedHashTreeMap_Node1, linkedHashTreeMap0, 5, linkedHashTreeMap_Node0, linkedHashTreeMap_Node1);
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node2, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<Object, Object> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, Object>();
      linkedHashTreeMap_AvlIterator0.next();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      linkedHashTreeMap_AvlIterator0.reset(linkedHashTreeMap_Node0);
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      boolean boolean0 = linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap_Node0);
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_Node0.left = linkedHashTreeMap_Node1;
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Object object0 = new Object();
      hashMap0.put(linkedHashTreeMap_Node0, "3tf~-~");
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>();
      linkedHashTreeMap1.entrySet();
      Object object1 = new Object();
      linkedHashTreeMap0.remove((Object) null);
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, Object>();
      linkedHashTreeMap2.isEmpty();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap2.new KeySet();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node0.first();
      assertNotNull(linkedHashTreeMap_Node2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      String string0 = "";
      Integer integer0 = new Integer(4);
      Object object0 = new Object();
      String string1 = " is not Comparable";
      hashMap0.put(object0, " is not Comparable");
      Map.Entry.comparingByKey();
      linkedHashTreeMap0.putAll(hashMap0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap0.isEmpty();
      linkedHashTreeMap_KeySet0.retainAll(linkedHashTreeMap_KeySet1);
      linkedHashTreeMap_KeySet1.remove(object0);
      hashMap0.clone();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Object>) comparator1);
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>();
      // Undeclared exception!
      try { 
        Comparator.comparingDouble((ToDoubleFunction<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator.nullsLast((Comparator<? super Integer>) comparator1);
      LinkedHashTreeMap<Integer, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Integer>();
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      int int0 = (-5);
      Integer integer0 = new Integer((-5));
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Integer, Integer>(linkedHashTreeMap_Node1, integer0, (-2512), linkedHashTreeMap_Node0, linkedHashTreeMap_Node1);
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      linkedHashTreeMap_Node2.right = linkedHashTreeMap_Node0;
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node3, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_Node0.left = linkedHashTreeMap_Node1;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      Integer integer0 = new Integer(3);
      Map.Entry.comparingByKey();
      Map.Entry.comparingByValue();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>(comparator1);
      linkedHashTreeMap1.findByEntry(linkedHashTreeMap_Node0);
      Integer integer1 = new Integer((-2493));
      linkedHashTreeMap_Node1.toString();
      linkedHashTreeMap0.isEmpty();
      linkedHashTreeMap0.putAll(linkedHashTreeMap1);
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node0, true);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap0.header;
      // Undeclared exception!
      try { 
        Map.Entry.comparingByValue((Comparator<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_Node0.left = linkedHashTreeMap_Node1;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Object>();
      linkedHashTreeMap_Node2.first();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, Object>();
      linkedHashTreeMap_Node3.prev = linkedHashTreeMap_Node2;
      String string0 = linkedHashTreeMap_Node3.key;
      hashMap0.put((Object) null, "AFTqm~C");
      linkedHashTreeMap_Node0.setValue(linkedHashTreeMap0);
      hashMap0.put(linkedHashTreeMap_Node0, "3tf~-~");
      Map.Entry.comparingByKey();
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.putAll(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      Map.Entry.comparingByKey();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_Node1.setValue(linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node1.equals(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>(linkedHashTreeMap_Node1, linkedHashTreeMap0, 5, linkedHashTreeMap_Node0, linkedHashTreeMap_Node1);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put(linkedHashTreeMap_Node2, "3tf~-~");
      Map.Entry.comparingByKey();
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.putAll(hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedHashTreeMap$Node is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      Object object0 = linkedHashTreeMap_Node1.setValue(linkedHashTreeMap_Node0);
      assertNull(object0);
      
      boolean boolean0 = linkedHashTreeMap_Node1.equals(linkedHashTreeMap_Node0);
      assertFalse(boolean0);
      
      linkedHashTreeMap_Node0.last();
      String string0 = linkedHashTreeMap_Node0.toString();
      assertEquals("null=null", string0);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>();
      boolean boolean1 = linkedHashTreeMap_Node2.equals(linkedHashTreeMap_Node1);
      assertFalse(boolean1);
      
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put(linkedHashTreeMap_Node2, "");
      Map.Entry.comparingByKey();
      Map.Entry.comparingByValue();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Object>();
      assertTrue(linkedHashTreeMap_Node3.equals((Object)linkedHashTreeMap_Node2));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>();
      linkedHashTreeMap0.size();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>(comparator0);
      LinkedHashTreeMap<String, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = linkedHashTreeMap1.find(linkedHashTreeMap2, true);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap1.findByEntry(linkedHashTreeMap_Node0);
      linkedHashTreeMap1.keySet();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap2.new EntrySet();
      Integer integer0 = new Integer(0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap1.new EntrySet();
      linkedHashTreeMap1.keySet();
      linkedHashTreeMap_Node0.equals(linkedHashTreeMap_Node1);
      linkedHashTreeMap_Node2.toString();
      assertEquals(1, linkedHashTreeMap1.size());
      
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Integer>();
      Comparator.reverseOrder();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap2.computeIfPresent("{}=null", biFunction0);
      assertEquals(0, linkedHashTreeMap2.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<Object, Object> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>(comparator0);
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.find(linkedHashTreeMap_AvlIterator0, true);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>(comparator1);
      linkedHashTreeMap1.findByEntry(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap_Node0);
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, Integer>();
      linkedHashTreeMap2.findByEntry(linkedHashTreeMap_Node0);
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      linkedHashTreeMap_AvlBuilder0.reset((-60));
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      linkedHashTreeMap_AvlBuilder0.reset(1850);
      linkedHashTreeMap_Node0.toString();
      LinkedHashTreeMap<Integer, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Integer>();
      Integer integer0 = new Integer(1850);
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Integer>();
      linkedHashTreeMap0.remove((Object) linkedHashTreeMap_Node1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>(comparator0);
      linkedHashTreeMap1.find((Object) null, true);
      Map.Entry.comparingByValue();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, Object>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap2.putAll(linkedHashTreeMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-4), (-4), (-4)).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Object object0 = new Object();
      hashMap0.put(linkedHashTreeMap_Node0, "ujZ0&T");
      Map.Entry.comparingByKey();
      linkedHashTreeMap0.putAll(hashMap0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap0.isEmpty();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.putAll(hashMap0);
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      linkedHashTreeMap_AvlBuilder0.reset((-4));
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>();
      linkedHashTreeMap1.keySet();
      linkedHashTreeMap0.putAll(hashMap0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>(linkedHashTreeMap_Node1, linkedHashTreeMap0, (-4), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_EntrySet0.add(linkedHashTreeMap_Node2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1, 1, (-3555), 12).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, "key == null");
      Object object0 = new Object();
      linkedHashTreeMap0.putAll(hashMap0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap0.isEmpty();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.putAll(hashMap0);
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>();
      linkedHashTreeMap0.putAll(hashMap0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap0.keySet();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Integer>();
      Map.Entry.comparingByValue();
      linkedHashTreeMap0.isEmpty();
      linkedHashTreeMap0.putAll(hashMap0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.putAll(hashMap0);
      Object object1 = new Object();
      linkedHashTreeMap0.find(object1, false);
      Integer integer1 = new Integer(1);
      linkedHashTreeMap0.clear();
      assertEquals(0, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Object, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, String>();
      linkedHashTreeMap_AvlBuilder0.reset(3560);
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, String>();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.next;
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1, 1, (-3555), 0).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, "key == null");
      Object object0 = new Object();
      hashMap0.put(linkedHashTreeMap_Node0, "ujZ&6");
      linkedHashTreeMap0.putAll(hashMap0);
      linkedHashTreeMap0.isEmpty();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.putAll(hashMap0);
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.contains((Object) null);
      linkedHashTreeMap0.keySet();
      Map.Entry.comparingByValue();
      linkedHashTreeMap0.isEmpty();
      linkedHashTreeMap0.putAll(hashMap0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Object>) comparator1);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_Node2.last();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet2 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, false);
      assertEquals(5, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 2021;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1105)).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      Comparator<Map.Entry<Integer, String>> comparator1 = Map.Entry.comparingByValue();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_Node1.equals(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>(linkedHashTreeMap_Node1, comparator1, (-1105), linkedHashTreeMap_Node1, linkedHashTreeMap_Node1);
      linkedHashTreeMap_Node0.toString();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Object>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put(linkedHashTreeMap_Node3, "null=null");
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node4 = linkedHashTreeMap1.header;
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(linkedHashTreeMap_Node4);
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<Object, Integer>(linkedHashTreeMap_Node4, abstractMap_SimpleEntry0, (-1105), linkedHashTreeMap_Node4, linkedHashTreeMap_Node4);
      hashMap0.put(linkedHashTreeMap_Node5, "null=null");
      Map.Entry.comparingByKey();
      linkedHashTreeMap0.putAll(hashMap0);
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap1.new KeySet();
      linkedHashTreeMap0.isEmpty();
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.putAll(linkedHashTreeMap0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$LinkedTreeMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      int int0 = 1;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1, 1).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Object object0 = new Object();
      hashMap0.put(linkedHashTreeMap_Node0, "ujZ0&T");
      linkedHashTreeMap0.putAll(hashMap0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap0.isEmpty();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.putAll(hashMap0);
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>();
      Set<Object> set0 = linkedHashTreeMap1.keySet();
      linkedHashTreeMap0.putAll(hashMap0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>();
      Integer integer0 = new Integer(1);
      linkedHashTreeMap_KeySet1.retainAll(set0);
      linkedHashTreeMap_KeySet0.spliterator();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<String, Object>(comparator1);
      linkedHashTreeMap2.findByEntry(linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, String>();
      Object object1 = linkedHashTreeMap_Node3.key;
      linkedHashTreeMap_KeySet0.remove((Object) null);
      linkedHashTreeMap2.values();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet2 = linkedHashTreeMap2.new KeySet();
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1, 1, 1, 1).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put(linkedHashTreeMap_Node0, "ujZ0&T");
      linkedHashTreeMap0.putAll(hashMap0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap0.isEmpty();
      linkedHashTreeMap_Node1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.putAll(hashMap0);
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>();
      linkedHashTreeMap0.putAll(hashMap0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>(linkedHashTreeMap_Node1, linkedHashTreeMap0, 1, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.contains((Object) null);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap0.keySet();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node3 = linkedHashTreeMap1.header;
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.first();
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(linkedHashTreeMap_Node4);
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<Object, Integer>(linkedHashTreeMap_Node4, linkedHashTreeMap_Node0, (-3548), linkedHashTreeMap_Node3, linkedHashTreeMap_Node3);
      Integer integer0 = new Integer((-3548));
      hashMap0.put(integer0, (String) null);
      Map.Entry.comparingByKey();
      linkedHashTreeMap0.putAll(hashMap0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet2 = linkedHashTreeMap1.new KeySet();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet3 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap0.putAll(linkedHashTreeMap1);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap0.putAll(linkedHashTreeMap1);
      assertEquals(7, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node7 = linkedHashTreeMap_Node4.last();
      linkedHashTreeMap1.removeInternal(linkedHashTreeMap_Node4, false);
      assertSame(linkedHashTreeMap_Node3, linkedHashTreeMap_Node7);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_Node0.left = linkedHashTreeMap_Node1;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_Node0.left.setValue(hashMap0);
      boolean boolean0 = linkedHashTreeMap_Node0.left.equals(linkedHashTreeMap_Node1);
      linkedHashTreeMap_Node2.toString();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Object>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap1.put(linkedHashTreeMap0, "null=null");
      String string0 = linkedHashTreeMap_Node0.left.toString();
      assertEquals("null={}", string0);
      
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node4 = linkedHashTreeMap1.header;
      linkedHashTreeMap_Node4.first();
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(linkedHashTreeMap_Node4);
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node5 = linkedHashTreeMap1.header;
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<Object, Integer>(linkedHashTreeMap_Node5, linkedHashTreeMap_Node4, 1, linkedHashTreeMap_Node4, linkedHashTreeMap_Node5);
      Integer.getInteger("");
      hashMap0.put((Object) null, (String) null);
      Map.Entry.comparingByKey();
      linkedHashTreeMap0.putAll(hashMap1);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<Integer, Object>((Comparator<? super Integer>) null);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap2.new KeySet();
      linkedHashTreeMap0.putAll(linkedHashTreeMap2);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node7 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap0.putAll(linkedHashTreeMap2);
      boolean boolean1 = linkedHashTreeMap0.containsKey((Object) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      Comparator<Map.Entry<Integer, String>> comparator1 = Map.Entry.comparingByValue();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_Node1.setValue(linkedHashTreeMap_Node0);
      linkedHashTreeMap0.size = 2021;
      linkedHashTreeMap_Node1.equals(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>(linkedHashTreeMap_Node1, comparator1, (-1110), linkedHashTreeMap_Node1, linkedHashTreeMap_Node1);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap_Node0.toString();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<Object, Object>(linkedHashTreeMap_Node3, linkedHashTreeMap_Node2, (-1110), linkedHashTreeMap_Node3, linkedHashTreeMap_Node0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put(linkedHashTreeMap_Node4, "null=null");
      Map.Entry.comparingByKey();
      linkedHashTreeMap0.putAll(hashMap0);
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap0.isEmpty();
      linkedHashTreeMap0.putAll(hashMap0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet1.stream();
      Map.Entry.comparingByValue();
      linkedHashTreeMap0.findByEntry(linkedHashTreeMap_Node0);
      Comparator<Object> comparator2 = null;
      // Undeclared exception!
      try { 
        Map.Entry.comparingByValue((Comparator<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
}
