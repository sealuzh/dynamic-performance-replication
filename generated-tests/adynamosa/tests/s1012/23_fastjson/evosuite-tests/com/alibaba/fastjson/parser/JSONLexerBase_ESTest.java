/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 16:33:11 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.UnsupportedCharsetException;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5E+M]!YaV{{", 132);
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal(':');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("LS", 46);
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanBoolean('S');
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Z|^h6 lnx\"");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.integerValue();
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(111, charArray0, 18, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 110);
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.add("null");
      long long0 = jSONReaderScanner0.scanLong('v');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("31");
      jSONReaderScanner0.scanType("");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.charAt(2034);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulu", 110);
      jSONReaderScanner0.isRef();
      int int0 = JSONLexer.NOT_MATCH_NAME;
      HashSet<String> hashSet0 = new HashSet<String>();
      jSONReaderScanner0.scanStringArray(hashSet0, 'z');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5d0wo");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("5d0wo", 0);
      jSONReaderScanner1.scanBoolean('%');
      jSONReaderScanner0.scanFloat('%');
      jSONReaderScanner1.nextToken();
      assertEquals(2, jSONReaderScanner1.token());
      
      Number number0 = jSONReaderScanner1.integerValue();
      assertEquals(5, number0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = 'R';
      charArray0[2] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1390);
      jSONReaderScanner0.scanLong('R');
      jSONReaderScanner0.subString(35, 23);
      jSONReaderScanner0.token();
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ni']hu+0J'N");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanInt('R');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.getTimeZone();
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "i-/~ZO!jm";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("i-/~ZO!jm", (-580));
      int int0 = (-1992);
      jSONReaderScanner0.features = (-1992);
      char char0 = 'i';
      jSONReaderScanner0.putChar('i');
      char[] charArray0 = new char[8];
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5E+M]!YaV{{", 224);
      jSONScanner0.scanNumber();
      jSONScanner0.nextToken(13);
      long long0 = jSONScanner0.longValue();
      assertEquals('', jSONScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 110);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanInt('-');
      HashSet<String> hashSet0 = new HashSet<String>();
      jSONReaderScanner0.scanStringArray(hashSet0, 'z');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("create asm deserializer error, ");
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray1);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanType((String) null);
      assertEquals(20, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 26, 91);
      jSONReaderScanner1.scanFieldDate(charArray1);
      assertEquals(91, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("QMsK)=&H8S$t<H ");
      jSONReaderScanner0.info();
      JSONScanner jSONScanner0 = new JSONScanner("3eT7%*Ozz`-T8_W1U/L");
      jSONScanner0.nextToken(13);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 49);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.nextIdent();
      JSONScanner jSONScanner0 = new JSONScanner("\":\"", (-1));
      jSONScanner0.nextToken((-1));
      long long0 = jSONScanner0.longValue();
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-14L), long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      String string0 = "hu+0j'n";
      SymbolTable symbolTable0 = new SymbolTable(1099);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      JSONScanner jSONScanner0 = new JSONScanner("_qee", 3570);
      jSONScanner0.nextToken(17);
      long long0 = jSONScanner0.longValue();
      assertEquals(3570, jSONScanner0.getFeatures());
      assertEquals(0L, long0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ni']hu+0J'N");
      jSONReaderScanner0.scanString('|');
      char[] charArray0 = new char[8];
      charArray0[1] = '|';
      charArray0[3] = '7';
      charArray0[4] = '|';
      charArray0[5] = '|';
      charArray0[6] = '|';
      charArray0[7] = '|';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 110);
      JSONScanner jSONScanner0 = new JSONScanner("null", 114);
      jSONScanner0.nextToken(5);
      long long0 = jSONScanner0.longValue();
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal.char");
      JSONScanner jSONScanner0 = new JSONScanner(";#eQjCUUPavVwMbWpp", 0);
      jSONScanner0.nextToken(13);
      long long0 = jSONScanner0.longValue();
      assertEquals(24, jSONScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 49);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanType("error parse false");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "error parse false");
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1003));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 110);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanInt('-');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal.char");
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner("-hw&&~", 0);
      jSONScanner0.nextToken(0);
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockCalendar.getInstance();
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 14, 14);
      Feature feature0 = Feature.DisableFieldSmartMatch;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(14, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal.char", 1410);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2/G2,*+*5YZz:", 1410);
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal.char");
      jSONReaderScanner0.isBlankInput();
      JSONScanner jSONScanner0 = new JSONScanner("Set", 14);
      jSONScanner0.nextToken(299);
      long long0 = jSONScanner0.longValue();
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(4098L, long0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal.char", 1410);
      jSONScanner0.nextToken(13);
      jSONScanner0.nextToken(13);
      long long0 = jSONScanner0.longValue();
      assertEquals(1, jSONScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5E+M]!YaV{{", 224);
      jSONScanner0.nextToken(13);
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 5E+
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 110;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 110);
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      charArray0[1] = '2';
      charArray0[2] = '&';
      charArray0[3] = '9';
      charArray0[4] = 'y';
      charArray0[5] = ',';
      charArray0[6] = 'O';
      charArray0[7] = '3';
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, '+');
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanString('J');
      JSONLexerBase.isWhitespace('3');
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 1410);
      jSONScanner0.nextToken(2);
      long long0 = jSONScanner0.longValue();
      assertEquals(20, jSONScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 110);
      jSONReaderScanner0.longValue();
      JSONScanner jSONScanner0 = new JSONScanner("QjOm5d>tiW_I@I=SX", 13);
      jSONScanner0.nextToken(20);
      JSONScanner jSONScanner1 = new JSONScanner("r4iYK0~aW!x\"!g");
      jSONScanner1.longValue();
      jSONReaderScanner0.nextToken((-1141));
      assertEquals(8, jSONReaderScanner0.token());
      
      jSONScanner0.scanLong('g');
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5dwo", 46);
      jSONReaderScanner0.scanString('X');
      jSONReaderScanner0.scanIdent();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" 6%w>FP");
      jSONReaderScanner0.scanString('{');
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanType(" 6%w>FP");
      // Undeclared exception!
      try { 
        Charset.forName("IgnoreAutoType");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // IgnoreAutoType
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5dwo", 830);
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("5dwo");
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.isEnabled(830, 47);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"", 255);
      StringReader stringReader0 = new StringReader("iBpxkN0wnA-T(gy");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.scanString('V');
      char char0 = JSONLexer.EOI;
      jSONReaderScanner1.nextIdent();
      stringReader0.mark(4888);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"iBpxkN0wnA\", 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'i'[cx+o;$FJ", 0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'i'[cx+o;$FJ", 3);
      char[] charArray0 = new char[9];
      charArray0[0] = '+';
      charArray0[1] = '=';
      charArray0[2] = 'Q';
      charArray0[3] = '/';
      charArray0[4] = 'g';
      charArray0[5] = 'Z';
      charArray0[6] = 'P';
      charArray0[7] = 'r';
      charArray0[8] = '4';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, (-1721021109), (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 110);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanDate('l');
      SymbolTable symbolTable0 = new SymbolTable(110);
      jSONReaderScanner0.scanUUID('7');
      jSONReaderScanner0.isRef();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 110);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ni']hu+0J'N");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextIdent();
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      int int0 = 2116;
      int int1 = 40;
      SymbolTable symbolTable0 = new SymbolTable(125);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, ' ');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'i'[cx+o;$FJ", 0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      charArray0[4] = 'i';
      charArray0[5] = 'i';
      charArray0[6] = 'i';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 99999999, 99999999);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.integerValue();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal.char", 1410);
      jSONScanner0.nextToken(13);
      long long0 = jSONScanner0.longValue();
      assertEquals(1410, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 110);
      char char0 = JSONLexer.EOI;
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.charAt(371);
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 110);
      jSONReaderScanner0.isRef();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(110);
      jSONReaderScanner0.scanUUID('7');
      assertEquals(110, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.scanUUID('7');
      char[] charArray0 = new char[4];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 110, (-852));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 110);
      jSONReaderScanner0.scanString('}');
      char char0 = JSONLexer.EOI;
      jSONReaderScanner0.nextIdent();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal.char");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.integerValue();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = (-2094);
      JSONScanner jSONScanner0 = new JSONScanner("scan true error", (-2094));
      jSONScanner0.getFeatures();
      PipedReader pipedReader0 = new PipedReader();
      jSONScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0, (-2094));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloat((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'i'[cx+o;$FJ", 0);
      char[] charArray0 = new char[1];
      jSONScanner0.next();
      charArray0[0] = 'i';
      jSONScanner0.scanFieldDecimal(charArray0);
      boolean boolean0 = jSONScanner0.isEnabled(1270, 1270);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(boolean0);
      
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("a_", 3307);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray1);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("a_", 125);
      jSONScanner0.scanFieldBigInteger(charArray1);
      jSONScanner0.stringVal();
      assertEquals(125, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("/hOLRUA(f", 9);
      jSONReaderScanner1.scanString('|');
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("O", 65);
      jSONReaderScanner0.scanString('X');
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("a_", 3307);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      JSONLexerBase.isWhitespace(' ');
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ni']hu+0J'N");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-3196));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - N, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5dwo", 46);
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = 'D';
      charArray0[2] = 'B';
      charArray0[3] = '+';
      charArray0[4] = 'z';
      charArray0[5] = 'G';
      charArray0[6] = '1';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFloat('1');
      JSONScanner jSONScanner1 = new JSONScanner("5dwo");
      jSONScanner1.scanNumber();
      jSONScanner1.putChar('0');
      jSONScanner1.bytesValue();
      assertEquals('d', jSONScanner1.getCurrent());
      
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("trUe");
      jSONReaderScanner0.isEOF();
      int int0 = 7;
      jSONReaderScanner0.subString(79, 76);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.charAt(125);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5dwo", 46);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanString('C');
      JSONLexerBase.isWhitespace('C');
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.floatValue();
      jSONReaderScanner0.setToken(46);
      assertEquals(46, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unterminated json string, ", (-1794));
      jSONReaderScanner0.scanString('|');
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanIdent();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nul", 3);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.longValue();
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '.';
      charArray0[2] = '{';
      charArray0[3] = '0';
      charArray0[4] = 'W';
      charArray0[5] = 'Q';
      charArray0[6] = 'W';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 49;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 49);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal.char");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal.char", 83);
      char char0 = '$';
      jSONReaderScanner0.scanLong('$');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - i, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanIdent();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.ensureCapacity((-519));
      arrayList0.add("true");
      jSONReaderScanner0.scanStringArray(arrayList0, 'c');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("tUrue", (-1));
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("b0s5T7e +S*Ybp2R`+");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("b0s5T7e +S*Ybp2R`+", 7322);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5EAfdJ2CMRv(_GUd");
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanInt('W');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5EAfdJ2CMRv(_GUd");
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.isRef();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      Locale.lookup(linkedList0, arrayList0);
      jSONReaderScanner0.setLocale((Locale) null);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(403);
      jSONReaderScanner0.scanUUID('4');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5dwo", 46);
      jSONReaderScanner0.isRef();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("illegal state. ");
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = 'h';
      jSONReaderScanner1.scanFieldDouble(charArray0);
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner1.charAt(2958);
      // Undeclared exception!
      jSONReaderScanner1.nextTokenWithColon(8192);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      JSONScanner jSONScanner0 = new JSONScanner("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 27);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.nextToken();
      SymbolTable symbolTable0 = new SymbolTable(46);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("type not match. ");
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanIdent();
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = '7';
      charArray0[2] = '<';
      charArray0[3] = 'f';
      charArray0[4] = 'x';
      charArray0[5] = 'h';
      charArray0[6] = '(';
      charArray0[7] = 'i';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 40);
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner0.nextIdent();
      assertEquals(' ', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@type", 32);
      jSONScanner0.setToken(32);
      jSONScanner0.close();
      char[] charArray0 = new char[5];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = 'P';
      charArray0[3] = ')';
      charArray0[4] = 'q';
      SymbolTable symbolTable0 = new SymbolTable(67);
      jSONScanner0.scanFieldStringArray(charArray0, 32, symbolTable0);
      assertEquals(32, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("trUe");
      SymbolTable symbolTable0 = new SymbolTable(12);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5EAfdJB2CMf0Rv(_GUd");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanString('6');
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5EAfdJB2CMRv(_GUd");
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      assertEquals(10, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      StringReader stringReader0 = new StringReader("null");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.scanDecimal('Z');
      jSONReaderScanner1.isBlankInput();
      jSONReaderScanner1.nextIdent();
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("rue");
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.nextToken();
      assertEquals('u', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner0 = new JSONScanner("$");
      jSONScanner0.putChar('\\');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      charArray0[5] = 'R';
      jSONScanner0.token = 909;
      charArray0[6] = 'R';
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanNumber();
      jSONScanner0.putChar('R');
      jSONScanner0.bytesValue();
      long long0 = jSONScanner0.longValue();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(68L, long0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5EAfdJB2CMf0Rv(_GUd");
      jSONReaderScanner0.scanString('6');
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5EAfdJB2CMRv(_GUd");
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[2];
      charArray0[0] = 'u';
      charArray0[1] = '.';
      SymbolTable symbolTable0 = new SymbolTable(2383);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, (-1612035422), symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+HC:wJBBT6SQtmd#qy");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new", 120);
      jSONReaderScanner1.isBlankInput();
      jSONReaderScanner1.np = 89;
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner1.bytesValue();
      assertTrue(jSONReaderScanner1.isEOF());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      StringReader stringReader0 = new StringReader("");
      stringReader0.mark(102);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, 2243);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("");
      jSONReaderScanner2.nextToken();
      Locale locale0 = Locale.KOREA;
      char[] charArray0 = new char[0];
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner2.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Rtrue");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isRef();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tr$e");
      jSONReaderScanner0.scanDouble('J');
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.numberString();
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8d");
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanNumber();
      assertEquals((-2), jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("5dwo");
      jSONScanner1.putChar('R');
      assertEquals(0, jSONScanner1.matchStat());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000");
      SymbolTable symbolTable0 = new SymbolTable(339);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1VH)eg#k@2Y", 3285);
      HashSet<String> hashSet0 = new HashSet<String>();
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.bp = 3285;
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanUUID('a');
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'i'[cx+o;$FJ");
      SymbolTable symbolTable0 = new SymbolTable(8);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.bytesValue();
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = 'g';
      charArray0[2] = 'T';
      charArray0[3] = '!';
      charArray0[4] = 'q';
      charArray0[5] = '<';
      charArray0[6] = '';
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal", 263);
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      jSONReaderScanner0.scanFloat('{');
      charArray0[1] = '}';
      jSONReaderScanner0.scanFieldString(charArray0);
      char[] charArray1 = new char[1];
      charArray1[0] = '~';
      jSONReaderScanner0.scanFieldDate(charArray1);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.getCurrent();
      jSONReaderScanner0.scanBoolean('~');
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.scanFloat('~');
      jSONReaderScanner0.isEnabled(263, (-320));
      jSONReaderScanner0.scanFieldBoolean(charArray1);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray1, 263, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal.char");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanIdent();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONReaderScanner0.scanStringArray(arrayList0, '2');
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1VH)eg#k@2Y", 3285);
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.add("1VH)eg#k@2Y");
      jSONReaderScanner0.scanLong('P');
      jSONReaderScanner0.scanStringArray(hashSet0, '^');
      jSONReaderScanner0.nextToken();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.putChar('8');
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.isRef();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Unknown", 0);
      jSONReaderScanner1.nextToken();
      assertEquals(1, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5EAfdJB2CMRv(_GUd");
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.nextIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("a_", 3307);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray1);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isBlankInput();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nul", 145);
      jSONReaderScanner0.scanDouble('f');
      Locale locale0 = jSONReaderScanner0.getLocale();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      jSONReaderScanner0.scanStringArray(set0, 'u');
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = 'X';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(93, 4, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")");
      jSONReaderScanner0.putChar('a');
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("rue");
      SymbolTable symbolTable0 = new SymbolTable(8);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":WV");
      boolean boolean0 = jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner("T-mGJ:Jqd{`(", 0);
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = 'a';
      charArray0[4] = 'a';
      jSONReaderScanner0.longValue();
      charArray0[5] = 'a';
      charArray0[6] = 'a';
      charArray0[7] = 'a';
      charArray0[8] = 'N';
      jSONScanner0.scanFieldString(charArray0);
      boolean boolean1 = jSONReaderScanner0.isBlankInput();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Q\"9[W*u*F$-+4\"`");
      jSONScanner0.isBlankInput();
      int int0 = JSONLexer.NOT_MATCH;
      int int1 = jSONScanner0.scanType("|%c42VNLs`t");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-2), int1);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("|%c42VNLs`t", 48);
      String string0 = jSONReaderScanner0.scanString('p');
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("true", (-1923));
      jSONReaderScanner0.scanIdent();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanString('z');
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'i'[cx+o;$FJ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("v8d", 3285);
      jSONReaderScanner0.isRef();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("v8d", 45);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"", 3307);
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[8];
      charArray1[0] = 'i';
      charArray1[1] = 'S';
      charArray1[2] = '-';
      charArray1[3] = 'G';
      charArray1[4] = 'N';
      charArray1[5] = '?';
      charArray1[6] = ':';
      charArray1[7] = 'M';
      jSONReaderScanner0.scanFieldDate(charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldString(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 110);
      jSONReaderScanner0.stringDefaultValue = null;
      jSONReaderScanner0.stringDefaultValue = "oracle.sql.DATE";
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = '.';
      charArray0[2] = ':';
      charArray0[3] = '\\';
      charArray0[4] = 'd';
      charArray0[5] = 'F';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 110);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 110);
      jSONReaderScanner0.isRef();
      SymbolTable symbolTable0 = new SymbolTable(110);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+*t6,\"lfDDE");
      jSONScanner0.info();
      jSONScanner0.scanDecimal(':');
      jSONScanner0.scanString();
      jSONScanner0.getCalendar();
      assertEquals('l', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "'i'[cx+o;$\\FJ";
      JSONScanner jSONScanner0 = new JSONScanner("'i'[cx+o;$FJ", 0);
      jSONScanner0.info();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(36, "!Mey';w@:$!(:Ez:[c");
      jSONScanner0.timeZone = (TimeZone) simpleTimeZone0;
      jSONScanner0.scanDecimal(':');
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", 3285);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextIdent();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3285, 3285, 3285, 0, 3285);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nul", (-2311));
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Ose");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 'E';
      charArray0[2] = 'A';
      charArray0[3] = 'C';
      charArray0[4] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 104, 8192);
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("rue");
      SymbolTable symbolTable0 = new SymbolTable(8);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("idext");
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('a');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match a - , info : pos 0, json : idext
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal.char");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("illegal.char", 0);
      char[] charArray0 = new char[9];
      charArray0[0] = '}';
      charArray0[1] = '|';
      charArray0[2] = 'J';
      charArray0[3] = '{';
      charArray0[4] = '_';
      charArray0[5] = '<';
      charArray0[6] = 'j';
      charArray0[7] = 'r';
      charArray0[8] = 'p';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 4096);
      jSONReaderScanner2.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner2.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+*t6,\"lfDDE", 65);
      jSONReaderScanner0.skipComment();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol(65, (-2535), 1255, (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.matchStat = 12;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(",@7oEP}KGE+EU>", (-1005));
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.getCurrent();
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 110);
      jSONReaderScanner0.stringDefaultValue = "oracle.sql.DATE";
      jSONReaderScanner0.scanTrue();
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.nextToken();
      SymbolTable symbolTable0 = new SymbolTable(95);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 7;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 7);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(22, "unclosed str");
      Locale locale0 = Locale.UK;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2), (-2287), 22);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      simpleTimeZone0.inDaylightTime(date0);
      simpleTimeZone0.getDisplayName(locale0);
      simpleTimeZone0.setStartYear((-3626));
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", 1581);
      SymbolTable symbolTable0 = new SymbolTable(1581);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", 0);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '&';
      charArray0[0] = '&';
      char char1 = 'I';
      charArray0[1] = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 65, 65);
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(65);
      char char2 = '#';
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '#');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Pk");
      jSONScanner0.intValue();
      int int0 = 66;
      int int1 = (-946);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - P, info : pos 0, json : Pk
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed string : ", 110);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("f", 110);
      jSONReaderScanner0.isRef();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("'i", 110);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 65);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner(", info : ");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDouble('~');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 6;
      JSONScanner jSONScanner0 = new JSONScanner("", 6);
      jSONScanner0.nextIdent();
      jSONScanner0.lexError("", (Object[]) null);
      char char0 = '_';
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('_', 'i', 's', 'i', 's', 's');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SS`V5TQ3f;");
      jSONScanner0.scanNumber();
      jSONScanner0.intValue();
      jSONScanner0.isEnabled(59, 1145);
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('O', 'O', 'O', 'O', 'O', 'D');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ry");
      Locale locale0 = Locale.PRC;
      locale0.getDisplayScript();
      locale0.getUnicodeLocaleAttributes();
      jSONScanner0.setLocale(locale0);
      jSONScanner0.scanUUID('g');
      boolean boolean0 = jSONScanner0.scanBoolean('\u0013');
      assertFalse(boolean0);
      
      jSONScanner0.scanUUID('3');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 110);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.numberString();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'y';
      charArray0[1] = '=';
      charArray0[2] = 'y';
      charArray0[3] = '$';
      charArray0[4] = 'c';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 2371);
      jSONScanner0.scanDecimal('T');
      boolean boolean0 = jSONScanner0.isEnabled(2158, (-1018));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      ZoneId.getAvailableZoneIds();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("S", 110);
      jSONReaderScanner0.scanString('\\');
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.hasSpecial = false;
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[2];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanNullOrNew();
      jSONScanner0.info();
      boolean boolean0 = jSONScanner0.scanBoolean('P');
      assertEquals(8, jSONScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oracle.sql.TIMESTAMP");
      Locale locale0 = new Locale("oracle.sql.TIMESTAMP", "'i");
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.matchStat = 100;
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanIdent();
      int int0 = 85;
      SymbolTable symbolTable0 = new SymbolTable(85);
      jSONReaderScanner0.addSymbol(713, 85, 167, symbolTable0);
      jSONReaderScanner0.info();
      char[] charArray0 = new char[4];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      charArray0[3] = 'r';
      jSONReaderScanner0.scanFieldDate(charArray0);
      char[] charArray1 = new char[7];
      charArray1[0] = 'r';
      charArray1[1] = 'r';
      charArray1[2] = 'r';
      charArray1[3] = 'r';
      charArray1[4] = 'r';
      charArray1[5] = 'r';
      charArray1[6] = 'r';
      jSONReaderScanner0.scanFieldSymbol(charArray1);
      jSONReaderScanner0.putChar('M');
      jSONReaderScanner0.pos();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray1, 167, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      Feature feature0 = Feature.NonStringKeyAsString;
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.scanDouble('z');
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(231);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("dZ[ZJq'", 231);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.isEOF();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"s", (-689));
      Feature feature0 = Feature.NonStringKeyAsString;
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.hasSpecial = false;
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null", 0);
      SymbolTable symbolTable0 = new SymbolTable(3078);
      jSONReaderScanner1.scanSymbolWithSeperator(symbolTable0, '!');
      // Undeclared exception!
      try { 
        jSONReaderScanner1.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("aAd7Q", (-531));
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      jSONScanner0.timeZone = timeZone0;
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.bp = 506;
      jSONScanner0.stringDefaultValue = "8d";
      charArray0[1] = 'f';
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.matchStat();
      jSONScanner0.scanUUID('O');
      jSONScanner0.token = (-2);
      jSONScanner0.pos();
      TimeZone timeZone1 = TimeZone.getDefault();
      jSONScanner0.setTimeZone(timeZone1);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.next();
      int int0 = 4096;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("f");
      char[] charArray0 = new char[4];
      charArray0[0] = '_';
      charArray0[1] = '6';
      charArray0[2] = 'x';
      charArray0[3] = 'p';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 2105, 2105);
      Locale locale0 = Locale.PRC;
      locale0.getDisplayScript();
      jSONReaderScanner1.setLocale(locale0);
      jSONReaderScanner1.isRef();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("f");
      // Undeclared exception!
      try { 
        jSONReaderScanner2.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("N^AEV");
      jSONScanner0.intValue();
      jSONScanner0.isEnabled(0, 59);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N^AEV");
      jSONReaderScanner0.nextToken();
      assertEquals('^', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 110);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isEOF();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("rQD");
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 110;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 110);
      jSONReaderScanner0.scanTrue();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", 110);
      jSONScanner0.isBlankInput();
      jSONScanner0.scanBoolean('N');
      int int0 = JSONLexer.NOT_MATCH;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("*n9LWs#k>tRN");
      jSONScanner0.longValue();
      jSONScanner0.info();
      jSONScanner0.scanLong('u');
      jSONScanner0.scanInt('R');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 23);
      jSONReaderScanner0.scanDate('%');
      jSONReaderScanner0.scanDate('p');
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.token();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"", 3676);
      jSONReaderScanner0.scanDecimal('~');
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'i'[cx+o;$FJ", 0);
      jSONScanner0.matchStat = 3684;
      char[] charArray0 = new char[1];
      jSONScanner0.next();
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.isEnabled(1270, 1270);
      SymbolTable symbolTable0 = new SymbolTable(2966);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'S');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"", 3307);
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = ';';
      charArray0[2] = 'y';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 110);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-2097));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - t, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.scanLong('$');
      jSONReaderScanner0.token = 1158;
      MockDate mockDate0 = new MockDate();
      jSONReaderScanner0.nextToken();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+*t6,\"lfDDE", 65);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      assertEquals('*', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char char0 = '0';
      jSONReaderScanner0.scanString('0');
      char char1 = '`';
      jSONReaderScanner0.scanInt('`');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('`');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match ` - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONReaderScanner0.scanStringArray(set0, 'X');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 110);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      assertEquals(6, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 12);
      Charset.defaultCharset();
      HashSet<String> hashSet0 = new HashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) hashSet0, locale_FilteringMode0);
      char[] charArray0 = new char[4];
      charArray0[0] = '\u0089';
      charArray0[1] = 'Z';
      charArray0[2] = '\u0089';
      charArray0[3] = '\u0089';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 999, 12);
      jSONReaderScanner0.scanStringArray(hashSet0, 'Z');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"", 3307);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDate(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("F");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("F");
      boolean boolean0 = jSONReaderScanner0.isEnabled(79, 79);
      assertTrue(boolean0);
      
      jSONReaderScanner0.subString(46, 108);
      jSONReaderScanner0.scanString('f');
      String string0 = jSONReaderScanner0.stringDefaultValue();
      assertNull(string0);
      
      jSONScanner0.scanInt('o');
      jSONScanner0.skipWhitespace();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = JSONLexer.NOT_MATCH;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 8192);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 887, (-172));
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.nextToken();
      assertEquals(15, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 988);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.sp = 2;
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.getLocale();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1153);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 23;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 23, 23);
      char[] charArray1 = new char[5];
      charArray1[0] = 'q';
      charArray1[1] = 'L';
      charArray1[2] = '}';
      charArray1[3] = '~';
      charArray1[4] = 'c';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray1, 23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 65);
      SymbolTable symbolTable0 = new SymbolTable(65);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("");
      jSONReaderScanner1.info();
      jSONReaderScanner1.next();
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = "TreeSet";
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", 3289);
      char[] charArray0 = new char[7];
      charArray0[0] = 'J';
      charArray0[1] = 'P';
      jSONScanner0.eofPos = (-1098);
      charArray0[2] = 'S';
      jSONScanner0.nextToken();
      charArray0[3] = '4';
      charArray0[4] = 'u';
      charArray0[5] = '[';
      charArray0[6] = '%';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.getCurrent();
      jSONScanner0.matchStat();
      int int0 = (-1872);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "3";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3");
      char char0 = 'g';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('g');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")", 0);
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.isBlankInput();
      jSONScanner0.scanBoolean('W');
      int int0 = JSONLexer.NOT_MATCH;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 32);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner(" Fo[ftD]YeoPLSN~s$!", (-1415));
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*:{Ws)", 887);
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = 'l';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 2512);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-192));
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = '5';
      charArray0[2] = '!';
      charArray0[3] = '>';
      charArray0[4] = '\'';
      charArray0[5] = 'c';
      charArray0[6] = 'Q';
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 2512);
      jSONScanner0.scanString('6');
      jSONScanner0.intValue();
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = '|';
      charArray0[2] = 'g';
      charArray0[3] = '3';
      charArray0[4] = 'Q';
      charArray0[5] = '%';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2512, (-1816));
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"", 3307);
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = 'R';
      charArray0[2] = 'q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1390);
      jSONReaderScanner0.scanLong('R');
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.subString(35, 23);
      int int0 = jSONReaderScanner0.token();
      assertEquals('R', jSONReaderScanner0.getCurrent());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("rQD");
      jSONScanner0.info();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("..", 1048);
      jSONReaderScanner0.scanNumber();
      assertEquals(3, jSONReaderScanner0.token());
      
      int int0 = jSONScanner0.pos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      charArray0[6] = ':';
      charArray0[7] = '&';
      charArray0[8] = ':';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 91, 72);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("v8d", 3285);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextIdent();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = 'o';
      charArray0[2] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 45380, 45380);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.token = 256;
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.getFeatures();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 45380);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 65);
      JSONScanner jSONScanner0 = new JSONScanner("~Ac}u2CJWso{F)'(", 242);
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.scanBoolean('P');
      assertFalse(boolean0);
      
      jSONScanner0.scanDouble('*');
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = 'A';
      charArray0[2] = '*';
      charArray0[3] = 'P';
      charArray0[4] = '*';
      charArray0[5] = '*';
      charArray0[6] = '*';
      charArray0[7] = 'P';
      charArray0[8] = 'Q';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-3428));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nXDL&+eWp0V", 104);
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = '}';
      charArray0[2] = '5';
      charArray0[3] = '=';
      char char0 = '#';
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("='= 7><2c", 988);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 116, 41);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('E');
      assertEquals(41, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse false", (-522));
      boolean boolean0 = JSONLexerBase.isWhitespace('3');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 23);
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.subString(23, 23);
      int int0 = jSONReaderScanner0.token();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONLexerBase.isWhitespace('H');
      char[] charArray0 = new char[3];
      charArray0[0] = 'H';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanInt('\u0000');
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('w', 'H', '>', 'm', '{');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!j5?q1 p9g");
      char char0 = 'M';
      jSONReaderScanner0.scanDouble('M');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloatArray2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanDouble('M');
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONReaderScanner0.scanStringArray(set0, 'X');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 12);
      jSONScanner0.token = 26;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("P!s>");
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2667);
      JSONScanner jSONScanner0 = new JSONScanner("$bC4}DjbU$S7,Z");
      jSONReaderScanner0.nextToken(2667);
      jSONReaderScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(0, 2667);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      JSONScanner jSONScanner0 = new JSONScanner("type not match. ", 4096);
      boolean boolean0 = jSONScanner0.isEnabled((-2238), 0);
      assertFalse(boolean0);
      
      jSONScanner0.scanUUID('/');
      assertEquals(4096, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 7);
      Feature feature0 = Feature.IgnoreAutoType;
      jSONReaderScanner0.hasSpecial = false;
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      SymbolTable symbolTable0 = new SymbolTable(1594);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, ']');
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.isRef();
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3968, 3968);
      JSONLexerBase.readString(charArray0, 0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.isEnabled((-5061), 8);
      jSONReaderScanner0.subString(3968, 8);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(3968, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.scanString('R');
      assertEquals(3968, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")_46|7dL%F&9I#", 547);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal identifier : ");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-", 8);
      jSONReaderScanner0.scanDate('p');
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 23);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char char0 = '6';
      jSONReaderScanner0.scanDouble('6');
      ZoneId.getAvailableZoneIds();
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((Reader) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ZoneId.getAvailableZoneIds();
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[14];
      charArray1[0] = 'X';
      charArray1[1] = '`';
      charArray1[2] = '!';
      charArray1[2] = 'C';
      charArray1[4] = 'a';
      charArray1[5] = 'o';
      charArray1[6] = 'a';
      charArray1[7] = 'C';
      int int0 = 2199;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 2199);
      SymbolTable symbolTable0 = new SymbolTable(46);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'X');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("SQk");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanIdent();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("j~4h;sCV1*EK", (-438));
      jSONReaderScanner0.skipWhitespace();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2314), "Feature.AllowSingleQuotes is false");
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'h';
      charArray0[1] = ' ';
      charArray0[2] = 'H';
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "{";
      JSONScanner jSONScanner0 = new JSONScanner("{");
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanEnum(class0, (SymbolTable) null, 't');
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 23);
      jSONReaderScanner0.indexOf('-', 23);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFieldFloat(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("7\"q9~q?A!|.;a", (-1183));
      jSONScanner0.scanBoolean('j');
      jSONReaderScanner0.getTimeZone();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("T+3O21e 16t%SL", 137);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"S");
      jSONReaderScanner0.scanIdent();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 25);
      jSONScanner0.scanBoolean('u');
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldIntArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'i'[cx+o;$FJ", 65);
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      charArray0[1] = 'B';
      charArray0[2] = '~';
      charArray0[3] = '\"';
      charArray0[4] = '$';
      charArray0[5] = '>';
      charArray0[6] = 'A';
      charArray0[7] = '_';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.skipWhitespace();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("SQk");
      JSONScanner jSONScanner0 = new JSONScanner("SQk", 44);
      jSONScanner0.scanNumber();
      jSONScanner0.info();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("SQk");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "R%~";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "SQk";
      objectArray0[3] = (Object) jSONReaderScanner0;
      objectArray0[4] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("S95M", objectArray0);
      JSONScanner jSONScanner0 = new JSONScanner("R%~", (-3768));
      JSONLexerBase.isWhitespace('Z');
      jSONReaderScanner0.getLocale();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = 'B';
      charArray0[2] = 'w';
      charArray0[3] = '0';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 356);
      char[] charArray1 = new char[2];
      charArray1[0] = '1';
      charArray1[1] = 'w';
      jSONReaderScanner0.scanFieldBigInteger(charArray1);
      boolean boolean0 = jSONReaderScanner0.isEnabled(356, 356);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 12);
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = '2';
      charArray0[2] = '>';
      charArray0[3] = 'd';
      charArray0[4] = 'f';
      charArray0[5] = '1';
      charArray0[6] = 'D';
      charArray0[7] = 's';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, '1');
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONReaderScanner0.scanStringArray(set0, 'd');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = "";
      JSONScanner jSONScanner0 = new JSONScanner("", 12);
      jSONScanner0.scanFloat('h');
      jSONScanner0.features = (-751);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 23);
      jSONReaderScanner0.scanDate('p');
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanFieldFloat(charArray0);
      int int0 = jSONReaderScanner0.token();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = '*';
      charArray0[2] = 'L';
      charArray0[3] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 120);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanFieldFloat(charArray0);
      boolean boolean0 = JSONLexerBase.isWhitespace('a');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'i'[cx+o;$FJ");
      SymbolTable symbolTable0 = new SymbolTable(3439);
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = '#';
      charArray0[3] = 'C';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3439, 0);
      char[] charArray1 = new char[4];
      charArray1[0] = 'C';
      charArray1[1] = 'S';
      charArray1[2] = 'S';
      charArray1[3] = 'C';
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("SQk");
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-");
      jSONScanner0.isBlankInput();
      jSONScanner0.features = 479;
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = 'm';
      charArray0[2] = 'G';
      charArray0[3] = 'i';
      charArray0[4] = '6';
      charArray0[5] = 'h';
      charArray0[6] = 'N';
      charArray0[7] = '\'';
      charArray0[8] = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanDecimal('\"');
      jSONReaderScanner0.scanFieldLong(charArray0);
      int int0 = 61;
      jSONReaderScanner0.charAt(61);
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        timeZone0.getDisplayName(true, 61);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 61
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("F");
      jSONScanner0.scanNumber();
      assertEquals(3, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!j5?q1 p9g");
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanBoolean('5');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("F");
      jSONScanner0.close();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("F");
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'e';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("create asm deserializer error, ");
      jSONScanner0.scanLong(',');
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.nextToken();
      jSONScanner0.getCalendar();
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      charArray0[4] = ',';
      jSONScanner0.scanFieldInt(charArray0);
      char[] charArray1 = new char[2];
      charArray1[0] = ',';
      charArray1[1] = ',';
      jSONScanner0.scanFieldDouble(charArray1);
      jSONScanner0.intValue();
      PipedReader pipedReader0 = new PipedReader(94);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 65);
      Class<Object> class0 = Object.class;
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.scanLong('Z');
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("rQ\"", 2105);
      jSONScanner0.scanBoolean('E');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("rQ\"", (-388));
      SymbolTable symbolTable0 = new SymbolTable(2105);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'E');
      jSONScanner0.setToken((-388));
      assertEquals((-388), jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'i'[cx+o;$FJ", 0);
      char[] charArray0 = new char[1];
      jSONScanner0.next();
      charArray0[0] = 'i';
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. i
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(2105);
      String string0 = "!Z}O";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!Z}O", 867);
      jSONReaderScanner0.scanLong('$');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - !, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.isBlankInput();
      jSONScanner0.features = 479;
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("C,");
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('R', 'K', 'K');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&-aUY['wvYZT3");
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      charArray0[6] = 'J';
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.bytesValue();
      jSONScanner0.next();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = '\"';
      charArray0[2] = '4';
      charArray0[3] = '(';
      charArray0[4] = '4';
      charArray0[5] = 'E';
      charArray0[6] = 'W';
      charArray0[7] = '!';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 417);
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("null", objectArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", 1581);
      SymbolTable symbolTable0 = new SymbolTable(1581);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.info();
      jSONScanner0.scanDecimal(':');
      jSONScanner0.info();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 12);
      jSONScanner0.hasSpecial = false;
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.setToken(3968);
      jSONScanner0.scanBoolean('~');
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(3968, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'i'[cx+o;$FJ");
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 23);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'i'[cx+o;$FJ", 0);
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.scanBoolean(',');
      assertFalse(boolean0);
      
      jSONScanner0.isEnabled(52, 52);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = 'z';
      charArray0[2] = 'X';
      charArray0[3] = 'k';
      charArray0[4] = '{';
      charArray0[5] = '/';
      charArray0[6] = '`';
      charArray0[7] = 'm';
      charArray0[8] = 'u';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, (-1611651169));
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('A');
      assertEquals((-1611651169), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "BrowserSecure";
      int int0 = 1992;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("BrowserSecure", 1992);
      SymbolTable symbolTable0 = new SymbolTable(58);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#3F=)");
      stringReader0.read();
      stringReader0.read();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 5);
      Locale locale0 = Locale.ENGLISH;
      locale0.getScript();
      locale0.clone();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2667);
      JSONScanner jSONScanner0 = new JSONScanner("");
      boolean boolean0 = jSONScanner0.scanBoolean('Z');
      assertFalse(boolean0);
      
      jSONScanner0.scanDate('Z');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'i'[cx+o;$FJ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WriteNonStringKeyAsString");
      char[] charArray0 = new char[7];
      charArray0[0] = '@';
      charArray0[1] = '|';
      charArray0[2] = 'i';
      charArray0[3] = 'U';
      charArray0[4] = ')';
      charArray0[5] = ',';
      charArray0[6] = 'R';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      char[] charArray1 = new char[7];
      charArray1[0] = 'U';
      charArray1[1] = '@';
      charArray1[2] = '@';
      charArray1[3] = 'i';
      charArray1[4] = ',';
      charArray1[5] = '|';
      charArray1[6] = '@';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("rQ\"", 2105);
      jSONScanner0.scanBoolean('E');
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloatArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'i'[cx+o;$FJ", 0);
      jSONScanner0.scanBoolean('s');
      jSONScanner0.scanDate('s');
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      jSONScanner0.scanFieldDecimal(charArray0);
      Locale locale0 = Locale.ENGLISH;
      jSONScanner0.setLocale(locale0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 65);
      SymbolTable symbolTable0 = new SymbolTable(65);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'B');
      jSONReaderScanner0.skipWhitespace();
      assertEquals(65, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3968, 0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, '|');
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"", 54);
      jSONScanner0.scanBoolean(',');
      jSONScanner0.scanStringArray((Collection<String>) null, '2');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2667);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.tokenName();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('+');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match + - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(2105);
      SymbolTable symbolTable0 = new SymbolTable(364);
      JSONScanner jSONScanner0 = new JSONScanner("B7X!{>5`KLekqYQG27i", 364);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals('!', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("rQ\"", 2105);
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(46);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'p');
      jSONReaderScanner0.skipWhitespace();
      assertEquals(2105, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1yqyz(");
      boolean boolean0 = jSONScanner0.scanBoolean('>');
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+r{o");
      jSONScanner0.info();
      jSONScanner0.scanDecimal(':');
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("rQ\"", 2105);
      jSONScanner0.info();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('J');
      assertEquals(2105, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2880);
      Feature feature0 = Feature.IgnoreAutoType;
      jSONReaderScanner0.features = 2880;
      SymbolTable symbolTable0 = new SymbolTable(100);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.addSymbol(2880, 2880, 2880, symbolTable0);
      jSONReaderScanner0.nextTokenWithChar('1');
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.subString(2880, 2880);
      jSONReaderScanner0.getCalendar();
      jSONReaderScanner0.getCurrent();
      char[] charArray1 = new char[9];
      charArray1[0] = '\u001A';
      charArray1[1] = '\u001A';
      charArray1[2] = '1';
      charArray1[3] = '1';
      charArray1[4] = '1';
      charArray1[5] = '1';
      charArray1[6] = '1';
      charArray1[7] = '1';
      charArray1[8] = '1';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray1, 100);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = '8';
      charArray0[2] = 'R';
      charArray0[3] = 'j';
      charArray0[4] = 'i';
      charArray0[5] = 'f';
      charArray0[6] = 'q';
      int int0 = 146;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 146, 120);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - R, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(2105);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!Z}O", 867);
      jSONReaderScanner0.skipWhitespace();
      assertEquals(867, jSONReaderScanner0.getFeatures());
      assertEquals('!', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.info();
      jSONScanner0.scanDecimal(':');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner("'i'[cx+o;$FJ", 0);
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = '7';
      charArray0[2] = ')';
      charArray0[3] = 'N';
      charArray0[4] = '}';
      charArray0[5] = 'E';
      charArray0[6] = '\\';
      charArray0[7] = '\\';
      jSONScanner0.scanFieldFloat(charArray0);
      JSONLexerBase.isWhitespace(',');
      int int1 = 959;
      // Undeclared exception!
      try { 
        jSONScanner0.subString(0, 959);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("G", (-1318));
      Class<String> class0 = String.class;
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = '@';
      charArray0[2] = 'k';
      charArray0[3] = 'h';
      jSONScanner0.scanString('R');
      charArray0[4] = '|';
      charArray0[5] = '$';
      charArray0[6] = 'o';
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'i'[cx+o;$FJ", 0);
      char char0 = 'i';
      char[] charArray0 = new char[1];
      jSONScanner0.next();
      jSONScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'i'[cx+o;$FJ");
      SymbolTable symbolTable0 = new SymbolTable(3439);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 'pos 0, json : 'i'[cx+o;$FJ
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("LJ[3");
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2((char[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'i'[cx+o;$FJ", 0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = ']';
      charArray0[4] = ']';
      charArray0[5] = ']';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, ']');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner("'i'[cx+o;$FJ", 0);
      jSONScanner0.scanDate('i');
      char[] charArray0 = new char[1];
      char char0 = 't';
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Feature.AllowSingleQuotes is false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3968, 0);
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      jSONScanner0.scanBoolean('A');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'i'[cx+o;$FJ", 0);
      char char0 = ',';
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.eofPos = 44;
      jSONReaderScanner0.scanDouble('M');
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONReaderScanner0.scanStringArray(set0, 'W');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2667);
      char char0 = '+';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3968, 0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Gk", (-1318));
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, 120);
      boolean boolean0 = jSONScanner1.isEnabled(0, (int) 'Q');
      assertTrue(boolean0);
      assertEquals(120, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ZoneId.getAvailableZoneIds();
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[8];
      charArray1[0] = 'X';
      charArray1[1] = '`';
      charArray1[2] = '!';
      charArray1[3] = 'C';
      charArray1[4] = 'a';
      charArray1[5] = 'o';
      charArray1[6] = 'a';
      charArray1[7] = 'H';
      int int0 = 2187;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 2187);
      SymbolTable symbolTable0 = new SymbolTable(46);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'X');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 65);
      Class<Object> class0 = Object.class;
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 65);
      Class<Object> class0 = Object.class;
      char[] charArray0 = new char[7];
      charArray0[0] = 'O';
      charArray0[1] = '4';
      charArray0[2] = 'V';
      charArray0[3] = 'P';
      charArray0[4] = 'd';
      charArray0[5] = 'v';
      charArray0[6] = 'B';
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.close();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<k;*_f");
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar(':');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - <, info : pos 0, json : <k;*_f
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@ZS#;fL]");
      jSONReaderScanner0.scanStringArray(set0, ']');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[8];
      charArray0[0] = 'o';
      charArray0[1] = 'u';
      charArray0[2] = 'R';
      charArray0[3] = 'u';
      charArray0[4] = '8';
      charArray0[5] = '@';
      jSONReaderScanner0.nextToken((-4558));
      charArray0[6] = '*';
      charArray0[7] = 'D';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 34, (-2892));
      jSONReaderScanner1.scanDate('@');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = '\"';
      charArray0[2] = '4';
      charArray0[3] = '(';
      charArray0[4] = '4';
      charArray0[5] = 'A';
      charArray0[6] = 'W';
      charArray0[7] = '!';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 417);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanDouble('t');
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 1442);
      Feature feature0 = Feature.UseObjectArray;
      jSONReaderScanner0.nextToken(1442);
      SymbolTable symbolTable0 = new SymbolTable(43);
      jSONReaderScanner0.addSymbol(46, 1906, 46, symbolTable0);
      jSONReaderScanner0.config(feature0, false);
      char[] charArray0 = new char[6];
      Feature feature1 = Feature.SupportNonPublicField;
      jSONReaderScanner0.config(feature1, false);
      charArray0[0] = '!';
      charArray0[1] = 'C';
      charArray0[2] = '6';
      charArray0[3] = '?';
      charArray0[4] = '.';
      charArray0[5] = 'g';
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"%=VF");
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      SymbolTable symbolTable0 = new SymbolTable(123);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 120, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      int int0 = JSONLexer.END;
      jSONReaderScanner0.stringVal();
      int int1 = JSONLexer.END;
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(4);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      jSONReaderScanner0.setTimeZone(timeZone0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'w';
      charArray0[1] = ']';
      charArray0[2] = 'e';
      charArray0[3] = 'Q';
      char char0 = 'S';
      // Undeclared exception!
      try { 
        stringReader0.read((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 65);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.close();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(65, jSONReaderScanner0.getFeatures());
      
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals(65, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 65);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.close();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(65, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'i'[cx+o;$FJ", 0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&{e7UQC", 0);
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.bytesValue();
      boolean boolean0 = JSONLexerBase.isWhitespace('&');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'i'[cx+o;$FJ", 0);
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      jSONScanner0.scanFieldDecimal(charArray0);
      boolean boolean0 = jSONScanner0.isEnabled((-3959), 197);
      assertEquals((-2), jSONScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("get");
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("trim");
      jSONReaderScanner1.scanStringArray(set0, 'W');
      assertEquals((-1), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'y';
      charArray0[1] = 'g';
      charArray0[2] = '\\';
      JSONLexerBase.isWhitespace('+');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 3311);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = "";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      int int0 = 0;
      jSONReaderScanner0.indexOf('b', 0);
      char[] charArray0 = new char[9];
      jSONReaderScanner0.scanDecimal('b');
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      Locale locale0 = new Locale("", "", "");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      jSONReaderScanner0.scanStringArray(set0, 'b');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.nextToken(80);
      int int1 = 57;
      int int2 = (-1494);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1494));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'y';
      charArray0[1] = 'g';
      charArray0[2] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3311, 1795);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(3311, 42, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'i'[cx+o;$FJ", 0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      jSONScanner0.scanFieldDecimal(charArray0);
      boolean boolean0 = jSONScanner0.isEnabled(1270, 1270);
      assertEquals((-2), jSONScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 244);
      jSONScanner0.isEnabled(244, 0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 120, (-216));
      jSONReaderScanner0.scanFloat('<');
      jSONReaderScanner0.indexOf('t', 0);
      int int0 = jSONReaderScanner0.scanType("error parse false");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 718, 16384);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.close();
      jSONReaderScanner0.isEnabled((-1315));
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"%=VF");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \", info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("mO5keCz_tq^)e");
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.pos();
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      char[] charArray1 = new char[5];
      charArray1[0] = '1';
      charArray1[1] = '1';
      charArray1[2] = 'V';
      charArray1[3] = '1';
      charArray1[4] = '1';
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanFieldStringArray(charArray1, class0);
      charArray0[1] = '1';
      charArray0[2] = '\"';
      charArray0[3] = 'x';
      char char0 = 'e';
      jSONReaderScanner0.stringDefaultValue = "";
      charArray0[4] = 'e';
      jSONReaderScanner0.pos = 0;
      charArray0[5] = 'J';
      charArray0[6] = '5';
      charArray0[7] = 'b';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 244);
      jSONScanner0.isEnabled(244, 0);
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '/';
      charArray0[2] = 'J';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.close();
      jSONReaderScanner0.isEnabled(64);
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.read();
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 3968;
      int int1 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3968, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.indexOf('b', 0);
      char[] charArray0 = new char[9];
      jSONReaderScanner0.scanDecimal('b');
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      charArray0[5] = 'b';
      charArray0[6] = 'M';
      charArray0[7] = 'b';
      charArray0[8] = 'b';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9f)fYZ-^!]t");
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'Y';
      charArray0[2] = ']';
      charArray0[3] = '3';
      charArray0[4] = '2';
      charArray0[5] = 'i';
      jSONScanner0.scanFieldDecimal(charArray0);
      boolean boolean0 = jSONScanner0.isEnabled(0, 0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ':';
      charArray0[1] = 'C';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2167);
      char char0 = 'j';
      jSONReaderScanner0.indexOf('j', 2167);
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('C');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match C - :, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      charArray0[1] = '2';
      charArray0[2] = 'w';
      charArray0[3] = '6';
      charArray0[4] = 'K';
      charArray0[5] = 'z';
      charArray0[6] = 'z';
      charArray0[7] = 'k';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 123);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 'z';
      objectArray0[1] = (Object) '6';
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) 'K';
      objectArray0[4] = (Object) 'z';
      objectArray0[5] = (Object) 'K';
      jSONScanner0.lexError((String) null, objectArray0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONReaderScanner0.scanStringArray(set0, 'W');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("BrowserSecure", 1992);
      jSONReaderScanner0.scanInt('6');
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.np = 1992;
      objectArray0[3] = (Object) jSONReaderScanner0;
      objectArray0[4] = (Object) "BrowserSecure";
      objectArray0[5] = (Object) jSONReaderScanner0;
      objectArray0[6] = (Object) "BrowserSecure";
      jSONReaderScanner0.lexError("", objectArray0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[4] = '6';
      charArray0[5] = '6';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q%U<nmIH4CK@yV");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.charAt(0);
      stringReader0.skip(0);
      jSONReaderScanner0.scanDouble('>');
      jSONReaderScanner0.charAt(1347);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Vdz+?b`Y[Uk^?s");
      jSONScanner0.token = 1278;
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(1278);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - V, info : pos 0, json : Vdz+?b`Y[Uk^?s
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1427);
      Feature feature0 = Feature.SortFeidFastMatch;
      jSONReaderScanner0.isEnabled(feature0);
      JSONScanner jSONScanner0 = new JSONScanner("&", 0);
      jSONReaderScanner0.sp = 1427;
      SymbolTable symbolTable0 = new SymbolTable(107);
      String string0 = "";
      int int0 = 0;
      boolean boolean0 = false;
      int int1 = 691;
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 9, 691, 356);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'y';
      charArray0[1] = 'g';
      charArray0[2] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3311, 1795);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFloat('y');
      jSONReaderScanner0.indexOf('\\', 3311);
      int int0 = jSONReaderScanner0.scanType("error parse false");
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      char char0 = 'C';
      JSONLexerBase.isWhitespace('C');
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, (-1976));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      jSONScanner0.resetStringPosition();
      char[] charArray0 = new char[8];
      charArray0[0] = '?';
      char char0 = 'i';
      charArray0[1] = 'i';
      charArray0[2] = '?';
      jSONScanner0.features = 0;
      charArray0[3] = 'k';
      charArray0[4] = 'Z';
      charArray0[5] = 'R';
      charArray0[6] = '8';
      charArray0[7] = '';
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2667);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('+');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match + - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\'';
      charArray0[1] = 'W';
      charArray0[2] = 'Z';
      charArray0[3] = 'p';
      charArray0[4] = '#';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals("Unknown", string0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = '(';
      char char0 = 'N';
      charArray0[2] = 'N';
      char char1 = '.';
      charArray0[3] = '.';
      charArray0[4] = '%';
      char char2 = 'D';
      charArray0[5] = 'D';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
