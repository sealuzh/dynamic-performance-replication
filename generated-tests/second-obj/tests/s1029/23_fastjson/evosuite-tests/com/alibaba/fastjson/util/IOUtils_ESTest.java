/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:23:45 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('y');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("#(*^-CO>@$&kX.'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("M#;#e3>,a/_r'#WU!q:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOUtils.stringSize(28);
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.isIdent('K');
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-1), (int) (byte) (-1), iOUtils0.replaceChars);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[10];
      int int0 = 2357;
      // Undeclared exception!
      try { 
        IOUtils.getChars(2357, 2357, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2356
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      char[] charArray0 = new char[10];
      IOUtils.getChars((long) 2, 2, charArray0);
      assertArrayEquals(new char[] {'\u0000', '2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      String string0 = IOUtils.getStringProperty("fastjson.compatibleWithJavaBean");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.decodeUTF8(iOUtils0.specicalFlags_doubleQuotes, 50, (-1051), iOUtils0.DIGITS);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IOUtils.decodeBase64("6RaY");
      IOUtils iOUtils0 = new IOUtils();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("fastjson.properties");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IOUtils.stringSize((-2088));
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = uTF8Decoder0.unmappableCharacterAction();
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      Charset charset0 = uTF8Decoder0.charset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      assertEquals(0, byteBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      char[] charArray0 = new char[6];
      charArray0[1] = ':';
      charArray0[2] = ':';
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, (-1524), 73, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1524
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils iOUtils0 = new IOUtils();
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.close(stringWriter0);
      IOUtils.loadPropertiesFromFile();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = IOUtils.encodeUTF8(iOUtils0.ASCII_CHARS, (byte)2, (byte)2, iOUtils0.specicalFlags_doubleQuotes);
      assertEquals(2, int0);
      
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(iOUtils0.DIGITS, (byte)2, '\u00C4', iOUtils0.specicalFlags_singleQuotes);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)106;
      char[] charArray0 = new char[1];
      IOUtils.decodeUTF8(byteArray0, 0, (-525), charArray0);
      IOUtils.decodeBase64(charArray0, (int) (byte)106, 0);
      // Undeclared exception!
      try { 
        IOUtils.getChars(1865L, 2634, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2633
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IOUtils.getChars((-2885), (-2885), (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        IOUtils.getChars((-988L), 827, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 826
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)53;
      char[] charArray0 = new char[0];
      IOUtils.stringSize(0);
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 1, 63, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(90);
      IOUtils.close(pipedInputStream0);
      byte[] byteArray0 = IOUtils.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("bQk:UVa4Fr", 5, 5);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-82), (byte)5}, byteArray0);
      
      int int0 = IOUtils.stringSize((long) 5);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "_C;`(,r?(M=";
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("_C;`(,r?(M=", 7, 7);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("", 19, (-32));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IOUtils.isValidJsonpQueryParam((String) null);
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IOUtils.isIdent('~');
      int int0 = 9;
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64((char[]) null, 9, (-2477));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("");
      assertFalse(boolean0);
      
      byte[] byteArray0 = IOUtils.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('#');
      assertFalse(boolean0);
      
      int int0 = IOUtils.stringSize((long) '#');
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("T(FJ&F[");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-15), (byte)73, (byte) (-4)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[2] = 't';
      IOUtils.getChars(57344, 6, charArray0);
      IOUtils.getChars((long) 57344, 6, charArray0);
      assertArrayEquals(new char[] {'\u0000', '5', '7', '3', '4', '4', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils.close((Closeable) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IOUtils.decodeBase64("IY'mqM(p3|M~S^_;~u", 0, 0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = IOUtils.UTF8;
      ByteBuffer byteBuffer0 = charset0.encode("Qluh([6Z/hc)t");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        IOUtils.decode(uTF8Decoder0, byteBuffer1, charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CoderResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      IOUtils.close(charArrayWriter0);
      IOUtils.getChars((-1683L), 34, iOUtils0.ASCII_CHARS);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("fastjson.properties", 34, 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = new byte[11];
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, (int) (byte)0, 359);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IOUtils.decodeBase64("gxbMQgVXQ,", 5, 5);
      IOUtils.stringSize((long) 5);
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(iOUtils0.CA, 1, 108, iOUtils0.specicalFlags_singleQuotes);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IOUtils.decodeBase64("5Ra8=");
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars((byte) (-22), 57, iOUtils0.replaceChars);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IOUtils.firstIdentifier('\u0085');
      char[] charArray0 = new char[9];
      IOUtils.getChars((byte)7, (int) (byte)7, charArray0);
      byte[] byteArray0 = new byte[24];
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        IOUtils.getChars((long) (byte)7, 934, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 933
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[0] = '6';
      charArray0[2] = '\u0000';
      MockFile mockFile0 = new MockFile("_oN2QCi*Dg^K=grR}");
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-25);
      byteArray0[14] = (byte)93;
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)93, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '\u0000';
      charArray0[2] = '\u0000';
      MockFile mockFile0 = new MockFile("_oN2QCi*Dg^K=grR}");
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[14] = (byte)93;
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)93, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[2] = (byte)3;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-68);
      char[] charArray0 = new char[0];
      IOUtils.decodeUTF8(byteArray0, (byte)3, (byte)91, charArray0);
      PipedReader pipedReader0 = new PipedReader();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byte[] byteArray0 = IOUtils.decodeBase64("?");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IOUtils.decodeBase64("%a8=");
      String string0 = IOUtils.getStringProperty("%a8=");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 65536;
      char[] charArray0 = new char[8];
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = '!';
      charArray0[4] = '/';
      // Undeclared exception!
      try { 
        IOUtils.getChars(65536, 2410, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2409
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = IOUtils.FASTJSON_COMPATIBLEWITHJAVABEAN;
      StringReader stringReader0 = new StringReader("fastjson.compatibleWithJavaBean");
      IOUtils.readAll(stringReader0);
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils iOUtils0 = new IOUtils();
      char[] charArray0 = new char[9];
      charArray0[0] = '\u00D1';
      charArray0[1] = '\u00D1';
      charArray0[3] = '\u00D1';
      charArray0[4] = '\u00D1';
      IOUtils.encodeUTF8(charArray0, (byte)2, (byte)2, iOUtils0.specicalFlags_singleQuotes);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOUtils.getChars((long) 3, 3, iOUtils0.CA);
      IOUtils.loadPropertiesFromFile();
      IOUtils.getChars((-62), 3, iOUtils0.ASCII_CHARS);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOUtils iOUtils0 = new IOUtils();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.properties");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.compatibleWithJavaBean");
      IOUtils.decodeBase64(iOUtils0.replaceChars, (int) (byte)2, 76);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.properties");
      boolean boolean1 = IOUtils.isIdent('X');
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils iOUtils0 = new IOUtils();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.properties");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.compatibleWithJavaBean");
      IOUtils.decodeBase64(iOUtils0.replaceChars, (int) (byte)2, 76);
      boolean boolean0 = IOUtils.firstIdentifier('X');
      boolean boolean1 = IOUtils.isIdent('R');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[9];
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-35);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)2, (byte)2, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.decodeBase64("com.alibaba.fastjson.util.IOUtils", 0, 30);
      String string0 = IOUtils.FASTJSON_COMPATIBLEWITHFIELDNAME;
      assertEquals("fastjson.compatibleWithFieldName", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IOUtils.decodeBase64("gxbMQgVXQ,", 5, 5);
      // Undeclared exception!
      try { 
        IOUtils.getChars((-976L), 5, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('\u0085');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[9];
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.encodeUTF8(charArray0, (byte)2, (byte)2, iOUtils0.specicalFlags_doubleQuotes);
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("fastjson.compatibleWithJavaBean");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteBuffer0.slice();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.decode(byteBuffer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.properties");
      StringReader stringReader0 = new StringReader("fastjson.compatibleWithJavaBean");
      int int1 = IOUtils.decodeUTF8(iOUtils0.specicalFlags_doubleQuotes, (byte)2, (byte)2, iOUtils0.CA);
      assertTrue(int1 == int0);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byte[] byteArray0 = new byte[11];
      byteArray0[7] = (byte) (-9);
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      iOUtils0.UTF8.encode("fastjson.compatibleWithJavaBean");
      byte[] byteArray1 = IOUtils.specicalFlags_singleQuotes;
      IOUtils.decodeUTF8(byteArray0, (byte)0, 33, iOUtils0.DIGITS);
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      charArray0[1] = '@';
      charArray0[2] = '';
      // Undeclared exception!
      try { 
        IOUtils.getChars(1000000000L, 55232, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 55231
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("i:%ae=");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-38)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[9];
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)2;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("k{oZOOsJFb4'B");
      Charset charset1 = IOUtils.UTF8;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CharBuffer charBuffer0 = charset1.decode(byteBuffer0);
      IOUtils.decode(uTF8Decoder0, byteBuffer0, charBuffer0);
      IOUtils.stringSize((long) (byte) (-35));
      // Undeclared exception!
      try { 
        IOUtils.getChars(10000000000L, (-641), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -642
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char char0 = '\u00DB';
      IOUtils.firstIdentifier('\u00DB');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOUtils.isIdent('\u00DB');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)1;
      byte byte0 = (byte)18;
      char char1 = '9';
      char[] charArray0 = new char[1];
      charArray0[0] = '\u00DB';
      IOUtils.decodeUTF8(byteArray0, 0, (byte)1, charArray0);
      IOUtils.loadPropertiesFromFile();
      IOUtils.getStringProperty("Qg5BsC,Uqn");
      int int1 = 1388;
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, (byte)18, 1388, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte byte0 = (byte)2;
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, iOUtils0.specicalFlags_doubleQuotes);
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.close(stringWriter0);
      IOUtils.decodeBase64(iOUtils0.replaceChars, (int) (byte)2, 81);
      IOUtils.firstIdentifier('X');
      IOUtils.getChars((int) (byte)2, (int) (byte)2, iOUtils0.ASCII_CHARS);
      // Undeclared exception!
      try { 
        IOUtils.getChars(484L, (int) (byte)2, iOUtils0.ASCII_CHARS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      IOUtils.firstIdentifier('\u0111');
      IOUtils.isIdent('\u0111');
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("");
      CharBuffer charBuffer0 = iOUtils0.UTF8.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = iOUtils0.UTF8.encode("com.alibaba.fastjson.util.UTF8Decoder");
      ByteBuffer byteBuffer2 = iOUtils0.UTF8.encode(charBuffer0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.compatibleWithJavaBean");
      Charset charset0 = IOUtils.UTF8;
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      byteBuffer1.putLong((long) 2754);
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      iOUtils0.UTF8.encode(charBuffer1);
      IOUtils.decode(uTF8Decoder1, byteBuffer2, charBuffer0);
      IOUtils.decodeUTF8(iOUtils0.specicalFlags_doubleQuotes, 49, (-1662), iOUtils0.replaceChars);
      Charset.defaultCharset();
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[4];
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)44;
      byteArray0[2] = (byte) (-32);
      IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)44, charArray0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONException");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        uTF8Decoder0.detectedCharset();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }
}
