/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 10:20:05 GMT 2019
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.nio.BufferUnderflowException;
import java.text.NumberFormat;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.MatrixIterator;
import org.la4j.iterator.RowMajorMatrixIterator;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.trace();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4, rowMajorSparseMatrix0.cardinality());
      assertEquals(2, rowMajorSparseMatrix0.columns());
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(2, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 3043.57578151265);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(3043.57578151265, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.sliceTopLeft(1, 1);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(3043.57578151265, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(3043.57578151265, cRSMatrix1.max(), 0.01);
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1, cRSMatrix1.cardinality());
      assertEquals(1.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(1, cRSMatrix1.rows());
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.sliceTopLeft(1, 1);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(3043.57578151265, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix2.rows());
      assertEquals(1, cRSMatrix2.cardinality());
      assertEquals(1, cRSMatrix2.columns());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(3043.57578151265, cRSMatrix2.max(), 0.01);
      assertEquals(1.0, cRSMatrix2.density(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(3043.57578151265).when(matrixAccumulator0).accumulate();
      double double0 = cRSMatrix0.foldNonZero(matrixAccumulator0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertEquals(3043.57578151265, double0, 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(3043.57578151265, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2125.91266875)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix2));
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals((-2125.91266875), cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn(1);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix2));
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals((-2125.91266875), cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      
      CRSMatrix cRSMatrix3 = (CRSMatrix)cRSMatrix0.removeLastColumn();
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix0));
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals((-2125.91266875), cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0, cRSMatrix3.cardinality());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertEquals(1, cRSMatrix3.rows());
      assertEquals(Double.NaN, cRSMatrix3.density(), 0.01);
      assertEquals(0, cRSMatrix3.columns());
      assertNotNull(cRSMatrix3);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      
      int int1 = (-1261);
      // Undeclared exception!
      try { 
        cRSMatrix3.setRow(1868, (Vector) compressedVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(32, 0.7, (Random) mockRandom0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(32, cRSMatrix0.columns());
      assertEquals(29, cRSMatrix0.cardinality());
      assertEquals(0.9, cRSMatrix0.max(), 0.01);
      assertEquals(32, cRSMatrix0.rows());
      assertEquals(0.0283203125, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(32, cRSMatrix0.columns());
      assertEquals(29, cRSMatrix0.cardinality());
      assertEquals(0.9, cRSMatrix0.max(), 0.01);
      assertEquals(32, cRSMatrix0.rows());
      assertEquals(0.0283203125, cRSMatrix0.density(), 0.01);
      assertNotNull(byteArray0);
      assertEquals(493, byteArray0.length);
      
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.7;
      doubleArray1[2] = (-2226.950129954129);
      doubleArray1[3] = 0.7;
      doubleArray1[4] = 0.7;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.7;
      doubleArray1[7] = 0.7;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 32;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 32;
      doubleArray2[4] = 0.7;
      doubleArray2[5] = (double) 32;
      doubleArray2[6] = 0.7;
      doubleArray2[7] = 1242.0;
      doubleArray2[8] = 12.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 32;
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 540.5089431555764;
      doubleArray4[1] = 1242.0;
      doubleArray4[2] = 12.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.7;
      doubleArray4[5] = 594.7694017867835;
      doubleArray4[6] = 12.0;
      doubleArray4[7] = 0.7;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-2226.950129954129);
      doubleArray0[4] = doubleArray5;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(5, matrix0.rows());
      assertEquals(8, matrix0.columns());
      assertNotNull(matrix0);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.randomSymmetric((-4082), 0.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -4082x-4082
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 955;
      double double0 = 1.0;
      long long0 = 1L;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      CRSMatrix.random(955, 955, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 3043.57578151265);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(3043.57578151265, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.sliceTopLeft(1, 1);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(3043.57578151265, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(1, cRSMatrix1.cardinality());
      assertEquals(1, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(3043.57578151265, cRSMatrix1.max(), 0.01);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.sliceTopLeft(1, 1);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(3043.57578151265, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3043.57578151265, cRSMatrix2.max(), 0.01);
      assertEquals(1, cRSMatrix2.columns());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(1, cRSMatrix2.cardinality());
      assertEquals(1.0, cRSMatrix2.density(), 0.01);
      assertEquals(1, cRSMatrix2.rows());
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      double double0 = cRSMatrix0.foldNonZero(matrixAccumulator0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(3043.57578151265, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix2));
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn(1);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix2));
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      
      CRSMatrix cRSMatrix3 = (CRSMatrix)cRSMatrix0.removeLastColumn();
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix1));
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertEquals(0, cRSMatrix3.columns());
      assertEquals(0, cRSMatrix3.cardinality());
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix3.density(), 0.01);
      assertEquals(1, cRSMatrix3.rows());
      assertTrue(cRSMatrix3.isRowMajor());
      assertNotNull(cRSMatrix3);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      
      int int1 = (-1261);
      // Undeclared exception!
      try { 
        cRSMatrix3.setRow(1868, (Vector) compressedVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(10, 1.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(677);
      assertEquals(0.0014771048744460858, cRSMatrix0.density(), 0.01);
      assertEquals(677, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(677, cRSMatrix0.cardinality());
      assertEquals(677, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.select(intArray0, intArray0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0014771048744460858, cRSMatrix0.density(), 0.01);
      assertEquals(677, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(677, cRSMatrix0.cardinality());
      assertEquals(677, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(5, cRSMatrix1.rows());
      assertEquals(1.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(5, cRSMatrix1.columns());
      assertEquals(25, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertNotNull(cRSMatrix1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(677, 0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '677' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 1809;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1809);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1809, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(5.52791597567717E-4, cRSMatrix0.density(), 0.01);
      assertEquals(1809, cRSMatrix0.columns());
      assertEquals(1809, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      int int1 = 17;
      double double0 = cRSMatrix0.minInRow(17);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1809, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(5.52791597567717E-4, cRSMatrix0.density(), 0.01);
      assertEquals(1809, cRSMatrix0.columns());
      assertEquals(1809, cRSMatrix0.cardinality());
      
      // Undeclared exception!
      try { 
        SparseVector.fromMatrixMarket("D=OV5M}?_l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 3376;
      org.evosuite.runtime.Random.setNextRandom(3376);
      int int1 = 3394;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3394, 3376);
      assertEquals(3376.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3394, cRSMatrix0.columns());
      assertEquals(2.946375957572186E-4, cRSMatrix0.density(), 0.01);
      assertEquals(3394, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3394, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3376, (double)3394, (-1.0), 2345.25098115, (double)3394).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.updateRow(3376, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(907, 1.0);
      assertEquals(907, rowMajorSparseMatrix0.rows());
      assertEquals(0.0011025358324145535, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(907, rowMajorSparseMatrix0.cardinality());
      assertEquals(907, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      int int0 = 3165;
      double double0 = rowMajorSparseMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(907, rowMajorSparseMatrix0.rows());
      assertEquals(0.0011025358324145535, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(907, rowMajorSparseMatrix0.cardinality());
      assertEquals(907, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      
      int int1 = 1071;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3165, 1071);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(1071, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(3165, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertFalse(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(907, rowMajorSparseMatrix0.rows());
      assertEquals(0.0011025358324145535, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(907, rowMajorSparseMatrix0.cardinality());
      assertEquals(907, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1071, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(3165, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1071, cRSMatrix1.columns());
      assertEquals(907, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertNotNull(cRSMatrix1);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.copy();
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertFalse(cRSMatrix2.equals((Object)rowMajorSparseMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertEquals(1071, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(3165, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3165, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(1071, cRSMatrix2.columns());
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix1, rowMajorSparseMatrix0, cRSMatrix0, cRSMatrix2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1302, 2091, 32);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2091, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1302, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.minInRow(32);
      assertEquals(0.0, double0, 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2091, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1302, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 32;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(32);
      assertEquals(32, cRSMatrix0.columns());
      assertEquals(0.03125, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(32, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(32, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cRSMatrix0.foldRows(vectorAccumulator0);
      assertEquals(32, cRSMatrix0.columns());
      assertEquals(0.03125, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(32, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(32, cRSMatrix0.cardinality());
      assertNotNull(doubleArray0);
      assertEquals(32, doubleArray0.length);
      
      MatrixIterator matrixIterator0 = cRSMatrix0.nonZeroIterator();
      assertEquals(32, cRSMatrix0.columns());
      assertEquals(0.03125, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(32, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(32, cRSMatrix0.cardinality());
      assertNotNull(matrixIterator0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(32, 32, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2794;
      doubleArray0[1] = (double) 2794;
      doubleArray0[2] = (double) 2794;
      int[] intArray0 = new int[8];
      intArray0[0] = 2794;
      intArray0[1] = 2794;
      intArray0[2] = 2794;
      intArray0[3] = 2794;
      intArray0[4] = 2794;
      intArray0[5] = 2794;
      intArray0[6] = 2794;
      intArray0[7] = 2794;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2794, 2794, 2794, doubleArray0, intArray0, intArray0);
      assertEquals(2794, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2794, cRSMatrix0.rows());
      assertEquals(3.5790980672870435E-4, cRSMatrix0.density(), 0.01);
      assertEquals(2794, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      assertArrayEquals(new double[] {2794.0, 2794.0, 2794.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {2794, 2794, 2794, 2794, 2794, 2794, 2794, 2794}, intArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(8, intArray0.length);
      
      double double0 = cRSMatrix0.maxInRow(2);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2794, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2794, cRSMatrix0.rows());
      assertEquals(3.5790980672870435E-4, cRSMatrix0.density(), 0.01);
      assertEquals(2794, cRSMatrix0.cardinality());
      assertArrayEquals(new double[] {2794.0, 2794.0, 2794.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {2794, 2794, 2794, 2794, 2794, 2794, 2794, 2794}, intArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.zero(10);
      assertEquals(10, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toColumnMatrix();
      assertEquals(10, denseVector0.length());
      assertEquals(10, matrix0.rows());
      assertEquals(1, matrix0.columns());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1882, 1882);
      assertEquals(1882, cRSMatrix0.rows());
      assertEquals(1882.0, cRSMatrix0.max(), 0.01);
      assertEquals(1882, cRSMatrix0.cardinality());
      assertEquals(1882, cRSMatrix0.columns());
      assertEquals(5.313496280552603E-4, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertEquals(1882, cRSMatrix0.rows());
      assertEquals(1882.0, cRSMatrix0.max(), 0.01);
      assertEquals(1882, cRSMatrix0.cardinality());
      assertEquals(1882, cRSMatrix0.columns());
      assertEquals(5.313496280552603E-4, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(rowMajorMatrixIterator0);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertEquals(1882, cRSMatrix0.rows());
      assertEquals(1882.0, cRSMatrix0.max(), 0.01);
      assertEquals(1882, cRSMatrix0.cardinality());
      assertEquals(1882, cRSMatrix0.columns());
      assertEquals(5.313496280552603E-4, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(byteArray0);
      assertEquals(30129, byteArray0.length);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      assertEquals(1882, cRSMatrix0.rows());
      assertEquals(1882.0, cRSMatrix0.max(), 0.01);
      assertEquals(1882, cRSMatrix0.cardinality());
      assertEquals(1882, cRSMatrix0.columns());
      assertEquals(5.313496280552603E-4, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1882, cRSMatrix1.cardinality());
      assertEquals(1882.0, cRSMatrix1.max(), 0.01);
      assertEquals(1882, cRSMatrix1.rows());
      assertEquals(1882, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(5.313496280552603E-4, cRSMatrix1.density(), 0.01);
      assertNotNull(cRSMatrix1);
      assertEquals(30129, byteArray0.length);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-1157));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte)5;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(17);
      CRSMatrix cRSMatrix0 = new CRSMatrix(4523, 893);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(4523, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(893, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      double double0 = 1.0764587251587136E7;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double1 = cRSMatrix0.foldRow(2725, vectorAccumulator0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(4523, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(893, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 17;
      doubleArray0[2] = (double) 2725;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1054);
      intArray0[1] = 1139;
      intArray0[2] = 893;
      CRSMatrix cRSMatrix1 = null;
      try {
        cRSMatrix1 = new CRSMatrix((-1054), (-2390), 4523, doubleArray0, intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1054x-2390
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 937;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(937, Double.POSITIVE_INFINITY);
      assertEquals(937, cRSMatrix0.rows());
      assertEquals(937, cRSMatrix0.cardinality());
      assertEquals(0.0010672358591248667, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(937, cRSMatrix0.columns());
      assertEquals(Double.POSITIVE_INFINITY, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      int int1 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(937, 0);
      assertEquals(937, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.sliceBottomRight(0, 937);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(937, cRSMatrix0.rows());
      assertEquals(937, cRSMatrix0.cardinality());
      assertEquals(0.0010672358591248667, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(937, cRSMatrix0.columns());
      assertEquals(Double.POSITIVE_INFINITY, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(937, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)denseMatrix0.copy();
      assertTrue(basic2DMatrix0.equals((Object)denseMatrix0));
      assertEquals(937, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(937, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      
      int int2 = (-2050);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double0 = cRSMatrix0.foldNonZeroInColumn((-2050), vectorAccumulator0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(937, cRSMatrix0.rows());
      assertEquals(937, cRSMatrix0.cardinality());
      assertEquals(0.0010672358591248667, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(937, cRSMatrix0.columns());
      assertEquals(Double.POSITIVE_INFINITY, cRSMatrix0.max(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      
      CRSMatrix cRSMatrix2 = CRSMatrix.identity(0);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.rows());
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix2.toColumnVector();
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      
      VectorIterator vectorIterator0 = cRSMatrix2.iteratorOfRow(0);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.rows());
      assertNotNull(vectorIterator0);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) cRSMatrix0, 937, 937, 0, 1273);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 937, 937
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1040);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1040, cRSMatrix0.rows());
      assertEquals(1040, cRSMatrix0.columns());
      assertEquals(9.615384615384616E-4, cRSMatrix0.density(), 0.01);
      assertEquals(1040, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.maxInRow(14);
      assertEquals(1.0, double0, 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1040, cRSMatrix0.rows());
      assertEquals(1040, cRSMatrix0.columns());
      assertEquals(9.615384615384616E-4, cRSMatrix0.density(), 0.01);
      assertEquals(1040, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 56;
      double double0 = 70.3192142;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(56, 70.3192142);
      assertEquals(0.017857142857142856, cRSMatrix0.density(), 0.01);
      assertEquals(56, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(56, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(56, cRSMatrix0.cardinality());
      assertEquals(70.3192142, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toRowMatrix();
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertNotNull(matrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1073741824);
      intArray0[1] = 36;
      intArray0[2] = 70;
      intArray0[3] = 13;
      intArray0[4] = (-412);
      intArray0[5] = 14;
      intArray0[6] = 27;
      intArray0[7] = 1431655765;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1073741824' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 2627;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2627);
      assertEquals(2627, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(2627, cRSMatrix0.cardinality());
      assertEquals(3.8066235249333843E-4, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2627, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cRSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      assertEquals(2627, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(2627, cRSMatrix0.cardinality());
      assertEquals(3.8066235249333843E-4, cRSMatrix0.density(), 0.01);
      assertEquals(2627, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(doubleArray0);
      assertEquals(2627, doubleArray0.length);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertEquals(2627, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(2627, cRSMatrix0.cardinality());
      assertEquals(3.8066235249333843E-4, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2627, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(rowMajorMatrixIterator0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = cRSMatrix0.is(matrixPredicate0);
      assertFalse(boolean0);
      assertEquals(2627, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(2627, cRSMatrix0.cardinality());
      assertEquals(3.8066235249333843E-4, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2627, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      cRSMatrix0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (-1272.898);
      doubleArray0[6] = (double) 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(2, 0, doubleArray0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(2, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2.0, 2.0, (-1272.898), 2.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(0, 2);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(2, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(2, cRSMatrix1.columns());
      assertNotNull(cRSMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2.0, 2.0, (-1272.898), 2.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(3376);
      int int0 = 3394;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3394, 3376);
      assertEquals(3394, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3394, cRSMatrix0.columns());
      assertEquals(3376.0, cRSMatrix0.max(), 0.01);
      assertEquals(2.946375957572186E-4, cRSMatrix0.density(), 0.01);
      assertEquals(3394, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(3376, vectorFunction0);
      assertEquals(2.94550784444385E-4, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3393, cRSMatrix0.cardinality());
      assertEquals(3394, cRSMatrix0.columns());
      assertEquals(3376.0, cRSMatrix0.max(), 0.01);
      assertEquals(3394, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      
      VectorIterator vectorIterator0 = cRSMatrix0.nonZeroIteratorOfColumn(3394);
      assertEquals(2.94550784444385E-4, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3393, cRSMatrix0.cardinality());
      assertEquals(3394, cRSMatrix0.columns());
      assertEquals(3376.0, cRSMatrix0.max(), 0.01);
      assertEquals(3394, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(vectorIterator0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(3394, 3376);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3394, rowMajorSparseMatrix0.cardinality());
      assertEquals(3394, rowMajorSparseMatrix0.columns());
      assertEquals(3376.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(2.946375957572186E-4, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3394, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      
      double double0 = cRSMatrix0.max();
      assertEquals(3376.0, double0, 0.01);
      assertEquals(2.94550784444385E-4, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3393, cRSMatrix0.cardinality());
      assertEquals(3394, cRSMatrix0.columns());
      assertEquals(3376.0, cRSMatrix0.max(), 0.01);
      assertEquals(3394, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      
      double double1 = cRSMatrix0.max();
      assertEquals(double1, double0, 0.01);
      assertEquals(3376.0, double1, 0.01);
      assertEquals(2.94550784444385E-4, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3393, cRSMatrix0.cardinality());
      assertEquals(3394, cRSMatrix0.columns());
      assertEquals(3376.0, cRSMatrix0.max(), 0.01);
      assertEquals(3394, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.zero(3394, (-613), 3376);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 3394x-613
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1550;
      doubleArray0[1] = (double) 1550;
      doubleArray0[2] = (double) 141;
      doubleArray0[3] = (double) 1550;
      doubleArray0[4] = (double) 141;
      doubleArray0[5] = (double) 1550;
      doubleArray0[6] = (double) 1550;
      doubleArray0[7] = (double) 1550;
      int[] intArray0 = new int[1];
      intArray0[0] = 141;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1550, 141, 141, doubleArray0, intArray0, intArray0);
      assertEquals(141, cRSMatrix0.cardinality());
      assertEquals(1550, cRSMatrix0.rows());
      assertEquals(141, cRSMatrix0.columns());
      assertEquals(6.451612903225806E-4, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      assertArrayEquals(new double[] {1550.0, 1550.0, 141.0, 1550.0, 141.0, 1550.0, 1550.0, 1550.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {141}, intArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.toBinary();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-1749));
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(8, 3413);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(8, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(3413, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfColumns(1682);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(8, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(3413, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(8, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(1682, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      cRSMatrix0.eachNonZeroInRow(0, (VectorProcedure) null);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(8, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(3413, cRSMatrix0.columns());
      assertNotSame(cRSMatrix0, cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3812, 3812);
      assertEquals(3812, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3812, cRSMatrix0.columns());
      assertEquals(3812, cRSMatrix0.cardinality());
      assertEquals(3812.0, cRSMatrix0.max(), 0.01);
      assertEquals(2.6232948583420777E-4, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn(32);
      assertEquals(3812, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3812, cRSMatrix0.columns());
      assertEquals(3812, cRSMatrix0.cardinality());
      assertEquals(3812.0, cRSMatrix0.max(), 0.01);
      assertEquals(2.6232948583420777E-4, cRSMatrix0.density(), 0.01);
      assertEquals(2.6232948583420777E-4, compressedVector0.density(), 0.01);
      assertEquals(3812, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(3812, 964);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(3812, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3812, cRSMatrix0.columns());
      assertEquals(3812, cRSMatrix0.cardinality());
      assertEquals(3812.0, cRSMatrix0.max(), 0.01);
      assertEquals(2.6232948583420777E-4, cRSMatrix0.density(), 0.01);
      assertEquals(964, cRSMatrix1.cardinality());
      assertEquals(3812, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(2.6232948583420777E-4, cRSMatrix1.density(), 0.01);
      assertEquals(3812.0, cRSMatrix1.max(), 0.01);
      assertEquals(964, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      VectorIterator vectorIterator0 = cRSMatrix0.nonZeroIteratorOfRow(2);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertEquals(3812, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3812, cRSMatrix0.columns());
      assertEquals(3812, cRSMatrix0.cardinality());
      assertEquals(3812.0, cRSMatrix0.max(), 0.01);
      assertEquals(2.6232948583420777E-4, cRSMatrix0.density(), 0.01);
      assertNotNull(vectorIterator0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1611, 1611);
      assertEquals(1611.0, cRSMatrix0.max(), 0.01);
      assertEquals(1611, cRSMatrix0.rows());
      assertEquals(1611, cRSMatrix0.cardinality());
      assertEquals(1611, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(6.207324643078833E-4, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1611.0, cRSMatrix0.max(), 0.01);
      assertEquals(1611, cRSMatrix0.rows());
      assertEquals(1611, cRSMatrix0.cardinality());
      assertEquals(1611, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(6.207324643078833E-4, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1025.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1449.7862779);
      doubleArray1[3] = 2759.0;
      doubleArray1[4] = (-1.0);
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(1, columnMajorSparseMatrix0.rows());
      assertEquals((-1449.7862779), columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(4, columnMajorSparseMatrix0.cardinality());
      assertEquals(2759.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.8, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(5, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(1, doubleArray0.length);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      assertEquals(1, columnMajorSparseMatrix0.rows());
      assertEquals((-1449.7862779), columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(4, columnMajorSparseMatrix0.cardinality());
      assertEquals(2759.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.8, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(5, columnMajorSparseMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1.0764587251587136E7, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 411;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(411, (-152.74863395920622));
      assertEquals(411, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(411, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(411, cRSMatrix0.rows());
      assertEquals((-152.74863395920622), cRSMatrix0.min(), 0.01);
      assertEquals(0.0024330900243309003, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      Spliterator<Double> spliterator0 = cRSMatrix0.spliterator();
      assertEquals(411, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(411, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(411, cRSMatrix0.rows());
      assertEquals((-152.74863395920622), cRSMatrix0.min(), 0.01);
      assertEquals(0.0024330900243309003, cRSMatrix0.density(), 0.01);
      assertNotNull(spliterator0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfRows(411);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(411, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(411, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(411, cRSMatrix0.rows());
      assertEquals((-152.74863395920622), cRSMatrix0.min(), 0.01);
      assertEquals(0.0024330900243309003, cRSMatrix0.density(), 0.01);
      assertEquals(411, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(411, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      // Undeclared exception!
      cRSMatrix0.setAll(57.6055950886);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 677;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(677);
      assertEquals(677, cRSMatrix0.cardinality());
      assertEquals(0.0014771048744460858, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(677, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(677, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      int int1 = 0;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 677;
      intArray0[3] = 0;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '677' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2145662203;
      doubleArray0[1] = (double) 2145662203;
      doubleArray0[2] = (double) 2145662203;
      doubleArray0[3] = (double) 2145662203;
      doubleArray0[4] = (double) 2145662203;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2145662203, 2145662203, 2145662203, doubleArray0, (int[]) null, (int[]) null);
      assertEquals(2145662203, cRSMatrix0.cardinality());
      assertEquals(1.10195833247072, cRSMatrix0.density(), 0.01);
      assertEquals(2145662203, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2145662203, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      assertArrayEquals(new double[] {2.145662203E9, 2.145662203E9, 2.145662203E9, 2.145662203E9, 2.145662203E9}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.min();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.norm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertNotNull(cRSMatrix1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix2 = CRSMatrix.random(62, 62, 0.0, (Random) mockRandom0);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertEquals(62, cRSMatrix2.cardinality());
      assertEquals(0.9, cRSMatrix2.max(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(62, cRSMatrix2.columns());
      assertEquals(0.016129032258064516, cRSMatrix2.density(), 0.01);
      assertEquals(62, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(62, 62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 62
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 1969;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1969, 1969, 1969);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1969, cRSMatrix0.columns());
      assertEquals(1969, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      cRSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(13, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.07692307692307693, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn(13);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(13, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.07692307692307693, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(13, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      cRSMatrix0.setAll((-2836.4474));
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3418;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(3418, 1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1000L);
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn((-2183));
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-4932), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -4932x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(8, 8);
      assertEquals(8, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(8, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      assertEquals(8, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(8, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(8, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(8, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      assertSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertSame(rowMajorSparseMatrix0, cRSMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn(8);
      assertEquals(8, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(8, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(8, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertSame(cRSMatrix0, rowMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(1398, 177);
      assertFalse(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(8, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(8, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(1398, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(177, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertNotNull(cRSMatrix1);
      assertSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(4, 157);
      assertEquals(157, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      double[][] doubleArray0 = new double[9][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = 3216.9;
      doubleArray1[2] = (double) 157;
      doubleArray1[3] = (-681.78);
      doubleArray1[4] = (double) 4;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-681.78);
      doubleArray2[1] = (-681.78);
      doubleArray2[2] = 4684.248845617597;
      doubleArray2[3] = (-681.78);
      doubleArray2[4] = (-681.78);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 3216.9;
      doubleArray4[1] = 4684.248845617597;
      doubleArray4[2] = (double) 4;
      doubleArray4[3] = 3216.9;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 3216.9;
      doubleArray5[1] = (double) 157;
      doubleArray5[2] = (double) 157;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = 4684.248845617597;
      doubleArray6[1] = (-681.78);
      doubleArray6[2] = 4684.248845617597;
      doubleArray6[3] = (double) 4;
      doubleArray6[4] = 3216.9;
      doubleArray6[5] = 1591.38;
      doubleArray6[6] = 1.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = Double.NEGATIVE_INFINITY;
      doubleArray7[1] = 1591.38;
      doubleArray7[2] = 1591.38;
      doubleArray7[3] = 4684.248845617597;
      doubleArray7[4] = (-681.78);
      doubleArray7[5] = 1591.38;
      doubleArray7[6] = (double) 4;
      doubleArray7[7] = (-1242.9593991);
      doubleArray7[8] = (double) 4;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray8[0] = (-1242.9593991);
      doubleArray8[1] = (-681.78);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[2];
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      
      doubleArray9[0] = 1591.38;
      doubleArray9[1] = 1.0;
      doubleArray0[8] = doubleArray9;
      DenseMatrix denseMatrix1 = DenseMatrix.from2DArray(doubleArray0);
      assertFalse(denseMatrix1.equals((Object)denseMatrix0));
      assertEquals(5, denseMatrix1.columns());
      assertEquals(9, denseMatrix1.rows());
      assertNotNull(denseMatrix1);
      assertEquals(9, doubleArray0.length);
      assertNotSame(denseMatrix1, denseMatrix0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix1, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 319;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(319, 2.0);
      assertEquals(319, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(319, cRSMatrix0.rows());
      assertEquals(0.003134796238244514, cRSMatrix0.density(), 0.01);
      assertEquals(319, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(319);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(319, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.003134796238244514, cRSMatrix1.density(), 0.01);
      assertEquals(319, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(319, cRSMatrix1.cardinality());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 2.0;
      doubleArray1[2] = (-1660.038412);
      doubleArray1[3] = 2.0;
      doubleArray1[4] = 2.0;
      doubleArray1[5] = (double) 319;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 319;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 2.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 2.0;
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = 2.0;
      doubleArray4[4] = 2.0;
      doubleArray4[5] = 2.0;
      doubleArray0[3] = doubleArray4;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(6, matrix0.columns());
      assertEquals(4, matrix0.rows());
      assertNotNull(matrix0);
      assertEquals(4, doubleArray0.length);
      
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      // Undeclared exception!
      cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 16;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(16, 16);
      assertEquals(16, denseMatrix0.rows());
      assertEquals(16, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 1839;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1839, 1839);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1839, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1839, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1839, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1839, cRSMatrix0.columns());
      
      String string0 = "";
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (double)1839, 1084.0, (-2594.7718004606), 3.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.transformRow(32, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2307;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 13;
      doubleArray0[3] = (double) 13;
      doubleArray0[4] = (double) 2307;
      doubleArray0[5] = (double) 13;
      doubleArray0[6] = (double) 2307;
      int[] intArray0 = new int[9];
      intArray0[0] = 13;
      intArray0[1] = 2326;
      intArray0[2] = 13;
      intArray0[3] = 2307;
      intArray0[4] = 2307;
      intArray0[5] = 13;
      intArray0[6] = 2307;
      intArray0[7] = 13;
      intArray0[8] = 13;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2307, 2307, 13, doubleArray0, intArray0, intArray0);
      assertEquals(2.442576437141517E-6, cRSMatrix0.density(), 0.01);
      assertEquals(2307, cRSMatrix0.columns());
      assertEquals(13, cRSMatrix0.cardinality());
      assertEquals(2307, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      assertArrayEquals(new double[] {2307.0, 13.0, 13.0, 13.0, 2307.0, 13.0, 2307.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {13, 2326, 13, 2307, 2307, 13, 2307, 13, 13}, intArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(9, intArray0.length);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfColumns(13);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(2.442576437141517E-6, cRSMatrix0.density(), 0.01);
      assertEquals(2307, cRSMatrix0.columns());
      assertEquals(13, cRSMatrix0.cardinality());
      assertEquals(2307, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(13, cRSMatrix1.columns());
      assertEquals(2307, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertNotNull(cRSMatrix1);
      assertArrayEquals(new double[] {2307.0, 13.0, 13.0, 13.0, 2307.0, 13.0, 2307.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {13, 2326, 13, 2307, 2307, 13, 2307, 13, 13}, intArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(9, intArray0.length);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      int int0 = (-1558);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow((-1558));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1558
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 1839;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1839, 1839);
      assertEquals(1839, cRSMatrix0.columns());
      assertEquals(1839, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1839, cRSMatrix0.columns());
      assertEquals(1839, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.transformRow(32, vectorFunction0);
      assertEquals(1839, cRSMatrix0.columns());
      assertEquals(1839, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(1839, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(1839, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)RowMajorSparseMatrix.fromCSV("");
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.cardinality());
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      
      int int1 = 2;
      double double1 = cRSMatrix0.getOrElse(2, 2, 0.0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix2));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1839, cRSMatrix0.columns());
      assertEquals(1839, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix2));
      assertEquals(1839, cRSMatrix0.columns());
      assertEquals(1839, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1840' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2093.0;
      doubleArray2[1] = 55.4649607514917;
      doubleArray2[2] = 1331.8364422;
      doubleArray0[1] = doubleArray2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      assertEquals(2, doubleArray0.length);
      
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2, 2);
      assertEquals(2.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      int int1 = 3023;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn(3023, vectorProcedure0);
      assertEquals(2.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.foldNonZeroInRow(2, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(261, 261, 163);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(261, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(261, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 163;
      Iterator<Integer> iterator0 = cRSMatrix0.iteratorOfNonZeroRows();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(261, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(261, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(iterator0);
      
      intArray0[1] = 163;
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.select(intArray0, intArray0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(261, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(261, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(2, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(2, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertNotNull(cRSMatrix1);
      assertArrayEquals(new int[] {163, 163}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2027, 2027, 2027);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2027, cRSMatrix0.columns());
      assertEquals(2027, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfShape(2027, 2027);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2027, cRSMatrix0.columns());
      assertEquals(2027, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(2027, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(2027, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix1, cRSMatrix0, cRSMatrix1, cRSMatrix1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2028' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 10;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 10;
      doubleArray0[6] = (-3244.2488472242);
      doubleArray0[6] = (double) 10;
      doubleArray0[7] = (double) 10;
      doubleArray0[8] = (double) 10;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(10, 10, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 1914);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
      assertTrue(matrix0.equals((Object)cRSMatrix0));
      
      Matrix matrix1 = cRSMatrix0.subtract(matrix0);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(matrix1, matrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix1.iteratorOfNonZeroRows();
      assertEquals(3828, cRSMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 2821;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2821, 2821);
      // Undeclared exception!
      cRSMatrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 1502;
      int int1 = 829;
      double double0 = (-2300.9);
      long long0 = (-788L);
      MockRandom mockRandom0 = new MockRandom((-788L));
      mockRandom0.nextFloat();
      // Undeclared exception!
      try { 
        CRSMatrix.random(1502, 829, (-2300.9), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1410, 4);
      cRSMatrix0.sum();
      cRSMatrix0.getColumn(4);
      int[] intArray0 = new int[1];
      intArray0[0] = 1410;
      int[] intArray1 = new int[2];
      intArray1[0] = 4;
      intArray1[1] = 1410;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1410' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(995, 974);
      cRSMatrix0.setAll(0.0);
      cRSMatrix0.nonZeroRowMajorIterator();
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 10;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (-3244.2488472242);
      doubleArray0[6] = (double) 10;
      doubleArray0[7] = (double) 10;
      doubleArray0[8] = (double) 10;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(10, 10, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix.fromCSV("");
      Matrix.diagonal(1, Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(2115, 1, (MatrixFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2115
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2);
      // Undeclared exception!
      try { 
        CRSMatrix.random(2, 3137, (double) 3137, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("6n+RZ(i.-yU3e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("1HU,Q43DPA8sYNSu-B");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("Ti\";~Q=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)16;
      byte byte0 = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byte byte1 = (byte)32;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)7;
      byte byte2 = (byte)7;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte) (-116);
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(8, 2461.857913410943);
      cRSMatrix0.sliceBottomRight(8, 8);
      cRSMatrix0.copy();
      cRSMatrix0.subtract((double) 8);
      org.evosuite.runtime.Random.setNextRandom(1532);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(1532, (-366));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1532
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 100.0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = 527.0;
      doubleArray1[4] = (-966.0);
      doubleArray1[5] = 1642.0;
      doubleArray1[6] = (-3098.1485);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.removeFirstColumn();
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.max();
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow((-2117));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2117
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 1927;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1927);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(1927);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1928
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 10;
      int int1 = 1029;
      CRSMatrix cRSMatrix0 = new CRSMatrix(10, 1029);
      cRSMatrix0.toDenseMatrix();
      Matrix matrix0 = cRSMatrix0.rotate();
      matrix0.rotate();
      int int2 = 1992;
      Matrix.diagonal(1992, 1029);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 3257;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3257, 3257);
      // Undeclared exception!
      try { 
        cRSMatrix0.swapColumns(846, 3257);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3257' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 241;
      double double0 = (-211.80157);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(241, (-211.80157));
      Locale locale0 = Locale.FRENCH;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      numberFormat0.setRoundingMode(roundingMode0);
      NumberFormat.getCurrencyInstance(locale0);
      cRSMatrix0.toMatrixMarket(numberFormat0);
      int int1 = 2668;
      cRSMatrix0.copyOfShape(241, 2668);
      // Undeclared exception!
      cRSMatrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 1499;
      int int1 = 1084;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1499, 1499, 1084);
      RowMajorSparseMatrix.diagonal(1526, (-1.0));
      int int2 = 112;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 619;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(619, 619);
      VectorAccumulator vectorAccumulator0 = null;
      cRSMatrix0.copyOfShape(9, 1);
      // Undeclared exception!
      cRSMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 1336;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1336, 1336);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      int int1 = 3248;
      MockRandom mockRandom0 = new MockRandom(1336);
      // Undeclared exception!
      Matrix.randomSymmetric(3248, mockRandom0);
  }
}
