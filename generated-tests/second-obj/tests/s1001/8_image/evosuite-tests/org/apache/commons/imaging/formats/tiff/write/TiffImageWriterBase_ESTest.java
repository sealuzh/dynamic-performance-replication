/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:30:08 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff.write;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.color.ICC_Profile;
import java.awt.image.BufferedImage;
import java.awt.image.TileObserver;
import java.io.ByteArrayOutputStream;
import java.io.PipedOutputStream;
import java.nio.ByteOrder;
import java.nio.charset.Charset;
import java.util.Calendar;
import java.util.Hashtable;
import java.util.function.BiFunction;
import javax.swing.JTree;
import org.apache.commons.imaging.PixelDensity;
import org.apache.commons.imaging.common.BinaryOutputStream;
import org.apache.commons.imaging.common.ImageBuilder;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossless;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossy;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputDirectory;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSummary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffImageWriterBase_ESTest extends TiffImageWriterBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No directories.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)0;
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(byteOrder0, byteArray0);
      // Undeclared exception!
      try { 
        tiffImageWriterLossless0.writeImageFileHeader((BinaryOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(tiffOutputSet0.byteOrder, byteArray0);
      tiffOutputSet0.addGPSDirectory();
      try { 
        tiffImageWriterLossless0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing root directory.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.setGPSInDegrees((byte)0, (byte)109);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(byteOrder0, byteArray0);
      tiffImageWriterLossless0.validateDirectories(tiffOutputSet0);
      int int0 = TiffImageWriterBase.imageDataPaddingLength((byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)0;
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(byteOrder0, byteArray0);
      // Undeclared exception!
      try { 
        tiffImageWriterLossless0.writeImageFileHeader((BinaryOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(tiffOutputSet0.byteOrder, byteArray0);
      tiffOutputSet0.getOrCreateGPSDirectory();
      tiffImageWriterLossless0.validateDirectories(tiffOutputSet0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      tiffImageWriterLossless0.validateDirectories(tiffOutputSet0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/8_image");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.setGPSInDegrees((byte)15, (byte)15);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/8_image");
      FileSystemHandling.createFolder(evoSuiteFile1);
      TiffOutputSet tiffOutputSet1 = new TiffOutputSet();
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray0[6] = (byte)15;
      byteArray1[1] = (byte)15;
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossless0.validateDirectories(tiffOutputSet0);
      TiffOutputSet tiffOutputSet2 = new TiffOutputSet(tiffOutputSummary0.byteOrder);
      tiffOutputSet2.addGPSDirectory();
      tiffOutputSet2.addDirectory(tiffOutputSummary0.rootDirectory);
      tiffOutputSet1.addDirectory(tiffOutputSummary0.rootDirectory);
      int int0 = Calendar.OCTOBER;
      try { 
        tiffImageWriterLossless0.validateDirectories(tiffOutputSet1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Output set has Exif Directory Offset field, but no Exif Directory
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      Charset.defaultCharset();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(byteOrder0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0&`u");
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0&`u");
      tiffOutputSet0.setGPSInDegrees((byte)15, (byte)15);
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossless0.validateDirectories(tiffOutputSet0);
      TiffOutputSet tiffOutputSet1 = new TiffOutputSet();
      TiffImageWriterLossless tiffImageWriterLossless1 = new TiffImageWriterLossless(byteArray0);
      TiffOutputSummary tiffOutputSummary1 = new TiffOutputSummary(tiffOutputSet0.byteOrder, tiffOutputSummary0.rootDirectory, tiffOutputSummary0.directoryTypeMap);
      TiffOutputSet tiffOutputSet2 = new TiffOutputSet();
      tiffOutputSet2.addDirectory(tiffOutputSummary1.rootDirectory);
      tiffOutputSet2.getExifDirectory();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet1.addInteroperabilityDirectory();
      tiffOutputSet2.addDirectory(tiffOutputDirectory0);
      int int0 = ICC_Profile.icSigHlsData;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)102);
      int int1 = ICC_Profile.icSigProfileSequenceDescTag;
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffImageWriterLossless tiffImageWriterLossless2 = new TiffImageWriterLossless(byteArray0);
      try { 
        tiffImageWriterLossless1.validateDirectories(tiffOutputSet2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Output set has GPS Directory Offset field, but no GPS Directory
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(tiffOutputSet0.byteOrder, byteArray0);
      tiffOutputSet0.addInteroperabilityDirectory();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getInteroperabilityDirectory();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossless0.validateDirectories(tiffOutputSet0);
      tiffOutputSummary0.updateOffsets(tiffOutputSet0.byteOrder);
      TiffOutputSummary tiffOutputSummary1 = new TiffOutputSummary(tiffOutputSummary0.byteOrder, tiffOutputDirectory0, tiffOutputSummary0.directoryTypeMap);
      tiffOutputSet0.getExifDirectory();
      tiffOutputSet0.getOrCreateGPSDirectory();
      tiffOutputSet0.getOrCreateRootDirectory();
      tiffImageWriterLossless0.validateDirectories(tiffOutputSet0);
      TiffImageWriterLossless tiffImageWriterLossless1 = new TiffImageWriterLossless(byteArray0);
      assertFalse(tiffImageWriterLossless1.equals((Object)tiffImageWriterLossless0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(tiffOutputSet0.byteOrder, byteArray0);
      tiffOutputSet0.getInteroperabilityDirectory();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      ImageBuilder imageBuilder0 = new ImageBuilder(8, 11, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      try { 
        tiffImageWriterLossless0.writeImage(bufferedImage0, pipedOutputStream0, hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid TIFF byte order 0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossless", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      Charset.defaultCharset();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.setGPSInDegrees((byte)102, (byte)102);
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(tiffOutputSet0.byteOrder, byteArray0);
      tiffOutputSet0.addInteroperabilityDirectory();
      tiffOutputSet0.getGPSDirectory();
      TiffOutputSet tiffOutputSet1 = new TiffOutputSet();
      tiffOutputSet1.setGPSInDegrees((-1L), (byte)102);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BiFunction<Object, Object, Byte> biFunction0 = (BiFunction<Object, Object, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((byte)102).when(biFunction0).apply(any() , any());
      hashtable0.compute("FORMAT", biFunction0);
      // Undeclared exception!
      try { 
        tiffImageWriterLossless0.writeImage((BufferedImage) null, pipedOutputStream0, hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(tiffOutputSet0.byteOrder, byteArray0);
      tiffOutputSet0.getExifDirectory();
      tiffOutputSet0.getInteroperabilityDirectory();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      ImageBuilder imageBuilder0 = new ImageBuilder(858, 858, false);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      // Undeclared exception!
      tiffImageWriterLossless0.writeImage(bufferedImage0, pipedOutputStream0, hashtable0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.addInteroperabilityDirectory();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(byteArray0);
      tiffOutputSet0.getDirectories();
      tiffOutputSet0.removeField((int) (byte)109);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = Calendar.OCTOBER;
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      hashtable1.put("EXIF", tiffOutputDirectory0);
      // Undeclared exception!
      try { 
        tiffImageWriterLossless0.writeImage((BufferedImage) null, pipedOutputStream0, hashtable1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.imaging.formats.tiff.write.TiffOutputDirectory cannot be cast to org.apache.commons.imaging.formats.tiff.write.TiffOutputSet
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(tiffOutputSet0.byteOrder, byteArray0);
      tiffOutputSet0.getOrCreateGPSDirectory();
      tiffOutputSet0.setGPSInDegrees((-3), (-1L));
      TiffOutputSet tiffOutputSet1 = new TiffOutputSet(tiffOutputSet0.byteOrder);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashtable0.put("", tiffImageWriterLossless0);
      ImageBuilder imageBuilder0 = new ImageBuilder(8, 8, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      try { 
        tiffImageWriterLossless0.writeImage(bufferedImage0, pipedOutputStream0, hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(tiffOutputSet0.byteOrder, byteArray0);
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getOrCreateGPSDirectory();
      tiffOutputSet0.setGPSInDegrees(1086.5988960074108, (-1L));
      TiffOutputSet tiffOutputSet1 = new TiffOutputSet(tiffOutputSet0.byteOrder);
      tiffOutputSet1.getInteroperabilityDirectory();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossless0.validateDirectories(tiffOutputSet0);
      tiffOutputSummary0.updateOffsets(tiffOutputSet0.byteOrder);
      TiffOutputSummary tiffOutputSummary1 = new TiffOutputSummary(tiffOutputSummary0.byteOrder, tiffOutputDirectory0, tiffOutputSummary0.directoryTypeMap);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashtable0.put("XMP_XML", tiffImageWriterLossless0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ImageBuilder imageBuilder0 = new ImageBuilder(8, 11, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      // Undeclared exception!
      try { 
        tiffImageWriterLossless0.writeImage(bufferedImage0, pipedOutputStream0, hashtable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossless cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(tiffOutputSet0.byteOrder, byteArray0);
      tiffOutputSet0.getOrCreateRootDirectory();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossless0.validateDirectories(tiffOutputSet0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      String string0 = JTree.SELECTION_MODEL_PROPERTY;
      TiffOutputSummary tiffOutputSummary1 = new TiffOutputSummary(tiffOutputSet0.byteOrder, tiffOutputSummary0.rootDirectory, tiffOutputSummary0.directoryTypeMap);
      ImageBuilder imageBuilder0 = new ImageBuilder(54, 54, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      Byte byte0 = new Byte((byte)0);
      TileObserver tileObserver0 = mock(TileObserver.class, new ViolatedAssumptionAnswer());
      bufferedImage0.addTileObserver(tileObserver0);
      hashtable0.put("COMPRESSION", byte0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("al-b4tionIlumi~anVt1");
      try { 
        tiffImageWriterLossless0.writeImage(bufferedImage0, mockPrintStream0, hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid compression parameter (Only CCITT 1D/Group 3/Group 4, LZW, Packbits and uncompressed supported).
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      Charset.defaultCharset();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(tiffOutputSet0.byteOrder, byteArray0);
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getOrCreateRootDirectory();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossless0.validateDirectories(tiffOutputSet0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      String string0 = JTree.SELECTION_MODEL_PROPERTY;
      TiffOutputSummary tiffOutputSummary1 = new TiffOutputSummary(tiffOutputSummary0.byteOrder, tiffOutputDirectory0, tiffOutputSummary0.directoryTypeMap);
      ImageBuilder imageBuilder0 = new ImageBuilder((byte)102, 1742, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      Byte byte0 = new Byte((byte) (-4));
      TileObserver tileObserver0 = mock(TileObserver.class, new ViolatedAssumptionAnswer());
      bufferedImage0.addTileObserver(tileObserver0);
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerCentimetre(0, (-2271.2));
      hashtable0.put("COMPRESSION", pixelDensity0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("?D>!rI3");
      try { 
        tiffImageWriterLossless0.writeImage(bufferedImage0, mockPrintStream0, hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid compression parameter, must be numeric: org.apache.commons.imaging.PixelDensity@7
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }
}
