/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:05:18 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      try { 
        Parser.parse("*", 693);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      try { 
        Parser.parse("(*Rlxe(", (-499));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 1421;
      String string0 = "|";
      int int1 = 1013;
      try { 
        Parser.parse("?", 1013);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = (-707);
      String string0 = "(?(?P<";
      try { 
        Parser.parse("(?(?P<", (-707));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|Y", 16);
      Regexp regexp1 = new Regexp(regexp0);
      String string0 = regexp1.toString();
      assertEquals("(?:)|Y", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[10];
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.CHAR_CLASS;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[4] = regexp3;
      Regexp regexp4 = new Regexp(regexp2);
      regexpArray0[5] = regexp4;
      Regexp regexp5 = new Regexp(regexp0);
      regexpArray0[6] = regexp5;
      Regexp regexp6 = Parser.parse(".J", (-979));
      regexpArray0[7] = regexp6;
      Regexp regexp7 = new Regexp(regexp_Op0);
      regexpArray0[8] = regexp2;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-979), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -979
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 561;
      String string0 = "B|*Y";
      try { 
        Parser.parse("B|*Y", 561);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("[^\\x00-\\x{10FFFF}]", string0);
      
      Regexp regexp1 = Parser.parse("{", 7212);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = new Regexp(regexp0);
      assertNotNull(regexp3);
      assertTrue(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp regexp0 = Parser.parse("invalid escape sequence", (-2758));
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse(".", (-12));
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      try { 
        Parser.parse("p#:b=)", (-499));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = ",*\\";
      Regexp regexp0 = Parser.parse(",*", 693);
      assertNotNull(regexp0);
      
      int int0 = 0;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: trailing backslash at end of expression
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[::x6dd}x{70f}x{17b4}-x{17b5}x{200b}-x{200f}x{202a}-x{202e}x{2060}-x{2064}x{206a}-x{206f}x{d800}-x{f8ff}x{feff}x{fff9}-x{fffb}x{110bd}x{1d173}-x{1d17a}x{e0001}x{e0020}-x{e007f}x{f0000}-x{fffd}x{100000}-x{10fffd}]", 102);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("B$", (-2223));
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp2;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2, 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      int int0 = 2816;
      try { 
        Parser.parse("+.I5bVr:\"'*wey=AO", 2816);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "{(";
      try { 
        Parser.parse("{(", 8992);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `{(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("p", (-319));
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp0));
      
      String string0 = "D";
      int int0 = (-628);
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "*Qtu*Sh:3w";
      try { 
        Parser.parse("*Qtu*Sh:3w", 2496);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "H{?B$}y8522:l|@5\"Zl";
      try { 
        Parser.parse("H{?B$}y8522:l|@5\"Zl", 65096);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `{?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp0 = Parser.parse("p", 76);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      boolean boolean0 = regexp0.equals(regexp_Op0);
      assertFalse(boolean0);
      
      regexp0.reinit();
      String string0 = "[:-1n-";
      int int0 = 1808;
      try { 
        Parser.parse("[:-1n-", 1808);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `:-1`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "C";
      try { 
        Parser.parse("[", 188);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "T[-n";
      int int0 = 8;
      try { 
        Parser.parse("T[-n", 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-n`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "y)13xj<U";
      int int0 = 127344;
      try { 
        Parser.parse("y)13xj<U", 127344);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      try { 
        Parser.parse("(", (-687));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("|", (-319));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[2] = regexp0;
      Regexp regexp1 = null;
      try {
        regexp1 = new Regexp(regexpArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "B|";
      Regexp regexp0 = Parser.parse("B|", 16);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      int int0 = 40;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 40, (-3262));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      try { 
        Parser.parse("p#:b=)", (-20));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 204;
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("Pr:]", 204);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      String string0 = "/O~X J5,U?I";
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexp0.max = (-3205);
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexp0.op = regexp_Op0;
      try { 
        Parser.parse("[:", (-1967));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 230;
      int int1 = (-2075);
      try { 
        Parser.parse("Zr[V", (-2075));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[V`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 2433;
      String string0 = "[:\\s[T^";
      try { 
        Parser.parse("[:s[T^", 2433);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:s[T^`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 69733;
      try { 
        Parser.parse("^((?P<", 69733);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "\\3";
      Regexp regexp0 = Parser.parse("\u0003", 188);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp0));
      
      int int0 = (-1107);
      String string1 = "-]";
      int int1 = 66639;
      Regexp regexp3 = Parser.parse(string1, int1);
      assertNotNull(regexp3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      Regexp regexp4 = new Regexp(regexp_Op1);
      assertNotNull(regexp4);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      
      Regexp.Op regexp_Op2 = Regexp.Op.CHAR_CLASS;
      Regexp regexp5 = new Regexp(regexp_Op2);
      assertNotNull(regexp5);
      assertFalse(regexp_Op2.equals((Object)regexp_Op1));
      assertFalse(regexp_Op2.equals((Object)regexp_Op0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("x", 2433);
      assertNotNull(regexp0);
      
      String string0 = "\\`";
      int int0 = 108;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 1;
      try { 
        Parser.parse("\u0005(", 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `\u0005(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 1797;
      Regexp regexp0 = Parser.parse("S\u0003h<BGEJ e=ad", 1797);
      assertNotNull(regexp0);
      
      String string0 = "Cypriot";
      Regexp regexp1 = Parser.parse(string0, int0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\f", 64045);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("(?i:\\f)", string0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = new Regexp(regexp0);
      assertNotNull(regexp3);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      
      Regexp regexp4 = Parser.parse("pvy'{W!bGI]k", 499);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      
      Regexp regexp5 = Parser.parse("pvy'{W!bGI]k", 2986);
      assertNotNull(regexp5);
      assertFalse(regexp5.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp1);
      
      Regexp regexp6 = Parser.parse("pvy'{W!bGI]k", 118);
      assertNotNull(regexp6);
      assertFalse(regexp6.equals((Object)regexp0));
      assertTrue(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertTrue(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp1));
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp1);
      
      Regexp regexp7 = Parser.parse("pvy'{W!bGI]k", 94);
      assertNotNull(regexp7);
      assertTrue(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp0));
      assertTrue(regexp7.equals((Object)regexp6));
      assertTrue(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp2));
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, regexp5);
      assertNotSame(regexp7, regexp2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", 220);
      assertNotNull(regexp0);
      
      regexp0.max = (-2568);
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 770, (-2568));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|Y", 2549);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 2549, 32);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|Dx", 220);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, (-2075), 125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Regexp regexp0 = Parser.parse("B|~Y", 24);
      assertNotNull(regexp0);
      
      regexp0.min = 24;
      regexp0.flags = (-1432120553);
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("B|~Y", string0);
      
      Regexp regexp1 = Parser.parse("S\u0003h<BGEJ e=ad", (-1432120553));
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      Parser parser0 = new Parser("S\u0003h<BGEJ e=ad", 40);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:t:]", (-1155));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Regexp regexp0 = Parser.parse("S", (-1967));
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = new Regexp(regexp1);
      assertNotNull(regexp3);
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      
      Regexp regexp4 = new Regexp(regexp2);
      assertNotNull(regexp4);
      assertTrue(regexp1.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp3));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 117;
      String string0 = "^?T(";
      int int1 = (-4420);
      try { 
        Parser.parse("^?T(", (-4420));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `^?T(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 5108, 5108);
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      
      try { 
        Parser.parse("(?(?P<", 5108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "|C)3{`~";
      try { 
        Parser.parse("|C)3{`~", (-464));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Regexp regexp0 = Parser.parse("B|Y", 16);
      assertNotNull(regexp0);
      
      regexp0.min = 16;
      regexp0.name = "B|Y";
      regexp0.name = "B|Y";
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:::]", (-687));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      boolean boolean0 = regexp0.op.isPseudo();
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-464), 5068);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -464
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("x{", 1);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Regexp regexp0 = Parser.parse("kxKqf", (-1100));
      assertNotNull(regexp0);
      
      int int0 = 3131;
      Regexp[] regexpArray0 = regexp0.subs;
      assertNull(regexpArray0);
      
      int int1 = 1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 65;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("[^\\x00-\\x{10FFFF}]", string0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      Regexp regexp2 = Parser.parse("[^x00-x{10FFFF}]", 65);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 85, 4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", 5108);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      String string0 = regexp1.toString();
      assertNotNull(string0);
      assertEquals("D", string0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      
      regexp0.reinit();
      assertFalse(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = new Regexp(regexp1);
      assertNotNull(regexp3);
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      
      Regexp regexp4 = new Regexp(regexp1);
      assertNotNull(regexp4);
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      
      Regexp regexp5 = Parser.parse("[^0-9]", 5108);
      assertNotNull(regexp5);
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp0);
      
      Regexp regexp6 = Parser.parse("=fB@L'", 787);
      assertNotNull(regexp6);
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp1));
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Regexp regexp0 = Parser.parse("'F{6c>", 128);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      try { 
        Parser.parse("(?i:", 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 85;
      try { 
        Parser.parse("(?-s", 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-s`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "(?P<";
      String string1 = "\\Pbm";
      Parser parser0 = new Parser("Pbm", 3140);
      assertNotNull(parser0);
      
      int int0 = 64;
      Regexp regexp0 = Parser.parse("\n", 64);
      assertNotNull(regexp0);
      
      try { 
        Parser.parse("(?P<", 3140);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "[:-n";
      int int0 = (-1772);
      try { 
        Parser.parse("[:-n", (-1772));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:-n`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Parser parser0 = new Parser("x{", (-274));
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("x{", (-504));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertNotNull(regexp3);
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("\\z", string0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp2));
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp1);
      
      Regexp regexp4 = Parser.parse("z", 77);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      
      String string1 = "#~p\"\"_moS|";
      String string2 = null;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 43458);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:r:]", 188);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      int int0 = (-4330);
      Regexp regexp2 = Parser.parse("[:r:]", (-4330));
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = Parser.parse("[:r:]", 188);
      assertNotNull(regexp3);
      assertTrue(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      
      Regexp regexp4 = new Regexp(regexp0);
      assertNotNull(regexp4);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      
      Regexp regexp5 = Parser.parse(".n[Q2bxFb20W/ReAu", 67);
      assertNotNull(regexp5);
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp0);
      
      Regexp regexp6 = Parser.parse("#{wL@PBzeXGPv`d$?aQ", 1067);
      assertNotNull(regexp6);
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp5));
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp5);
      
      Regexp regexp7 = Parser.parse("u>%':2hsy1]36ZJb", 747);
      assertNotNull(regexp7);
      assertFalse(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp2));
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, regexp5);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, regexp2);
      
      try { 
        Parser.parse("Dt []~yWsGF9$lX", 552);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[]~yWsGF9$lX`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Regexp regexp0 = Parser.parse("F+@\rP*", 918000);
      assertNotNull(regexp0);
      
      String string0 = "(?(?i:LzM`ol_CI)";
      Regexp regexp1 = null;
      try {
        regexp1 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 65;
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("(?:)", string0);
      
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("(?:)", 65);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      regexp0.subs = regexpArray0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 85, 4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "T[-1n-";
      try { 
        Parser.parse("T[-1n-", 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-1n-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      regexp0.cap = 15;
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      
      Regexp regexp3 = Parser.parse("\u0001", 37);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("m%,:|NseX 6)", 2362);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("8v_m", 3375);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("p", 1767);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = Parser.parse("|,{!kTl@o|6 ", 4);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 65535);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[10];
      Regexp regexp0 = Parser.parse("\b", 1872);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      regexp0.op = regexp_Op0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-745), (-745));
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Regexp regexp3 = Parser.parse("1n", 74);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      
      Parser parser0 = new Parser("Buginese", 4023);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp0 = Parser.parse(":]", 121);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("", 121);
      assertNotNull(parser0);
      
      Regexp regexp1 = Parser.parse("", (-776));
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp2 = Parser.parse("V,-;X,[+]N$8vx", 121);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      int int0 = (-3831);
      Regexp regexp3 = Parser.parse("", (-3831));
      assertNotNull(regexp3);
      assertTrue(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      
      Parser parser1 = new Parser("V,-;X,[+]N$8vx", (-776));
      assertNotNull(parser1);
      assertFalse(parser1.equals((Object)parser0));
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 69820, 5049);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("(?-s:.)", string0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      String string1 = regexp1.toString();
      assertNotNull(string1);
      assertEquals("(?-s:.)", string1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = Parser.parse("(?-s:.)", 4200);
      assertNotNull(regexp3);
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = "";
      Regexp regexp0 = Parser.parse("", 1237);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("B", 1237);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = new Regexp(regexp1);
      assertNotNull(regexp3);
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      
      regexp3.cap = 1237;
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp3;
      regexpArray0[1] = regexp2;
      String string1 = "0;W&iB!_?m(P";
      int int0 = 1348;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1237, 2107);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1237
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Regexp regexp0 = Parser.parse("invalid character class range", (-2817));
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("(?i:invalid character class range)", string0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = Parser.parse("zA@", (-3351));
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 1;
      String string0 = "\\5";
      Regexp regexp0 = Parser.parse("\u0005", 1);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\5`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0004B*^mkrDCBd0C", 9);
      assertNotNull(regexp0);
      
      String string0 = "Samaritan";
      int int0 = 348;
      String string1 = null;
      // Undeclared exception!
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = "\\pC";
      int int0 = 120041;
      Regexp regexp0 = Parser.parse("pC", 120041);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[4] = regexp0;
      regexp0.reinit();
      Regexp regexp1 = null;
      Regexp regexp2 = null;
      try {
        regexp2 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = "\\pC";
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("pC", 1232);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1232, 85);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = "\\.+*?()|[]{}^$";
      try { 
        Parser.parse(".+*?()|[]{}^$", 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `+*?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      int int0 = (-6168);
      try { 
        Parser.parse("[:Is[T^", (-6168));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:Is[T^`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[0];
      try { 
        Parser.parse("T[-n", 108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-n`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pC", 1232);
      assertNotNull(regexp0);
      
      regexp0.min = 1232;
      regexp0.name = "\t";
      Regexp regexp1 = Parser.parse("\t", 1);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      String string0 = regexp1.toString();
      assertNotNull(string0);
      assertEquals("(?i:\\t)", string0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 383;
      String string0 = "R?o!^.=IP";
      Regexp regexp0 = Parser.parse("\u0006", 120041);
      assertNotNull(regexp0);
      
      String string1 = ".&S{g8WI65!P8-";
      int int1 = (-395);
      Regexp regexp1 = Parser.parse(string1, int1);
      assertNotNull(regexp1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      int int2 = 2848;
      Regexp regexp2 = Parser.parse(string0, int2);
      assertNotNull(regexp2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      String string2 = "nu";
      Parser parser0 = new Parser(string2, int0);
      assertNotNull(parser0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Regexp regexp0 = Parser.parse("O?vsqG=y0HRyrwGX", 48);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 5145, 48);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int int0 = 40;
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp0 = Parser.parse("By9\u0000ZTm", 40);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 65, 985);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = "`wyp=dBS#,(@)~|q=";
      Regexp regexp0 = Parser.parse("`wyp=dBS#,(@)~|q=", 43454);
      assertNotNull(regexp0);
      
      int int0 = 2469;
      Parser parser0 = new Parser("`wyp=dBS#,(@)~|q=", 2469);
      assertNotNull(parser0);
      
      Regexp regexp1 = Parser.parse("`wyp=dBS#,(@)~|q=", (-3351));
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      String string1 = regexp1.toString();
      assertNotNull(string1);
      assertEquals("(?i:`WYP=DBS#,)((?i:@))(?i:~)|(?i:Q=)", string1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = Parser.parse("(?i:`WYP=DBS#,)((?i:@))(?i:~)|(?i:Q=)", (-3502));
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      
      String string2 = regexp3.toString();
      assertNotNull(string2);
      assertEquals("\\(\\?i:`WYP=DBS#,\\)\\(\\(\\?i:@\\)\\)\\(\\?i:~\\)\\|\\(\\?i:Q=\\)", string2);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      
      Regexp regexp4 = new Regexp(regexp1);
      assertNotNull(regexp4);
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp1.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      
      int int1 = 1;
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp3;
      regexpArray0[1] = regexp4;
      regexpArray0[2] = regexp0;
      regexpArray0[4] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 42, (-3351));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = 2340;
      Regexp regexp0 = Parser.parse("9IL\u0007PnX$D_zm", 2340);
      assertNotNull(regexp0);
      
      String string0 = "S:";
      Regexp regexp1 = Parser.parse(string0, int0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("[:x00-x{10FFFF}]", 811);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("[:x00-x{10FFFF}]", (-319));
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      String string0 = regexp1.toString();
      assertNotNull(string0);
      assertEquals("[0-\\{\\}\u017F\u212A]", string0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = new Regexp(regexp0);
      assertNotNull(regexp3);
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      
      Regexp regexp4 = new Regexp(regexp0);
      assertNotNull(regexp4);
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x", 43642);
      assertNotNull(regexp0);
      
      int int0 = 2549;
      String string0 = "\\p\\x{feff}\\x{fff9}-\\x{fffb}\\x{110bd}\\x{1d173}-\\x{1d17a}\\x{e0001}\\x{e0020}-\\x{e007f}\\x{f0000}-\\x{ffffd}\\x{100000}-\\x{10fffd}]";
      Parser parser0 = new Parser("px{feff}x{fff9}-x{fffb}x{110bd}x{1d173}-x{1d17a}x{e0001}x{e0020}-x{e007f}x{f0000}-x{ffffd}x{100000}-x{10fffd}]", (-2766));
      assertNotNull(parser0);
      
      Parser parser1 = new Parser("eeBEd", (-297));
      assertNotNull(parser1);
      assertFalse(parser1.equals((Object)parser0));
      
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("[ei:x0K-x{10FFFF}]", 93);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      String string1 = "4Q[N)sV&qb6YIoj}T U";
      int int1 = (-48);
      Parser parser2 = new Parser(string1, int1);
      assertNotNull(parser2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser0));
      
      int int2 = (-796);
      Parser parser3 = new Parser(string0, int2);
      assertNotNull(parser3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(parser3.equals((Object)parser1));
      assertFalse(parser3.equals((Object)parser0));
      assertFalse(parser3.equals((Object)parser2));
      
      String string2 = "-;S393:0>}h";
      Regexp regexp3 = Parser.parse(string2, int0);
      assertNotNull(regexp3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Regexp regexp0 = Parser.parse("%v", 188);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Parser parser0 = new Parser("C", 6);
      assertNotNull(parser0);
      
      int int0 = 65516;
      Regexp regexp2 = Parser.parse("C", 65516);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp3 = new Regexp(regexp_Op1);
      assertNotNull(regexp3);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      
      Regexp.Op regexp_Op2 = Regexp.Op.ALTERNATE;
      Regexp regexp4 = new Regexp(regexp_Op2);
      assertNotNull(regexp4);
      assertFalse(regexp_Op2.equals((Object)regexp_Op0));
      assertFalse(regexp_Op2.equals((Object)regexp_Op1));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      
      regexp3.reinit();
      assertFalse(regexp_Op1.equals((Object)regexp_Op2));
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp4));
      assertNotSame(regexp_Op1, regexp_Op2);
      assertNotSame(regexp_Op1, regexp_Op0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp4);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp3;
      String string0 = "?$|N";
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[::x{6dd}x{70f}x{17b4}-x{17b5}x{[00b}-x{200f}x{202a}-x{202e}x{2060}-x{2064}x{206a}-x{206f}x{d800}-x{f8ff}x{feff}x{fff9}-x{fffb}x{110bd}x{1d173}-x{1d17a}x{e0001}x{e0020}-x{e007f}x{f0000}-x{ffffd}x{100000}-x{10fffd}]", 102);
      assertNotNull(regexp0);
      
      int int0 = 1057;
      Regexp regexp1 = Parser.parse("B$", 1057);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      int int1 = (-2223);
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = new Regexp(regexp1);
      assertNotNull(regexp3);
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      
      try { 
        Parser.parse("[:x{[00b}-x{200f}x{202a}-x{202e}x{2060}-x{2064}x{206a}-x{206f}x{d800}-x{f8ff}x{feff}x{fff9}-x{fffb}x{110bd}x{1d173}-x{1d17a}x{e0001}x{e0020}-x{e007f}x{f0000}-x{ffffd}x{100000}-x{10fffd}]", (-2223));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `}-x`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      int int0 = 2525;
      try { 
        Parser.parse("(?-mX$)", 2525);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-mX`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Regexp regexp0 = Parser.parse("q|X+f@A", 2433);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      regexp1.cap = 58;
      Regexp regexp2 = Parser.parse("regexp/syntax: internal error", 109);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      try { 
        Parser.parse("[:x{100000}-x{10fffd}]", (-1959));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `}-x`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Regexp regexp0 = Parser.parse("]hC`d>5Q9EQ", (-319));
      assertNotNull(regexp0);
      
      regexp0.runes = null;
      regexp0.reinit();
      regexp0.flags = (-319);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("#,", 1433);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("Imperial_Aramaic", 1433);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Parser parser0 = new Parser("]hC`d>5Q9EQ", 4789);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      String string0 = " PN[;S1w<R\\ae";
      int int0 = 16;
      Parser parser0 = new Parser(" PN[;S1w<Rae", 16);
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = new Regexp[7];
      try { 
        Parser.parse(" PN[;S1w<Rae", 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[;S1w<Rae`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      int int0 = 1788;
      Regexp regexp0 = Parser.parse("ZDF]GBk{38R57jS", 1788);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 1788);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      int int0 = (-1772);
      try { 
        Parser.parse("U*[FfhH[:z Ij-Z", (-1772));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `j-Z`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Phags_Pa", (-300));
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("W3{BbWQ29PIj", 12);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("Phags_Pa", string0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      
      String string1 = regexp0.toString();
      assertNotNull(string1);
      assertEquals("Phags_Pa", string1);
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(regexp0, regexp1);
      
      Regexp regexp2 = Parser.parse("^x00-x{10FFFF}", 1853);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      String string2 = regexp2.toString();
      assertNotNull(string2);
      assertEquals("\\A(?i:X00-X\\{10FFFF\\})", string2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      regexp0.reinit();
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      
      regexp1.reinit();
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp2));
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp3 = Parser.parse("U=>_nry\"9jB=Dja", 1853);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      
      Regexp regexp4 = new Regexp(regexp3);
      assertNotNull(regexp4);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      
      Regexp regexp5 = new Regexp(regexp4);
      assertNotNull(regexp5);
      assertTrue(regexp3.equals((Object)regexp4));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertTrue(regexp5.equals((Object)regexp3));
      
      Regexp regexp6 = new Regexp(regexp2);
      assertNotNull(regexp6);
      assertFalse(regexp2.equals((Object)regexp5));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp4));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp3));
      assertTrue(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp0));
  }
}
