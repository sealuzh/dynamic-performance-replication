/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 19:02:02 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.Currency;
import java.util.HashMap;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        sparseMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 167;
      int int1 = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.kroneckerProduct((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      columnMajorSparseMatrix0.toRowVector();
      Matrix matrix0 = columnMajorSparseMatrix0.multiplyByItsTranspose();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.toColumnVector();
      Matrix matrix1 = matrix0.transform(matrixFunction0);
      Locale locale0 = Locale.CANADA_FRENCH;
      matrix0.columns();
      matrix0.insert(matrix1);
      // Undeclared exception!
      try { 
        matrix1.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = matrix0.is(matrixPredicate0);
      assertFalse(boolean0);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.getRow(11);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) cCSMatrix0, (SparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert(matrix0, 11, (-2799));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 11x-2799
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 0.0);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(2101.3245177631898);
      columnMajorSparseMatrix0.iteratorOfColumn(7);
      double[][] doubleArray0 = new double[0][3];
      Matrix.from2DArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix0.transformColumn(0, vectorFunction0);
      columnMajorSparseMatrix0.insert(matrix0, 7, 0, 0, (-822), 0, 0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      sparseMatrix0.minInRow(0);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) sparseMatrix0, 0, 161);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 0 rows and 161 cols at 0, 0 in a 161x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.random(1, 1292, mockRandom0);
      Matrix matrix0 = basic2DMatrix0.blankOfColumns(1292);
      Matrix matrix1 = matrix0.insert((Matrix) basic2DMatrix0);
      assertEquals(1, matrix1.rows());
      assertEquals(1292, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      sparseMatrix0.minInRow(0);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 161);
      sparseMatrix0.insert((Matrix) denseMatrix0, 0, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      sparseMatrix0.foldRows(vectorAccumulator0);
      Matrix.identity(0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(7, 7, 7);
      cRSMatrix0.toCSV();
      cRSMatrix0.add(2636.22306179);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInColumn(12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '12' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix.fromCSV("       ");
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.randomSymmetric((-1225), (double) (-1225), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1225x-1225
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 0;
      double double0 = (-4155.586779998488);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 0, (-4155.586779998488));
      Matrix matrix0 = denseMatrix0.blankOfRows(10);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      matrix0.mkString(numberFormat0);
      // Undeclared exception!
      try { 
        matrix0.updateAt(7, 409, (MatrixFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 409
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.blankOfRows(167);
      cCSMatrix0.getRow(167);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) cCSMatrix0, 0, 167);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 0 rows and 167 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, (double[]) null);
      NumberFormat.getNumberInstance();
      rowMajorSparseMatrix0.shuffle();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-2646);
      doubleArray1[1] = (double) (-2646);
      doubleArray1[2] = (double) (-2646);
      doubleArray1[3] = (double) (-2646);
      doubleArray1[4] = (double) (-2646);
      doubleArray1[5] = (double) (-2646);
      doubleArray1[6] = (double) (-2646);
      doubleArray1[7] = (double) (-2646);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray1);
      // Undeclared exception!
      try { 
        matrix0.setRow((-2646), (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 8. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.copyOfRows(0);
      // Undeclared exception!
      try { 
        matrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      columnMajorSparseMatrix0.multiplyByItsTranspose();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        SparseMatrix.fromCSV("}Qn?>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 0.0);
      SparseMatrix.fromCSV("4");
      columnMajorSparseMatrix0.removeFirstColumn();
      SparseVector sparseVector0 = SparseVector.fromCSV("4");
      Matrix matrix0 = sparseVector0.toRowMatrix();
      matrix0.insertRow(32, sparseVector0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      double[][] doubleArray0 = new double[1][4];
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix(doubleArray0);
      basic2DMatrix0.subtract((-2289.46488));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Vector.fromMap(hashMap0, 32);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldColumn(32, vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 0;
      int int1 = 464;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 464);
      rowMajorSparseMatrix0.rotate();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.swapRows(2, 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(161, 4796.62964);
      Matrix.zero(25, 25);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.non(matrixPredicate0);
      SparseMatrix.fromCSV("4");
      columnMajorSparseMatrix0.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 161);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      sparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      sparseMatrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.getRow(167);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      try { 
        cCSMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = (-1977);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero(Integer.MAX_VALUE, Integer.MAX_VALUE, (-1977));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 161;
      int int1 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      sparseMatrix0.minInRow(0);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 161);
      denseMatrix0.toColumnMajorSparseMatrix();
      Matrix matrix0 = sparseMatrix0.insert((Matrix) denseMatrix0, 0, 0);
      ColumnMajorSparseMatrix.zero(0, 10);
      // Undeclared exception!
      try { 
        matrix0.iteratorOfColumn(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 161);
      sparseMatrix0.getRow(161);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(161, 0);
      Matrix matrix0 = sparseMatrix0.insert((Matrix) denseMatrix0, 0, 0);
      sparseMatrix0.insert(matrix0, (-5409), 161);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("4");
      sparseMatrix0.toCSV();
      sparseMatrix0.product();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(6, 171);
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix.randomSymmetric(62, 0.0, (Random) mockRandom0);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      denseMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(161, 161);
      cCSMatrix0.getRow(161);
      cCSMatrix0.minInRow(0);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 161);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) denseMatrix0, 0, 161);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 0 rows and 161 cols at 0, 0 from a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[][] doubleArray0 = new double[0][2];
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      Matrix matrix0 = basic2DMatrix0.rotate();
      matrix0.slice(81, 1462, 81, 1462);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 32;
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("4");
      SparseVector.fromCSV("4");
      // Undeclared exception!
      try { 
        sparseMatrix0.sliceBottomRight(0, 126);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..1][126..1].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 161;
      int int1 = (-20);
      // Undeclared exception!
      try { 
        SparseMatrix.zero(161, (-20));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 161x-20
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 161);
      sparseMatrix0.getRow(161);
      int int0 = 0;
      sparseMatrix0.minInRow(0);
      DenseMatrix.zero(0, 161);
      // Undeclared exception!
      try { 
        sparseMatrix0.sliceBottomRight((-994), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-994' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 100.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 68.0318;
      doubleArray1[3] = (-829.04288770871);
      doubleArray1[4] = 666.42;
      doubleArray1[5] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 666.42;
      doubleArray2[1] = 68.0318;
      doubleArray2[2] = 666.42;
      doubleArray2[3] = 100.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 666.42;
      doubleArray3[1] = 100.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 100.0;
      doubleArray4[1] = 100.0;
      doubleArray4[2] = (-829.04288770871);
      doubleArray4[3] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = (-1.0);
      doubleArray0[4] = doubleArray5;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      Matrix matrix0 = Matrix.diagonal(1, 1006.4300679956139);
      // Undeclared exception!
      try { 
        basic2DMatrix0.hadamardProduct(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 5x6 does not equal to 1x1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.getRow(159);
      cCSMatrix0.minInRow(0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Matrix.diagonal(159, 0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      Matrix.constant(Integer.MAX_VALUE, 6, 1.0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 0.0);
      Vector vector0 = columnMajorSparseMatrix0.getRow((-2988));
      columnMajorSparseMatrix0.minInRow(5);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 7);
      Matrix matrix0 = columnMajorSparseMatrix0.insertColumn(8, vector0);
      matrix0.columns();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      columnMajorSparseMatrix0.maxInRow(0);
      denseMatrix0.setAll(32);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 0.0);
      NumberFormat.getNumberInstance();
      SparseVector sparseVector0 = SparseVector.zero(32);
      sparseVector0.add((double) 32);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      Integer integer0 = new Integer(32);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insertRow((-1187), sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..31
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      Vector vector0 = sparseMatrix0.getRow(161);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      sparseMatrix0.mkString(numberFormat0);
      SparseVector sparseVector0 = SparseVector.zero(0);
      vector0.add(1490.3393);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      Integer integer0 = new Integer(0);
      sparseMatrix0.insertRow(132, sparseVector0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = Matrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldColumn(0, vectorAccumulator0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert(matrix0, 2682, 2682);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 2682 rows and 2682 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("4");
      SparseVector sparseVector0 = SparseVector.fromCSV("4");
      Matrix matrix0 = sparseVector0.toRowMatrix();
      SparseMatrix.diagonal(1, 1);
      sparseMatrix0.toMatrixMarket();
      matrix0.toCSV();
      sparseMatrix0.add(matrix0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 991;
      Matrix matrix0 = Matrix.diagonal(991, 0.0);
      matrix0.add((-1419.47434));
      Integer integer0 = new Integer(991);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix1 = matrix0.transformRow(991, vectorFunction0);
      int int1 = 4;
      int int2 = 37;
      int int3 = (-1);
      matrix0.swapRows(int2, int3);
      VectorProcedure vectorProcedure0 = null;
      int int4 = 1000;
      matrix0.eachInRow(int4, vectorProcedure0);
      Matrix.zero(int0, int3);
      MockRandom mockRandom0 = new MockRandom(int2);
      DenseMatrix denseMatrix0 = DenseMatrix.random(int2, int0, mockRandom0);
      denseMatrix0.minInRow(int2);
      matrix1.ensureIndexesAreInBounds(int1, int4);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      cCSMatrix0.getRow(1);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(17, 1);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) denseMatrix0, 17, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 17 rows and 1 cols at 0, 0 in a 1x1 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2, 492, 2);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.each(matrixProcedure0);
      MockRandom mockRandom0 = new MockRandom((-1L));
      Matrix matrix0 = Matrix.random(2, 2, mockRandom0);
      // Undeclared exception!
      try { 
        matrix0.set(2, (-50), 325.8055);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 161;
      int int1 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      Matrix matrix0 = sparseMatrix0.divide(161);
      sparseMatrix0.getRow(161);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) sparseMatrix0, 0, 9, 161, 22);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 0, 9
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 0.0);
      columnMajorSparseMatrix0.rank();
      Matrix matrix0 = columnMajorSparseMatrix0.power(0);
      matrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      sparseMatrix0.rank();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Vector.fromMap(hashMap0, 161);
      sparseMatrix0.columns();
      sparseMatrix0.foldColumns((VectorAccumulator) null);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(10, 10, 10);
      DenseMatrix denseMatrix0 = basic2DMatrix0.toDenseMatrix();
      // Undeclared exception!
      try { 
        denseMatrix0.getColumn(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Matrix matrix0 = Matrix.unit(496, 3203);
      MatrixOperation<SparseMatrix> matrixOperation0 = (MatrixOperation<SparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      matrix0.apply(matrixOperation0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(2627);
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 2627;
      doubleArray1[1] = (double) 2627;
      doubleArray1[2] = 288.813039391878;
      doubleArray1[3] = (double) 2627;
      doubleArray1[4] = (double) 2627;
      doubleArray1[5] = (double) 2627;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      Matrix matrix1 = basic2DMatrix0.subtract(288.813039391878);
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      sparseMatrix0.mkString(numberFormat0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(matrix0, matrix1, sparseMatrix0, matrix1);
      columnMajorSparseMatrix0.max();
      int int0 = 5;
      Matrix.identity(int0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix1.update(matrixFunction0);
      sparseMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(2486, 2486);
      // Undeclared exception!
      basic2DMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(7, 1052.5);
      int int0 = (-4142);
      Matrix matrix0 = columnMajorSparseMatrix0.sliceBottomRight((-4142), 7);
      columnMajorSparseMatrix0.removeFirstColumn();
      Matrix matrix1 = columnMajorSparseMatrix0.blankOfShape((-533), 18);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix1.transform(matrixFunction0);
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      Matrix matrix2 = ooPlaceKroneckerProduct0.applyCommon(matrix0, columnMajorSparseMatrix0);
      Matrix matrix3 = columnMajorSparseMatrix0.multiply(matrix2);
      int int1 = (-1);
      matrix3.ensureDimensionsAreCorrect(int0, int1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(272, 0);
      sparseMatrix0.getRow(0);
      sparseMatrix0.minInRow(0);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(272, 0);
      int int1 = 0;
      denseMatrix0.columnMajorIterator();
      int int2 = 360;
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) denseMatrix0, 360, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 360 rows and 0 cols at 0, 0 in a 272x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(161, 17);
      cRSMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 0;
      int int1 = 464;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 464);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      rowMajorSparseMatrix0.swapRows(0, 0);
      matrix0.eachInRow(0, (VectorProcedure) null);
      CCSMatrix cCSMatrix0 = (CCSMatrix)Matrix.zero(464, 464);
      cCSMatrix0.minInRow(464);
      cCSMatrix0.ensureIndexesAreInBounds(int1, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("4");
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Basic2DMatrix.identity(2156);
      CCSMatrix cCSMatrix0 = new CCSMatrix(2156, 2156);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) sparseMatrix0, 2156, 2156);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 2156 rows and 2156 cols at 0, 0 from a 1x1 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SparseMatrix.fromCSV("4");
      int int0 = (-1340);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1340);
      doubleArray0[1] = (double) (-1340);
      doubleArray0[2] = (double) (-1340);
      doubleArray0[3] = (double) (-1340);
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-1340), (-1340), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1340x-1340
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("4");
      sparseMatrix0.iteratorOfColumn(3067);
      sparseMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("4");
      sparseMatrix0.removeFirstColumn();
      sparseMatrix0.norm();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      sparseMatrix0.foldColumns(vectorAccumulator0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      sparseMatrix0.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("4");
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.copyOfColumns(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 161;
      int int1 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      sparseMatrix0.minInRow(0);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 161);
      Matrix matrix0 = sparseMatrix0.insert((Matrix) denseMatrix0, 0, 0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix0, (-1982), 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1982, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 13;
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix.randomSymmetric(13, mockRandom0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(3);
      // Undeclared exception!
      try { 
        cRSMatrix0.sliceBottomRight(13, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [13..3][3..3].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      sparseMatrix0.minInRow(0);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 161);
      sparseMatrix0.minInRow((-89));
      DenseMatrix denseMatrix1 = DenseMatrix.zero(0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      denseMatrix1.transformRow(0, vectorFunction0);
      sparseMatrix0.insert((Matrix) denseMatrix1, 0, 0);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) denseMatrix0, 161, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 161 rows and 0 cols at 0, 0 from a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(48, 48);
      columnMajorSparseMatrix0.multiplyByItsTranspose();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(161);
      cRSMatrix0.toColumnVector();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transform(matrixFunction0);
      Locale locale0 = Locale.CANADA_FRENCH;
      matrix0.columns();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("");
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 681);
      cRSMatrix0.removeLastColumn();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 161;
      int int1 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      Vector vector0 = sparseMatrix0.getRow(161);
      sparseMatrix0.toMatrixMarket((NumberFormat) null);
      sparseMatrix0.minInRow(0);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 161);
      Matrix matrix0 = sparseMatrix0.insert((Matrix) denseMatrix0, 0, 0);
      // Undeclared exception!
      try { 
        matrix0.setColumn(0, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 161.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 161);
      sparseMatrix0.getRow(161);
      sparseMatrix0.minInRow(0);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 161);
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) sparseMatrix0, 161, 0, 1, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 161, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      double[][] doubleArray0 = new double[1][4];
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix(doubleArray0);
      Basic2DMatrix basic2DMatrix2 = new Basic2DMatrix(0, 31);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix2.update(matrixFunction0);
      basic2DMatrix1.rotate();
      // Undeclared exception!
      try { 
        basic2DMatrix2.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      sparseMatrix0.minInRow(0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(161);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      basic2DMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(0, 0);
      Matrix matrix0 = basic2DMatrix0.copyOfRows(0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(basic2DMatrix0, basic2DMatrix0, matrix0, basic2DMatrix0);
      cCSMatrix0.rank();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Vector.fromMap(hashMap0, 3161);
      basic2DMatrix0.columns();
      // Undeclared exception!
      try { 
        cCSMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      sparseMatrix0.minInRow(0);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 161);
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      basic2DMatrix0.removeLastRow();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      denseMatrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        denseMatrix0.blankOfColumns((-3196));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      Matrix matrix1 = matrix0.copyOfRows(0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.update(matrixFunction0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateRow(0, vectorFunction0);
      // Undeclared exception!
      try { 
        matrix1.removeRow(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      sparseMatrix0.getRow(0);
      String string0 = "Can";
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(161);
      // Undeclared exception!
      try { 
        sparseMatrix0.subtract((Matrix) basic2DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 161x0 does not equal to 161x161.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 2627;
      doubleArray1[1] = (double) 2627;
      doubleArray1[2] = 288.813039391878;
      doubleArray1[3] = (double) 2627;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      basic2DMatrix0.removeLastRow();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      basic2DMatrix0.non(matrixPredicate0);
      int int0 = (-3196);
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket("W)a%[)X6Xhmh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 167;
      int int1 = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.euclideanNorm();
      cCSMatrix0.getRow(167);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) cCSMatrix0, 0, 167);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 0 rows and 167 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("4");
      sparseMatrix0.toCSV();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.toCSV();
      sparseMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      sparseMatrix0.minInRow(0);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 161);
      denseMatrix0.max();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.foldColumns(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(161, 161);
      Vector vector0 = cCSMatrix0.getRow(161);
      // Undeclared exception!
      try { 
        cCSMatrix0.insertColumn(161, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..160
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(2627);
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 2627;
      doubleArray1[1] = (double) 2627;
      doubleArray1[3] = (double) 2627;
      doubleArray1[4] = (double) 2627;
      doubleArray1[5] = (double) 2627;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 288.813039391878;
      doubleArray2[1] = (double) 2627;
      doubleArray2[2] = 288.813039391878;
      doubleArray2[3] = (double) 2627;
      doubleArray0[1] = doubleArray2;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      matrix0.manhattanNorm();
      int int0 = 1;
      int int1 = 2147483645;
      Matrix.unit(int0, int1);
      Matrix.from2DArray(doubleArray0);
      basic2DMatrix0.toColumnVector();
      Matrix matrix1 = basic2DMatrix0.subtract(doubleArray1[2]);
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      sparseMatrix0.mkString(numberFormat0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(matrix0, matrix1, sparseMatrix0, matrix1);
      columnMajorSparseMatrix0.max();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix1.update(matrixFunction0);
      sparseMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      int int0 = 1328;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.random(1328, 0, (Random) null);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.update(matrixFunction0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.updateRow(161, vectorFunction0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.sliceTopLeft(161, 161);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "%%MatrixMarket matr}x array real #eneral\n";
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matr}x array real #eneral\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected object: matr}x.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 0.0);
      columnMajorSparseMatrix0.rank();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.remove((Object) columnMajorSparseMatrix0);
      Vector.fromMap(hashMap0, 139);
      columnMajorSparseMatrix0.columns();
      // Undeclared exception!
      columnMajorSparseMatrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      Matrix.from2DArray(doubleArray0);
      int int0 = 1918;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 1918);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1918, 0);
      cCSMatrix0.getRow(147);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.updateColumn(28, vectorFunction0);
      cCSMatrix0.minInRow(7);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) sparseMatrix0, 37, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 37 rows and 0 cols at 0, 0 from a 0x1918 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 32, 32);
      cCSMatrix0.rank();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      cCSMatrix0.isZeroAt(1905, 10);
      Vector.fromMap(hashMap0, 0);
      cCSMatrix0.diagonalProduct();
      cCSMatrix0.columns();
      Matrix.unit(0, 32);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = sparseMatrix0.transform(matrixFunction0);
      // Undeclared exception!
      try { 
        matrix0.trace();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 10;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(10, 10);
      int int1 = 2504;
      basic2DMatrix0.copyOfRows(2504);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      basic2DMatrix0.update(matrixFunction0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.updateRow(2504, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2504
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 0.0);
      columnMajorSparseMatrix0.rank();
      columnMajorSparseMatrix0.trace();
      Basic2DMatrix.diagonal(17, (-966.0));
      int int0 = 2174;
      int int1 = 109;
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 32;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.slice(2174, (-382), 2622, (-2185));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [2174..2622][-382..-2185].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("4");
      SparseVector.fromCSV("4");
      sparseMatrix0.isColumnMajor();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      sparseMatrix0.toMatrixMarket();
      sparseMatrix0.toCSV();
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric(802, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "4";
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("4");
      int int0 = 28;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.updateColumn(Integer.MAX_VALUE, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2147483647' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 0.0);
      columnMajorSparseMatrix0.rank();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Vector.fromMap(hashMap0, 0);
      // Undeclared exception!
      columnMajorSparseMatrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 161);
      Vector vector0 = sparseMatrix0.getRow(161);
      sparseMatrix0.minInRow(0);
      DenseMatrix.zero(0, 161);
      Matrix matrix0 = sparseMatrix0.insertColumn(0, vector0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.columns();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      Matrix.from2DArray(doubleArray0);
      SparseMatrix.zero(0, 1918);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1918, 0);
      int int0 = 147;
      Vector vector0 = cCSMatrix0.getRow(147);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.insertColumn((-2524), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1917
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 0.0);
      columnMajorSparseMatrix0.rank();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Vector.fromMap(hashMap0, 0);
      columnMajorSparseMatrix0.columns();
      // Undeclared exception!
      columnMajorSparseMatrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 0.0);
      columnMajorSparseMatrix0.rank();
      Matrix matrix0 = columnMajorSparseMatrix0.power(32);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      columnMajorSparseMatrix0.max();
      matrix0.insert((Matrix) columnMajorSparseMatrix0, 32, 0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 161;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(161, 161);
      Vector vector0 = cCSMatrix0.getRow(161);
      int int1 = (-5409);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(161, 0);
      Matrix matrix0 = cCSMatrix0.insert((Matrix) denseMatrix0, 0, 0);
      matrix0.setColumn((-1), vector0);
      cCSMatrix0.insert(matrix0, int1, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 0.0);
      columnMajorSparseMatrix0.rank();
      columnMajorSparseMatrix0.power(32);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      columnMajorSparseMatrix0.max();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.update(matrixFunction0);
      Matrix matrix0 = columnMajorSparseMatrix0.removeFirstColumn();
      matrix0.sum();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("4");
      SparseVector.fromCSV("4");
      sparseMatrix0.diagonalProduct();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      sparseMatrix0.update(matrixFunction0);
      sparseMatrix0.blankOfColumns(16);
      sparseMatrix0.mkString("4", "4");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(161, 161);
      cCSMatrix0.getRow(161);
      cCSMatrix0.minInRow(0);
      // Undeclared exception!
      try { 
        cCSMatrix0.setRow(161, (double) 161);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '161' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 0.0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.diagonal(32, 32);
      columnMajorSparseMatrix0.rank();
      columnMajorSparseMatrix0.power(0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Vector.fromMap(hashMap0, 32);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix1.update(matrixFunction0);
      Matrix matrix0 = columnMajorSparseMatrix0.copy();
      matrix0.swapColumns(0, 32);
      String string0 = "oWbFDLe-tQv2J*{";
      Matrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(3, mockRandom0);
      Matrix matrix0 = basic2DMatrix0.copyOfColumns(3);
      Matrix matrix1 = matrix0.divide(1583.1);
      matrix0.toSparseMatrix();
      Matrix matrix2 = matrix0.add((Matrix) basic2DMatrix0);
      matrix2.copy();
      matrix1.max();
      Matrix.identity(126);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 0.0);
      int int0 = columnMajorSparseMatrix0.rank();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Vector vector0 = Vector.fromMap(hashMap0, 0);
      columnMajorSparseMatrix0.columns();
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 32, 0);
      columnMajorSparseMatrix0.equals((Object) vector0);
      columnMajorSparseMatrix0.equals((Object) cCSMatrix0);
      int int1 = 215;
      cCSMatrix0.insert((Matrix) columnMajorSparseMatrix0, int0, int1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(34, 0.0);
      int int0 = Double.BYTES;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Vector vector0 = Vector.fromMap(hashMap0, 8);
      columnMajorSparseMatrix0.setRow(8, (-764.6686098242));
      columnMajorSparseMatrix0.columns();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(34, 34);
      columnMajorSparseMatrix0.equals((Object) vector0);
      cCSMatrix0.insert((Matrix) columnMajorSparseMatrix0);
      columnMajorSparseMatrix0.equals((Object) cCSMatrix0);
      cCSMatrix0.insert((Matrix) columnMajorSparseMatrix0, 8, 34);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("4");
      sparseMatrix0.toCSV();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      sparseMatrix0.is(advancedMatrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 0.0);
      ColumnMajorSparseMatrix.diagonal(32, 32);
      columnMajorSparseMatrix0.rank();
      Matrix matrix0 = columnMajorSparseMatrix0.power(0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.entrySet();
      Vector.fromMap(hashMap0, 0);
      Matrix matrix1 = matrix0.copy();
      columnMajorSparseMatrix0.swapColumns(8, 8);
      Matrix matrix2 = Matrix.fromCSV("Unknown field type: ");
      int int0 = 1340;
      matrix2.minInRow(int0);
      Locale locale0 = Locale.ITALY;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      matrix1.mkString(numberFormat0);
  }
}
