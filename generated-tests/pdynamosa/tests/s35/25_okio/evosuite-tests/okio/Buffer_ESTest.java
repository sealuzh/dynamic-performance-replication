/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 22:46:11 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.List;
import java.util.Locale;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.snapshot(0);
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Pipe pipe0 = new Pipe(1378L);
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(314);
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = new Buffer();
      long long0 = new Integer(314);
      ByteString byteString0 = buffer1.readByteString();
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)7;
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, 16, (int) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=16 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      String string0 = "*U]9s@M&XvU";
      ByteString.decodeBase64("*U]9s@M&XvU");
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.indexOfElement((ByteString) null, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1));
      buffer1.writeIntLe((-1));
      buffer_UnsafeCursor0.buffer.readLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      buffer2.copyTo(outputStream0);
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOfElement(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(40);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      Buffer buffer1 = buffer0.writeTo((OutputStream) bufferedOutputStream0);
      ByteString[] byteStringArray0 = new ByteString[1];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer1.selectPrefix(options0);
      assertEquals(0, int0);
      
      Buffer buffer2 = realBufferedSource0.buffer.writeHexadecimalUnsignedLong(0);
      boolean boolean0 = buffer2.exhausted();
      assertEquals(1L, buffer2.size());
      assertFalse(boolean0);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      buffer0.writeUtf8CodePoint((byte) (-8));
      ByteString byteString0 = ByteString.of(byteArray0);
      long long0 = buffer0.indexOf(byteString0);
      long long1 = buffer0.completeSegmentByteCount();
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.md5();
      Pipe pipe0 = new Pipe(6L);
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = buffer1.writeLongLe((-5162L));
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      HashingSource.sha1(realBufferedSink0.buffer);
      realBufferedSink0.buffer.write((Source) buffer0, (-5162L));
      long long0 = buffer1.readLongLe();
      assertEquals((-5162L), long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte((byte)0);
      buffer1.readByte();
      String string0 = buffer0.readUtf8();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("", (-1), 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null, (-1853L), (-381L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Pipe pipe0 = new Pipe(3530L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = ByteString.decodeBase64("B+U");
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.indexOfElement(byteString0, 10000000L);
      // Undeclared exception!
      try { 
        Charset.forName("B+U");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // B+U
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(12);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte) (-4);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      byteArray0[7] = (byte) (-37);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer2 = new Buffer();
      buffer1.writeDecimalLong(10L);
      assertEquals(6L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      buffer0.writeShortLe((-970));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)53;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-2914), (int) (byte)2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=-2914 byteCount=2
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)23, (long) (byte)23, (long) (byte)23);
      buffer0.readUtf8Line();
      ByteString byteString0 = buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe((-1L));
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer2 = new Buffer();
      buffer2.writeDecimalLong(10L);
      assertEquals(2L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      Buffer buffer1 = buffer0.writeUtf8CodePoint((byte) (-8));
      ByteString byteString0 = ByteString.of(byteArray0);
      buffer0.indexOf(byteString0);
      buffer1.hmacSha512(byteString0);
      buffer0.request(4209L);
      try { 
        buffer0.skip(4209L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)20;
      buffer0.skip(0L);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)2;
      buffer0.write(byteArray0);
      assertEquals(6L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)23, (long) (byte)23, (long) (byte)23);
      buffer0.readUtf8Line();
      buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe((-1L));
      HashingSource.sha1(buffer0);
      buffer0.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer1.getByte((-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=-1 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-13);
      buffer0.writeShort((-1482));
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte)52;
      ByteString byteString0 = ByteString.of(byteArray0, 0, 0);
      ByteString byteString1 = ByteString.encodeUtf8("");
      ByteString.encodeUtf8("");
      // Undeclared exception!
      try { 
        byteString0.hmacSha1(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      GzipSink gzipSink0 = new GzipSink(pipe_PipeSink0);
      HashingSink hashingSink0 = HashingSink.sha512(gzipSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.writeLongLe(4L);
      Buffer buffer0 = realBufferedSink0.buffer;
      buffer0.readUtf8(4L);
      // Undeclared exception!
      try { 
        buffer0.read(realBufferedSink0.buffer, 4L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      pipe0.sinkClosed = true;
      int int0 = (-1578);
      buffer0.writeUtf8CodePoint((-1578));
      buffer0.readUtf8Line();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readByteString(1000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)105;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((byte)105);
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Pipe pipe0 = new Pipe(3530L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      Buffer buffer1 = buffer0.writeUtf8CodePoint((byte) (-8));
      ByteString[] byteStringArray0 = new ByteString[4];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteStringArray0[0] = byteString0;
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((long) (byte) (-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -8
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.equals((Object) null);
      assertFalse(boolean0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSource.sha1(buffer0);
      Buffer buffer1 = (Buffer)buffer0.emit();
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe((-1L));
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffff
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)65, (-90));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)65);
      Buffer buffer1 = buffer0.readFrom((InputStream) bufferedInputStream0);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)49;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(108);
      Buffer buffer2 = buffer1.writeUtf8("l0hx2nYM&udyki8");
      buffer2.readByteArray(8L);
      short short0 = buffer0.readShortLe();
      assertEquals(7L, buffer0.size());
      assertEquals((short)19801, short0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString.decodeBase64("mXUzre#");
      Buffer buffer1 = new Buffer();
      boolean boolean0 = buffer1.rangeEquals(100000000L, (ByteString) null, 14, (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer0.read(buffer1, (-414L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -414
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      try { 
        buffer0.write((Source) hashingSource0, 10L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = buffer0.readByteArray();
      assertArrayEquals(new byte[] {}, byteArray0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeHexadecimalUnsignedLong(3272L);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Pipe pipe0 = new Pipe(1378L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(314);
      buffer1.writeLongLe(65536L);
      Buffer buffer2 = new Buffer();
      // Undeclared exception!
      try { 
        buffer1.write(buffer2, (long) 314);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=314
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(65544);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      realBufferedSource0.buffer.write(buffer1, 3L);
      // Undeclared exception!
      try { 
        buffer2.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xfffffff0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      buffer0.size = 282L;
      Buffer buffer1 = buffer0.writeShort(10);
      String string0 = "=7#";
      buffer1.writeUtf8("=7#");
      String string1 = "in == null";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("in == null", "=7#");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // =7#
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeByte((-1));
      buffer0.require((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      realBufferedSource0.indexOf((byte) (-98));
      buffer2.writeDecimalLong(752L);
      assertEquals(0L, buffer1.size());
      assertEquals(4L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null, 32L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)0, 230L, 479L);
      buffer0.hashCode();
      ByteString[] byteStringArray0 = new ByteString[6];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteStringArray0[0] = byteString0;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (int) (byte)0, 1259);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=1259
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(987L);
      buffer0.sha1();
      buffer0.readByteString();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      Buffer buffer1 = buffer0.writeByte((byte)0);
      Buffer buffer2 = (Buffer)buffer1.write((Source) buffer0, (long) (byte)0);
      try { 
        buffer2.readUtf8LineStrict((long) (byte)0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=00\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeShort(1756);
      short short0 = buffer1.readShortLe();
      assertEquals(0L, buffer1.size());
      assertEquals((short) (-9210), short0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)23, (long) (byte)23, (long) (byte)23);
      buffer0.readUtf8Line();
      buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe((-1152921504606846976L));
      buffer1.writeShortLe((-1159));
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      buffer1.write((Source) hashingSource0, (-1L));
      buffer0.readLongLe();
      // Undeclared exception!
      try { 
        buffer1.readAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.writeDecimalLong(9223372036854775807L);
      assertEquals(19L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)23, (long) (byte)23, (long) (byte)23);
      buffer0.readUtf8Line();
      buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe((-1L));
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      // Undeclared exception!
      try { 
        buffer1.write((Source) hashingSource0, 2L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = buffer2.writeLongLe((-1));
      buffer3.sha256();
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      buffer2.clear();
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer1 = new Buffer();
      try { 
        buffer1.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(2L, buffer0.size());
      
      short short0 = buffer1.readShort();
      assertEquals((short)15163, short0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      buffer0.writeHexadecimalUnsignedLong((-1588L));
      ByteString byteString0 = ByteString.encodeUtf8("re");
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals(16L, buffer0.size());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("wL$Z${L^^");
      buffer0.equals("wL$Z${L^^");
      int int0 = buffer0.readInt();
      assertEquals(5L, buffer0.size());
      assertEquals(2001478746, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Pipe pipe0 = new Pipe(3530L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8("");
      BufferedSink bufferedSink0 = buffer1.write((Source) buffer0, (-1680L));
      assertSame(bufferedSink0, buffer1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      int int0 = (-2147483625);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, (-2147483625), (-2147483625), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      HashingSource.sha256(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(481L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=481 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha256();
      byteString0.asByteBuffer();
      buffer0.writeShort((-858));
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer();
      realBufferedSource0.buffer.inputStream();
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.seek(0L);
      Buffer buffer2 = realBufferedSource0.buffer.emitCompleteSegments();
      buffer2.readByteString(0L);
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(outputStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintStream0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) buffer0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) outputStream0;
      objectArray0[5] = (Object) buffer0;
      PrintStream printStream0 = mockPrintStream0.format("KGL)[n`e=", objectArray0);
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) printStream0, 1000000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1000000000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(305L);
      try { 
        buffer0.skip(729L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(65536L);
      int int0 = buffer0.readInt();
      assertEquals(1L, buffer0.size());
      assertEquals(909456691, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        buffer0.readUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(99918194688L);
      buffer0.outputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      buffer0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      // Undeclared exception!
      try { 
        buffer1.writableSegment(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      buffer0.writeHexadecimalUnsignedLong(6L);
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Buffer buffer1 = buffer0.writeByte((byte)0);
      buffer1.write((Source) buffer0, (long) (byte)0);
      buffer1.writeLong((byte)0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      // Undeclared exception!
      try { 
        buffer1.read(byteArray0, (int) (byte)16, 56319);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=16 byteCount=56319
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.completeSegmentByteCount();
      Charset.defaultCharset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeDecimalLong(1000000000000000L);
      assertEquals(16L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.snapshot();
      buffer0.readUtf8Line();
      ByteString byteString1 = buffer0.sha512();
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.require((-2041L));
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("\n", 70, 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 59 < 70
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(65280);
      ByteString byteString0 = buffer0.snapshot();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      buffer1.indexOf(byteString0);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      ByteString byteString1 = hashingSource0.hash();
      buffer0.hmacSha512(byteString1);
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.buffer.readAll(buffer0);
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer_UnsafeCursor1.buffer, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        buffer0.readFrom((InputStream) mockFileInputStream0, 280375465082880L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.completeSegmentByteCount();
      ByteBuffer.allocateDirect(69);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer0.copyTo(buffer1, 2631L, 0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=2631 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSource.sha256(buffer0);
      buffer0.writeDecimalLong(4294967295L);
      Buffer buffer1 = new Buffer();
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte)49, 1000000000000000000L, 1000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=1000000000000000000 toIndex=1000000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.completeSegmentByteCount();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.writeUtf8CodePoint(65);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)102;
      ByteString byteString0 = ByteString.of(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString1 = byteString0.sha1();
      buffer1.indexOf(byteString1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer1.indexOf(byteString0, 3L);
      long long0 = buffer1.readHexadecimalUnsignedLong();
      assertTrue(buffer1.exhausted());
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.selectPrefix((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(10000L);
      // Undeclared exception!
      try { 
        buffer0.readAll(buffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
      
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(69);
      charset0.decode(byteBuffer0);
      buffer0.readString(0L, charset0);
      buffer0.timeout();
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer0.readFully((Buffer) null, (long) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readUtf8Line((-922337203685477580L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-922337203685477580
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer();
      realBufferedSource0.buffer.inputStream();
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      int int0 = buffer_UnsafeCursor0.seek(0L);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), int0);
      
      try { 
        buffer0.require(1000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(2907L);
      Pipe pipe0 = new Pipe(10000000L);
      Buffer buffer2 = pipe0.buffer;
      buffer1.readDecimalLong();
      // Undeclared exception!
      try { 
        buffer2.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor1.buffer.readByteString();
      buffer_UnsafeCursor1.buffer.clear();
      buffer_UnsafeCursor1.close();
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.end);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte((-226));
      Buffer buffer1 = new Buffer();
      long long0 = 32L;
      try { 
        buffer1.write((Source) buffer0, 32L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((Source) null, 1193L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.completeSegmentByteCount();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("6V2yIXUqKvY:", charset0);
      Buffer buffer1 = realBufferedSource0.buffer.writeDecimalLong(1000000000000L);
      assertEquals(13L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      realBufferedSource0.buffer.clear();
      assertTrue(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.readAll((Sink) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSource.sha1(buffer0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte) (-11);
      buffer0.write(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.getByte((-1066L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=-1066 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer1.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.hashCode();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(2028179000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 78e38e38
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      Buffer buffer1 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readFrom((InputStream) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Pipe pipe0 = new Pipe(3294L);
      pipe0.sourceClosed = true;
      Buffer buffer0 = pipe0.buffer;
      buffer0.readUtf8();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.snapshot();
      realBufferedSource0.buffer.readAll(buffer1);
      // Undeclared exception!
      try { 
        buffer0.writableSegment((-444));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mIWwWW7u");
      realBufferedSource0.buffer.writeString("b\u0003IX?[1?x-\"V?cF]V9", 5, (int) (byte)13, charset0);
      int int0 = realBufferedSource0.buffer.readIntLe();
      assertEquals(2017407323, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(5123);
      int int0 = buffer0.readUtf8CodePoint();
      assertFalse(buffer0.exhausted());
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(1114125);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 11000d
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.snapshot((-2147483646));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2147483646
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeByte((-1));
      Buffer buffer2 = buffer1.writeIntLe((-1));
      // Undeclared exception!
      try { 
        buffer2.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 5
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer0.equals(buffer1);
      buffer0.sha1();
      // Undeclared exception!
      try { 
        buffer1.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(65533);
      buffer1.snapshot();
      Charset.defaultCharset();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.writeDecimalLong(65533);
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe(56);
      buffer0.readHexadecimalUnsignedLong();
      buffer1.sha512();
      buffer0.writeShort(56);
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
      
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)2;
      int int0 = buffer0.read(byteArray0);
      assertEquals((-1), int0);
      
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer0.write(buffer1, 0L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.completeSegmentByteCount();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource0.readByteArray(0L);
      ByteString.encodeString("6V2yIXUqKvY:", charset0);
      long long0 = 1000000000000L;
      Buffer buffer1 = realBufferedSource0.buffer.writeDecimalLong(1000000000000L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.write((Source) buffer1, 1000000000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      ByteString.decodeBase64("*U]9s@M&XvU");
      long long0 = buffer_UnsafeCursor0.offset;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor1.buffer);
      Buffer buffer1 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer1.read((byte[]) null, 34, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = buffer0.readByteArray();
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer1 = buffer0.write(byteString0);
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer2 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor1.buffer.writeLongLe(10L);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe(2763);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(2763);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.buffer();
      ByteString.decodeBase64("Fa!<2Z[r@");
      // Undeclared exception!
      try { 
        buffer0.indexOf((ByteString) null, 255L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(139);
      buffer1.sha256();
      buffer1.segmentSizes();
      buffer0.clone();
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Options options1 = Options.of(byteStringArray0);
      int int0 = 1155;
      // Undeclared exception!
      try { 
        options1.get(1155);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1155
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(103);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = ByteString.encodeUtf8("4WsqbBs9Q(c?H1*");
      realBufferedSource0.indexOfElement(byteString0, 100000000L);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readUtf8Line((long) 103);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=102 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$w?h3Zs-;/,5L");
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.readString((-2855L), charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2855
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((-2851));
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer1 = new Buffer();
      buffer1.writeDecimalLong(100000000000L);
      assertEquals(12L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-1097L));
      assertEquals(5L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Pipe pipe0 = new Pipe(3544L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      realBufferedSource0.buffer.inputStream();
      Buffer buffer2 = realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readUnsafe();
      buffer_UnsafeCursor0.seek(0L);
      // Undeclared exception!
      try { 
        buffer1.write((byte[]) null, (-1), 50);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.copyTo((Buffer) null, 65280L, 689L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(99918194688L);
      buffer0.outputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeString((String) null, (int) (byte)0, (int) (byte)0, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("cL5=$;");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(2416L);
      ByteString[] byteStringArray0 = new ByteString[1];
      // Undeclared exception!
      try { 
        ByteString.decodeHex("cL5=$;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: L
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString[] byteStringArray0 = new ByteString[4];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteStringArray0[0] = byteString0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)111;
      ByteString byteString1 = ByteString.of(byteArray0);
      byteStringArray0[1] = byteString1;
      ByteString byteString2 = ByteString.EMPTY;
      byteStringArray0[2] = byteString2;
      ByteString byteString3 = new ByteString(byteArray0);
      byteStringArray0[3] = byteString3;
      Options.of(byteStringArray0);
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      HashingSource.sha1(realBufferedSource0);
      try { 
        buffer0.write((Source) hashingSource0, 1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("\u2026]");
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)21;
      byteArray0[0] = (byte)21;
      Buffer buffer1 = buffer0.writeByte((byte)21);
      // Undeclared exception!
      try { 
        buffer1.write((Source) buffer0, (long) (byte)21);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "pK6na(U[");
      byteArray0[0] = (byte) (-8);
      buffer0.writeUtf8CodePoint((byte) (-8));
      ByteString byteString0 = ByteString.of(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteString0.sha1();
      buffer0.indexOf(byteString0);
      long long0 = buffer0.indexOf(byteString0, 99918096384L);
      assertEquals(1L, buffer0.size());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.snapshot();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      Buffer buffer1 = buffer0.writeTo((OutputStream) bufferedOutputStream0);
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Pipe pipe0 = new Pipe(3544L);
      Buffer buffer0 = pipe0.buffer;
      File file0 = MockFile.createTempFile("[hex=", " hex=");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      try { 
        buffer0.readFrom((InputStream) mockFileInputStream0, 1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.readUnsafe();
      // Undeclared exception!
      try { 
        buffer1.writableSegment(2146700752);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      Buffer buffer1 = buffer0.writeByte((byte)0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " content=");
      buffer1.write((Source) buffer0, (long) (byte)0);
      byteArray0[1] = (byte)0;
      Buffer buffer2 = buffer0.writeLong((-2580L));
      byteArray0[2] = (byte)16;
      int int0 = buffer2.readInt();
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(16777215, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1));
      buffer1.writeIntLe((-1));
      buffer_UnsafeCursor0.buffer.readLong();
      buffer0.readUtf8CodePoint();
      Buffer buffer2 = new Buffer();
      // Undeclared exception!
      try { 
        buffer2.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.completeSegmentByteCount();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("b\u0003IX?[1?x-\"V?cF]V9", 8, (int) (byte)13, charset0);
      assertEquals(5L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(3651L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(792L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=791 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Pipe pipe0 = new Pipe(2750L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong(2750L);
      buffer0.indexOf((byte)16, 2750L, 2750L);
      Buffer buffer2 = buffer0.clone();
      buffer2.hashCode();
      buffer1.outputStream();
      HashingSink.sha512(buffer2);
      Buffer buffer3 = new Buffer();
      Buffer buffer4 = buffer3.writeUtf8("source == this");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte) (-83);
      byteArray0[8] = (byte)16;
      buffer4.write(byteArray0);
      // Undeclared exception!
      try { 
        buffer2.readUtf8((-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer0.read(buffer1, 255L);
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe(287);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.resizeBuffer((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      buffer0.writeHexadecimalUnsignedLong((-2094L));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      GzipSource gzipSource0 = new GzipSource(buffer1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.writeUtf8CodePoint(2048);
      buffer0.writeHexadecimalUnsignedLong((-1095L));
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer2.readString((-1277L), charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=0 byteCount=-1277
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)104;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      buffer0.readFrom((InputStream) byteArrayInputStream0);
      long long0 = buffer0.indexOf((byte)104);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(65533);
      buffer1.snapshot();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      int int0 = buffer0.readUtf8CodePoint();
      assertTrue(buffer0.exhausted());
      assertEquals(65533, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteString0.sha1();
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      byte byte0 = (byte) (-84);
      buffer0.indexOf((byte) (-84), 10000L);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("xXcRsXd'", "already attached to a buffe");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // already attached to a buffe
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.completeSegmentByteCount();
      buffer0.require(0L);
      Buffer buffer1 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      assertEquals(65533, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong((-1588L));
      ByteString byteString0 = ByteString.encodeUtf8("~");
      buffer0.indexOfElement(byteString0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-1326L));
      long long0 = buffer0.readDecimalLong();
      assertEquals(0L, buffer0.size());
      assertEquals((-1326L), long0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null, 1212, 1183);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Pipe pipe0 = new Pipe(3530L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8("]");
      buffer1.readUtf8();
      // Undeclared exception!
      try { 
        buffer1.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      buffer0.writeByte((-1));
      buffer0.require((-1));
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeByte((-16777216));
      buffer1.size = 2333L;
      buffer0.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.clear();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // java.io.EOFException
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      buffer0.writeDecimalLong((-10L));
      assertEquals(3L, buffer0.size());
      
      long long0 = buffer0.readDecimalLong();
      assertEquals((-10L), long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      Buffer buffer1 = (Buffer)buffer0.write((Source) buffer0, (long) (byte)0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.indexOfElement((ByteString) null, (long) (byte)0);
      try { 
        buffer1.readUtf8Line((long) (byte)0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8(")");
      buffer0.rangeEquals(10000000000L, byteString0, (-1586), (-1950));
      ByteString byteString1 = buffer0.snapshot();
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.exhausted();
      assertTrue(boolean0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeLongLe(2474);
      Buffer buffer1 = realBufferedSink0.buffer;
      long long0 = realBufferedSink0.buffer.read(buffer0, (long) 2474);
      assertEquals(8L, buffer0.size());
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByteArray((-1163L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1163
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.request((-1883L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      Buffer buffer1 = buffer0.writeByte((byte)0);
      buffer1.write((Source) buffer0, (long) (byte)0);
      byteArray0[1] = (byte)0;
      buffer0.writeLong((-2580L));
      byteArray0[2] = (byte)16;
      int int0 = buffer0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      buffer0.clear();
      long long0 = buffer0.indexOf((byte)6);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = realBufferedSource0.buffer.writeString("]fslLG", 5, 5, charset0);
      assertNotSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      Charset.defaultCharset();
      buffer0.writeShortLe(0);
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(10000L);
      buffer0.readUtf8(1L);
      // Undeclared exception!
      try { 
        buffer1.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 7
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.read((Buffer) null, 1881L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong((-156L));
      buffer0.readUtf8Line();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)54;
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      long long0 = buffer0.indexOf(byteString0, 2109L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.request(1000000000L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeDecimalLong(3L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer2.readByteArray(2463L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=2463
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(13);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      ByteString byteString0 = ByteString.of(byteArray0);
      buffer0.indexOf(byteString0);
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(1L, buffer0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte((-482));
      int int0 = buffer0.readUtf8CodePoint();
      assertTrue(buffer0.exhausted());
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Pipe pipe0 = new Pipe(3538L);
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.getByte(3538L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=3538 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      Buffer buffer1 = buffer0.writeShort((-2497));
      try { 
        buffer1.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 4: 2 (to read code point prefixed 0xfffffff6)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HmacSHA256");
      buffer0.writeUtf8CodePoint(56319);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)21;
      ByteString byteString0 = ByteString.of(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteString0.sha1();
      buffer0.indexOf(byteString0);
      buffer0.indexOf(byteString0, 60L);
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Pipe pipe0 = new Pipe(3294L);
      pipe0.sourceClosed = true;
      Buffer buffer0 = pipe0.buffer;
      buffer0.readUtf8();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer0.copyTo(buffer1, 3294L, (-356L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=3294 byteCount=-356
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(103);
      ByteString byteString0 = buffer0.snapshot();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer2 = buffer0.writeString("", charset0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer1.readUtf8Line();
      buffer0.copyTo(buffer2, 0L, 0L);
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer3 = buffer2.write(byteString0);
      buffer3.readAndWriteUnsafe();
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null, 3042, 3042);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      Buffer buffer1 = buffer0.writeByte((byte)0);
      buffer1.write((Source) buffer0, (long) (byte)0);
      byteArray0[1] = (byte)5;
      Buffer buffer2 = buffer1.writeLong((-1260L));
      // Undeclared exception!
      try { 
        buffer2.read(byteArray0, (-1), (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=-1 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.writeDecimalLong(56L);
      Buffer buffer1 = new Buffer();
      byte byte0 = (byte) (-2);
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte) (-2), (-1L), 9L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-1 toIndex=9
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(65544);
      buffer1.snapshot();
      Charset.defaultCharset();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("", 42, 42, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 42 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      buffer1.read(byteArray0);
      ByteString byteString0 = buffer1.sha256();
      assertEquals(32, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)0, (long) (byte)0);
      List<Integer> list0 = buffer0.segmentSizes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(10);
      buffer1.readShortLe();
      try { 
        buffer1.readUtf8LineStrict(178L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.indexOfElement((ByteString) null);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeUtf8("'!iXE^Up(b0`!NYI", 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -1 < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = buffer0.hmacSha256(byteString0);
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      String string0 = buffer0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Pipe pipe0 = new Pipe(437L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong((-2291L));
      // Undeclared exception!
      try { 
        buffer1.readByteArray(32L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=5 offset=0 byteCount=32
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = (byte)34;
      buffer0.indexOf((byte)34, 2189L, 2189L);
      buffer0.readUtf8Line();
      ByteString byteString0 = buffer0.md5();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString0.compareTo(byteString1);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(2146718874);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7ff4549a
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.sha256();
      realBufferedSource0.buffer.writeHexadecimalUnsignedLong((-3913L));
      assertFalse(buffer0.equals((Object)buffer1));
      
      buffer1.readHexadecimalUnsignedLong();
      buffer0.timeout();
      assertTrue(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = 3892L;
      String string0 = "size=%s fromIndex=%s toIndex=%s";
      ByteString.decodeBase64("size=%s fromIndex=%s toIndex=%s");
      buffer0.outputStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = (-2260);
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, (-2260), (-2260), (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe((byte)102);
      buffer0.indexOf((byte)102);
      buffer0.readByteArray();
      buffer0.request(0L);
      String string0 = "EkmoN\\'=Y1t)2";
      String string1 = "";
      URI uRI0 = MockURI.URI("N:KZ)", "N:KZ)", "", "");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not hierarchical
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte(64);
      buffer0.segmentSizes();
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe(287);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x1f
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("", 2126221433, (-5187), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -5187 < 2126221433
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      long long0 = 3530L;
      Pipe pipe0 = new Pipe(3530L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readString(65536L, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=65536
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      Buffer buffer1 = buffer0.writeDecimalLong(1000000L);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)0;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.sha1();
      buffer1.indexOf(byteString0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.indexOf(byteString0, (long) (byte)0);
      assertEquals(7L, buffer0.size());
      
      long long0 = buffer1.readHexadecimalUnsignedLong();
      assertEquals(16777216L, long0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      GzipSink gzipSink0 = new GzipSink(pipe_PipeSink0);
      HashingSink hashingSink0 = HashingSink.sha512(gzipSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.writeLongLe(4L);
      Buffer buffer0 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer0.read(realBufferedSink0.buffer, 4L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      buffer_UnsafeCursor0.readWrite = true;
      Buffer buffer2 = buffer1.writeShortLe(787);
      buffer2.readUtf8(0L);
      hashingSink0.flush();
      // Undeclared exception!
      try { 
        buffer1.readAll(buffer_UnsafeCursor0.buffer);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(103);
      ByteString byteString0 = buffer0.snapshot();
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "F\"");
      charset0.encode(charBuffer0);
      Buffer buffer2 = buffer0.writeString("F\"", charset0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer1.readUtf8Line();
      buffer0.copyTo(buffer2, 0L, 0L);
      Buffer buffer3 = buffer2.write(byteString0);
      buffer3.readAndWriteUnsafe();
      int int0 = buffer_UnsafeCursor0.seek((-1));
      assertEquals(1L, buffer1.completeSegmentByteCount());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("");
      boolean boolean0 = buffer0.rangeEquals(105L, byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-2094L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(16L, buffer0.size());
      
      ByteString byteString0 = realBufferedSource0.readByteString(3L);
      buffer1.rangeEquals(3L, byteString0);
      ByteString byteString1 = ByteString.encodeUtf8("re");
      long long0 = buffer0.indexOfElement(byteString1);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeString("size == 0", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = "QxJDt)*NggZRV";
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("QxJDt)*NggZRV", (-2314), 112, charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -2314
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)21;
      byteArray0[0] = (byte)21;
      Buffer buffer1 = buffer0.writeByte((byte)21);
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      buffer1.writeHexadecimalUnsignedLong(23L);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.hmacSha1(byteString0);
      // Undeclared exception!
      try { 
        buffer1.write((Source) buffer0, (long) (byte)21);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte((-52));
      buffer1.write((Source) buffer0, (-1717L));
      byte byte0 = (byte)0;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement((ByteString) null, 8192L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUnsafe();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(76);
      long long0 = buffer1.size();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(922337203685477565L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer2.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.start = 0;
      buffer_UnsafeCursor0.buffer.writeDecimalLong(0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "endIndex < beginIndex: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = (-2465L);
      ByteString byteString0 = ByteString.EMPTY;
      int int0 = (-1269);
      buffer0.rangeEquals((-2465L), byteString0, (-1269), (-1269));
      byte[] byteArray0 = null;
      int int1 = 1568;
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, (-1269), 1568);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.snapshot();
      File file0 = MockFile.createTempFile("A>4Ea", "(ai><Z5/V");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) mockPrintStream0, (-261L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-261
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.write((Buffer) null, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(2907L);
      Pipe pipe0 = new Pipe(10000000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 128);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-9223372036854775808");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, " text=", objectArray0);
      buffer1.copyTo((OutputStream) printStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      boolean boolean0 = buffer2.equals(bufferedInputStream0);
      assertEquals(4L, buffer0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      long long0 = 8192L;
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      HashingSource.sha256(buffer0);
      Buffer buffer1 = buffer0.writeDecimalLong(1000000L);
      Buffer buffer2 = new Buffer();
      buffer1.indexOf((byte)49, 6L, 1000000L);
      buffer0.hashCode();
      assertEquals(7L, buffer0.size());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte)49;
      byteArray0[8] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)49, (-5606));
      buffer1.readFrom((InputStream) byteArrayInputStream0);
      buffer0.buffer();
      assertEquals(7L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong((-2580L));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      buffer0.hashCode();
      buffer1.skip(4L);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      int int0 = buffer0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      buffer0.writeByte((-16777234));
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 3: 1 (to read code point prefixed 0xffffffee)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      Buffer buffer1 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " content=");
      Buffer buffer2 = buffer1.writeUtf8CodePoint((byte)0);
      buffer2.readUtf8((long) (byte)0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      try { 
        buffer1.readFrom((InputStream) pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.snapshot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) pipedOutputStream0, 1640L, 1640L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=1640 byteCount=1640
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      
      buffer0.size = (-394L);
      BufferedSink bufferedSink0 = buffer0.emit();
      buffer0.readAll(bufferedSink0);
      boolean boolean0 = buffer0.exhausted();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha1();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, (-2140), 2145765661);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-2140 byteCount=2145765661
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte) (-103), 92233L, 10000000000L);
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer0.readFully((Buffer) null, (-146L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(0);
      try { 
        buffer1.readUtf8LineStrict(502L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=2 content=0000\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString[] byteStringArray0 = new ByteString[7];
      String string0 = "xv~\"6B^R! %zn";
      // Undeclared exception!
      try { 
        ByteString.decodeHex("xv~\"6B^R! %zn");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: x
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(99918194688L);
      buffer0.outputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      buffer0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      ByteString[] byteStringArray0 = new ByteString[2];
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("data", charset0);
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      ByteString byteString1 = options0.get((byte)0);
      byteStringArray0[1] = byteString1;
      Options options1 = Options.of(byteStringArray0);
      int int0 = buffer0.select(options1);
      assertEquals(8L, buffer0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.skip((-768L));
      buffer0.readUtf8Line();
      buffer0.completeSegmentByteCount();
      buffer0.writeUtf8CodePoint(54);
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      Buffer buffer1 = buffer0.writeByte((byte)0);
      BufferedSink bufferedSink0 = buffer1.write((Source) buffer0, (long) (byte)0);
      Buffer buffer2 = buffer0.writeLongLe(65536L);
      Buffer buffer3 = new Buffer();
      // Undeclared exception!
      try { 
        ((Buffer) bufferedSink0).write(buffer2, (-4281L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Pipe pipe0 = new Pipe(3530L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-83);
      Buffer buffer2 = buffer1.write(byteArray0);
      // Undeclared exception!
      try { 
        buffer1.copyTo(buffer2, 280375465082880L, 1000000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=280375465082880 byteCount=1000000000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1758);
      ByteString byteString0 = ByteString.EMPTY;
      buffer1.indexOfElement(byteString0, 8L);
      Pipe pipe0 = new Pipe(1758);
      Buffer buffer2 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.seek((-1L));
      buffer_UnsafeCursor0.buffer.write(byteString0);
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(99918194688L);
      buffer0.outputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      buffer0.readLong();
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      buffer0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      ByteString[] byteStringArray0 = new ByteString[2];
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("data", charset0);
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      options0.get((byte)0);
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      buffer0.writeShortLe(5184);
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x40
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      boolean boolean0 = buffer0.rangeEquals(2728L, byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.buffer.md5();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLongLe(4294967295L);
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      Buffer buffer2 = (Buffer)buffer0.write((Source) hashingSource0, (-1L));
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      long long0 = buffer1.readLongLe();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(4294967295L, long0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(3461L);
      Buffer buffer1 = pipe0.buffer;
      pipe0.sourceClosed = false;
      buffer0.writeUtf8("");
      // Undeclared exception!
      try { 
        buffer1.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSource.sha1(buffer0);
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)103;
      byte byte0 = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)122;
      ByteString.of(byteArray0);
      byte byte1 = (byte) (-25);
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte) (-19);
      byteString0.hex();
      byteArray0[7] = (byte) (-11);
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer1.require((byte) (-19));
      // Undeclared exception!
      try { 
        buffer0.getByte((-1045L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=13 offset=-1045 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Pipe pipe0 = new Pipe(2147483647L);
      Buffer buffer0 = pipe0.buffer;
      byte byte0 = (byte) (-117);
      Buffer buffer1 = null;
      long long0 = 1265L;
      // Undeclared exception!
      try { 
        buffer0.readFully((Buffer) null, 1265L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(64);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(64);
      buffer1.writeTo((OutputStream) byteArrayOutputStream0);
      buffer0.segmentSizes();
      buffer0.clone();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.indexOf((byte)115, 60L, (long) (byte)115);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      buffer0.writeDecimalLong(1000L);
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.snapshot();
      boolean boolean0 = buffer0.rangeEquals(4L, byteString0, 0, 122);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(192);
      buffer0.writeByte(2875);
      buffer1.readUtf8CodePoint();
      byte byte0 = buffer0.readByte();
      assertEquals(0L, buffer0.size());
      assertEquals((byte)59, byte0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      // Undeclared exception!
      try { 
        buffer1.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = (-1L);
      Buffer buffer1 = buffer0.writeLongLe((-1L));
      buffer1.readByte();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffff
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(128);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      ByteString byteString0 = ByteString.of(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteString0.sha1();
      // Undeclared exception!
      try { 
        buffer1.indexOf((ByteString) null, (long) (byte)14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.timeout();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)40;
      Segment segment0 = new Segment(byteArray0, (byte)5, (byte)5, true, true);
      SegmentPool.next = segment0;
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2506);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) bufferedInputStream0, (long) 2506);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.writeLongLe(4278190080L);
      buffer0.sha256();
      buffer0.clear();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      List<Integer> list0 = buffer0.segmentSizes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-302L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, 2144278448, (-2593));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=2144278448 byteCount=-2593
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(2905L);
      Pipe pipe0 = new Pipe(10000000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-9223372036854775808");
      Locale locale0 = Locale.ROOT;
      buffer_UnsafeCursor0.resizeBuffer(1L);
      buffer0.writeDecimalLong(10000000L);
      assertEquals(9L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)53, (long) (byte)53, (long) (byte)53);
      buffer0.readUtf8Line();
      buffer0.sha512();
      // Undeclared exception!
      try { 
        buffer0.snapshot(743);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=743
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      buffer0.inputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      buffer_UnsafeCursor0.resizeBuffer(100000000000L);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(2304);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Pipe pipe0 = new Pipe(3530L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)96;
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)19;
      byteString0.indexOf(byteArray0, (int) (byte)96);
      buffer0.indexOf(byteString0);
      buffer0.clone();
      buffer0.close();
      buffer0.inputStream();
      buffer0.hmacSha512(byteString0);
      Buffer buffer1 = new Buffer();
      buffer1.sha1();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)5, (-1L), (-2742L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-1 toIndex=-2742
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Pipe pipe0 = new Pipe(2744L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = pipe0.buffer;
      buffer0.indexOf((byte)16, 2744L, 2744L);
      Buffer buffer2 = buffer0.clone();
      buffer2.hashCode();
      buffer1.outputStream();
      HashingSink hashingSink0 = HashingSink.sha512(buffer2);
      ByteString byteString0 = hashingSink0.hash();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      byteString0.indexOf(byteArray0, (int) (byte)16);
      buffer0.indexOf(byteString0);
      Buffer buffer3 = buffer1.clone();
      buffer0.close();
      buffer2.inputStream();
      // Undeclared exception!
      try { 
        buffer3.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)67;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      buffer0.readFrom((InputStream) byteArrayInputStream0);
      buffer0.toString();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("O.09", (-1148), (-1148));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -1148
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer1.writeIntLe((-1));
      buffer_UnsafeCursor0.buffer.readLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      buffer2.copyTo(outputStream0);
      buffer1.equals(buffer2);
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOfElement(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      Buffer buffer1 = new Buffer();
      buffer1.readAll(realBufferedSink1);
      realBufferedSink1.buffer.flush();
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(108);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)33;
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      buffer0.inputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1430L));
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.read(buffer1, 1935L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      try { 
        buffer0.writeAll(inflaterSource0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.buffer.clear();
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      long long0 = 10000000L;
      Pipe pipe0 = new Pipe(10000000L);
      Buffer buffer2 = pipe0.buffer;
      buffer1.readDecimalLong();
      // Undeclared exception!
      try { 
        buffer2.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(21474836L);
      ByteString byteString0 = ByteString.encodeUtf8("re");
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals(7L, buffer0.size());
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      boolean boolean0 = buffer0.equals(buffer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(10000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=9999999999 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(103);
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.indexOfElement(byteString0, (long) (byte)52);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer.writeByte((byte)52);
      long long0 = realBufferedSource0.buffer.read(buffer0, 683L);
      assertEquals(2L, buffer1.size());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      buffer0.sha256();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe((-1110));
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Pipe pipe0 = new Pipe(5L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3Z)8Y0wWsLnDbvfw*");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.buffer.size = (-1152921504606846976L);
      buffer1.writeUtf8CodePoint(121);
      // Undeclared exception!
      try { 
        buffer0.readUtf8(5L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=5
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(2907L);
      Pipe pipe0 = new Pipe(10000000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 128);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-9223372036854775808");
      Locale locale0 = Locale.ROOT;
      buffer_UnsafeCursor0.resizeBuffer(1L);
      buffer2.clear();
      assertEquals(0L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1812);
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.indexOfElement(byteString0, 1348L);
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer2 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readAll(buffer1);
      assertFalse(buffer0.exhausted());
      
      int int0 = buffer1.readUtf8CodePoint();
      assertEquals(1812, int0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[1];
      ByteString byteString0 = ByteString.EMPTY;
      byteStringArray0[0] = byteString0;
      Buffer buffer1 = buffer0.writeLong(2188L);
      int int0 = buffer1.readInt();
      assertEquals(0, int0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.size();
      String string0 = "okio.HashingSink";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)60;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.rangeEquals(0L, byteString0);
      // Undeclared exception!
      try { 
        Charset.forName("okio.HashingSink");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // okio.HashingSink
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      buffer0.size();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.readFully(buffer0, 0L);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      Buffer buffer1 = buffer0.writeByte((byte)0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " content=");
      Buffer buffer2 = (Buffer)buffer1.write((Source) buffer0, (long) (byte)0);
      byteArray0[1] = (byte)0;
      buffer0.writeLong((-2580L));
      buffer0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      // Undeclared exception!
      try { 
        buffer2.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Pipe pipe0 = new Pipe(3530L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8("");
      // Undeclared exception!
      try { 
        buffer1.snapshot(1285);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1285
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.indexOf((byte)1, 3418L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      ByteString byteString0 = new ByteString(byteArray0);
      long long1 = buffer0.indexOf(byteString0);
      assertTrue(long1 == long0);
      assertEquals((-1L), long1);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe(1075);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1075);
      long long0 = buffer1.readDecimalLong();
      assertEquals(3L, buffer1.size());
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe(56319);
      String string0 = "*U]9s@M&XvU";
      ByteString.decodeBase64("*U]9s@M&XvU");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.toString();
      // Undeclared exception!
      try { 
        realBufferedSink0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      int int0 = 0;
      buffer_UnsafeCursor0.start = 0;
      long long0 = 2147483647L;
      String string0 = "*U]9s@M&XvU";
      ByteString.decodeBase64("*U]9s@M&XvU");
      buffer_UnsafeCursor1.buffer.indexOfElement((ByteString) null, (long) 0);
      // Undeclared exception!
      try { 
        Charset.forName("*U]9s@M&XvU");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // *U]9s@M&XvU
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1758);
      ByteString byteString0 = ByteString.EMPTY;
      buffer1.indexOfElement(byteString0, 8L);
      Pipe pipe0 = new Pipe(1758);
      Buffer buffer2 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.readAll(buffer0);
      try { 
        realBufferedSource0.buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("out == null");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte)5;
      buffer1.read(byteArray0);
      buffer0.readUtf8();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.copyTo(buffer0, (-1L), 8192L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1 byteCount=8192
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      MockFile mockFile0 = new MockFile("D`");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)39;
      mockPrintStream0.write(byteArray0, (-2393), (int) (byte) (-23));
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "D`");
      Buffer buffer1 = buffer0.copyTo((OutputStream) printStream0);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(10);
      buffer1.readUtf8LineStrict(178L);
      try { 
        Integer.decode("sink == null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"sink == null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer0.writeDecimalLong((-1));
      buffer_UnsafeCursor0.start = 0;
      buffer_UnsafeCursor0.offset = 0L;
      String string0 = "*U]9s@M&XvU";
      ByteString.decodeBase64("*U]9s@M&XvU");
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.indexOfElement((ByteString) null, (long) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(64);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      buffer0.copyTo(outputStream0);
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint((-2465));
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x5f
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(99918317568L);
      buffer0.emitCompleteSegments();
      assertEquals(11L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      Buffer buffer1 = buffer0.writeByte((byte)0);
      Buffer buffer2 = (Buffer)buffer1.write((Source) buffer0, (long) (byte)0);
      byte byte0 = (byte)0;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement((ByteString) null, (long) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(988L);
      assertEquals(3L, buffer0.size());
      
      long long0 = buffer0.readHexadecimalUnsignedLong();
      assertEquals(988L, long0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer0.rangeEquals(2201L, (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null, 71776119061217280L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.size = 3357L;
      buffer1.readAndWriteUnsafe();
      buffer1.writeUtf8CodePoint((-1));
      assertEquals(3357L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-4);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer0.writeUtf8CodePoint(35);
      // Undeclared exception!
      try { 
        buffer0.readByteString(1729L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=1729
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      // Undeclared exception!
      try { 
        buffer0.readFrom(inputStream0, (-1082L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1082
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      realBufferedSource0.buffer.inputStream();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-2855L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-2855 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = buffer0.readByteArray();
      Buffer buffer1 = buffer0.clone();
      buffer1.readFully(byteArray0);
      assertNotSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte((-2144691080));
      long long0 = buffer1.completeSegmentByteCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Pipe pipe0 = new Pipe(5L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3Z)8Y0wWsLnDbvfw*");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeUtf8CodePoint(121);
      // Undeclared exception!
      try { 
        buffer0.readUtf8(5L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=5
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      long long0 = (-146L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      Buffer buffer1 = buffer0.writeDecimalLong(10);
      buffer1.indexOf((byte)17, 6L, (long) (byte)17);
      buffer0.hashCode();
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.inputStream();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(6);
      buffer0.writeShort(6);
      assertFalse(buffer0.exhausted());
      
      Charset charset0 = Charset.defaultCharset();
      String string0 = buffer1.readString(charset0);
      assertEquals("\u0006\u0000\u0006", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      Timeout timeout0 = buffer0.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      ByteString[] byteStringArray0 = new ByteString[2];
      ByteString byteString0 = ByteString.encodeUtf8("3/%/[W?Fn~!Gka\"[rA");
      byteStringArray0[0] = byteString0;
      ByteString byteString1 = ByteString.encodeUtf8("]");
      byteStringArray0[1] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer1.select(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " content=");
      buffer0.write((Source) buffer0, (long) (byte)0);
      byteArray0[1] = (byte)0;
      Buffer buffer1 = buffer0.writeLong((-2580L));
      byteArray0[2] = (byte)16;
      Buffer buffer2 = buffer1.writeUtf8(" content=", (int) (byte)0, (int) (byte)0);
      assertEquals(0L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      buffer0.clear();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) pipedOutputStream0, (-333L), (-333L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-333 byteCount=-333
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      Source source0 = hashingSource1.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.size = (-922337203685477580L);
      buffer1.request(4294967295L);
      buffer0.inputStream();
      Buffer buffer2 = realBufferedSource0.buffer();
      hashingSource1.timeout();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.write(buffer2, 32L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("+aZ9*rNK54LNWBJ'`", charset0);
      assertEquals(17L, buffer0.size());
      
      buffer0.clear();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      buffer_UnsafeCursor0.resizeBuffer(0L);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      buffer0.writeUtf8CodePoint(2474);
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Pipe pipe0 = new Pipe(3530L);
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("tQ{q-o", 1317, 1317);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 1317 > 6
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("", charset0);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte(116);
      buffer0.readByte();
      String string0 = buffer0.readUtf8();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(248);
      // Undeclared exception!
      try { 
        buffer1.readFully(buffer0, 32L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((byte[]) null, 3, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      ByteString[] byteStringArray0 = new ByteString[2];
      ByteString byteString0 = ByteString.encodeUtf8("3/%/[W?Fn~!Gka\"[rA");
      byteStringArray0[0] = byteString0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-42);
      byteArray0[6] = (byte)51;
      try { 
        buffer1.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte((-16777216));
      assertEquals(1L, buffer0.size());
      
      buffer0.readUtf8CodePoint();
      buffer0.exhausted();
      buffer0.hashCode();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)54, 255L, 2L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=255 toIndex=2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      buffer0.sha256();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      ByteString byteString0 = buffer0.snapshot();
      // Undeclared exception!
      try { 
        buffer1.indexOfElement(byteString0, (-1601L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong((-1588L));
      buffer0.indexOf((byte)42, 10L);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("", 47, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 0 < 47
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "byteCount < 0: ");
      Buffer buffer1 = buffer0.writeUtf8CodePoint(103);
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString1 = byteString0.sha1();
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString1;
      byteStringArray0[4] = byteString1;
      byteStringArray0[5] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      ByteString byteString2 = options0.get((byte)0);
      buffer1.indexOf(byteString2);
      buffer1.indexOf(byteString1, (long) (byte)0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.buffer.clear();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)112, (-992L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-992 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Qyh]p@u,wTW'X|,");
      Buffer buffer0 = new Buffer();
      long long0 = (-2094L);
      buffer0.size = (-3130L);
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-2094L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((-2094L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2094
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      Object object0 = new Object();
      buffer0.equals(object0);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte) (-12);
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, (int) (byte) (-12), 2268);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=-12 byteCount=2268
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1));
      Buffer buffer3 = buffer1.writeIntLe((-1));
      buffer_UnsafeCursor0.buffer.readLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      buffer2.copyTo(outputStream0);
      ByteString byteString0 = new ByteString((byte[]) null);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      long long0 = buffer3.writeAll(hashingSource0);
      assertEquals(12L, buffer1.size());
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.readAll(buffer0);
      realBufferedSink0.buffer.flush();
      realBufferedSink0.buffer.writeAll(buffer0);
      MockFile mockFile0 = new MockFile("okio.Buffer$2", "vvV-}H");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.CANADA;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "okio.Buffer$2", (Object[]) null);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeTo((OutputStream) printStream0, 4L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=4
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      try { 
        buffer0.readFully(buffer1, 1265L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(165L);
      Buffer buffer1 = buffer0.writeByte(64);
      buffer0.sha256();
      buffer1.writeHexadecimalUnsignedLong((-247L));
      long long0 = buffer1.readHexadecimalUnsignedLong();
      assertEquals(17L, buffer0.size());
      assertEquals(165L, long0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      long long0 = 1901L;
      Pipe pipe0 = new Pipe(1901L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      String string0 = "rTM(G^1\"(8D";
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readByteArray(1901L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1901
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8LineStrict(2109L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(12);
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(103);
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("", charset0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer1.readUtf8Line();
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 1389;
      Buffer buffer1 = new Buffer();
      ByteString byteString0 = buffer1.snapshot();
      Charset.defaultCharset();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer2.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(65533);
      ByteString byteString0 = buffer1.snapshot();
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.selectPrefix(options0);
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("", charset0);
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      buffer0.size();
      ByteString.decodeBase64(".inputStream()");
      boolean boolean0 = buffer0.rangeEquals(0L, (ByteString) null, 14, 14);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8(4655L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=4655
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer1.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      ByteString[] byteStringArray0 = new ByteString[2];
      ByteString byteString0 = ByteString.encodeUtf8("3/%/[W?Fn~!Gka\"[rA");
      byteStringArray0[0] = byteString0;
      buffer1.writeUtf8("");
      gzipSource0.timeout();
      ByteString byteString1 = ByteString.encodeUtf8("]");
      byteStringArray0[1] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer1.select(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 103;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(103);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      String string0 = "dW:8A&UBH'PD:\"|w";
      ByteString byteString0 = ByteString.encodeUtf8("dW:8A&UBH'PD:\"|w");
      realBufferedSource0.indexOfElement(byteString0, 1000L);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readUtf8Line(100000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=99999999 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(3L);
      Buffer buffer1 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.write(buffer1, (-2192L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2192
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      buffer0.write(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size();
      ByteString.decodeBase64(".inputStream()");
      buffer0.writeByte((-3370));
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)0;
      try { 
        realBufferedSource0.indexOf((byte)13);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)32, 2147483647L, 2147483647L);
      // Undeclared exception!
      try { 
        buffer0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(65536L);
      try { 
        buffer0.readUtf8LineStrict(410L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=5 content=3635353336\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.completeSegmentByteCount();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      Charset.defaultCharset();
      long long0 = realBufferedSource0.buffer.indexOf((byte)13, 0L, 0L);
      assertEquals((-1L), long0);
      
      Buffer buffer1 = realBufferedSource0.buffer.writeLongLe((byte)13);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((-3409L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-3409
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      long long0 = 3530L;
      Pipe pipe0 = new Pipe(3530L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)60;
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, (int) (byte)60, (int) (byte)60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=60 byteCount=60
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(3866);
      assertFalse(buffer0.exhausted());
      
      short short0 = buffer0.readShortLe();
      assertEquals((short)6671, short0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("size < 8: ", 6, 6);
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      buffer0.writeByte((-640));
      buffer0.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.selectPrefix(options0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      HashingSource.sha256(buffer0);
      Buffer buffer1 = buffer0.writeDecimalLong(1000000L);
      Buffer buffer2 = new Buffer();
      buffer1.indexOf((byte)49, 6L, 1000000L);
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      buffer0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      ByteString[] byteStringArray0 = new ByteString[2];
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("data", charset0);
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      options0.get((byte)0);
      ByteString byteString1 = buffer0.sha1();
      assertEquals(20, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.getByte(0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(2907L);
      Pipe pipe0 = new Pipe(10000000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-9223372036854775808");
      buffer_UnsafeCursor0.offset = 2907L;
      Locale locale0 = Locale.ROOT;
      buffer_UnsafeCursor0.resizeBuffer(1L);
      buffer0.clear();
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("limit < 0: ");
      HashingSource.hmacSha1(buffer0, byteString0);
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, (long) (-482));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = (-2635L);
      buffer0.writeByte((-154));
      // Undeclared exception!
      try { 
        buffer0.readString((-2635L), (Charset) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=-2635
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        buffer0.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-127);
      buffer0.write(byteArray0);
      short short0 = buffer0.readShort();
      assertFalse(buffer0.exhausted());
      assertEquals((short)20539, short0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.indexOf((byte) (-73));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((-858L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -858
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      buffer0.snapshot();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      Buffer buffer1 = buffer0.writeByte((byte)0);
      Buffer buffer2 = (Buffer)buffer1.write((Source) buffer0, (long) (byte)0);
      buffer2.readUtf8Line((long) (byte)0);
      buffer2.writeAll(buffer1);
      Buffer buffer3 = buffer2.emitCompleteSegments();
      assertSame(buffer2, buffer3);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(103);
      buffer1.sha256();
      buffer0.writeHexadecimalUnsignedLong(103);
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x67
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("gzip finished without exhausting source", 55, 55, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 55 > 39
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(100000000L);
      assertEquals(9L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Pipe pipe0 = new Pipe(3530L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = buffer0.snapshot();
      boolean boolean0 = buffer0.rangeEquals((-1449L), byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha256();
      HashingSource.sha256(buffer0);
      ByteString byteString1 = ByteString.EMPTY;
      buffer0.indexOfElement(byteString0);
      int int0 = (-2231);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream((InputStream) null, (-2231));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-961L));
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      buffer0.sha256();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer0.snapshot();
      realBufferedSource0.buffer.readAll(buffer1);
      buffer1.writableSegment(35);
      Buffer buffer2 = realBufferedSource0.buffer.write(byteString0);
      assertFalse(buffer0.equals((Object)buffer1));
      
      realBufferedSource0.buffer.readByteArray();
      assertTrue(buffer0.equals((Object)buffer2));
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.sha256();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(2907L);
      Pipe pipe0 = new Pipe(10000000L);
      buffer1.readAndWriteUnsafe();
      assertEquals(4L, buffer0.size());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-9223372036854775808");
      Locale locale0 = Locale.ROOT;
      long long0 = buffer0.readHexadecimalUnsignedLong();
      assertEquals(10503L, long0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.indexOf((byte)0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.readAll(realBufferedSink0);
      buffer0.flush();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      buffer0.sha256();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer0.snapshot();
      realBufferedSource0.buffer.readAll(buffer1);
      buffer1.writableSegment(2892);
      String string0 = "6V2yIXUqKvY:";
      // Undeclared exception!
      try { 
        Charset.forName("6V2yIXUqKvY:");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 6V2yIXUqKvY:
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Pipe pipe0 = new Pipe(2750L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong(2750L);
      buffer0.indexOf((byte)16, 2750L, 2750L);
      Buffer buffer2 = buffer0.clone();
      buffer2.hashCode();
      buffer1.outputStream();
      HashingSink hashingSink0 = HashingSink.sha512(buffer2);
      ByteString byteString0 = hashingSink0.hash();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      byteString0.indexOf(byteArray0, (int) (byte)16);
      buffer0.indexOf(byteString0);
      Buffer buffer3 = buffer1.clone();
      buffer0.close();
      buffer2.inputStream();
      // Undeclared exception!
      try { 
        buffer3.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)24;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.indexOfElement(byteString0, 2425L);
      // Undeclared exception!
      try { 
        buffer0.readByteString((-3420L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-3420
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      buffer0.size();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(0L);
      // Undeclared exception!
      try { 
        buffer1.read(buffer0, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Pipe pipe0 = new Pipe(3530L);
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)47;
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString();
      byteString0.write(buffer0);
      buffer0.indexOfElement(byteString0);
      MockFile mockFile0 = new MockFile("");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Pipe pipe0 = new Pipe(3530L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeUtf8("");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-83);
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(103);
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.indexOfElement(byteString0, (long) (byte)27);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertFalse(buffer0.exhausted());
      
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(103, int0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Pipe pipe0 = new Pipe(3530L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-83);
      Buffer buffer2 = buffer1.write(byteArray0);
      // Undeclared exception!
      try { 
        buffer2.readUtf8(736L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=736
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Pipe pipe0 = new Pipe(3530L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      buffer0.writeHexadecimalUnsignedLong(595L);
      ByteString byteString0 = ByteString.encodeUtf8("o5]cz!8Z");
      long long0 = buffer0.indexOfElement(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(1875);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffdd
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      buffer0.write((Source) buffer0, (long) (byte)0);
      buffer0.writeLongLe((byte)0);
      Buffer buffer1 = new Buffer();
      assertTrue(buffer1.exhausted());
  }
}
