/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 14 16:40:06 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.iterator.RowMajorMatrixIterator;
import org.la4j.iterator.VectorIterator;
import org.la4j.linear.LinearSystemSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      byte[] byteArray0 = cRSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      String string0 = cRSMatrix0.mkString("The density value should be between 0 and 1.0", "The density value should be between 0 and 1.0");
      SparseVector sparseVector0 = SparseVector.random(0, 0.0, (Random) mockRandom0);
      cRSMatrix0.setRow(0, (Vector) sparseVector0);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow((-1778), vectorProcedure0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1778
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(0);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(0, 0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      int int1 = 268;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 268);
      VectorIterator vectorIterator0 = cRSMatrix0.iteratorOfRow(0);
      long long0 = 1547L;
      MockRandom mockRandom0 = new MockRandom(1547L);
      // Undeclared exception!
      try { 
        CRSMatrix.random(268, 0, (double) 268, (Random) mockRandom0);
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 4190;
      // Undeclared exception!
      try { 
        CRSMatrix.random(4190, 4190, (double) 4190, (Random) null);
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.copyOfShape(0, 0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      int int1 = 1259;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1259);
      int int2 = Integer.MAX_VALUE;
      int int3 = (-1);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(1292, 1292);
      MockRandom mockRandom0 = new MockRandom();
      IntStream intStream0 = mockRandom0.ints();
      double double0 = mockRandom0.nextGaussian();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random(1259, 6, (double) 6, (Random) mockRandom0);
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = (-383.73);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 2.0;
      doubleArray1[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 2.0;
      doubleArray2[3] = 100.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-383.73);
      doubleArray2[6] = (-383.73);
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 100.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 429.79;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 2.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = 2.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 429.79;
      doubleArray7[4] = 2.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 100.0;
      doubleArray8[3] = 0.0;
      doubleArray8[4] = 0.0;
      doubleArray8[5] = 0.0;
      doubleArray8[6] = 2.0;
      doubleArray8[7] = 429.79;
      doubleArray8[8] = 2.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[1];
      doubleArray9[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(1, 1, doubleArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(110, 110, 110);
      double double0 = cRSMatrix0.minInRow(90);
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(90, 90, (MatrixFunction) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2189, 2189);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1000, 1000, 1000);
      // Undeclared exception!
      try { 
        cRSMatrix0.each((MatrixProcedure) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      VectorIterator vectorIterator0 = cRSMatrix0.nonZeroIteratorOfRow(0);
      int int0 = 5;
      int int1 = 0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 0;
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(5, 0, doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix1.toColumnMajorSparseMatrix();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_LU;
      // Undeclared exception!
      try { 
        cRSMatrix1.withDecompositor(linearAlgebra_DecompositorFactory0);
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      Matrix matrix0 = cRSMatrix0.add(4190.0);
      double double0 = cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double double0 = cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 1);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 9;
      CRSMatrix cRSMatrix0 = new CRSMatrix(9, 9, 9);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(9, 0.0);
      Vector vector0 = cRSMatrix1.toColumnVector();
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      String string0 = cRSMatrix0.toString();
      Vector vector0 = cRSMatrix0.getColumn(1283);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      int[] intArray0 = new int[2];
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      Matrix matrix0 = cRSMatrix0.removeFirstColumn();
      SparseMatrix sparseMatrix0 = cRSMatrix0.toSparseMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.updateRow(98, vectorFunction0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 98
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2215.4615509497;
      doubleArray1[1] = 135.15506136828725;
      doubleArray1[6] = (-3217.734776);
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "The density value should be between 0 and 1.0";
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(1464, 1464, (-78.48734736764), (Random) mockRandom0);
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = (-383.73);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 2.0;
      doubleArray1[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 2.0;
      doubleArray2[3] = 100.0;
      doubleArray2[4] = 0.0;
      int int0 = 7;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(118, 7, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      Matrix matrix0 = cRSMatrix0.add((-1.0));
      MatrixFactory<CRSMatrix> matrixFactory1 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = CRSMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        CRSMatrix.random(0, 0, (-352.284576), (Random) mockRandom0);
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      double double0 = cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      double double0 = cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Locale locale0 = Locale.KOREA;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      String string0 = locale0.getDisplayVariant();
      ParsePosition parsePosition0 = new ParsePosition(959);
      Number number0 = numberFormat0.parse("!m]Y2", parsePosition0);
      String string1 = cRSMatrix0.toCSV(numberFormat0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      Iterator<Integer> iterator0 = cRSMatrix0.iteratorOfNonZeroRows();
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.1102230246251565E-14;
      doubleArray1[1] = (double) 959;
      doubleArray1[2] = (double) 959;
      doubleArray1[3] = (double) 959;
      doubleArray1[4] = (double) 959;
      doubleArray1[5] = (double) 959;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 959;
      doubleArray2[1] = (double) 959;
      doubleArray2[2] = (double) 959;
      doubleArray2[3] = 1.1102230246251565E-14;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) 959;
      doubleArray3[1] = 1.1102230246251565E-14;
      doubleArray3[2] = 2401.47005620672;
      doubleArray3[3] = (double) 959;
      doubleArray3[4] = 1.1102230246251565E-14;
      doubleArray3[5] = 1.0;
      doubleArray3[6] = 1.1102230246251565E-14;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 2);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cRSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(32, 32);
      Spliterator<Double> spliterator0 = cRSMatrix0.spliterator();
      cRSMatrix0.eachNonZeroInRow(0, (VectorProcedure) null);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 2);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.zero(1257, 1257);
      double double0 = cRSMatrix0.max();
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(1257);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2, 4357.558192);
      Matrix matrix0 = cRSMatrix0.copy();
      DenseVector denseVector0 = DenseVector.zero(2);
      Vector vector0 = cRSMatrix0.multiply((Vector) denseVector0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("Can not decode CRSMatrix from the given byte array.");
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(110);
      // Undeclared exception!
      try { 
        cRSMatrix0.transform((MatrixFunction) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1276, 240, 4190);
      int int0 = 10;
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      cRSMatrix0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      double double0 = cRSMatrix0.min();
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse((-2147476397), 0, 0.0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2147476397' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(40);
      Iterator<Integer> iterator0 = cRSMatrix0.iteratorOfNonZeroRows();
      double double0 = cRSMatrix0.minInRow(7);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(36);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      double double0 = cRSMatrix0.getOrElse(33, 33, 162.98538130335);
      // Undeclared exception!
      try { 
        cRSMatrix1.removeLastRow();
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(53);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(53, 32, 0.964, (Random) mockRandom0);
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 2415;
      MockRandom mockRandom0 = new MockRandom(2415);
      SparseMatrix sparseMatrix0 = SparseMatrix.random(2415, 2415, 0.0, (Random) mockRandom0);
      int int1 = 84;
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt((-5768), 84);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 1702;
      CRSMatrix cRSMatrix0 = new CRSMatrix(704, 2099, 1702);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(2505, 2099);
      Vector vector0 = cRSMatrix1.toColumnVector();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix1, cRSMatrix1);
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(110);
      double double0 = cRSMatrix0.minInRow(90);
      cRSMatrix0.set(8, 8, 0.5);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("43");
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transformColumn(0, vectorFunction0);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 4190;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1276, 240, 4190);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(4190);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix1.transformColumn(446, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(1, 1, doubleArray0);
      double double0 = cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(110);
      double double0 = cRSMatrix0.min();
      Vector vector0 = cRSMatrix0.getColumn(110);
      VectorIterator vectorIterator0 = cRSMatrix0.nonZeroIteratorOfRow(48);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1276, 240, 4190);
      cRSMatrix0.setAll(0.0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(1, 2643, 182);
      cRSMatrix0.setAll((-471.68));
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(1, 82);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.setAll((-2895.0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MockRandom mockRandom0 = new MockRandom(1209L);
      CRSMatrix cRSMatrix1 = CRSMatrix.randomSymmetric(2, 1.0, (Random) mockRandom0);
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(7);
      cRSMatrix0.setAll(7);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(7, 7, 980.4903428832022);
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1276, 240, 4194);
      Matrix matrix0 = cRSMatrix0.blankOfShape(1276, 4194);
      boolean boolean0 = cRSMatrix0.nonZeroAt(32, (-452));
      // Undeclared exception!
      cRSMatrix0.setAll(679.098);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(110);
      cRSMatrix0.setColumn(2, (double) 2);
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 4190;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1276, 240, 4190);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(4190);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY, (double)446, Double.NEGATIVE_INFINITY).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix1.transformColumn(446, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(110);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.fromCSV("43");
      int[] intArray0 = new int[1];
      intArray0[0] = 320;
      // Undeclared exception!
      try { 
        cRSMatrix1.select(intArray0, intArray0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '320' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(110);
      double double0 = cRSMatrix0.minInRow(90);
      Vector vector0 = cRSMatrix0.getColumn(90);
      Matrix matrix0 = cRSMatrix0.divide((-693.94371));
      Matrix matrix1 = matrix0.copyOfShape(110, 90);
      // Undeclared exception!
      cRSMatrix0.insertColumn(90, vector0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("43");
      Matrix matrix0 = cRSMatrix0.copyOfShape(0, 0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(110);
      double double0 = cRSMatrix0.minInRow(103);
      Vector vector0 = cRSMatrix0.toRowVector();
      Matrix matrix0 = cRSMatrix0.copyOfShape(13, 13);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(9, 9, 9);
      Matrix matrix0 = cRSMatrix0.removeLastRow();
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, matrix0, cRSMatrix0);
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(110);
      int int0 = 10;
      Matrix matrix0 = cRSMatrix0.divide(Double.POSITIVE_INFINITY);
      Matrix matrix1 = cRSMatrix0.copyOfShape(10, 10);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      MockRandom mockRandom0 = new MockRandom(110);
      // Undeclared exception!
      try { 
        SparseVector.random(10, (-3433.0704471011), (Random) mockRandom0);
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2215.4615509497;
      doubleArray1[1] = 135.15506136828725;
      doubleArray1[2] = (-3217.734776);
      doubleArray1[3] = 679.098;
      doubleArray1[4] = 446.0;
      doubleArray1[5] = 77.951998;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(110);
      double double0 = cRSMatrix0.minInRow(90);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(90, 90, (MatrixFunction) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(110);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(110);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1249.3), (double)110, (-1274.0), 237.3233226, (-1274.0)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix1.updateRow(65, vectorFunction0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("G[ytHKYZ");
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(110);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(110);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix1.updateRow(65, vectorFunction0);
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix2 = CRSMatrix.from2DArray(doubleArray0);
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix1.nonZeroRowMajorIterator();
      double double0 = cRSMatrix2.max();
      double double1 = cRSMatrix1.maxInRow(10);
      CRSMatrix cRSMatrix3 = CRSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 75;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(75);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(75);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix1.transformRow(75, vectorFunction0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2215.4615509497;
      doubleArray0[1] = 135.15506136828725;
      doubleArray0[6] = (-3217.734776);
      doubleArray0[3] = 679.098;
      doubleArray0[4] = 446.0;
      doubleArray0[5] = 77.951998;
      CRSMatrix cRSMatrix0 = new CRSMatrix(290, 290);
      int[] intArray0 = new int[8];
      intArray0[0] = 104;
      intArray0[1] = 290;
      intArray0[2] = 290;
      intArray0[3] = 290;
      intArray0[4] = 290;
      intArray0[5] = 290;
      intArray0[6] = 290;
      intArray0[7] = 290;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '290' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(110);
      double double0 = cRSMatrix0.minInRow(90);
      Vector vector0 = cRSMatrix0.getColumn(90);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(110, 110);
      Matrix matrix0 = cRSMatrix1.copyOfShape(110, 90);
      // Undeclared exception!
      try { 
        matrix0.power(110);
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 110 does not equal to 90.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = 110;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(110);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(110);
      int int1 = 65;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.011111111111111112, 0.011111111111111112, 0.0, (double)65, 0.011111111111111112).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix1.updateRow(65, vectorFunction0);
      double[][] doubleArray0 = new double[1][9];
      CRSMatrix cRSMatrix2 = CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket((String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(110);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(110);
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(10, Double.POSITIVE_INFINITY);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(11, 11);
      Matrix matrix0 = cRSMatrix0.rotate();
      // Undeclared exception!
      try { 
        DenseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '12' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(110);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(110);
      CRSMatrix cRSMatrix2 = CRSMatrix.fromCSV("43");
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = cRSMatrix2.is(matrixPredicate0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachInRow(16, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2183, 1719);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(36, vectorProcedure0);
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(110);
      double double0 = cRSMatrix0.minInRow(90);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, (double)90, (double)90, (double)90).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transformColumn(90, vectorFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(90, (-3218), (MatrixFunction) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("4");
      Vector vector0 = cRSMatrix0.toColumnVector();
      Vector vector1 = cRSMatrix0.multiply(vector0);
      double double0 = cRSMatrix0.max();
      Iterator<Integer> iterator0 = cRSMatrix0.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(110);
      Matrix matrix0 = cRSMatrix0.rotate();
      Vector vector0 = cRSMatrix0.getColumn(110);
      // Undeclared exception!
      try { 
        cRSMatrix0.apply((MatrixMatrixOperation<Object>) null, matrix0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      double double0 = 2832.02;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(735, 2832.02);
      // Undeclared exception!
      cRSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.5;
      doubleArray2[1] = 0.5;
      doubleArray2[2] = 0.5;
      doubleArray2[3] = 0.5;
      doubleArray2[4] = 0.5;
      doubleArray2[5] = 0.5;
      doubleArray2[6] = 0.5;
      doubleArray2[7] = 0.5;
      doubleArray0[1] = doubleArray2;
      CRSMatrix cRSMatrix2 = CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix2, cRSMatrix1, cRSMatrix1, cRSMatrix2);
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(40);
      int[] intArray0 = new int[1];
      intArray0[0] = 6;
      Matrix matrix0 = cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(76, 76, 76);
      Vector vector0 = cRSMatrix0.toColumnVector();
      Vector vector1 = cRSMatrix0.multiply(vector0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      int[] intArray0 = new int[4];
      double double0 = cRSMatrix0.min();
      Matrix matrix0 = cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(110);
      Matrix matrix0 = cRSMatrix0.blankOfRows(110);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)110, 3083.907474371, 3083.907474371, (double)98, 3083.907474371).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix1 = cRSMatrix0.transformColumn(98, vectorFunction0);
      double double0 = matrix1.minInRow(13);
      Vector vector0 = matrix0.getColumn(110);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(2, 2, doubleArray0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SMART;
      LinearSystemSolver linearSystemSolver0 = cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      int int0 = 110;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(110);
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.rowMajorIterator();
      int int1 = 10;
      // Undeclared exception!
      cRSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(71, 71);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(71, 71);
      double double0 = cRSMatrix1.maxInRow(10);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("43");
      SparseMatrix sparseMatrix0 = SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      double double0 = ((CRSMatrix) sparseMatrix0).maxInRow(0);
      CRSMatrix cRSMatrix1 = CRSMatrix.fromCSV("43");
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)32;
      CRSMatrix cRSMatrix0 = CRSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("43");
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 1228);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, matrix0, matrix0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1228' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(40);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)40, (double)40, (-369.0), (double)40, (-369.0)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(40);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-52.0), 511.2708, (-1831.9), (double)40, (double)40).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.update(matrixFunction0);
  }
}
