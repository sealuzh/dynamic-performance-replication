/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:23:45 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.Member;
import java.util.Enumeration;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.FieldVisitor;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("<init>");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "org.apache.commons.io.filefilter.CanWriteFileFilter";
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.newMethodItem("aqHp)x)m$EV.v", ".[7cd%'7", "aqHp)x)m$EV.v", false);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassAdapter classAdapter1 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classAdapter1, 1);
      ClassReader classReader1 = new ClassReader(classReader0.b, 8, (-3104));
      ClassWriter classWriter1 = null;
      try {
        classWriter1 = new ClassWriter(classReader1, (-297));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.FileFileFilter");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.FileFileFilter");
      ClassWriter classWriter0 = new ClassWriter(0);
      classReader0.copyPool(classWriter0);
      classReader0.getInterfaces();
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = '^';
      // Undeclared exception!
      try { 
        classReader0.readConst(2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      classReader0.getInterfaces();
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        classReader0.readConst(8, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "org.apache.commons.io.filefilter.CanWriteFileFilter";
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      ClassWriter classWriter0 = new ClassWriter(2);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      char[] charArray0 = new char[2];
      ClassWriter classWriter1 = new ClassWriter(4);
      classWriter1.invalidFrames = true;
      classWriter0.newClassItem("The strings must not be null");
      // Undeclared exception!
      try { 
        classReader0.readConst(3, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      ClassWriter classWriter0 = new ClassWriter(1);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classAdapter0, (-1895));
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = '-';
      charArray0[2] = '7';
      charArray0[3] = '4';
      charArray0[4] = '4';
      charArray0[5] = '7';
      charArray0[6] = '1';
      // Undeclared exception!
      try { 
        classReader0.readConst((-3279), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3279
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      ClassWriter classWriter0 = new ClassWriter(1227);
      classReader0.accept((ClassVisitor) classWriter0, 1227);
      classReader0.getInterfaces();
      int int0 = 8;
      char[] charArray0 = new char[8];
      classReader0.getInterfaces();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "y9 .[@nPA?");
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-5);
      ClassWriter classWriter0 = new ClassWriter(53);
      Attribute[] attributeArray0 = new Attribute[0];
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 534);
      byteArray0[4] = (byte)0;
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(byteArray0, 16777219, (-220));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(623, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertNotNull(stringArray0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(623, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 4, 982);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45991
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      
      String string0 = classReader0.getClassName();
      assertNotNull(string0);
      assertEquals("org/apache/commons/io/filefilter/CanWriteFileFilter", string0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Xd\"x[p");
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      assertNotNull(byteArrayInputStream0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(863, byteArrayInputStream0.available());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      
      ClassReader classReader1 = new ClassReader(byteArrayInputStream0);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(33, classReader1.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(623, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      ClassReader classReader2 = new ClassReader(classReader1.b, 8, 2);
      assertNotNull(classReader2);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(33, classReader1.getAccess());
      assertEquals(18025, classReader2.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(623, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(104, classReader2.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      int int0 = Edge.NORMAL;
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'T';
      charArray0[1] = '^';
      charArray0[2] = 'C';
      charArray0[3] = '^';
      charArray0[4] = 'C';
      charArray0[5] = '<';
      charArray0[6] = '^';
      charArray0[7] = '^';
      // Undeclared exception!
      try { 
        classReader1.readConst('^', charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 94
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.CanWriteFileFilter");
      assertFalse(boolean0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(623, classReader0.header);
      
      String string0 = classReader0.getClassName();
      assertNotNull(string0);
      assertEquals("org/apache/commons/io/filefilter/CanWriteFileFilter", string0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(623, classReader0.header);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org/apache/commons/io/filefilter/CanWriteFileFilter");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ClassReader classReader1 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader1.header);
      
      ClassReader classReader2 = new ClassReader(classReader1.b, 8, 2);
      assertNotNull(classReader2);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      assertEquals(18025, classReader2.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(104, classReader2.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      int int0 = classReader2.getAccess();
      assertEquals(18025, int0);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader1.equals((Object)classReader2));
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      assertEquals(18025, classReader2.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(104, classReader2.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(classReader1, classReader0);
      assertNotSame(classReader1, classReader2);
      assertNotSame(classReader2, classReader1);
      assertNotSame(classReader2, classReader0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        classReader2.getInterfaces();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      assertNotNull(classWriter0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertNotNull(classAdapter0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      char[] charArray0 = new char[2];
      ClassWriter classWriter1 = new ClassWriter(4);
      assertNotNull(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter1.invalidFrames = true;
      ClassAdapter classAdapter1 = new ClassAdapter(classWriter1);
      assertNotNull(classAdapter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classAdapter1.equals((Object)classAdapter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      String string0 = classReader1.getSuperName();
      assertNotNull(string0);
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      
      int int0 = 76;
      int int1 = 256;
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader(classReader1.b, 256, 17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45991
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      
      String string0 = classReader0.getClassName();
      assertNotNull(string0);
      assertEquals("org/apache/commons/io/filefilter/CanWriteFileFilter", string0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      
      boolean boolean0 = ClassReader.SIGNATURES;
      assertTrue(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      assertNotNull(byteArrayInputStream0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(863, byteArrayInputStream0.available());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      
      ClassReader classReader1 = new ClassReader(byteArrayInputStream0);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(33, classReader1.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      ClassReader classReader2 = new ClassReader(classReader1.b, 8, 2);
      assertNotNull(classReader2);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(33, classReader1.getAccess());
      assertEquals(18025, classReader2.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(104, classReader2.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'T';
      String[] stringArray0 = classReader1.getInterfaces();
      assertNotNull(stringArray0);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader0.equals((Object)classReader2));
      assertFalse(classReader1.equals((Object)classReader2));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(33, classReader1.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader0, classReader2);
      assertNotSame(classReader1, classReader2);
      assertNotSame(classReader1, classReader0);
      
      String string1 = classReader0.getSuperName();
      assertNotNull(string1);
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string1);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader0.equals((Object)classReader2));
      assertFalse(string1.equals((Object)string0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader0, classReader2);
      
      int int0 = classReader2.readUnsignedShort(1);
      assertEquals(65210, int0);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader0.equals((Object)classReader2));
      assertFalse(classReader1.equals((Object)classReader2));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(33, classReader1.getAccess());
      assertEquals(18025, classReader2.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(104, classReader2.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader0, classReader2);
      assertNotSame(classReader1, classReader2);
      assertNotSame(classReader1, classReader0);
      assertNotSame(classReader2, classReader1);
      assertNotSame(classReader2, classReader0);
      
      ClassReader classReader3 = new ClassReader("org/apache/commons/io/filefilter/AbstractFileFilter");
      assertNotNull(classReader3);
      assertFalse(classReader3.equals((Object)classReader1));
      assertFalse(classReader3.equals((Object)classReader2));
      assertFalse(classReader3.equals((Object)classReader0));
      assertEquals(1057, classReader3.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(612, classReader3.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      String[] stringArray1 = classReader3.getInterfaces();
      assertNotNull(stringArray1);
      assertFalse(classReader3.equals((Object)classReader1));
      assertFalse(classReader3.equals((Object)classReader2));
      assertFalse(classReader3.equals((Object)classReader0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1057, classReader3.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(612, classReader3.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(classReader3, classReader1);
      assertNotSame(classReader3, classReader2);
      assertNotSame(classReader3, classReader0);
      assertNotSame(stringArray1, stringArray0);
      
      int int1 = Member.DECLARED;
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        classReader1.readLong((-167));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -167
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(623, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      char[] charArray0 = new char[8];
      charArray0[1] = '-';
      charArray0[2] = '1';
      charArray0[3] = '7';
      charArray0[4] = '1';
      charArray0[5] = 'g';
      charArray0[6] = 'k';
      charArray0[7] = ',';
      // Undeclared exception!
      try { 
        classReader0.readConst(8, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      ClassWriter classWriter0 = new ClassWriter(1);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = classReader0.getClassName();
      assertNotNull(string0);
      assertEquals("org/apache/commons/io/filefilter/CanWriteFileFilter", string0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org/apache/commons/io/filefilter/CanWriteFileFilter");
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      assertNotNull(byteArrayInputStream0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(863, byteArrayInputStream0.available());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      ClassReader classReader1 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      ClassReader classReader2 = new ClassReader(classReader1.b, 8, 2);
      assertNotNull(classReader2);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      assertEquals(18025, classReader2.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(104, classReader2.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      int int0 = classReader2.getAccess();
      assertEquals(18025, int0);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader1.equals((Object)classReader2));
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      assertEquals(18025, classReader2.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(104, classReader2.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotSame(classReader1, classReader0);
      assertNotSame(classReader1, classReader2);
      assertNotSame(classReader2, classReader1);
      assertNotSame(classReader2, classReader0);
      
      ClassWriter classWriter1 = new ClassWriter(4);
      assertNotNull(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter1);
      assertNotNull(classAdapter0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassReader classReader3 = new ClassReader(classReader2.b);
      assertNotNull(classReader3);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader1.equals((Object)classReader2));
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader3.equals((Object)classReader2));
      assertFalse(classReader3.equals((Object)classReader1));
      assertFalse(classReader3.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      assertEquals(18025, classReader2.getAccess());
      assertEquals(33, classReader3.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(104, classReader2.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader3.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertNotNull(stringArray0);
      assertFalse(classReader0.equals((Object)classReader2));
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader0.equals((Object)classReader3));
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotSame(classReader0, classReader2);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader0, classReader3);
      
      String string1 = classReader0.getSuperName();
      assertNotNull(string1);
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string1);
      assertFalse(classReader0.equals((Object)classReader2));
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader0.equals((Object)classReader3));
      assertFalse(string1.equals((Object)string0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotSame(classReader0, classReader2);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader0, classReader3);
      
      int int1 = classReader0.readUnsignedShort(8);
      assertEquals(40, int1);
      assertFalse(classReader0.equals((Object)classReader2));
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader0.equals((Object)classReader3));
      assertFalse(int1 == int0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotSame(classReader0, classReader2);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader0, classReader3);
      
      ClassReader classReader4 = new ClassReader("org/apache/commons/io/filefilter/CanWriteFileFilter");
      assertNotNull(classReader4);
      assertFalse(classReader4.equals((Object)classReader0));
      assertFalse(classReader4.equals((Object)classReader3));
      assertFalse(classReader4.equals((Object)classReader2));
      assertFalse(classReader4.equals((Object)classReader1));
      assertEquals(33, classReader4.getAccess());
      assertEquals(623, classReader4.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      classWriter1.cr = classReader2;
      assertEquals(33, classReader1.getAccess());
      assertEquals(18025, classReader2.getAccess());
      assertEquals(18025, classWriter1.cr.getAccess());
      
      String[] stringArray1 = classReader4.getInterfaces();
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(classReader4.equals((Object)classReader0));
      assertFalse(classReader4.equals((Object)classReader3));
      assertFalse(classReader4.equals((Object)classReader2));
      assertFalse(classReader4.equals((Object)classReader1));
      assertEquals(33, classReader4.getAccess());
      assertEquals(623, classReader4.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(classReader4, classReader0);
      assertNotSame(classReader4, classReader3);
      assertNotSame(classReader4, classReader2);
      assertNotSame(classReader4, classReader1);
      
      String string2 = classReader3.getClassName();
      assertNotNull(string2);
      assertEquals("org/apache/commons/io/filefilter/CanWriteFileFilter", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(classReader1.equals((Object)classReader3));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader1.equals((Object)classReader2));
      assertFalse(classReader1.equals((Object)classReader4));
      assertFalse(classReader2.equals((Object)classReader4));
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader3));
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader3.equals((Object)classReader2));
      assertFalse(classReader3.equals((Object)classReader1));
      assertFalse(classReader3.equals((Object)classReader0));
      assertFalse(classReader3.equals((Object)classReader4));
      assertEquals(33, classReader1.getAccess());
      assertEquals(18025, classReader2.getAccess());
      assertEquals(33, classReader3.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(104, classReader2.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader3.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(classReader1, classReader3);
      assertNotSame(classReader1, classReader0);
      assertNotSame(classReader1, classReader2);
      assertNotSame(classReader1, classReader4);
      assertNotSame(classReader2, classReader4);
      assertNotSame(classReader2, classReader1);
      assertNotSame(classReader2, classReader3);
      assertNotSame(classReader2, classReader0);
      assertNotSame(classReader3, classReader2);
      assertNotSame(classReader3, classReader1);
      assertNotSame(classReader3, classReader0);
      assertNotSame(classReader3, classReader4);
      
      int int2 = Member.DECLARED;
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String[] stringArray2 = classReader3.getInterfaces();
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(classReader1.equals((Object)classReader3));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader1.equals((Object)classReader2));
      assertFalse(classReader1.equals((Object)classReader4));
      assertFalse(classReader2.equals((Object)classReader4));
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader3));
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader3.equals((Object)classReader2));
      assertFalse(classReader3.equals((Object)classReader1));
      assertFalse(classReader3.equals((Object)classReader0));
      assertFalse(classReader3.equals((Object)classReader4));
      assertEquals(33, classReader1.getAccess());
      assertEquals(18025, classReader2.getAccess());
      assertEquals(33, classReader3.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(104, classReader2.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader3.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(classReader1, classReader3);
      assertNotSame(classReader1, classReader0);
      assertNotSame(classReader1, classReader2);
      assertNotSame(classReader1, classReader4);
      assertNotSame(classReader2, classReader4);
      assertNotSame(classReader2, classReader1);
      assertNotSame(classReader2, classReader3);
      assertNotSame(classReader2, classReader0);
      assertNotSame(classReader3, classReader2);
      assertNotSame(classReader3, classReader1);
      assertNotSame(classReader3, classReader0);
      assertNotSame(classReader3, classReader4);
      
      ClassReader classReader5 = new ClassReader("org/apache/commons/io/filefilter/CanWriteFileFilter");
      assertNotNull(classReader5);
      assertFalse(classReader5.equals((Object)classReader1));
      assertFalse(classReader5.equals((Object)classReader3));
      assertFalse(classReader5.equals((Object)classReader4));
      assertFalse(classReader5.equals((Object)classReader2));
      assertFalse(classReader5.equals((Object)classReader0));
      assertEquals(33, classReader5.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader5.header);
      
      classReader5.accept((ClassVisitor) classWriter1, 1408);
      assertFalse(classReader5.equals((Object)classReader1));
      assertFalse(classReader5.equals((Object)classReader3));
      assertFalse(classReader5.equals((Object)classReader4));
      assertFalse(classReader5.equals((Object)classReader2));
      assertFalse(classReader5.equals((Object)classReader0));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(33, classReader5.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader5.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classReader5, classReader1);
      assertNotSame(classReader5, classReader3);
      assertNotSame(classReader5, classReader4);
      assertNotSame(classReader5, classReader2);
      assertNotSame(classReader5, classReader0);
      assertNotSame(classWriter1, classWriter0);
      
      // Undeclared exception!
      try { 
        classReader2.readUTF8(183, (char[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
          assertNotNull(classReader0);
          assertEquals(33, classReader0.getAccess());
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(623, classReader0.header);
          
          ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
          assertNotNull(classWriter0);
          assertEquals(33, classReader0.getAccess());
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(623, classReader0.header);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          
          char[] charArray0 = new char[2];
          charArray0[1] = 'W';
          classWriter0.cr = classReader0;
          assertEquals(33, classReader0.getAccess());
          assertEquals(33, classWriter0.cr.getAccess());
          
          Item item0 = classWriter0.newDouble(2);
          assertNotNull(item0);
          assertEquals(33, classReader0.getAccess());
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(623, classReader0.header);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          
          ClassReader classReader1 = new ClassReader(classWriter0.cr.b);
          assertNotNull(classReader1);
          assertFalse(classReader1.equals((Object)classReader0));
          assertEquals(33, classReader0.getAccess());
          assertEquals(33, classReader1.getAccess());
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(623, classReader0.header);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(623, classReader1.header);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          
          String[] stringArray0 = classReader1.getInterfaces();
          assertNotNull(stringArray0);
          assertFalse(classReader0.equals((Object)classReader1));
          assertFalse(classReader1.equals((Object)classReader0));
          assertEquals(33, classReader0.getAccess());
          assertEquals(33, classReader1.getAccess());
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(623, classReader0.header);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(623, classReader1.header);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertNotSame(classReader0, classReader1);
          assertNotSame(classReader1, classReader0);
          
          String string0 = classWriter0.cr.getSuperName();
          assertNotNull(string0);
          assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
          assertFalse(classReader0.equals((Object)classReader1));
          assertFalse(classWriter0.cr.equals((Object)classReader1));
          assertEquals(33, classReader0.getAccess());
          assertEquals(33, classWriter0.cr.getAccess());
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(623, classReader0.header);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(623, classWriter0.cr.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertNotSame(classReader0, classReader1);
          assertNotSame(classWriter0.cr, classReader1);
          assertSame(classWriter0.cr, classReader0);
          
          int int0 = classWriter0.cr.readUnsignedShort(1);
          assertEquals(65210, int0);
          assertFalse(classReader0.equals((Object)classReader1));
          assertFalse(classWriter0.cr.equals((Object)classReader1));
          assertEquals(33, classReader0.getAccess());
          assertEquals(33, classWriter0.cr.getAccess());
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(623, classReader0.header);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(623, classWriter0.cr.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertNotSame(classReader0, classReader1);
          assertNotSame(classWriter0.cr, classReader1);
          assertSame(classWriter0.cr, classReader0);
          
          ClassReader classReader2 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
          assertNotNull(classReader2);
          assertFalse(classReader2.equals((Object)classReader1));
          assertFalse(classReader2.equals((Object)classReader0));
          assertEquals(33, classReader2.getAccess());
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(623, classReader2.header);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          
          String[] stringArray1 = classReader0.getInterfaces();
          assertNotNull(stringArray1);
          assertFalse(classReader0.equals((Object)classReader2));
          assertFalse(classReader0.equals((Object)classReader1));
          assertFalse(stringArray1.equals((Object)stringArray0));
          assertEquals(33, classReader0.getAccess());
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(623, classReader0.header);
          assertNotSame(classReader0, classReader2);
          assertNotSame(classReader0, classReader1);
          assertNotSame(stringArray1, stringArray0);
          
          String string1 = classWriter0.cr.getClassName();
          assertNotNull(string1);
          assertEquals("org/apache/commons/io/filefilter/CanWriteFileFilter", string1);
          assertFalse(classReader0.equals((Object)classReader2));
          assertFalse(classReader0.equals((Object)classReader1));
          assertFalse(classWriter0.cr.equals((Object)classReader1));
          assertFalse(classWriter0.cr.equals((Object)classReader2));
          assertFalse(string1.equals((Object)string0));
          assertEquals(33, classReader0.getAccess());
          assertEquals(33, classWriter0.cr.getAccess());
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(623, classReader0.header);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(623, classWriter0.cr.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertNotSame(classReader0, classReader2);
          assertNotSame(classReader0, classReader1);
          assertNotSame(classWriter0.cr, classReader1);
          assertNotSame(classWriter0.cr, classReader2);
          assertSame(classWriter0.cr, classReader0);
          
          int int1 = Member.DECLARED;
          assertEquals(1, int1);
          assertFalse(int1 == int0);
          
          String[] stringArray2 = classReader1.getInterfaces();
          assertNotNull(stringArray2);
          assertFalse(classReader0.equals((Object)classReader2));
          assertFalse(classReader0.equals((Object)classReader1));
          assertFalse(classReader1.equals((Object)classReader2));
          assertFalse(classReader1.equals((Object)classReader0));
          assertFalse(stringArray2.equals((Object)stringArray0));
          assertFalse(stringArray2.equals((Object)stringArray1));
          assertEquals(33, classReader0.getAccess());
          assertEquals(33, classReader1.getAccess());
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(623, classReader0.header);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(623, classReader1.header);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertNotSame(classReader0, classReader2);
          assertNotSame(classReader0, classReader1);
          assertNotSame(classReader1, classReader2);
          assertNotSame(classReader1, classReader0);
          assertNotSame(stringArray2, stringArray0);
          assertNotSame(stringArray2, stringArray1);
          
          ClassReader classReader3 = new ClassReader("org/apache/commons/io/filefilter/AbstractFileFilter");
          assertNotNull(classReader3);
          assertFalse(classReader3.equals((Object)classReader2));
          assertFalse(classReader3.equals((Object)classReader0));
          assertFalse(classReader3.equals((Object)classReader1));
          assertEquals(1057, classReader3.getAccess());
          assertEquals(612, classReader3.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          
          classReader3.accept((ClassVisitor) classWriter0, (-1377));
          assertFalse(classReader0.equals((Object)classReader2));
          assertFalse(classReader0.equals((Object)classReader1));
          assertFalse(classReader0.equals((Object)classReader3));
          assertFalse(classReader3.equals((Object)classReader2));
          assertFalse(classReader3.equals((Object)classReader0));
          assertFalse(classReader3.equals((Object)classReader1));
          assertEquals(33, classReader0.getAccess());
          assertEquals(1057, classReader3.getAccess());
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(623, classReader0.header);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(612, classReader3.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertNotSame(classReader0, classReader2);
          assertNotSame(classReader0, classReader1);
          assertNotSame(classReader0, classReader3);
          assertNotSame(classReader3, classReader2);
          assertNotSame(classReader3, classReader0);
          assertNotSame(classReader3, classReader1);
          
          // Undeclared exception!
          try { 
            classReader1.readUTF8(31, charArray0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // 2
             //
             verifyException("wheel.asm.ClassReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      
      char[] charArray0 = new char[2];
      String string0 = classReader0.getSuperName();
      assertNotNull(string0);
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(623, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try { 
        classReader1.readUTF8(4, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      char[] charArray0 = new char[2];
      String string0 = classReader0.getSuperName();
      assertNotNull(string0);
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      String string1 = classReader0.getSuperName();
      assertNotNull(string1);
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string1);
      assertEquals(33, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      ClassWriter classWriter0 = new ClassWriter((-3709));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classWriter0.addUninitializedType("short", 1);
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = Member.DECLARED;
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      ClassReader classReader1 = new ClassReader("org.apache.commons.io.IOCase");
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(49, classReader1.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      long long0 = classReader1.readLong(2);
      assertEquals((-4990551337076850563L), long0);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(49, classReader1.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotSame(classReader1, classReader0);
      
      ClassWriter classWriter1 = new ClassWriter(classReader0, 22);
      assertNotNull(classWriter1);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassWriter classWriter2 = new ClassWriter(classReader1, 623);
      assertNotNull(classWriter2);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertEquals(49, classReader1.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertNotNull(classAdapter0);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(classWriter0.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      FieldVisitor fieldVisitor0 = classAdapter0.visitField((-41), "short", "org/apache/commons/io/filefilter/AbstractFileFilter", "short", "org.apache.commons.io.filefilter.CanWriteFileFilter");
      assertNotNull(fieldVisitor0);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(classWriter0.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter0, classWriter1);
      assertNotSame(classWriter0, classWriter2);
      
      classReader1.accept((ClassVisitor) classWriter2, 127);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertEquals(49, classReader1.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classReader1, classReader0);
      assertNotSame(classWriter2, classWriter1);
      assertNotSame(classWriter2, classWriter0);
      
      int int2 = classReader1.readByte(127);
      assertEquals(10, int2);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(49, classReader1.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotSame(classReader1, classReader0);
      
      String string2 = classReader0.getSuperName();
      assertNotNull(string2);
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string2);
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(33, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(classReader0, classReader1);
      
      // Undeclared exception!
      try { 
        classReader0.getItem((-269));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -269
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      assertNotNull(classWriter0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[19];
      charArray0[1] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      Object object0 = classReader0.readConst(27, charArray0);
      assertNotNull(object0);
      assertEquals("<init>", object0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      classReader0.accept((ClassVisitor) classWriter0, 1);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertNotNull(classAdapter0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassWriter classWriter1 = new ClassWriter(classReader0, 8);
      assertNotNull(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassAdapter classAdapter1 = new ClassAdapter(classWriter1);
      assertNotNull(classAdapter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classAdapter1.equals((Object)classAdapter0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassAdapter classAdapter2 = new ClassAdapter(classWriter1);
      assertNotNull(classAdapter2);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classAdapter2.equals((Object)classAdapter1));
      assertFalse(classAdapter2.equals((Object)classAdapter0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertNotNull(stringArray0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      String string0 = classReader0.getSuperName();
      assertNotNull(string0);
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
      assertFalse(string0.equals((Object)object0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      int int0 = classWriter1.addUninitializedType("wheel.asm.MethodWriter", 132);
      assertEquals(1, int0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      int int1 = Member.DECLARED;
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      ClassReader classReader1 = new ClassReader("wheel.asm.MethodWriter");
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(32, classReader1.getAccess());
      assertEquals(7802, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      ClassReader classReader2 = new ClassReader(classReader1.b);
      assertNotNull(classReader2);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertEquals(32, classReader1.getAccess());
      assertEquals(32, classReader2.getAccess());
      assertEquals(7802, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(7802, classReader2.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      long long0 = classReader2.readLong(2);
      assertEquals((-4990551337076653351L), long0);
      assertFalse(classReader1.equals((Object)classReader2));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertEquals(32, classReader1.getAccess());
      assertEquals(32, classReader2.getAccess());
      assertEquals(7802, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(7802, classReader2.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(classReader1, classReader2);
      assertNotSame(classReader1, classReader0);
      assertNotSame(classReader2, classReader0);
      assertNotSame(classReader2, classReader1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassWriter classWriter2 = new ClassWriter(classReader1, 53);
      classReader1.accept((ClassVisitor) classWriter0, 3);
      classReader1.readByte(4);
      String string1 = classWriter2.thisName;
      classReader1.getItem(623);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      assertNotNull(classWriter0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.CanWriteFileFilter", "org.apache.commons.io.filefilter.CanWriteFileFilter");
      assertNotNull(string0);
      assertEquals("org.apache.commons.io.filefilter.CanWriteFileFilter", string0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classReader0.accept((ClassVisitor) classWriter0, 1);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertNotNull(classAdapter0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassAdapter classAdapter1 = new ClassAdapter(classWriter0);
      assertNotNull(classAdapter1);
      assertFalse(classAdapter1.equals((Object)classAdapter0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertNotNull(stringArray0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      String string1 = classReader0.getSuperName();
      assertNotNull(string1);
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      int int0 = Frame.CHAR;
      assertEquals(16777227, int0);
      
      int int1 = Member.DECLARED;
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      ClassReader classReader1 = new ClassReader("wheel.asm.MethodWriter");
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(32, classReader1.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(7802, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      
      ClassReader classReader2 = new ClassReader(classReader1.b);
      assertNotNull(classReader2);
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(32, classReader2.getAccess());
      assertEquals(32, classReader1.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(7802, classReader2.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(7802, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      
      long long0 = classReader2.readLong(2);
      assertEquals((-4990551337076653351L), long0);
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader1.equals((Object)classReader2));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(32, classReader2.getAccess());
      assertEquals(32, classReader1.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(7802, classReader2.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(7802, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotSame(classReader2, classReader1);
      assertNotSame(classReader2, classReader0);
      assertNotSame(classReader1, classReader2);
      assertNotSame(classReader1, classReader0);
      
      ClassWriter classWriter1 = new ClassWriter(classReader1, 8);
      classReader2.accept((ClassVisitor) classWriter0, 8);
      classReader2.readByte(classWriter1.COMPUTE_FRAMES);
      int int2 = 3888;
      classReader0.getClassName();
      classReader0.getItem(int2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      assertNotNull(classWriter0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      Object object0 = classReader0.readConst(27, charArray0);
      assertNotNull(object0);
      assertEquals("<init>", object0);
      assertArrayEquals(new char[] {'\u0000', 'L', 'L'}, charArray0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      
      classReader0.accept((ClassVisitor) classWriter0, 1);
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertNotNull(classAdapter0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassWriter classWriter1 = new ClassWriter(classReader0, 8);
      assertNotNull(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassAdapter classAdapter1 = new ClassAdapter(classWriter1);
      assertNotNull(classAdapter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classAdapter1.equals((Object)classAdapter0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassAdapter classAdapter2 = new ClassAdapter(classWriter1);
      assertNotNull(classAdapter2);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classAdapter2.equals((Object)classAdapter1));
      assertFalse(classAdapter2.equals((Object)classAdapter0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertNotNull(stringArray0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      
      String string0 = classReader0.getSuperName();
      assertNotNull(string0);
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
      assertFalse(string0.equals((Object)object0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      
      int int0 = classWriter1.addUninitializedType("wheel.asm.MethodWriter", 132);
      assertEquals(1, int0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(623, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      
      int int1 = Member.DECLARED;
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      ClassReader classReader1 = new ClassReader("wheel.asm.MethodWriter");
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(32, classReader1.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(7802, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      ClassReader classReader2 = new ClassReader(classReader1.b);
      assertNotNull(classReader2);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertEquals(32, classReader1.getAccess());
      assertEquals(32, classReader2.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(7802, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(7802, classReader2.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      long long0 = classReader2.readLong(2);
      assertEquals((-4990551337076653351L), long0);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader1.equals((Object)classReader2));
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertEquals(32, classReader1.getAccess());
      assertEquals(32, classReader2.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(7802, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(7802, classReader2.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotSame(classReader1, classReader0);
      assertNotSame(classReader1, classReader2);
      assertNotSame(classReader2, classReader0);
      assertNotSame(classReader2, classReader1);
      
      classReader2.accept((ClassVisitor) classWriter0, 2);
      ClassWriter classWriter2 = new ClassWriter(classReader1, 20);
      classReader2.accept((ClassVisitor) classWriter1, classReader0.EXPAND_FRAMES);
      Label label0 = new Label();
      Label label1 = label0.next;
      Label label2 = label0.next;
      Label label3 = label0.successor;
      Label[] labelArray0 = new Label[1];
      labelArray0[0] = label2;
      classReader2.readLabel(classReader0.SKIP_DEBUG, labelArray0);
      classReader0.getSuperName();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[3];
      charArray0[1] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.CanWriteFileFilter", "org.apache.commons.io.filefilter.CanWriteFileFilter");
      classReader0.accept((ClassVisitor) classWriter0, 1);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 8);
      ClassAdapter classAdapter1 = new ClassAdapter(classWriter1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, classReader0.b);
      ClassAdapter classAdapter2 = new ClassAdapter(classWriter1);
      classReader0.getInterfaces();
      int int0 = Frame.CHAR;
      int int1 = Member.DECLARED;
      ClassReader classReader1 = new ClassReader("wheel.asm.MethodWriter");
      classReader0.readLong(2);
      ClassWriter classWriter2 = new ClassWriter(classReader1, 20);
      classReader1.accept((ClassVisitor) classWriter1, 8);
      classReader0.readByte(2);
      String string0 = classWriter2.thisName;
  }
}
