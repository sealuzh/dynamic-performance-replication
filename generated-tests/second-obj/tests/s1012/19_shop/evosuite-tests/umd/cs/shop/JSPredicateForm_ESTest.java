/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:53:24 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.FileDescriptor;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.io.StreamTokenizer;
import java.util.Comparator;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("not");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.print();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) " Expected (");
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm0);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parallelStream();
      jSTerm0.makeFunction();
      jSTerm0.add((Object) "ED");
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm0);
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      assertFalse(jSSubstitution0.fail());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "5N)");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      jSTerm0.add((Object) " Expectd (");
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
      jSSubstitution0.parallelStream();
      jSPredicateForm0.print();
      assertEquals(1, jSPredicateForm0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clone();
      jSTerm0.add((Object) " Expectd (");
      jSTerm0.add((Object) " Expectd (");
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) " Expctd (");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(11, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "( ");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) " Expctd (");
      Object object0 = new Object();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " Expected (");
      jSTerm0.add((Object) " Expected (");
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution1);
      assertTrue(jSSubstitution2.fail());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      jSTerm0.add((Object) "}:D");
      jSTerm0.add((Object) " Expectd (");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.matches((JSPredicateForm) jSTerm0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ) ");
      jSTerm1.add((Object) "!");
      jSTerm1.add((Object) "!");
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(p7Noj1:");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) " Expected (");
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      System.setCurrentTimeMillis(9L);
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      jSPredicateForm1.add((Object) charArrayReader0);
      jSTerm0.add((Object) jSPredicateForm0);
      // Undeclared exception!
      try { 
        jSPredicateForm1.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.CharArrayReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      jSTerm0.add((Object) " :t");
      jSTerm0.equals((JSPredicateForm) null);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.equals(jSPredicateForm0);
      jSTerm0.matches(jSPredicateForm0);
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSPredicateForm0.add((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 1597);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, pipedInputStream0);
      jSSubstitution2.add((Object) sequenceInputStream0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) " Expectd (");
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.add((Object) " Expectd (");
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      System.setCurrentTimeMillis(142L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(=p7No:j1");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSTerm0.add((Object) " Exectd (");
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.matches((JSPredicateForm) jSTerm0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSTerm1.add((Object) " Exectd (");
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      jSTerm1.add((Object) " Exectd (");
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSTerm0.add((Object) " Exectd (");
      jSTerm0.add((Object) jSTerm1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSTerm1.add((Object) " Exectd (");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSTerm0.listIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSTerm1.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      predicate2.negate();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.add((Object) predicate3);
      JSTerm jSTerm2 = new JSTerm();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSTerm1.add((Object) jSPredicateForm1);
      jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution4);
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      assertTrue(jSTerm4.equals((Object)jSTerm2));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-22);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSTerm jSTerm0 = new JSTerm();
      String string0 = " Exectd (";
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSTerm0.add((Object) " Exectd (");
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm0);
      jSTerm0.add((Object) " Exectd (");
      // Undeclared exception!
      try { 
        jSSubstitution0.listIterator(21);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 21
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parallelStream();
      jSTerm0.makeFunction();
      String string0 = "not";
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }
}
