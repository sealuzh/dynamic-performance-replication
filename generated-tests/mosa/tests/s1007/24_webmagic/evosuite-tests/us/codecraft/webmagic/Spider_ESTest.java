/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:34:49 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setPipelines((List<Pipeline>) null);
      // Undeclared exception!
      try { 
        spider1.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("jM6t#^_");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("jM6t#^_", "jM6t#^_");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      spider1.getThreadAlive();
      // Undeclared exception!
      try { 
        spider2.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("b!.7]4r6e");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getUUID();
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      Request request1 = request0.addHeader("", "");
      requestArray0[0] = request1;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("text");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider0.setSpiderListeners(linkedList0);
      AtomicInteger atomicInteger0 = new AtomicInteger(2535);
      assertEquals((short)2535, atomicInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("tex");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.clone();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedList0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("jM6t#^_");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("jM6t#^_", "jM6t#^_");
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Request request0 = new Request();
      request0.setUrl("jM6t#^_");
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider1 = spider0.pipeline(collectorPipeline0);
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("text");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      Spider spider2 = spider1.setUUID("text");
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("b!.7]4r6e");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      int int0 = spider1.getThreadAlive();
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("text");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setExitWhenComplete(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "text";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("text");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = Spider.create(simplePageProcessor0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(8);
      Spider spider2 = spider1.setExecutorService(scheduledThreadPoolExecutor0);
      // Undeclared exception!
      try { 
        spider2.get("/");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("text");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      AtomicInteger atomicInteger0 = new AtomicInteger(5588);
      Spider spider1 = spider0.thread(5588);
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("jM6t#^_");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("jM6t#^_");
      spider0.setDownloader((Downloader) null);
      spider1.extractAndAddRequests((Page) null, false);
      spider1.getUUID();
      String string0 = spider1.getUUID();
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(string0);
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("text");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "text";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("p'G+VrjnV#Px}| L");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader((Downloader) null);
      Page page0 = new Page();
      spider1.extractAndAddRequests(page0, false);
      Locale locale0 = Locale.JAPANESE;
      Spider spider2 = spider0.clearPipeline();
      ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        spider2.thread((ExecutorService) null, (-2141));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("b!.7]4r6e");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.runAsync();
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.pipeline(filePipeline0);
      Request request0 = new Request();
      Request[] requestArray0 = new Request[6];
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = true;
      spider0.setSpawnUrl(true);
      Page page0 = null;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5, forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, true);
      spider0.thread((ExecutorService) forkJoinPool0, 5);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader(", userAgent='");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("jM6t#^_");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("jM6t#^_");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("jM6t#^_", "jM6t#^_");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider2.setSpiderListeners(linkedList0);
      Request request0 = new Request();
      request0.setUrl("@'r-.P9('^9`U`\"*Fm");
      String[] stringArray0 = new String[0];
      Spider spider3 = spider1.addUrl(stringArray0);
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("b!.7]4r6e");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.scheduler((Scheduler) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1);
      AtomicInteger atomicInteger0 = new AtomicInteger(143);
      Spider spider3 = spider2.setExecutorService(forkJoinPool0);
      spider1.setScheduler((Scheduler) null);
      // Undeclared exception!
      try { 
        spider3.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("M6#t^_");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider0.scheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      spider1.setDownloader(phantomJSDownloader0);
      Request request0 = new Request("M6#t^_");
      spider2.setEmptySleepTime((-875));
      // Undeclared exception!
      try { 
        spider2.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      QueueScheduler queueScheduler1 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler1);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider3 = spider2.setExecutorService(forkJoinPool0);
      spider3.setSpiderListeners(linkedList0);
      Request request0 = new Request();
      request0.setUrl("@'r-.P9('^9`U`\"*Fm");
      Request[] requestArray0 = new Request[0];
      Spider spider4 = spider1.addRequest(requestArray0);
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mM,2l.h:q-H)1S");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("mM,2l.h:q-H)1S");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string0 = spider0.getUUID();
      assertNull(string0);
      
      boolean boolean0 = spider0.isSpawnUrl();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(boolean0);
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("jM6t#^_");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("jM6t#^_", "jM6t#^_");
      spider1.setDownloader(phantomJSDownloader0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Request request0 = new Request();
      request0.setUrl("@'r-.P9('^9`U`\"*Fm");
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      spider1.isSpawnUrl();
      // Undeclared exception!
      try { 
        spider1.sleep((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("text");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.runAsync();
      Spider spider1 = spider0.setExitWhenComplete(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(", cookies=", ", cookies=");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      Site site0 = spider2.getSite();
      spider1.site = site0;
      FilePipeline filePipeline0 = new FilePipeline();
      spider1.clearPipeline();
      // Undeclared exception!
      try { 
        spider0.get("text");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.selector.RegexResult");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.selector.RegexResult", "phantomjs");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("phantomjs");
      Spider spider2 = spider1.setScheduler(fileCacheQueueScheduler0);
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      assertTrue(spider3.isExitWhenComplete());
      
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = Locale.US;
      locale0.getDisplayCountry(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      spider0.getAll((Collection<String>) set0);
      spider2.clearPipeline();
      List<SpiderListener> list0 = new LinkedList<SpiderListener>();
      spider3.run();
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("M6#t^_");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("M6#t^_", "M6#t^_");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      spider2.getCollectorPipeline();
      assertTrue(spider2.isExitWhenComplete());
      
      List<Request> list0 = spider2.getAll((Collection<String>) set0);
      Spider spider3 = spider2.startRequest(list0);
      List<SpiderListener> list1 = spider3.getAll((Collection<String>) set0);
      spider2.setSpiderListeners(list1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      spider3.getThreadAlive();
      spider1.close();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("jM6t#^_");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("jM6t#^_", "jM6t#^_");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider3 = spider2.setSpiderListeners(linkedList0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(143);
      AtomicInteger atomicInteger0 = new AtomicInteger(143);
      phantomJSDownloader0.setThread(143);
      Spider spider4 = spider1.setExecutorService(forkJoinPool0);
      Spider spider5 = spider4.setScheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("jM6t#^_", "Q6Z|6aCPkO5xh,!");
      spider5.downloader(phantomJSDownloader1);
      spider3.run();
      spider5.run();
      int int0 = spider1.getThreadAlive();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("jM6t#^_");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      spider1.getUUID();
      spider0.setDownloader((Downloader) null);
      spider1.getStartTime();
      // Undeclared exception!
      try { 
        spider1.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("b!.7]4r6e");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.runAsync();
      boolean boolean0 = false;
      spider0.setExitWhenComplete(false);
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.pipeline(filePipeline0);
      // Undeclared exception!
      try { 
        spider0.get("waitNewUrl - interrupted, error {}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Page.fail();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider {} closed! {} pages downloaded.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getStatus();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("b!.7]4rFe");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getUUID();
      Locale locale0 = Locale.JAPANESE;
      locale0.getUnicodeLocaleAttributes();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.getScheduler();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("b!.7]4r6e");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getUUID();
      Locale locale0 = Locale.JAPANESE;
      locale0.getUnicodeLocaleAttributes();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      spider0.isExitWhenComplete();
      spider1.stop();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("jM6t#^_");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("jM6t#^_", "jM6t#^_");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Request request0 = new Request();
      request0.setUrl("@'r-.P9('^9`U`\"*Fm");
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider0.getAll((Collection<String>) linkedBlockingDeque0);
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      spider3.getPageCount();
      System.setCurrentTimeMillis((-1955L));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("jM6t#^_");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Request request0 = new Request("jM6t#^_");
      Request request1 = request0.addCookie("jM6t#^_", "@~W`7_fef(");
      ResultItems resultItems0 = new ResultItems();
      Map<String, Object> map0 = resultItems0.getAll();
      Request request2 = request1.setExtras(map0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Request request3 = request2.putExtra(";AfbX]o", pipedInputStream0);
      Request request4 = request3.setMethod("C$88W[JO0Ytgmn2S");
      queueScheduler0.pushWhenNoDuplicate(request4, spider0);
      spider0.scheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "KwLU.&|?;wn|G2Bv");
      Spider spider1 = spider0.scheduler(queueScheduler0);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<Request> list0 = spider1.getAll((Collection<String>) set0);
      Spider spider3 = spider2.startRequest(list0);
      spider3.getAll((Collection<String>) set0);
      spider3.getAll((Collection<String>) set0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("M6#t^_");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Request request0 = new Request();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("M6#t^_", "M6#t^_");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      spider2.getAll((Collection<String>) set0);
      spider1.getAll((Collection<String>) set0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      String[] stringArray0 = new String[0];
      spider0.test(stringArray0);
      spider1.getCollectorPipeline();
      spider2.getStatus();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("{sRi=Z;A8R|,0@kE@n");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "[K");
      spider0.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      spider1.getAll((Collection<String>) set0);
      spider1.getAll((Collection<String>) set0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }
}
