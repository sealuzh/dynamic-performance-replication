/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:37:01 GMT 2018
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.LinkedTreeMap;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.ToLongFunction;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkedTreeMap_ESTest extends LinkedTreeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(linkedTreeMap0);
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>(comparator0);
      int int0 = linkedTreeMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      Integer.getInteger("0 I (`D^R ?ioR", (Integer) null);
      linkedTreeMap0.get((Object) null);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.clear();
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>((Comparator<? super Object>) null);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.iterator();
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      Integer integer0 = new Integer(1539);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      Function<Object, Object> function1 = unaryOperator0.compose((Function<? super Object, ?>) function0);
      Function<Object, Object> function2 = function1.andThen((Function<? super Object, ?>) unaryOperator0);
      linkedTreeMap0.computeIfAbsent(integer0, function2);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet0.contains(linkedTreeMap0);
      assertEquals(1, linkedTreeMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>((Comparator<? super Integer>) null);
      Integer integer0 = new Integer(2526);
      linkedTreeMap0.find(integer0, true);
      linkedTreeMap0.removeInternalByKey((Object) null);
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      int int0 = linkedTreeMap_EntrySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.clear();
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>();
      Object object0 = new Object();
      linkedTreeMap0.remove(object0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>(comparator0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("4UY}sduBe1:\")I").when(biFunction0).apply(any() , any());
      linkedTreeMap0.compute("4UY}sduBe1:\")I", biFunction0);
      linkedTreeMap0.findByObject("4UY}sduBe1:\")I");
      linkedTreeMap0.putIfAbsent("zJg>&", "zJg>&");
      linkedTreeMap0.toString();
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>();
      linkedTreeMap1.keySet();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      assertNotNull(linkedTreeMap_Node1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>(comparator0);
      linkedTreeMap0.entrySet();
      Map.Entry<String, Object> map_Entry0 = null;
      linkedTreeMap0.entrySet();
      boolean boolean0 = true;
      int int0 = 2329;
      Integer integer0 = new Integer(2329);
      Integer.toUnsignedString(2329);
      // Undeclared exception!
      try { 
        linkedTreeMap0.putIfAbsent((Object) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, String>(linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.last();
      String string0 = linkedTreeMap_Node2.setValue("0B=w4a8'");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>((Comparator<? super Object>) null);
      linkedTreeMap0.modCount = 4;
      linkedTreeMap0.remove((Object) null);
      linkedTreeMap0.containsKey((Object) null);
      // Undeclared exception!
      try { 
        linkedTreeMap0.find((Object) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      assertNotNull(linkedTreeMap_Node1);
      
      String string0 = linkedTreeMap_Node1.toString();
      assertEquals("null=null", string0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>();
      linkedTreeMap1.clear();
      assertEquals(0, linkedTreeMap1.size());
      
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(linkedTreeMap_Node0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      boolean boolean1 = linkedTreeMap_EntrySet1.contains(linkedTreeMap_EntrySet0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      boolean boolean0 = linkedTreeMap0.containsKey(object0);
      assertFalse(boolean0);
      
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      int int0 = linkedTreeMap_KeySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator1);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap0.clear();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedTreeMap_KeySet0.retainAll(linkedList0);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      linkedTreeMap0.removeInternalByKey((Object) null);
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal((LinkedTreeMap.Node<Object, Object>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, String>(linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.last();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node3 = linkedTreeMap_Node2.first();
      linkedTreeMap0.findByEntry(linkedTreeMap_Node3);
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal((LinkedTreeMap.Node<Object, Object>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>(comparator0);
      linkedTreeMap0.replace("", "");
      linkedTreeMap0.clear();
      linkedTreeMap0.putIfAbsent("zJg>&", "zJg>&");
      linkedTreeMap0.toString();
      assertEquals(1, linkedTreeMap0.size());
      
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>();
      assertEquals(0, linkedTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(any() , any());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      Integer integer0 = new Integer(1539);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      Function<Object, Object> function1 = unaryOperator0.compose((Function<? super Object, ?>) function0);
      Function<Object, Object> function2 = function1.andThen((Function<? super Object, ?>) unaryOperator0);
      linkedTreeMap0.computeIfAbsent(integer0, function2);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet0.contains(linkedTreeMap0);
      assertEquals(1, linkedTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-945)).when(comparator0).compare(any() , any());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      Integer integer0 = new Integer(1539);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      Function<Object, Object> function1 = unaryOperator0.compose((Function<? super Object, ?>) function0);
      Function<Object, Object> function2 = function1.andThen((Function<? super Object, ?>) unaryOperator0);
      Object object0 = linkedTreeMap0.computeIfAbsent(integer0, function2);
      Integer.max(1539, (-945));
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet1.remove(object0);
      assertEquals(1, linkedTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Integer>();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      assertNotNull(linkedTreeMap_Node1);
      
      boolean boolean0 = linkedTreeMap_Node1.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      linkedTreeMap_Node1.getValue();
      Object object0 = linkedTreeMap_Node1.setValue("<?~h{b\";lP/r");
      assertNull(object0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      Object object1 = new Object();
      linkedTreeMap0.remove((Object) null, object1);
      linkedTreeMap0.root = linkedTreeMap_Node1;
      Object object2 = linkedTreeMap0.get("<?~h{b\";lP/r");
      assertNull(object2);
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>();
      LinkedTreeMap<String, Integer> linkedTreeMap2 = new LinkedTreeMap<String, Integer>();
      Integer integer0 = new Integer(787);
      Integer.getInteger("`>K4246}XBrqM", integer0);
      Integer integer1 = new Integer((-814));
      linkedTreeMap1.get((Object) null);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Object>();
      boolean boolean0 = linkedTreeMap_Node2.equals(linkedTreeMap0.root);
      assertFalse(boolean0);
      
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      int int0 = linkedTreeMap_KeySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      linkedTreeMap_Node1.first();
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      Integer integer0 = new Integer((-1179));
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node2 = linkedTreeMap0.find(integer0, true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet0.remove(linkedTreeMap_Node2);
      assertEquals(0, linkedTreeMap_KeySet0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      Object object0 = new Object();
      Integer integer0 = Integer.valueOf(59);
      linkedTreeMap0.put("", integer0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      Map.Entry.comparingByKey();
      Object object1 = linkedTreeMap_Node0.key;
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      linkedTreeMap_EntrySet0.contains(linkedTreeMap_Node1);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList1.poll();
      linkedList2.spliterator();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Object>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedList3.poll();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Object, Object>();
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1, (-14)).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      Object object0 = new Object();
      Integer integer0 = Integer.valueOf(1);
      linkedTreeMap0.put("=", integer0);
      linkedTreeMap0.find("=", true);
      linkedTreeMap0.find("=", true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      assertEquals(3, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>(comparator0);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      linkedTreeMap_Node0.toString();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      String string0 = "";
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node2, "", linkedTreeMap_Node1, linkedTreeMap_Node2);
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal(linkedTreeMap_Node3, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap_Node0.parent = linkedTreeMap_Node1;
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = linkedTreeMap_Node0.last();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Object, Object>();
      Object object0 = linkedTreeMap_Node3.key;
      linkedTreeMap_Node0.left = linkedTreeMap_Node2;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.pollFirst();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>(comparator1);
      linkedTreeMap0.keySet();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.remove(linkedTreeMap_Node0.left);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      linkedTreeMap0.keySet();
      LinkedTreeMap<String, String> linkedTreeMap1 = new LinkedTreeMap<String, String>((Comparator<? super String>) null);
      linkedTreeMap1.values();
      // Undeclared exception!
      try { 
        linkedTreeMap1.removeInternal(linkedTreeMap_Node0.left, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node1, "0^FF@", linkedTreeMap_Node0, linkedTreeMap_Node1);
      linkedTreeMap_Node2.last();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      linkedTreeMap0.find("0^FF@", false);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>(comparator1);
      linkedTreeMap1.put(linkedTreeMap_Node0, linkedTreeMap_Node1);
      linkedTreeMap1.remove((Object) linkedTreeMap0);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Object, String>();
      // Undeclared exception!
      try { 
        Map.Entry.comparingByKey((Comparator<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap_Node0.parent = linkedTreeMap_Node1;
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = linkedTreeMap_Node0.last();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator1);
      linkedTreeMap_Node0.parent = linkedTreeMap_Node1;
      linkedTreeMap_Node0.left = linkedTreeMap_Node2;
      linkedTreeMap0.find("*[g~/N ", true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Integer, String>();
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node4 = linkedTreeMap_Node3.parent;
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node5 = new LinkedTreeMap.Node<String, String>();
      // Undeclared exception!
      linkedTreeMap_Node0.left.first();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedTreeMap.Node<Integer, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Integer>();
      Integer integer0 = new Integer(10);
      LinkedTreeMap.Node<Integer, Integer> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Integer, Integer>(linkedTreeMap_Node0, integer0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      LinkedTreeMap.Node<Integer, Integer> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      LinkedTreeMap.Node<Integer, Integer> linkedTreeMap_Node3 = linkedTreeMap_Node2.last();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node4 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node5 = linkedTreeMap_Node4.prev;
      linkedTreeMap_Node3.equals(linkedTreeMap_Node5);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node6 = new LinkedTreeMap.Node<Object, String>();
      Object object0 = linkedTreeMap_Node6.key;
      String string0 = "d&aGRP8S6Iqw>";
      // Undeclared exception!
      try { 
        linkedTreeMap0.put((Object) null, "d&aGRP8S6Iqw>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedTreeMap<Integer, Integer> linkedTreeMap0 = new LinkedTreeMap<Integer, Integer>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>(comparator0);
      linkedTreeMap1.keySet();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap_Node0.getValue();
      linkedTreeMap1.keySet();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, String> linkedTreeMap2 = new LinkedTreeMap<Object, String>(comparator1);
      Comparator<Object> comparator2 = null;
      linkedTreeMap2.removeInternalByKey("^@k6Xd`T#E%\u0003\"");
      // Undeclared exception!
      try { 
        linkedTreeMap2.removeInternal((LinkedTreeMap.Node<Object, String>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Object>();
      Object object0 = new Object();
      linkedTreeMap0.put("q\"", object0);
      linkedTreeMap_Node0.left = linkedTreeMap_Node0;
      linkedTreeMap0.find("*[g~/N ", true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.iterator();
      assertEquals(2, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      linkedTreeMap_Node1.getValue();
      Object object0 = linkedTreeMap_Node1.setValue("GF<?~h{b\";lP/r");
      assertNull(object0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>(comparator0);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = linkedTreeMap0.header;
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>();
      linkedTreeMap1.findByObject("");
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap1.new KeySet();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.toArray();
      boolean boolean0 = linkedTreeMap_KeySet0.retainAll(linkedList0);
      linkedTreeMap_KeySet0.iterator();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap2 = new LinkedTreeMap<Object, Object>(comparator1);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      String string0 = linkedTreeMap_Node2.toString();
      assertEquals("null=null", string0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedTreeMap_Node0);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = linkedTreeMap_Node2.last();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>("null=null", (Object) null);
      boolean boolean1 = linkedTreeMap_Node3.equals(abstractMap_SimpleImmutableEntry0);
      assertEquals(0, linkedTreeMap0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = linkedTreeMap_Node0.last();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(39).when(comparator1).compare(anyString() , anyString());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator1);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node4 = new LinkedTreeMap.Node<Object, Object>();
      linkedTreeMap_Node3.right = linkedTreeMap_Node4;
      Object object0 = linkedTreeMap_Node3.key;
      linkedTreeMap0.put("", (Object) null);
      linkedTreeMap_Node0.left = linkedTreeMap_Node2;
      linkedTreeMap0.find("*[g~/N ", true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node5 = new LinkedTreeMap.Node<Object, Object>();
      linkedTreeMap_EntrySet0.contains(linkedTreeMap_Node5);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedTreeMap_KeySet0.retainAll(linkedList0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      Object object0 = new Object();
      Integer integer0 = Integer.valueOf(1);
      linkedTreeMap0.put("=", integer0);
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, String>();
      Integer integer1 = new Integer(1);
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Integer, String>(linkedTreeMap_Node0, integer1, linkedTreeMap_Node0, linkedTreeMap_Node0);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(linkedTreeMap_Node1);
      linkedTreeMap0.findByEntry(abstractMap_SimpleEntry0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node2 = linkedTreeMap0.find("=", true);
      linkedTreeMap0.find("=", true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedTreeMap_Node2);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      linkedTreeMap_EntrySet0.removeIf(predicate2);
      boolean boolean0 = linkedTreeMap_EntrySet0.contains(object0);
      assertEquals(0, linkedTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap_Node0.parent = linkedTreeMap_Node1;
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Object>();
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.clear();
      linkedList0.toArray();
      linkedTreeMap_Node1.setValue("}Rg");
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>();
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>(comparator3);
      assertEquals(0, linkedTreeMap1.size());
      
      linkedTreeMap1.size = 1;
      linkedTreeMap_Node1.equals(linkedTreeMap_Node2);
      LinkedTreeMap<String, String> linkedTreeMap2 = new LinkedTreeMap<String, String>();
      linkedTreeMap2.removeInternal(linkedTreeMap_Node0.parent, true);
      assertEquals((-1), linkedTreeMap2.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-8), (-8), (-8)).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      String string0 = "";
      Object object0 = new Object();
      Integer integer0 = new Integer((-8));
      linkedTreeMap0.put("", integer0);
      linkedTreeMap0.find("*", true);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.find("*", true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, true);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Integer.remainderUnsigned((-8), (-8));
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>();
      LinkedTreeMap<Object, String> linkedTreeMap2 = new LinkedTreeMap<Object, String>();
      // Undeclared exception!
      try { 
        linkedTreeMap1.find(linkedTreeMap2, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedTreeMap is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-8)).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      String string0 = "S";
      Object object0 = new Object();
      boolean boolean0 = true;
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.find("*", true);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = linkedTreeMap0.find("*", true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap0.removeInternal(linkedTreeMap_Node1, true);
      Integer.remainderUnsigned((-8), (-8));
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>();
      LinkedTreeMap<Object, String> linkedTreeMap2 = new LinkedTreeMap<Object, String>();
      linkedTreeMap2.findByEntry(linkedTreeMap_Node0);
      // Undeclared exception!
      try { 
        linkedTreeMap1.find(linkedTreeMap2, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedTreeMap is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-2)).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      Object object0 = new Object();
      Integer integer0 = Integer.valueOf(59);
      linkedTreeMap0.put("", integer0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.find("*", true);
      linkedTreeMap0.find("*", true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(linkedTreeMap_Node0);
      // Undeclared exception!
      try { 
        linkedTreeMap_KeySet0.add(abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      linkedTreeMap_Node0.last();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-17), 80).when(comparator1).compare(anyString() , anyString());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator1);
      Object object0 = new Object();
      linkedTreeMap0.put("", object0);
      linkedTreeMap0.find("*[g~/N ", true);
      linkedTreeMap0.find("", true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.poll();
      linkedTreeMap_KeySet0.retainAll(linkedTreeMap_EntrySet0);
      Integer integer0 = new Integer(80);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>((Object) null, integer0);
      // Undeclared exception!
      try { 
        linkedTreeMap_EntrySet0.add(abstractMap_SimpleEntry0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator1);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Object>();
      Object object0 = new Object();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node2 = linkedTreeMap0.find((String) null, true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedList1.toArray();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Object, Object>();
      Map.Entry.comparingByKey();
      Object object1 = linkedTreeMap_Node3.key;
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList2.poll();
      Object object2 = new Object();
      linkedTreeMap_KeySet0.retainAll(linkedList1);
      Integer.getInteger((String) null, (Integer) null);
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>((Comparator<? super Object>) null);
      linkedTreeMap0.findByEntry(linkedTreeMap_Node2);
      LinkedTreeMap<Integer, Integer> linkedTreeMap2 = new LinkedTreeMap<Integer, Integer>((Comparator<? super Integer>) null);
      LinkedTreeMap<Integer, String> linkedTreeMap3 = new LinkedTreeMap<Integer, String>();
      // Undeclared exception!
      try { 
        linkedTreeMap3.put((Integer) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      linkedTreeMap0.find("*[~/N ", true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      UnaryOperator.identity();
      linkedList0.toArray();
      linkedTreeMap0.find("*[~/N ", true);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = linkedTreeMap0.find("*[~/N ", true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap0.new KeySet();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Object>();
      Map.Entry.comparingByKey();
      Object object0 = linkedTreeMap_Node2.key;
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(linkedTreeMap_Node1);
      linkedTreeMap_EntrySet1.contains(abstractMap_SimpleImmutableEntry0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedList2.poll();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Object, Object>();
      Object object1 = new Object();
      linkedTreeMap_KeySet1.retainAll(linkedTreeMap_EntrySet1);
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>(comparator0);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node4 = new LinkedTreeMap.Node<Object, String>();
      linkedTreeMap_Node4.last();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node5 = linkedTreeMap_Node3.first();
      assertNotNull(linkedTreeMap_Node5);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      Object object0 = new Object();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.find("*", true);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = linkedTreeMap0.find("*", true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      Integer.remainderUnsigned(1, 1);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Object>();
      Map.Entry.comparingByKey();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node3 = new LinkedTreeMap.Node<String, Object>(linkedTreeMap_Node1, "ZB%/", linkedTreeMap_Node0, linkedTreeMap_Node1);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap0.new KeySet();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Object object1 = linkedTreeMap_Node2.key;
      linkedTreeMap0.findByEntry(linkedTreeMap_Node1);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        linkedTreeMap_KeySet0.retainAll(linkedList0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      linkedTreeMap_Node0.last();
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-17)).when(comparator2).compare(anyString() , anyString());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator2);
      Object object0 = new Object();
      linkedTreeMap0.put("DkHt5ry8$qzHx%\"^a_", object0);
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, Object> linkedTreeMap1 = new LinkedTreeMap<Integer, Object>(comparator3);
      linkedTreeMap1.keySet();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap1.new KeySet();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Integer, Object>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedTreeMap_KeySet0, comparator1);
      Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Object>) comparator4);
      linkedTreeMap_EntrySet0.remove(abstractMap_SimpleEntry0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet1.contains((Object) null);
      assertEquals(1, linkedTreeMap0.size());
      
      Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, Object> linkedTreeMap2 = new LinkedTreeMap<Integer, Object>(comparator5);
      int int0 = linkedTreeMap_KeySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Integer.valueOf(59);
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      Object object1 = new Object();
      linkedTreeMap0.put("", object1);
      boolean boolean0 = true;
      String string0 = "*";
      // Undeclared exception!
      try { 
        linkedTreeMap0.find((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-8), (-8), (-8), (-8), (-8)).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      Object object0 = new Object();
      Integer integer0 = new Integer((-8));
      linkedTreeMap0.put("", integer0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.find("*", true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Object>();
      Comparator<Map.Entry<String, Object>> comparator1 = Map.Entry.comparingByKey();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>((Object) null, linkedTreeMap_KeySet0);
      Object object1 = new Object();
      comparator1.reversed();
      linkedTreeMap0.put("", integer0);
      linkedTreeMap0.find("*", true);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, Object>(linkedTreeMap_Node0, "*", linkedTreeMap_Node0, linkedTreeMap_Node0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      Object object2 = new Object();
      linkedList0.add(object2);
      // Undeclared exception!
      try { 
        linkedTreeMap_KeySet0.retainAll(linkedTreeMap_EntrySet1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      linkedTreeMap_Node0.right = linkedTreeMap_Node1;
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap_Node0.parent = linkedTreeMap_Node2;
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      // Undeclared exception!
      linkedTreeMap_Node0.last();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1, 359, 1, 359).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      Object object0 = new Object();
      Integer integer0 = Integer.valueOf(1);
      linkedTreeMap0.put("=", integer0);
      linkedTreeMap0.find("=", true);
      linkedTreeMap0.find("=", true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Integer.remainderUnsigned(359, 359);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      Map.Entry.comparingByKey();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>((Object) null, linkedTreeMap_KeySet0);
      Object object1 = new Object();
      linkedTreeMap0.put("=", integer0);
      linkedTreeMap0.find("=", true);
      linkedTreeMap0.find("=", true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap0.new KeySet();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Object>();
      Object object2 = new Object();
      Object object3 = new Object();
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(object3, integer0);
      // Undeclared exception!
      try { 
        linkedTreeMap_EntrySet1.add(abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-8), (-8), (-8), (-8), (-8)).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      Object object0 = new Object();
      Integer integer0 = new Integer((-8));
      linkedTreeMap0.put("", integer0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.find("*", true);
      linkedTreeMap0.find("*", true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      Integer.remainderUnsigned((-8), (-8));
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Object>();
      Comparator<Map.Entry<String, Object>> comparator1 = Map.Entry.comparingByKey();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      comparator1.thenComparingLong(toLongFunction0);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>("", linkedTreeMap_KeySet0);
      Object object1 = new Object();
      comparator1.reversed();
      Object object2 = new Object();
      linkedTreeMap0.find("*", true);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node2 = linkedTreeMap0.root;
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap0.new KeySet();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedTreeMap<String, String> linkedTreeMap1 = new LinkedTreeMap<String, String>(comparator2);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap1.new EntrySet();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Object, Integer>();
      linkedTreeMap_Node3.getValue();
      linkedTreeMap_Node0.getKey();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap1.new EntrySet();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet2 = linkedTreeMap1.new KeySet();
      linkedTreeMap_KeySet2.retainAll(linkedTreeMap_EntrySet1);
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, false);
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node4 = new LinkedTreeMap.Node<Integer, String>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet2 = linkedTreeMap1.new EntrySet();
      linkedTreeMap_EntrySet2.contains(linkedTreeMap_KeySet2);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node5 = new LinkedTreeMap.Node<Object, Object>();
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap2 = new LinkedTreeMap<String, Object>();
      Object object3 = new Object();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-35), (-35), (-35), (-35), (-35)).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      Object object0 = new Object();
      Integer integer0 = new Integer((-35));
      linkedTreeMap0.put("", integer0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.find("", true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Comparator<Map.Entry<String, Object>> comparator1 = Map.Entry.comparingByKey();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>((Object) null, linkedTreeMap_KeySet0);
      Object object1 = new Object();
      linkedTreeMap0.removeInternalByKey(integer0);
      comparator1.reversed();
      linkedTreeMap0.put("", integer0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = linkedTreeMap0.find("", true);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node2 = linkedTreeMap0.find("", true);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>();
      linkedList0.add((Object) linkedTreeMap1);
      Object object2 = new Object();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node3 = new LinkedTreeMap.Node<String, Object>(linkedTreeMap_Node1, "", linkedTreeMap_Node2, linkedTreeMap_Node0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap0.new KeySet();
      Object object3 = new Object();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        linkedTreeMap_KeySet1.retainAll(linkedList0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(30, 30, 30, 30, 30).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      Object object0 = new Object();
      Integer integer0 = new Integer(30);
      linkedTreeMap0.put("", integer0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.find("", true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Comparator<Map.Entry<String, Object>> comparator1 = Map.Entry.comparingByKey();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>((Object) null, linkedTreeMap_KeySet0);
      Object object1 = new Object();
      linkedTreeMap0.removeInternalByKey(integer0);
      comparator1.reversed();
      linkedTreeMap0.put("", integer0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = linkedTreeMap0.find("", true);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node2 = linkedTreeMap0.find("", true);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      Object object2 = new Object();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node3 = new LinkedTreeMap.Node<String, Object>(linkedTreeMap_Node1, "", linkedTreeMap_Node2, linkedTreeMap_Node0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap0.new KeySet();
      Object object3 = new Object();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        linkedTreeMap_KeySet1.retainAll(linkedList0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
