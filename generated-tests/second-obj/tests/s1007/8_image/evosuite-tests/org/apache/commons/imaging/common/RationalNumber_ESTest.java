/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:26:12 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      float float0 = rationalNumber0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(0L, long0);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      rationalNumber0.floatValue();
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertEquals(2.14748365E9F, rationalNumber1.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, rationalNumber1.numerator);
      assertEquals((short)1, rationalNumber0.shortValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      String string0 = rationalNumber0.toString();
      assertEquals("-2,147,483,647", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-710.0));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-710", string0);
      assertEquals((-710.0), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2375.5);
      assertEquals(4751, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(5.447491844279284E-7);
      rationalNumber0.toDisplayString();
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0", string0);
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf((-476.0050035492604));
      rationalNumber0.doubleValue();
      RationalNumber rationalNumber2 = RationalNumber.valueOf(5.447492437518624E-7);
      rationalNumber2.toString();
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(1835707, 1835707);
      String string1 = rationalNumber3.toDisplayString();
      assertEquals("1", string1);
      
      String string2 = rationalNumber2.toString();
      assertEquals("1/1835707 (0)", string2);
      
      String string3 = rationalNumber1.toString();
      assertEquals((-476.009900990099), rationalNumber1.doubleValue(), 0.01);
      assertEquals("-48077/101 (-476.01)", string3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(2300, 2300);
      RationalNumber rationalNumber1 = RationalNumber.valueOf(1407.3333333333333);
      assertEquals(4222, rationalNumber1.numerator);
      
      RationalNumber rationalNumber2 = rationalNumber0.negate();
      assertEquals((-1.0), rationalNumber2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(4097.166666666667);
      assertEquals(24583, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-835L), 0L);
      // Undeclared exception!
      try { 
        rationalNumber0.longValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(3701, 64);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("57.828", string0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(57L, long0);
      
      String string1 = rationalNumber0.toString();
      assertEquals("3701/64 (57.828)", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1), (-1));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(1, int0);
      assertEquals((-1), rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.304527697560843E-7);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      double double0 = rationalNumber1.doubleValue();
      assertEquals((-2.3045276594018735E-7), double0, 0.01);
      assertEquals(2.3045277E-7F, rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(3700, 0);
      rationalNumber0.negate();
      rationalNumber0.toString();
      rationalNumber0.doubleValue();
      // Undeclared exception!
      try { 
        rationalNumber0.toDisplayString();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      assertEquals(2.147483647E9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      int int0 = rationalNumber0.intValue();
      assertEquals(1.0E-8, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, int0);
      assertEquals(100000000, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-973L), (-2147483693L));
      assertEquals(4.535541E-7F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1073741847, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(2147483607, 2147483607);
      RationalNumber rationalNumber1 = new RationalNumber(2147483607, 2147483607);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
      
      RationalNumber rationalNumber2 = rationalNumber0.negate();
      rationalNumber2.negate();
      assertEquals((-1.0), rationalNumber2.doubleValue(), 0.01);
      
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod((-1L), 2147483667L);
      rationalNumber0.doubleValue();
      RationalNumber.factoryMethod(1L, 2147483607);
      String string1 = rationalNumber3.toString();
      assertEquals("1/2147483629 (0)", string1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(2147483638, 2147483638);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(2147483638, 2147483638);
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      RationalNumber rationalNumber3 = RationalNumber.valueOf(2.147483645415711E9);
      assertEquals(2147483645, rationalNumber3.numerator);
      
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod(2707L, (-950L));
      assertEquals((-2.849473684210526), rationalNumber4.doubleValue(), 0.01);
      
      String string0 = rationalNumber2.toString();
      assertEquals("-1", string0);
      
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod(2707, (-1));
      double double0 = rationalNumber5.doubleValue();
      assertEquals((-2707.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483680L), 17L);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-950L), 410L);
      assertEquals((-2.317073170731707), rationalNumber1.doubleValue(), 0.01);
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-134217730", string0);
      
      String string1 = rationalNumber0.toString();
      assertEquals("-134,217,730", string1);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-1.3421773E8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-21.553420426570746));
      RationalNumber.valueOf((-570907));
      RationalNumber rationalNumber1 = RationalNumber.valueOf((-184.953943550192));
      rationalNumber1.negate();
      rationalNumber0.toString();
      RationalNumber.factoryMethod((-2147483693L), (-1L));
      rationalNumber0.toDisplayString();
      rationalNumber0.negate();
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483693L), 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483693, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }
}
