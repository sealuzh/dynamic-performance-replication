/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:45:19 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.SyncFailedException;
import java.io.Writer;
import java.sql.JDBCType;
import java.util.List;
import java.util.Locale;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.Page;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.data.DataFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.CurrentDatetimeOperatorNode;
import org.apache.derby.impl.store.access.btree.BTree;
import org.apache.derby.impl.store.raw.RawStore;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.databene.commons.bean.UntypedPropertyMutator;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBBlob;
import org.firebirdsql.jdbc.FBClob;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.value.ValueNull;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-2517), " NULL");
      Integer integer0 = RawTransaction.COMMIT;
      Integer.remainderUnsigned(4, (-2517));
      Integer.toUnsignedString(4);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        DBDataType.jdbcTypeFor((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.isDML("[~l8wG~,b(");
      Integer integer0 = RawTransaction.ABORT;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RawStoreFactory.PATCH_INITPAGE_RECOVER_ERROR;
      String string1 = SQLUtil.normalize("derby.storage.patchInitPageRecoverError", true);
      assertEquals("derby.storage.patchInitPageRecoverError", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.normalize("ng#f:K{M%Wn", false);
      Boolean boolean0 = Boolean.TRUE;
      Boolean.getBoolean("ng # f : K { M % Wn");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = FBBlob.SEGMENTED;
      SQLUtil.parseColumnTypeAndSize("K_/\"KZJ");
      String string0 = SQLUtil.normalize("K_/\"KZJ", false);
      assertEquals("K_ / \"KZJ\"", string0);
      
      Boolean boolean1 = SQLUtil.mutatesStructure("MS*7X)?mqAo1,x\"");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.isQuery("alter ");
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(" join ");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.mutatesStructure(" join ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = SQLUtil.innerJoin("", stringArray0, "", "", stringArray0);
      assertEquals(" as  on . = .", string0);
      
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.innerJoin(stringArray0[0], stringArray0, "EiWPJ(F", "EiWPJ(F", stringArray0);
      assertEquals("EiWPJ(F as EiWPJ(F on null.null = EiWPJ(F.null and null.null = EiWPJ(F.null and null.null = EiWPJ(F.null and null.null = EiWPJ(F.null and null.null = EiWPJ(F.null and null.null = EiWPJ(F.null and null.null = EiWPJ(F.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized view");
      defaultDBTable0.getIndex("EiWPJ(F");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncate");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[3];
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DBPackage dBPackage0 = new DBPackage("8g'Rb$nj", (DBSchema) null);
      dBPackage0.setDoc("8g'Rb$nj");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "p=D(cgzE.Hb:/0";
      stringArray0[1] = "p=D(cgzE.Hb:/0";
      stringArray0[2] = "p=D(cgzE.Hb:/0";
      stringArray0[3] = "p=D(cgzE.Hb:/0";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("p=D(cgzE.Hb:/0", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (p=D(cgzE.Hb:/0, p=D(cgzE.Hb:/0, p=D(cgzE.Hb:/0, p=D(cgzE.Hb:/0) REFERENCES null(p=D(cgzE.Hb:/0, p=D(cgzE.Hb:/0, p=D(cgzE.Hb:/0, p=D(cgzE.Hb:/0)", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("alter table");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter mater");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter mater", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"alter mater\" UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("alter table");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter mater");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter mater", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"alter mater\" UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.removeComments("constraint");
      boolean boolean0 = SQLUtil.isDDL(";qgF&x]|8% IG7");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("", stringBuilder0);
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) stringArray0[2], 0, 0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Q/(-v^b!";
      stringArray0[1] = "Q/(-v^b!";
      stringArray0[2] = "Q/(-v^b!";
      stringArray0[3] = "Q/(-v^b!";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Q/(-v^b!", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setOwner(defaultDBTable0);
      String string0 = SQLUtil.leftJoin("Q/(-v^b!", stringArray0, "PmeC9~,:TZ78#Lo6", "Q/(-v^b!", stringArray0);
      assertEquals("left join PmeC9~,:TZ78#Lo6 as Q/(-v^b! on Q/(-v^b!.Q/(-v^b! = Q/(-v^b!.Q/(-v^b! and Q/(-v^b!.Q/(-v^b! = Q/(-v^b!.Q/(-v^b! and Q/(-v^b!.Q/(-v^b! = Q/(-v^b!.Q/(-v^b! and Q/(-v^b!.Q/(-v^b! = Q/(-v^b!.Q/(-v^b!", string0);
      
      String string1 = SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      assertEquals("null.Q/(-v^b!", string1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{qPBr;|*UJ>";
      stringArray0[1] = "{qPBr;|*UJ>";
      stringArray0[2] = "";
      SQLUtil.join("", "{qPBr;|*UJ>", stringArray0, "", "{qPBr;|*UJ>", stringArray0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("Y7*j[Y4':wuelfB", false, "NCLOB", "NCLOB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = Dependable.STORED_PREPARED_STATEMENT;
      SQLUtil.normalize("l=3I'@O|)", false);
      String string1 = RawStore.TEST_REENCRYPT_CRASH_BEFORE_RECOVERY_FINAL_CLEANUP;
      SQLUtil.isDML("l = 3I '@O|)'");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Q/(-v^b!";
      stringArray0[1] = "Q/(-v^b!";
      stringArray0[2] = "Q/(-v^b!";
      stringArray0[3] = "Q/(-v^b!";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Q/(-v^b!", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_NULL;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      dBForeignKeyConstraint0.setOwner(defaultDBTable0);
      SQLUtil.leftJoin("Q/(-v^b!", stringArray0, "PmeC9~,:TZ78#Lo6", "Q/(-v^b!", stringArray0);
      SQLUtil.typeAndName(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT Q/(-v^b! ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = RawStoreFactory.CONTAINER_INITIAL_PAGES;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "alter materialized viewe?c";
      stringArray0[1] = "derby.storage.initialPages";
      String string1 = SQLUtil.normalize("l=3IF-@O&)9", true);
      assertEquals("l = 3IF - @ O &) 9", string1);
      
      String string2 = BTree.PROPERTY_PARENTLINKS;
      boolean boolean0 = SQLUtil.isDML("l = 3IF - @ O &) 9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "p=D(cgzE.Hb:/0";
      stringArray0[1] = "p=D(cgzE.Hb:/0";
      stringArray0[2] = "p=D(cgzE.Hb:/0";
      stringArray0[3] = "p=D(cgzE.Hb:/0";
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("EXECUTE");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      dBForeignKeyConstraint0.setOwner(defaultDBTable0);
      String string0 = SQLUtil.typeAndName(dBForeignKeyConstraint0);
      assertEquals("foreign key constraint constraint", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBSchema dBSchema0 = new DBSchema("p)mkm1");
      DBPackage dBPackage0 = new DBPackage("}I7k>Lpk0\"SS=411", dBSchema0);
      dBSchema0.toString();
      List<DBTrigger> list0 = dBSchema0.getTriggers();
      DBProcedure dBProcedure0 = new DBProcedure("callv;f1p]h=hb67lt|ft", dBPackage0);
      SQLUtil.typeAndName(dBProcedure0);
      UntypedPropertyMutator untypedPropertyMutator0 = new UntypedPropertyMutator("callv;f1p]h=hb67lt|ft", true);
      untypedPropertyMutator0.setValue((Object) list0, (Object) "p)mkm1", false);
      SQLUtil.renderValue(untypedPropertyMutator0);
      SQLUtil.removeComments("org.databene.commons.bean.UntypedPropertyMutator@9");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "p)mkm1");
      SQLUtil.addOptionalCondition(", isDirectory=", stringBuilder0);
      assertEquals("p)mkm1 or , isDirectory=", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("getJdbcConnection(");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("getJdbcConnection(");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "getJdbcConnection(";
      stringArray0[1] = "getJdbcConnection(";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'", defaultDBTable0, 2238, "5m");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("5M", string0);
      
      boolean boolean1 = SQLUtil.isQuery("5m");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "vI+kzu60Vr`Qk/a.");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("vI+kzu60Vr`Qk/a.", stringBuilder0);
      SQLUtil.addRequiredCondition("select * from null whe", stringBuilder1);
      assertEquals("vI+kzu60Vr`Qk/a. and vI+kzu60Vr`Qk/a. and select * from null whe", stringBuilder1.toString());
      assertEquals("vI+kzu60Vr`Qk/a. and vI+kzu60Vr`Qk/a. and select * from null whe", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("create unique index");
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[5];
      stringArray0[1] = stringArray0[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[1], false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      SQLUtil.addOptionalCondition(stringArray0[1], stringBuilder0);
      StringBuilder stringBuilder1 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure(stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = BTree.PROPERTY_PARENTLINKS;
      StringReader stringReader0 = new StringReader("alter materialized viewe?c");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SQLUtil.normalize("alter session", true);
      String string1 = DataFactory.DB_EX_LOCKFILE_NAME;
      SQLUtil.mutatesDataOrStructure("calljoin");
      ValueNull valueNull0 = ValueNull.INSTANCE;
      Boolean.getBoolean("alter materialized viewe?c");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("Z`NpIIQ n");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "alter materialized viewe?c";
      String string1 = FBConnectionProperties.SQL_DIALECT_PROPERTY;
      String[] stringArray0 = new String[21];
      stringArray0[0] = "sqlDialect";
      stringArray0[1] = "sqlDialect";
      DBDataType.getInstance((-234305861), "_UMzH?+");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(mockFileReader0);
      SQLUtil.normalize("7~AUcjKO('*T", true);
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = Dependable.STORED_PREPARED_STATEMENT;
      SQLUtil.normalize("l=3I'@O|)", false);
      String string1 = RawStore.TEST_REENCRYPT_CRASH_BEFORE_RECOVERY_FINAL_CLEANUP;
      SQLUtil.isDML("l = 3I '@O|)'");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = SQLUtil.normalize("K_/\"KZqJ", true);
      assertEquals("K_ / \"KZqJ\"", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0.6/\u0002}s2W";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("0.6/\u0002}s2W", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      dBForeignKeyConstraint1.setOwner(defaultDBTable0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "G%>-yo{E2|~", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT G%>-yo{E2|~ ", stringBuilder0.toString());
      
      DBUniqueConstraint dBUniqueConstraint0 = defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec1);
      assertEquals("PRIMARY KEY (0.6/\u0002}s2W, )", string1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.removeComments("alter materialized viewe?c");
      String[] stringArray0 = new String[21];
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(stringArray0[1]);
      Integer integer0 = RawTransaction.COMMIT;
      String string0 = FBConnectionProperties.SQL_DIALECT_PROPERTY;
      String string1 = SQLUtil.renderColumnListWithTableName("alter materialized viewe?c", stringArray0);
      assertEquals("alter materialized viewe?c.null, alter materialized viewe?c.null, alter materialized viewe?c.null, alter materialized viewe?c.null, alter materialized viewe?c.null, alter materialized viewe?c.null, alter materialized viewe?c.null, alter materialized viewe?c.null, alter materialized viewe?c.null, alter materialized viewe?c.null, alter materialized viewe?c.null, alter materialized viewe?c.null, alter materialized viewe?c.null, alter materialized viewe?c.null, alter materialized viewe?c.null, alter materialized viewe?c.null, alter materialized viewe?c.null, alter materialized viewe?c.null, alter materialized viewe?c.null, alter materialized viewe?c.null, alter materialized viewe?c.null", string1);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alter materialized viewe?c", true, defaultDBTable0, "select ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string2 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"alter materialized viewe?c\" CHECK select ", string2);
      
      boolean boolean0 = SQLUtil.isQuery("CONSTRAINT \"alter materialized viewe?c\" CHECK select ");
      assertFalse(boolean0);
      
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      String string3 = RawStoreFactory.PATCH_INITPAGE_RECOVER_ERROR;
      String string4 = SQLUtil.normalize("execalter materialized viewe?c", false);
      assertEquals("execalter materialized viewe ? c", string4);
      
      DBDataType dBDataType0 = DBDataType.getInstance(1785, "alter materialized viewe?c");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized viewe?c", defaultDBTable0, dBDataType0, integer0);
      String string5 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("ALTER MATERIALIZED VIEWE?C(0)", string5);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      DBDataType dBDataType0 = DBDataType.getInstance((-2598), "8U7$");
      Integer.remainderUnsigned((-2598), (-2598));
      dBDataType0.isNumber();
      dBDataType0.isNumber();
      String string0 = FBConnectionProperties.SQL_DIALECT_PROPERTY;
      SQLUtil.renderColumnListWithTableName("select", stringArray0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("wa;L{zI2VVe%WANZg", false, stringArray0[1], "select");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("B4(e%2Y;1UXd2/_", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setDefaultValue("CHECK select");
      defaultDBColumn0.getForeignKeyConstraint();
      String string1 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[1] = stringArray0[0];
      DBDataType.getInstance((-2598), "8U7$");
      int int0 = CurrentDatetimeOperatorNode.CURRENT_TIMESTAMP;
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      String string0 = FBConnectionProperties.SQL_DIALECT_PROPERTY;
      String string1 = SQLUtil.renderColumnListWithTableName("select", stringArray0);
      assertEquals("select.null, select.null, select.null, select.null, select.null, select.null, select.null", string1);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("wa;L{zI2VVe%WANZg", false, stringArray0[1], "select");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      String string3 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , , , )", string3);
      
      String string4 = SQLUtil.normalize("CHECK select", false);
      assertTrue(string4.equals((Object)string2));
      
      String string5 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT wa;L{zI2VVe%WANZg ", string5);
      
      String string6 = SQLUtil.substituteMarkers("delete", "select", "select");
      assertEquals("delete", string6);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      String string0 = TypeId.DATE_NAME;
      SQLUtil.isDDL("v;f1p]h=Hb67lT|fT");
      SQLUtil.normalize("R5~7q*/a", true);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "DATE";
      stringArray0[2] = "R5~7q*/a";
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("EXECUTE");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      dBForeignKeyConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES EXECUTE()", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "E?C";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("E?C", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      dBForeignKeyConstraint1.setOwner(defaultDBTable0);
      SQLUtil.isDDL("E?C");
      SQLUtil.normalize("xw*[d5![t@S$SKZ.t", false);
      DBCatalog dBCatalog0 = new DBCatalog("create unique indexv;f1p]h=hb67lt|ft");
      DBSchema dBSchema0 = new DBSchema("v;f1p]h=Hb67lT|fT");
      dBSchema0.getTables();
      dBCatalog0.getComponents();
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = dBSchema0.toString();
      assertEquals("v;f1p]h=Hb67lT|fT", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "E?C";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "E?C";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("E?C", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      dBForeignKeyConstraint1.setOwner(defaultDBTable0);
      String string1 = "create unique ndel";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create unique ndel", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      dBPrimaryKeyConstraint0.isIdentical(dBForeignKeyConstraint1);
      String string2 = Page.DIAG_BYTES_RESERVED;
      String string3 = "j;+\"";
      dBPrimaryKeyConstraint0.setDoc("j;+\"");
      DBDataType dBDataType0 = DBDataType.getInstance(32664, "E?C");
      JDBCType jDBCType0 = JDBCType.ROWID;
      Integer integer0 = jDBCType0.getVendorTypeNumber();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter table", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setDefaultValue("k0bIfB-{#z,@@");
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        DBDataType.jdbcTypeFor("alter table");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter sessiontruncate");
      SQLUtil.mutatesStructure("insertv;f1p]h=hb67lt|ft");
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("p=DcgzE.Hb:N/0");
      String[] stringArray0 = new String[5];
      stringArray0[2] = "p=DcgzE.Hb:N/0";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("p=DcgzE.Hb:N/0", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setOwner(defaultDBTable0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[1], true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      ErrorMessages errorMessages0 = new ErrorMessages();
      // Undeclared exception!
      try { 
        errorMessages0.getNCharacterStream(1000000000);
        fail("Expecting exception: AbstractMethodError");
      
      } catch(AbstractMethodError e) {
         //
         // Method org/apache/derby/diag/ErrorMessages.getNCharacterStream(I)Ljava/io/Reader; is abstract
         //
         verifyException("org.apache.derby.diag.ErrorMessages", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.mutatesDataOrStructure("SELECT * FROM null WHERE ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'0.6/\u0002}s2w'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append(',');
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("K_/'yqJ");
      String string0 = SQLUtil.normalize("K_/'yqJ", false);
      assertEquals("K_ / 'yqJ'", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringReader stringReader0 = new StringReader("OxCG*#+R.<`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string1 = FBConnectionProperties.USE_STREAM_BLOBS_PROPERTY;
      String string2 = SchemaDescriptor.STD_DECLARED_GLOBAL_TEMPORARY_TABLES_SCHEMA_NAME;
      TableContainer tableContainer0 = new TableContainer("SESSION");
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((byte[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rSb`x_6$FD.ft0");
      DBCatalog dBCatalog0 = new DBCatalog();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("OxCG*#+R.<`", (DBTable) null, (-1012), "callselect * from null where");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      String string3 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("OxCG*#+R.<`, OxCG*#+R.<`", string3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "E?C";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setOwner(defaultDBTable0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      ErrorMessages errorMessages0 = new ErrorMessages();
      // Undeclared exception!
      try { 
        errorMessages0.getNCharacterStream(1000000000);
        fail("Expecting exception: AbstractMethodError");
      
      } catch(AbstractMethodError e) {
         //
         // Method org/apache/derby/diag/ErrorMessages.getNCharacterStream(I)Ljava/io/Reader; is abstract
         //
         verifyException("org.apache.derby.diag.ErrorMessages", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Character character0 = Character.valueOf('!');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'!'", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.mutatesDataOrStructure("SELECT * FROM null WHERE null = null");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT * FROM null WHERE null = null", defaultDBTable0, (DBDataType) null, integer0, integer1);
      defaultDBTable0.addColumn(defaultDBColumn0);
      String string0 = Page.DIAG_BYTES_RESERVED;
      Boolean.valueOf("SELECT * FROM null WHERE null = null");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter tbeat line");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      Locale locale0 = Locale.CHINESE;
      mockPrintWriter0.printf(locale0, "Un#:FBjwx}b^Fg", (Object[]) stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.removeComments("org.apache.derby.iapi.services.daemon.DaemonFactory");
      String[] stringArray0 = new String[21];
      stringArray0[0] = "org.apache.derby.iapi.services.daemon.DaemonFactory";
      stringArray0[1] = "org.apache.derby.iapi.services.daemon.DaemonFactory";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer.remainderUnsigned(43, 466);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.iapi.services.daemon.DaemonFactory");
      Integer integer0 = RawTransaction.ABORT;
      DBDataType.getInstance(43, "org.apache.derby.iapi.services.daemon.DaemonFactory");
      String string0 = FBConnectionProperties.SQL_DIALECT_PROPERTY;
      SQLUtil.renderColumnListWithTableName("org.apache.derby.iapi.services.daemon.DaemonFactory", stringArray0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("org.apache.derby.iapi.services.daemon.DaemonFactory", false, defaultDBTable0, "select ");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_k;");
      Locale locale0 = Locale.FRANCE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("%bJ(m`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: %bJ(m`
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "execselect * from null where e?c = 'e?c' and e?c = 'e?c' and e?c = 'e?c' and e?c = 'e?c' and null = null";
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(mockFileReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.normalize("@,B%<RmoDV%", true);
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[15];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.renderColumnNames(stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(, , , , , , , , , , , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.renderColumnNames(stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "E?C";
      stringArray0[1] = "E?C";
      stringArray0[2] = "E?C";
      stringArray0[3] = "E?C";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      String string0 = LogToFile.TEST_MAX_LOGFILE_NUMBER;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "ms*", false, stringArray0);
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      defaultDBTable0.toString();
      NameSpec nameSpec1 = NameSpec.NEVER;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable1.getUniqueConstraint("SELECT * FROM null WHERE E?C = 'E?C' AND E?C = 'E?C' AND E?C = 'E?C' AND E?C = 'E?C' AND null = null AND null = null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("K_/\"KZqJ");
      SQLUtil.normalize("K_/\"KZqJ", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0.6/\u0002}s2W";
      stringArray0[1] = "K_/\"KZqJ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("0.6/\u0002}s2W", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      dBForeignKeyConstraint1.setOwner(defaultDBTable0);
      dBForeignKeyConstraint1.setOwner(defaultDBTable0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "G%>-yo{E2|~", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      FBClob fBClob0 = new FBClob();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("0.6/\u0002}s2W");
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("G%>-yo{E2|~");
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("[$/K7iM=>WhT/u", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, printWriter0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      mockPrintWriter0.println(731L);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndex("G`!{");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.mutatesStructure("SELECT * FROM null WHERE ");
      SQLUtil sQLUtil0 = new SQLUtil();
      DBSchema dBSchema0 = new DBSchema("0cxLX");
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("SELECT * FROM null WHERE ", compositeDBObject0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("G`!{");
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT * FROM null WHERE ", defaultDBTable0, (-1264), "SELECT * FROM null WHERE ");
      Integer integer0 = RawTransaction.ABORT;
      defaultDBColumn0.setNullable(false);
      defaultDBColumn0.setFractionDigits(integer0);
      SQLUtil.parseColumnTypeAndSize("Il0#q\"");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("drop indexua<ah\"o", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil.renderColumnNames(stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }
}
