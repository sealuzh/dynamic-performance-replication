/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 22:40:45 GMT 2018
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.serializer.StringCodec;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringCodec_ESTest extends StringCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StringCodec stringCodec0 = StringCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      stringCodec0.deserialze(defaultJSONParser0, (Type) class0, (Object) "^");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      StringCodec.deserialze(defaultJSONParser0);
      StringCodec stringCodec0 = new StringCodec();
      assertEquals(4, stringCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StringCodec stringCodec0 = new StringCodec();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~jHmh");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Class<StringBuilder> class0 = StringBuilder.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      // Undeclared exception!
      try { 
        stringCodec0.instance.deserialze(defaultJSONParser0, (Type) class1, (Object) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StringCodec stringCodec0 = new StringCodec();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~jHm");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Class<StringBuilder> class0 = StringBuilder.class;
      StringCodec stringCodec1 = StringCodec.instance;
      // Undeclared exception!
      try { 
        stringCodec1.deserialze(defaultJSONParser0, (Type) class0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StringCodec stringCodec0 = new StringCodec();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~9m");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("~9m");
      Class<StringBuilder> class0 = StringBuilder.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("~9m", hashMap0);
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      FieldInfo fieldInfo0 = new FieldInfo("fKoZDj2ZBKIKc7{*(", class0, class1, class0, (Field) null, 0, 1, 0);
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(fieldInfo0.name_chars, 0, parserConfig0, 0);
      String string0 = stringCodec0.deserialze(defaultJSONParser1, (Type) class0, (Object) parserConfig0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StringCodec stringCodec0 = new StringCodec();
      SerializeWriter serializeWriter0 = new SerializeWriter();
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Class<StringBuffer> class0 = StringBuffer.class;
      String[] stringArray0 = new String[14];
      stringArray0[0] = "<&fL-!3W?|\"k423U!";
      stringArray0[1] = "<&fL-!3W?|\"k423U!";
      stringArray0[2] = "<&fL-!3W?|\"k423U!";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      stringCodec0.instance.write(jSONSerializer0, (Object) "<&fL-!3W?|\"k423U!", (Object) jSONSerializer0, (Type) class1, 65);
      JSONSerializer jSONSerializer1 = new JSONSerializer(serializeWriter0);
      int int0 = stringCodec0.getFastMatchToken();
      assertEquals(4, int0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("<&fL-!3W?|\"k423U!", parserConfig0, 65);
      char[] charArray0 = new char[10];
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(charArray0, 0, parserConfig0, 2135);
      stringCodec0.deserialze(defaultJSONParser1, (Type) class1, (Object) stringArray0[3]);
      assertEquals(4, stringCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StringCodec stringCodec0 = new StringCodec();
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Class<StringBuffer> class0 = StringBuffer.class;
      String[] stringArray0 = new String[14];
      stringArray0[0] = "<&fL-!3W?|\"k423U!";
      stringArray0[1] = "<&fL-!3W?|\"k423U!";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      stringCodec0.instance.write(jSONSerializer0, (Object) "<&fL-!3W?|\"k423U!", (Object) jSONSerializer0, (Type) class1, 65);
      JSONSerializer jSONSerializer1 = new JSONSerializer();
      int int0 = stringCodec0.getFastMatchToken();
      assertEquals(4, int0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("<&fL-!3W?|\"k423U!", parserConfig0, 65);
      char[] charArray0 = new char[10];
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = '2';
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      stringCodec0.deserialze(defaultJSONParser1, (Type) class1, (Object) stringArray0[3]);
      assertEquals(4, stringCodec0.getFastMatchToken());
  }
}
