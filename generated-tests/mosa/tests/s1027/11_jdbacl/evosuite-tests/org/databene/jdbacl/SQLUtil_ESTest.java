/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 17:45:20 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.catalog.AliasInfo;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.store.access.btree.BTree;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("- 0", (String[]) null, "- 0", "- 0", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/$$m2%I2Ki~OSP>";
      String string0 = SQLUtil.innerJoin("Tm0F>r2i", stringArray0, "#3*lFbI/)", "/$$m2%I2Ki~OSP>", stringArray0);
      assertEquals("#3*lFbI/) as /$$m2%I2Ki~OSP> on Tm0F>r2i./$$m2%I2Ki~OSP> = /$$m2%I2Ki~OSP>./$$m2%I2Ki~OSP> and Tm0F>r2i.null = /$$m2%I2Ki~OSP>.null and Tm0F>r2i.null = /$$m2%I2Ki~OSP>.null and Tm0F>r2i.null = /$$m2%I2Ki~OSP>.null and Tm0F>r2i.null = /$$m2%I2Ki~OSP>.null and Tm0F>r2i.null = /$$m2%I2Ki~OSP>.null and Tm0F>r2i.null = /$$m2%I2Ki~OSP>.null", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
      
      Character character0 = Character.valueOf('^');
      String string1 = SQLUtil.renderValue(character0);
      assertEquals("'^'", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.mutatesStructure("*$ K");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("truncate/$$m2%i2ki~osp>", stringBuilder0);
      assertEquals("truncate/$$m2%i2ki~osp>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "w;z_g[0>";
      stringArray0[1] = "inner";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("w;z_g[0> = 'w;z_g[0>' AND inner = 'inner'", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(339, "ISDEF");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ISDEF", (DBTable) null, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("ISDEF");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\\r", (DBTable) null, 225, "alter table");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("\\r ALTER TABLE NULL", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[9];
      TableContainer tableContainer0 = new TableContainer(stringArray0[0]);
      boolean boolean0 = SQLUtil.isDDL("create tabledrop table");
      assertTrue(boolean0);
      
      String string0 = SQLUtil.leftJoin((String) null, stringArray0, "renamedrop table", "renamedrop table", stringArray0);
      assertEquals("left join renamedrop table as renamedrop table on null.null = renamedrop table.null and null.null = renamedrop table.null and null.null = renamedrop table.null and null.null = renamedrop table.null and null.null = renamedrop table.null and null.null = renamedrop table.null and null.null = renamedrop table.null and null.null = renamedrop table.null and null.null = renamedrop table.null", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      String string0 = SQLUtil.substituteMarkers("#9[g0-7ez.^}g", "#9[g0-7ez.^}g", mockJapaneseDate0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select intoupper(topic");
      MockFile mockFile0 = new MockFile("select intoupper(topic");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table select intoupper(topic", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = TypeId.DATE_NAME;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DATE", defaultDBTable0, 2147483645, "DATE");
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("DATE", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("oPl~[4VKbOp8b7x");
      assertNull(boolean0);
      
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("UnFx|yOTaHJvVLKjML", false, "UnFx|yOTaHJvVLKjML", " NOT NULL");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT UnFx|yOTaHJvVLKjML CHECK  NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter indexkn?h9@xg%a", true);
      assertEquals("alter indexkn ? h9 @ xg % a", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "alter indexkn ? h9 @ xg % a";
      stringArray0[1] = "alter indexkn?h9@xg%a";
      String string1 = SQLUtil.renderColumnListWithTableName("alter indexkn ? h9 @ xg % a", stringArray0);
      assertEquals("alter indexkn ? h9 @ xg % a.alter indexkn ? h9 @ xg % a, alter indexkn ? h9 @ xg % a.alter indexkn?h9@xg%a", string1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = SQLUtil.normalize("rv-+&U#ci*X^JYN", true);
      assertEquals("rv - + & U # ci * X ^ JYN", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = new Boolean("Ry_$>wuGy]1");
      defaultDBTable0.getForeignKeyConstraints();
      SQLUtil.typeAndName(defaultDBTable0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompositeDBObject<DBTrigger> compositeDBObject0 = (CompositeDBObject<DBTrigger>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      SQLUtil.normalize("/$$m2%I2Ki~OSP>", true);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("UnFx|yOTaHJvVLKjML", false, "UnFx|yOTaHJvVLKjML", " NOT NULL");
      String string0 = SQLUtil.normalize(" NOT NULL", false);
      assertEquals("NOT NULL", string0);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK  NOT NULL", string1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "create table";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create table", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, create table) REFERENCES null(, create table)", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("0QQ9R'.O):xP");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("0QQ9R'.O):xP", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      String string0 = Dependable.TABLE;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 0QQ9R'.O):xP FOREIGN KEY () REFERENCES 0QQ9R'.O):xP()", string1);
      
      String string2 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT 0QQ9R'.O):xP ", string2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("select intoupper(topic", "select intoupper(topic");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLUtil.removeComments("select intoupper(topic");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "select intoupper(topic");
      SQLUtil.addRequiredCondition("select intoupper(topic", stringBuilder0);
      assertEquals("select intoupper(topic and select intoupper(topic", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "create table";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create table", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"create table\" FOREIGN KEY (, create table) REFERENCES null(, create table)", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "kbn";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("kbn", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (kbn) REFERENCES null(kbn)", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table null", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.normalize("v-+&U#c*X^JYN", false);
      SQLUtil.normalize("v - + & U # c * X ^ JYN", false);
      StringBuilder stringBuilder0 = new StringBuilder("v - + & U # c * X ^ JYN");
      SQLUtil.addOptionalCondition("v - + & U # c * X ^ JYN", stringBuilder0);
      assertEquals("v - + & U # c * X ^ JYN or v - + & U # c * X ^ JYN", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncate");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLUtil.normalize("DYXwm+Gv?sVb>4}U`", true);
      MockFile mockFile0 = new MockFile("", "DY  Xwm + Gv  ? sVb > 4 } U `");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print('(');
      StringBuilder stringBuilder0 = new StringBuilder("Y:\"j");
      SQLUtil.addRequiredCondition("primary ke", stringBuilder0);
      assertEquals("Y:\"j and primary ke", stringBuilder0.toString());
      
      DBSchema dBSchema0 = new DBSchema("primary ke");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Y:\"j";
      stringArray0[1] = "truncate";
      stringArray0[2] = "Y:\"j";
      stringArray0[3] = "primary ke";
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("a*I;(,;");
      MockFile mockFile0 = new MockFile("a*I;(,;", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("C 0M/+D");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Gy$q+^ls4|c58>T?", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "C 0M/+D", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("alter tableselect intoupper(topic) like ?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"topic\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("i:)-R(`F%0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: i:)-R(`F%0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      SQLUtil.removeComments("+[MsCema]&ojCTi");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("+[MsCema]&ojCTi", stringBuilder0);
      assertEquals("+[MsCema]&ojCTi", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      
      String string1 = SQLUtil.renderValue("table null");
      assertEquals("'table null'", string1);
      
      SQLUtil.parseColumnTypeAndSize("table null");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBDataType dBDataType0 = DBDataType.getInstance(90063, "table null");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("table null", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1604), "updatew,l/%)`p6]pl");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("updatew,l/%)`p6]pl", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("updatew,l/%)`p6]pl UPDATEW,L/%)`P6]PL(2) NULL", string0);
      
      dBDataType0.isAlpha();
      String string1 = AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_STRING;
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("updatew,l/%)`p6]pl, updatew,l/%)`p6]pl, updatew,l/%)`p6]pl, updatew,l/%)`p6]pl, updatew,l/%)`p6]pl", string2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("call");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.normalize("4L,-RP(@6<i=N", true);
      assertEquals("4L, - RP (@ 6 < i = N", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = SQLUtil.normalize("Vce#OS?f'", true);
      assertEquals("Vce # OS ? f ''", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.apache.derby.impl.sql.compile.CLOBTypeCompiler", true);
      assertEquals("org.apache.derby.impl.sql.compile.CLOBTypeCompiler", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = SQLUtil.normalize("updatew,l/%)`p6]pl", true);
      assertEquals("updatew, l / %) ` p6 ] pl", string0);
      
      SQLUtil.parseColumnTypeAndSize("updatew,l/%)`p6]pl");
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("H_79g. LTU", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("updatew, l / %) ` p6 ] pl", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure((String) null, dBPackage0);
      CompositeDBObject<?> compositeDBObject0 = dBProcedure0.getOwner();
      String string1 = SQLUtil.ownerDotComponent(compositeDBObject0);
      assertEquals("H_79g. LTU.updatew, l / %) ` p6 ] pl", string1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop table");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("", "DYXwm+Gv?sVb>4}U`");
      File file0 = MockFile.createTempFile("DYXwm+Gv?sVb>4}U`", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.print('X');
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "DYXwm+Gv?sVb>4}U`";
      stringArray0[1] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      stringArray0[2] = "DYXwm+Gv?sVb>4}U`";
      stringArray0[3] = "DYXwm+Gv?sVb>4}U`";
      stringArray0[4] = "}?p08";
      stringArray0[5] = "";
      stringArray0[6] = "DYXwm+Gv?sVb>4}U`";
      stringArray0[7] = "}?p08";
      DBUniqueConstraint dBUniqueConstraint0 = defaultDBTable0.getUniqueConstraint(stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("}?p08", true, dBUniqueConstraint0);
      mockPrintWriter0.print('u');
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.normalize("insert", true);
      assertEquals("insert", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLUtil.mutatesStructure("*$ K");
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = BTree.PROPERTY_UNIQUE_WITH_DUPLICATE_NULLS;
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "uniqueWithDuplicateNulls";
      stringArray0[2] = null;
      stringArray0[3] = "ename";
      String string1 = SQLUtil.join((String) null, (String) null, stringArray0, "NONE", stringArray0[2], stringArray0);
      assertEquals("NONE as null on null.null = null.null and null.uniqueWithDuplicateNulls = null.uniqueWithDuplicateNulls and null.null = null.null and null.ename = null.ename", string1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select intoduletenull ko:abxu84n$?r->n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select intoupper(topic");
      MockFile mockFile0 = new MockFile("", "select intoupper(topic");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print('q');
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "select intoupper(topic", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"select intoupper(topic\" PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockFile mockFile0 = new MockFile("alter indexkn?h9@xg%a", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print('X');
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter indexkn?h9@xg%a");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "exec";
      stringArray0[2] = "alter indexkn?h9@xg%a";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "exec", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.normalize("l=2?@Z}/H-D721ZPQ", true);
      assertEquals("l = 2  ? @ Z } / H - D721ZPQ", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("l=2?@Z}/H-D721ZPQ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1604), "updatew,l/%)`p6]pl");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("updatew,l/%)`p6]pl", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("updatew,l/%)`p6]pl UPDATEW,L/%)`P6]PL(2,2) NULL", string0);
      
      dBDataType0.isAlpha();
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("create materialized viewsel.ct intoupper(topic) like ?", (DBTable) null, dBDataType0, integer1);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      assertEquals("UPDATEW,L/%)`P6]PL(3)", string1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("create unique indexrv-+&u#ci*x^jyn", true, "renamealter materialized view_rr5m#mtq$8t", "rename");
      dBCheckConstraint0.setName((String) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK rename", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string0);
      
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = SQLUtil.normalize("<{wlS9\"N?sy", true);
      assertEquals("< { wlS9 \"N?sy\"", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBCatalog dBCatalog0 = new DBCatalog("A");
      dBCatalog0.getTable("A", false);
      DBDataType dBDataType0 = DBDataType.getInstance(490, "A");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("A", (DBTable) null, dBDataType0, integer0);
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("A, A", string0);
      
      String string1 = SQLUtil.removeComments("A");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DBDataType.getInstance(339, "ISDEF");
      Integer integer0 = RawTransaction.ABORT;
      DBSchema dBSchema0 = new DBSchema("exeNutecs@yndu");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("nrpz1nk+*+6", dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "nrpz1nk+*+6";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter tablealtr materialibed view_rrm#mtq$8t", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(339);
      StringBuilder stringBuilder1 = stringBuilder0.append("nrpz1nk+*+6");
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1);
      assertEquals("nrpz1nk+*+6CONSTRAINT \"alter tablealtr materialibed view_rrm#mtq$8t\" ", stringBuilder1.toString());
      assertEquals("nrpz1nk+*+6CONSTRAINT \"alter tablealtr materialibed view_rrm#mtq$8t\" ", stringBuilder0.toString());
  }
}
