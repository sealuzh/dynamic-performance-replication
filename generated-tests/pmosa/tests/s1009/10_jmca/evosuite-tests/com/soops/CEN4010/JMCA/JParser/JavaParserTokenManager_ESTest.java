/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 14:04:16 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.File;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0);
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 22;
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 22);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 22. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      javaParserTokenManager0.ReInit((JavaCharStream) null);
      javaParserTokenManager0.curChar = '\\';
      javaParserTokenManager0.jjmatchedKind = 18;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)0;
      javaParserTokenManager0.SwitchTo((byte)0);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)117;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null);
      Token token0 = Token.newToken(2967);
      javaParserTokenManager1.TokenLexicalActions(token0);
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, token0.kind);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 5, 29);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 5, column 30.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = 'J';
      charArray0[2] = ';';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[3] = '2';
      charArray0[4] = 'B';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[5] = 'U';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[6] = ' ';
      charArray0[7] = 'L';
      charArray0[8] = 'g';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 15, 1199);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaCharStream0.readChar();
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(74, token1.kind);
      assertEquals("J", token1.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = '7';
      charArray0[4] = ' ';
      charArray0[5] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 15, (-128));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaCharStream0.readChar();
      javaParserTokenManager0.defaultLexState = 3908;
      Token token0 = token_GTToken0.specialToken;
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.SkipLexicalActions(token_GTToken0);
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char[] charArray0 = new char[9];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 1199, (-3232));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaCharStream0.readChar();
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.SkipLexicalActions((Token) null);
      javaParserTokenManager1.TokenLexicalActions((Token) null);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1199, column -3231.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[9];
      charArray0[1] = '>';
      StringReader stringReader0 = new StringReader("super");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, '>', '>');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(54, token0.kind);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[9];
      charArray0[0] = 'U';
      charArray0[1] = 'g';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = 'B';
      charArray0[5] = 'B';
      charArray0[6] = 'g';
      charArray0[7] = 'B';
      charArray0[8] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 42, 36);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaCharStream0.readChar();
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      javaParserTokenManager0.getNextToken();
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(44, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[9];
      charArray0[0] = 'U';
      charArray0[1] = 'G';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = 'B';
      charArray0[6] = 'G';
      charArray0[7] = 'B';
      charArray0[8] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 42, 36);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaCharStream0.readChar();
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'J';
      charArray0[2] = ';';
      charArray0[3] = '\u0000';
      charArray0[4] = 'B';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[6] = ' ';
      charArray0[1] = 'L';
      charArray0[8] = 'g';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 15, 1199);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaCharStream0.readChar();
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(74, token1.kind);
      assertEquals("L", token1.toString());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = '8';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1199, (-176));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaCharStream0.readChar();
      Token.GTToken token_GTToken1 = new Token.GTToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals("8UU", token0.toString());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = '8';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = ' ';
      charArray0[5] = '8';
      charArray0[6] = ' ';
      charArray0[7] = 'X';
      charArray0[8] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (-128), 113);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaCharStream0.readChar();
      Token token0 = token_GTToken0.specialToken;
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.TokenLexicalActions((Token) null);
      Token token1 = javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals("8UU", token1.toString());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'L';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedReader0, 18, 79);
      javaCharStream1.readChar();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token.GTToken token_GTToken1 = new Token.GTToken();
      Token token0 = token_GTToken1.specialToken;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.SkipLexicalActions(token_GTToken1);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 0);
      javaParserTokenManager1.TokenLexicalActions(token_GTToken0);
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals("gL", token1.toString());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1802), 17);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1802, column 18.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'J';
      charArray0[2] = ';';
      charArray0[3] = '\u0000';
      charArray0[4] = 'B';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader1 = new BufferedReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-128), 27);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaCharStream0.readChar();
      Token token0 = token_GTToken0.specialToken;
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.TokenLexicalActions(token_GTToken0);
      Token token1 = javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.TokenLexicalActions(token1);
      Token token2 = javaParserTokenManager1.getNextToken();
      assertEquals(29, javaCharStream0.getBeginColumn());
      assertEquals(";", token2.toString());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[4];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0, 46);
      BufferedReader bufferedReader0 = new BufferedReader(pushbackReader0);
      PushbackReader pushbackReader1 = new PushbackReader(charArrayReader0);
      PushbackReader pushbackReader2 = new PushbackReader(pushbackReader1);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 79, 46);
      javaCharStream0.readChar();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token.GTToken token_GTToken1 = new Token.GTToken();
      Token.GTToken token_GTToken2 = new Token.GTToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.SkipLexicalActions(token_GTToken2);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager0.TokenLexicalActions(token_GTToken2);
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals("BUU", token0.toString());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'J';
      charArray0[2] = ';';
      charArray0[3] = '\u0000';
      charArray0[4] = '8';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[6] = ' ';
      charArray0[1] = '8';
      charArray0[8] = 'g';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 'J', 1199);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaCharStream0.readChar();
      Token token0 = token_GTToken0.specialToken;
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("8", token1.toString());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[9];
      charArray0[0] = 'U';
      charArray0[1] = 'K';
      charArray0[2] = 'U';
      charArray0[3] = 'K';
      charArray0[4] = '?';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 15, (-4082));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaCharStream0.readChar();
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals("KUK", token1.toString());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[8] = 'J';
      charArray0[2] = ';';
      charArray0[3] = '\u0000';
      charArray0[2] = '8';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[6] = ' ';
      charArray0[1] = '8';
      charArray0[8] = '7';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 'J', 1199);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaCharStream0.readChar();
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.getNextToken();
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) null, (-5453), 38);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0);
      int int0 = 42;
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 42, 42);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.readChar();
      javaCharStream0.readChar();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 42, column 51.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("?8|V");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, 47);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.getNextToken();
      stringReader0.skip(562949953421312L);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 3);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 47, column 51.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'J';
      charArray0[2] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StringReader stringReader0 = new StringReader("c*TV}C5=L|vL6QI");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-4029), 122);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.maxNextCharInd = 45;
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-4029));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -4029. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[9];
      charArray0[0] = 'U';
      charArray0[1] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StringReader stringReader0 = new StringReader("super");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, 47);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.getNextToken();
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      Token.GTToken token_GTToken1 = new Token.GTToken();
      Token token1 = token_GTToken1.specialToken;
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = 'B';
      charArray0[2] = 'U';
      charArray0[3] = 'B';
      charArray0[4] = '-';
      charArray0[5] = 'B';
      charArray0[6] = 'G';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StringReader stringReader0 = new StringReader("+(ta5jio 1=2");
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 47, (-1594));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token1);
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("", token2.toString());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[24];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = 'S';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '>';
      charArray0[6] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 41, 41);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(41, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = 'B';
      charArray0[2] = 'U';
      charArray0[3] = 'B';
      charArray0[4] = '-';
      charArray0[5] = 'B';
      charArray0[6] = 'G';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StringReader stringReader0 = new StringReader("+(ta5jio 1=2");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 36, (-1329));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 36, column -1328.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'g';
      charArray0[3] = 'H';
      charArray0[4] = 'g';
      charArray0[5] = 'H';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 30, 1199);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaCharStream0.readChar();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("r0x/a:`ROpCe");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, 47);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.getNextToken();
      stringReader0.skip(1110L);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 3);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 47, column 59.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("r0x/a:`ROpCe");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, 47);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.getNextToken();
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      Token.GTToken token_GTToken1 = new Token.GTToken();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      token_GTToken0.endColumn = (int) 'x';
      charArray0[3] = 'x';
      charArray0[4] = '\\';
      charArray0[5] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 0);
      charArrayReader0.mark(3315);
      Token.GTToken token_GTToken2 = new Token.GTToken();
      Token token1 = token_GTToken0.specialToken;
      javaParserTokenManager0.getNextToken();
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = 'B';
      charArray0[2] = 'U';
      charArray0[3] = 'B';
      charArray0[4] = '-';
      charArray0[5] = 'B';
      charArray0[6] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StringReader stringReader0 = new StringReader("+(ta5jio 1=2");
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 47, 'B');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      char char0 = File.pathSeparatorChar;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 47, column 73.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'J';
      charArray0[2] = ';';
      charArray0[4] = 'H';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[6] = ' ';
      charArray0[1] = 'Z';
      charArray0[8] = 'H';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 'J', 1199);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaCharStream0.readChar();
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("Z", token0.toString());
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StringReader stringReader0 = new StringReader("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xN^JMq=,eW");
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1928, 1488);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(1928, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = 'y';
      charArray0[2] = '[';
      charArray0[3] = 'i';
      charArray0[4] = 'y';
      charArray0[5] = 'f';
      charArray0[6] = '~';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StringReader stringReader0 = new StringReader("`fEu19MR*?&g");
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 47, 113);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-1), 113);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, (-2334));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2334. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StringReader stringReader0 = new StringReader("`fEu19MR*?&g");
      StringReader stringReader1 = new StringReader("o cu");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 110, 110);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 3319, 47);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 50);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 50. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("r0x/a:`ROpCe");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, 47);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      Token token0 = token_GTToken0.specialToken;
      Token token1 = javaParserTokenManager0.getNextToken();
      stringReader0.skip(1110L);
      javaCharStream0.readChar();
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(51, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = 'g';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 41, 47);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.getNextToken();
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(">>>", token1.toString());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[5];
      charArray0[0] = 'E';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StringReader stringReader0 = new StringReader("]");
      StringReader stringReader1 = new StringReader("9");
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 47, 30);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 30, 25);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 2430);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2430. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StringReader stringReader0 = new StringReader("}tHKCU4.RNU>\"d");
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 113, (-2007));
      javaCharStream0.prevCharIsCR = true;
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 47, (-2007));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      Token token0 = token_GTToken0.specialToken;
      Token token1 = javaParserTokenManager0.getNextToken();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager0.TokenLexicalActions(token1);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals((-2006), javaCharStream1.getColumn());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("r0x/a:`ROpCe");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, 47);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.jjmatchedKind = 1256;
      javaParserTokenManager0.getNextToken();
      javaCharStream0.readChar();
      Token token1 = token_GTToken0.specialToken;
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.TokenLexicalActions((Token) null);
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals(":", token2.toString());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      char[] charArray1 = new char[9];
      charArray1[0] = 'Z';
      charArray1[1] = 'f';
      charArray1[2] = 'f';
      charArray1[3] = 'Z';
      charArray1[4] = 'G';
      charArray1[5] = 'i';
      charArray1[6] = 'G';
      charArray1[7] = 'Z';
      charArray1[8] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1083), 1199);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaCharStream0.readChar();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager1.SkipLexicalActions(token_GTToken0);
      javaParserTokenManager0.getNextToken();
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(1207, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      char[] charArray1 = new char[9];
      charArray1[0] = 'Z';
      charArray1[1] = 'f';
      charArray1[2] = 'f';
      charArray1[3] = 'Z';
      charArray1[4] = 'G';
      charArray1[5] = 'i';
      charArray1[6] = 'G';
      charArray0[0] = 'Z';
      charArray1[8] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1083), 1199);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.readChar();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.setDebugStream((PrintStream) null);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(1205, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)74;
      StringReader stringReader0 = new StringReader("'");
      StringReader stringReader1 = new StringReader("\"enum\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 24, (byte) (-114));
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 47, 47);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      Token.GTToken token_GTToken1 = new Token.GTToken();
      Token token0 = token_GTToken1.specialToken;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-114));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -114. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'w';
      charArray0[1] = 'C';
      charArray0[2] = '0';
      charArray0[3] = 'u';
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      charArray0[4] = 'R';
      charArray0[5] = '7';
      charArray0[6] = 'D';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'w', 'C', '0', 'u', 'R', '7', 'D'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 41, 41);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'w', 'C', '0', 'u', 'R', '7', 'D'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'w', 'C', '0', 'u', 'R', '7', 'D'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'w', 'C', '0', 'u', 'R', '7', 'D'}, charArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      token_GTToken0.realKind = (-1);
      assertNull(token_GTToken0.toString());
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals("wC0uR7D", token1.toString());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(41, token1.beginColumn);
      assertEquals(41, token1.endLine);
      assertEquals(47, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(41, token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'w', 'C', '0', 'u', 'R', '7', 'D'}, charArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertNotNull(mockPrintStream0);
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'w', 'C', '0', 'u', 'R', '7', 'D'}, charArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'w', 'C', '0', 'u', 'R', '7', 'D'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals("", token2.toString());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertNotSame(token2, token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(41, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(41, token2.endLine);
      assertEquals(47, token2.endColumn);
      assertEquals(47, token2.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'w', 'C', '0', 'u', 'R', '7', 'D'}, charArray0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertEquals("", token3.toString());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(47, token3.endColumn);
      assertEquals(0, token3.kind);
      assertEquals(41, token3.endLine);
      assertEquals(47, token3.beginColumn);
      assertEquals(41, token3.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'w', 'C', '0', 'u', 'R', '7', 'D'}, charArray0);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'w', 'C', '0', 'u', 'R', '7', 'D'}, charArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      javaParserTokenManager1.SkipLexicalActions(token2);
      assertEquals("", token2.toString());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token3);
      assertNotSame(token2, token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(41, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(41, token2.endLine);
      assertEquals(47, token2.endColumn);
      assertEquals(47, token2.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'w', 'C', '0', 'u', 'R', '7', 'D'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token3));
      assertFalse(token2.equals((Object)token1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = 'U';
      charArray0[3] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', '>', 'U', '>'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', '>', 'U', '>'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', '>', 'U', '>'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = token_GTToken0.specialToken;
      assertNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(">>", token2.toString());
      assertNotSame(token2, token_GTToken0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token2.endColumn);
      assertEquals(124, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.beginColumn);
      assertArrayEquals(new char[] {'>', '>', 'U', '>'}, charArray0);
      assertFalse(token2.equals((Object)token_GTToken0));
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertNull(token_GTToken0.toString());
      assertNotSame(token_GTToken0, token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      assertEquals(124, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertArrayEquals(new char[] {'>', '>', 'U', '>'}, charArray0);
      assertFalse(token_GTToken0.equals((Object)token2));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(">>", token3.toString());
      assertNotSame(token3, token2);
      assertNotSame(token3, token_GTToken0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token3.beginColumn);
      assertEquals(2, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(124, token3.kind);
      assertEquals(1, token3.beginLine);
      assertArrayEquals(new char[] {'>', '>', 'U', '>'}, charArray0);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token_GTToken0));
      
      Token token4 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token4);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(">>", token4.toString());
      assertNotSame(token4, token2);
      assertNotSame(token4, token_GTToken0);
      assertNotSame(token4, token3);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token4.beginLine);
      assertEquals(1, token4.endLine);
      assertEquals(1, token4.endColumn);
      assertEquals(1, token4.beginColumn);
      assertEquals(123, token4.kind);
      assertArrayEquals(new char[] {'>', '>', 'U', '>'}, charArray0);
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token_GTToken0));
      assertFalse(token4.equals((Object)token3));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'R';
      charArray0[3] = 'u';
      charArray0[4] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'w', 'w', 'R', 'u', '0'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 41, 7);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'w', 'w', 'R', 'u', '0'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'w', 'w', 'R', 'u', '0'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'w', 'w', 'R', 'u', '0'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'w', 'w', 'R', 'u', '0'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertEquals("wwRu0", token1.toString());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(5, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(5, javaCharStream1.getColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(5, token1.endColumn);
      assertEquals(4, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'w', 'w', 'R', 'u', '0'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 1);
      assertNotNull(javaParserTokenManager2);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'w', 'w', 'R', 'u', '0'}, charArray0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals("", token2.toString());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(5, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(5, javaCharStream1.getColumn());
      assertEquals(5, javaCharStream1.getBeginColumn());
      assertNotSame(token2, token1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(5, token2.beginColumn);
      assertEquals(5, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'w', 'w', 'R', 'u', '0'}, charArray0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token3);
      assertEquals("", token3.toString());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(5, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(5, javaCharStream1.getColumn());
      assertEquals(5, javaCharStream1.getBeginColumn());
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(1, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(5, token3.endColumn);
      assertEquals(5, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'w', 'w', 'R', 'u', '0'}, charArray0);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager3);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'w', 'w', 'R', 'u', '0'}, charArray0);
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      javaParserTokenManager3.SkipLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(javaParserTokenManager3, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'w', 'w', 'R', 'u', '0'}, charArray0);
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      javaParserTokenManager3.TokenLexicalActions(token1);
      assertEquals("wwRu0", token1.toString());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(5, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(5, javaCharStream1.getColumn());
      assertEquals(5, javaCharStream1.getBeginColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager3);
      assertNotSame(token1, token3);
      assertNotSame(token1, token2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(5, token1.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'w', 'w', 'R', 'u', '0'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager3));
      assertFalse(token1.equals((Object)token3));
      assertFalse(token1.equals((Object)token2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'J';
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("const");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, (-4277));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      Token token0 = token_GTToken1.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals((-4273), javaCharStream0.getEndColumn());
      assertEquals((-4273), javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals((-4277), javaCharStream0.getBeginColumn());
      assertEquals("const", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals((-4273), token1.endColumn);
      assertEquals(47, token1.beginLine);
      assertEquals((-4277), token1.beginColumn);
      assertEquals(22, token1.kind);
      assertEquals(47, token1.endLine);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      long long0 = stringReader1.skip(274877906944L);
      assertEquals(0L, long0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      token_GTToken0.beginLine = 0;
      assertNull(token_GTToken0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-2318));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2318. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'J';
      StringReader stringReader0 = new StringReader("const");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, (-4277));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      Token token0 = token_GTToken1.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals((-4277), javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals((-4273), javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals((-4273), javaCharStream0.getEndColumn());
      assertEquals("const", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals((-4273), token1.endColumn);
      assertEquals(47, token1.endLine);
      assertEquals(47, token1.beginLine);
      assertEquals((-4277), token1.beginColumn);
      assertEquals(22, token1.kind);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      long long0 = stringReader1.skip(274877906944L);
      assertEquals(0L, long0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      token_GTToken0.beginLine = 0;
      assertNull(token_GTToken0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-2318));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2318. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = 'g';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'U', 'U', '>', '>', '>', 'g'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 41, 47);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'U', 'U', '>', '>', '>', 'g'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'U', 'U', '>', '>', '>', 'g'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals("UU", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(41, token1.endLine);
      assertEquals(47, token1.beginColumn);
      assertEquals(48, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(41, token1.beginLine);
      assertArrayEquals(new char[] {'U', 'U', '>', '>', '>', 'g'}, charArray0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'U', 'U', '>', '>', '>', 'g'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertEquals(">>>", token2.toString());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token_GTToken1);
      assertNotSame(token2, token_GTToken0);
      assertEquals(49, token2.beginColumn);
      assertEquals(41, token2.endLine);
      assertEquals(124, token2.kind);
      assertEquals(41, token2.beginLine);
      assertEquals(51, token2.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'U', 'U', '>', '>', '>', 'g'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token_GTToken1));
      assertFalse(token2.equals((Object)token_GTToken0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = 'g';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'U', '>', '>', '>', '>', 'g'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 41, 47);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'U', '>', '>', '>', '>', 'g'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'U', '>', '>', '>', '>', 'g'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals("U", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(41, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(41, token1.beginLine);
      assertEquals(47, token1.endColumn);
      assertEquals(47, token1.beginColumn);
      assertArrayEquals(new char[] {'U', '>', '>', '>', '>', 'g'}, charArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertNotNull(mockPrintStream0);
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'U', '>', '>', '>', '>', 'g'}, charArray0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'U', '>', '>', '>', '>', 'g'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(">>>", token2.toString());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertNotSame(token2, token_GTToken0);
      assertNotSame(token2, token_GTToken1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(50, token2.endColumn);
      assertEquals(41, token2.endLine);
      assertEquals(48, token2.beginColumn);
      assertEquals(124, token2.kind);
      assertEquals(41, token2.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'U', '>', '>', '>', '>', 'g'}, charArray0);
      assertFalse(token2.equals((Object)token_GTToken0));
      assertFalse(token2.equals((Object)token_GTToken1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotNull(token3);
      assertEquals(">>>", token3.toString());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token_GTToken1);
      assertNotSame(token3, token_GTToken0);
      assertNotSame(token3, token2);
      assertEquals(51, token3.endColumn);
      assertEquals(41, token3.endLine);
      assertEquals(49, token3.beginColumn);
      assertEquals(41, token3.beginLine);
      assertEquals(124, token3.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'U', '>', '>', '>', '>', 'g'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token_GTToken1));
      assertFalse(token3.equals((Object)token_GTToken0));
      assertFalse(token3.equals((Object)token2));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'J';
      charArray0[2] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', 'J', ';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader0 = new StringReader("c*TV}C5=L|vL6QI");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (-4044), (-4044));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      javaCharStream0.bufsize = 0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals((-4044), javaCharStream0.getEndColumn());
      assertEquals((-4044), javaCharStream0.getBeginLine());
      assertEquals((-4044), javaCharStream0.getLine());
      assertEquals((-4044), javaCharStream0.getColumn());
      assertEquals((-4044), javaCharStream0.getBeginColumn());
      assertEquals((-4044), javaCharStream0.getEndLine());
      assertEquals("c", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-4044), token1.endLine);
      assertEquals((-4044), token1.endColumn);
      assertEquals((-4044), token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals((-4044), token1.beginColumn);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals((-4043), javaCharStream0.getEndColumn());
      assertEquals((-4044), javaCharStream0.getBeginLine());
      assertEquals((-4044), javaCharStream0.getLine());
      assertEquals((-4043), javaCharStream0.getBeginColumn());
      assertEquals((-4043), javaCharStream0.getColumn());
      assertEquals((-4044), javaCharStream0.getEndLine());
      assertEquals("*", token2.toString());
      assertNotSame(token2, token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-4043), token2.endColumn);
      assertEquals(103, token2.kind);
      assertEquals((-4044), token2.beginLine);
      assertEquals((-4043), token2.beginColumn);
      assertEquals((-4044), token2.endLine);
      assertFalse(token2.equals((Object)token1));
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals((-4043), javaCharStream0.getEndColumn());
      assertEquals((-4044), javaCharStream0.getBeginLine());
      assertEquals((-4044), javaCharStream0.getLine());
      assertEquals((-4043), javaCharStream0.getBeginColumn());
      assertEquals((-4043), javaCharStream0.getColumn());
      assertEquals((-4044), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertEquals((-4042), javaCharStream0.getBeginColumn());
      assertEquals((-4041), javaCharStream0.getEndColumn());
      assertEquals((-4044), javaCharStream0.getBeginLine());
      assertEquals((-4044), javaCharStream0.getLine());
      assertEquals((-4041), javaCharStream0.getColumn());
      assertEquals((-4044), javaCharStream0.getEndLine());
      assertEquals("TV", token3.toString());
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token3.kind);
      assertEquals((-4044), token3.beginLine);
      assertEquals((-4042), token3.beginColumn);
      assertEquals((-4041), token3.endColumn);
      assertEquals((-4044), token3.endLine);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertEquals("}", token4.toString());
      assertEquals((-4040), javaCharStream0.getEndColumn());
      assertEquals((-4044), javaCharStream0.getBeginLine());
      assertEquals((-4044), javaCharStream0.getLine());
      assertEquals((-4040), javaCharStream0.getBeginColumn());
      assertEquals((-4040), javaCharStream0.getColumn());
      assertEquals((-4044), javaCharStream0.getEndLine());
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertEquals((-4044), token4.beginLine);
      assertEquals(80, token4.kind);
      assertEquals((-4040), token4.beginColumn);
      assertEquals((-4044), token4.endLine);
      assertEquals((-4040), token4.endColumn);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("U#]N2LXf]9gM`Q");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(":eJ1F2`Py~TDBov'O#");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 85, 85);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 117, 88);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals("U", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(85, token1.endLine);
      assertEquals(85, token1.beginColumn);
      assertEquals(85, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(85, token1.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 85, column 86.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      charArray0[3] = 'Z';
      charArray0[4] = 'O';
      charArray0[5] = 'Z';
      charArray0[6] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'Z', 'O', 'O', 'Z', 'O', 'Z', 'i'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'Z', 'O', 'O', 'Z', 'O', 'Z', 'i'}, charArray0);
      
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0);
      assertNotNull(pushbackReader0);
      assertArrayEquals(new char[] {'Z', 'O', 'O', 'Z', 'O', 'Z', 'i'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 1199, 1199);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'Z', 'O', 'O', 'Z', 'O', 'Z', 'i'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'Z', 'O', 'O', 'Z', 'O', 'Z', 'i'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('Z', char0);
      assertEquals(1199, javaCharStream0.getBeginColumn());
      assertEquals(1199, javaCharStream0.getColumn());
      assertEquals(1199, javaCharStream0.getEndLine());
      assertEquals(1199, javaCharStream0.getLine());
      assertEquals(1199, javaCharStream0.getBeginLine());
      assertEquals(1199, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'Z', 'O', 'O', 'Z', 'O', 'Z', 'i'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(1199, javaCharStream0.getBeginColumn());
      assertEquals(1199, javaCharStream0.getColumn());
      assertEquals(1199, javaCharStream0.getEndLine());
      assertEquals(1199, javaCharStream0.getLine());
      assertEquals(1199, javaCharStream0.getBeginLine());
      assertEquals(1199, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'Z', 'O', 'O', 'Z', 'O', 'Z', 'i'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.SkipLexicalActions(token_GTToken0);
      assertEquals(1199, javaCharStream0.getBeginColumn());
      assertEquals(1199, javaCharStream0.getColumn());
      assertEquals(1199, javaCharStream0.getEndLine());
      assertEquals(1199, javaCharStream0.getLine());
      assertEquals(1199, javaCharStream0.getBeginLine());
      assertEquals(1199, javaCharStream0.getEndColumn());
      assertNull(token_GTToken0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertArrayEquals(new char[] {'Z', 'O', 'O', 'Z', 'O', 'Z', 'i'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertEquals("OOZOZi", token0.toString());
      assertEquals(1199, javaCharStream0.getEndLine());
      assertEquals(1205, javaCharStream0.getEndColumn());
      assertEquals(1205, javaCharStream0.getColumn());
      assertEquals(1199, javaCharStream0.getLine());
      assertEquals(1200, javaCharStream0.getBeginColumn());
      assertEquals(1199, javaCharStream0.getBeginLine());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1199, token0.endLine);
      assertEquals(1199, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1205, token0.endColumn);
      assertEquals(1200, token0.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'Z', 'O', 'O', 'Z', 'O', 'Z', 'i'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'F', 'U', 'U', 'U', '-'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'F', 'U', 'U', 'U', '-'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 2220, (-763));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'F', 'U', 'U', 'U', '-'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'F', 'U', 'U', 'U', '-'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      token_GTToken0.realKind = 2532;
      assertNull(token_GTToken0.toString());
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals((-760), javaCharStream0.getEndColumn());
      assertEquals(2220, javaCharStream0.getEndLine());
      assertEquals(2220, javaCharStream0.getBeginLine());
      assertEquals((-763), javaCharStream0.getBeginColumn());
      assertEquals(2220, javaCharStream0.getLine());
      assertEquals((-760), javaCharStream0.getColumn());
      assertEquals("FUUU", token1.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(2220, token1.endLine);
      assertEquals((-763), token1.beginColumn);
      assertEquals(2220, token1.beginLine);
      assertEquals((-760), token1.endColumn);
      assertArrayEquals(new char[] {'F', 'U', 'U', 'U', '-'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertNotNull(mockPrintStream0);
      assertEquals((-760), javaCharStream0.getEndColumn());
      assertEquals(2220, javaCharStream0.getEndLine());
      assertEquals(2220, javaCharStream0.getBeginLine());
      assertEquals((-763), javaCharStream0.getBeginColumn());
      assertEquals(2220, javaCharStream0.getLine());
      assertEquals((-760), javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'F', 'U', 'U', 'U', '-'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals((-760), javaCharStream0.getEndColumn());
      assertEquals(2220, javaCharStream0.getEndLine());
      assertEquals(2220, javaCharStream0.getBeginLine());
      assertEquals((-763), javaCharStream0.getBeginColumn());
      assertEquals(2220, javaCharStream0.getLine());
      assertEquals((-760), javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'F', 'U', 'U', 'U', '-'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals("-", token2.toString());
      assertEquals((-759), javaCharStream0.getColumn());
      assertEquals((-759), javaCharStream0.getBeginColumn());
      assertEquals((-759), javaCharStream0.getEndColumn());
      assertEquals(2220, javaCharStream0.getEndLine());
      assertEquals(2220, javaCharStream0.getBeginLine());
      assertEquals(2220, javaCharStream0.getLine());
      assertNotSame(token2, token1);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(2220, token2.beginLine);
      assertEquals((-759), token2.endColumn);
      assertEquals((-759), token2.beginColumn);
      assertEquals(2220, token2.endLine);
      assertEquals(102, token2.kind);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'F', 'U', 'U', 'U', '-'}, charArray0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertEquals("", token3.toString());
      assertEquals((-759), javaCharStream0.getColumn());
      assertEquals((-759), javaCharStream0.getBeginColumn());
      assertEquals((-759), javaCharStream0.getEndColumn());
      assertEquals(2220, javaCharStream0.getEndLine());
      assertEquals(2220, javaCharStream0.getBeginLine());
      assertEquals(2220, javaCharStream0.getLine());
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(0, token3.kind);
      assertEquals(2220, token3.endLine);
      assertEquals((-759), token3.beginColumn);
      assertEquals((-759), token3.endColumn);
      assertEquals(2220, token3.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'F', 'U', 'U', 'U', '-'}, charArray0);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = '-';
      charArray0[5] = 'U';
      charArray0[6] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-', '-', 'U', 'U', '-', 'U', 'U', '\u0000'}, charArray0);
      
      StringReader stringReader0 = new StringReader("p");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 47, 47);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'-', '-', 'U', 'U', '-', 'U', 'U', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'-', '-', 'U', 'U', '-', 'U', 'U', '\u0000'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      Token token0 = token_GTToken1.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals("--", token1.toString());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(48, token1.endColumn);
      assertEquals(47, token1.endLine);
      assertEquals(100, token1.kind);
      assertEquals(47, token1.beginColumn);
      assertEquals(47, token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'-', '-', 'U', 'U', '-', 'U', 'U', '\u0000'}, charArray0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals("UU", token2.toString());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertNotSame(token2, token1);
      assertEquals(50, token2.endColumn);
      assertEquals(49, token2.beginColumn);
      assertEquals(47, token2.endLine);
      assertEquals(47, token2.beginLine);
      assertEquals(74, token2.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'-', '-', 'U', 'U', '-', 'U', 'U', '\u0000'}, charArray0);
      assertFalse(token2.equals((Object)token1));
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 122);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 122. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-', '-', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader0 = new StringReader("p");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 462, 462);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'-', '-', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'-', '-', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(462, javaCharStream0.getBeginColumn());
      assertEquals(463, javaCharStream0.getColumn());
      assertEquals(462, javaCharStream0.getEndLine());
      assertEquals(462, javaCharStream0.getBeginLine());
      assertEquals(463, javaCharStream0.getEndColumn());
      assertEquals(462, javaCharStream0.getLine());
      assertEquals("--", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(462, token0.endLine);
      assertEquals(100, token0.kind);
      assertEquals(463, token0.endColumn);
      assertEquals(462, token0.beginColumn);
      assertEquals(462, token0.beginLine);
      assertArrayEquals(new char[] {'-', '-', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long long0 = stringReader0.skip(0);
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 462, column 464.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'J';
      charArray0[2] = ';';
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("&");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, 51);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals("&", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(47, token1.beginLine);
      assertEquals(105, token1.kind);
      assertEquals(51, token1.endColumn);
      assertEquals(51, token1.beginColumn);
      assertEquals(47, token1.endLine);
      
      token1.endColumn = 300;
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals("&", token1.toString());
      
      try { 
        stringReader0.skip(0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = 'g';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'U', '>', '>', '>', '>', 'g'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 41, 47);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'U', '>', '>', '>', '>', 'g'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'U', '>', '>', '>', '>', 'g'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals("U", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(41, token1.endLine);
      assertEquals(47, token1.beginColumn);
      assertEquals(47, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(41, token1.beginLine);
      assertArrayEquals(new char[] {'U', '>', '>', '>', '>', 'g'}, charArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertNotNull(mockPrintStream0);
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'U', '>', '>', '>', '>', 'g'}, charArray0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'U', '>', '>', '>', '>', 'g'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(">>>", token2.toString());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertNotSame(token2, token_GTToken0);
      assertNotSame(token2, token_GTToken1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(48, token2.beginColumn);
      assertEquals(50, token2.endColumn);
      assertEquals(41, token2.beginLine);
      assertEquals(124, token2.kind);
      assertEquals(41, token2.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'U', '>', '>', '>', '>', 'g'}, charArray0);
      assertFalse(token2.equals((Object)token_GTToken0));
      assertFalse(token2.equals((Object)token_GTToken1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.TokenLexicalActions(token1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.soops.CEN4010.JMCA.JParser.Token cannot be cast to com.soops.CEN4010.JMCA.JParser.Token$GTToken
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 109, 109);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader("|e%wY2qF`o\"6");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader1);
      assertNotNull(pushbackReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackReader0, 32, 893);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      stringReader1.reset();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(893, javaCharStream1.getColumn());
      assertEquals(893, javaCharStream1.getEndColumn());
      assertEquals(32, javaCharStream1.getBeginLine());
      assertEquals(32, javaCharStream1.getLine());
      assertEquals(32, javaCharStream1.getEndLine());
      assertEquals(893, javaCharStream1.getBeginColumn());
      assertEquals("|", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(893, token1.endColumn);
      assertEquals(32, token1.beginLine);
      assertEquals(893, token1.beginColumn);
      assertEquals(106, token1.kind);
      assertEquals(32, token1.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      long long0 = stringReader1.skip(0);
      assertEquals(0L, long0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-1294));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1294. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = '-';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = '-';
      charArray0[6] = 'B';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'U', 'U', '-', 'B', 'B', '-', 'B'}, charArray0);
      
      StringReader stringReader0 = new StringReader("p");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, 594);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      Token token0 = token_GTToken1.specialToken;
      assertNull(token0);
      
      token_GTToken1.kind = (-225);
      assertNull(token_GTToken1.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals("p", token1.toString());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(594, javaCharStream0.getBeginColumn());
      assertEquals(594, javaCharStream0.getColumn());
      assertEquals(594, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(74, token1.kind);
      assertEquals(47, token1.beginLine);
      assertEquals(594, token1.beginColumn);
      assertEquals(47, token1.endLine);
      assertEquals(594, token1.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals("", token2.toString());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(594, javaCharStream0.getBeginColumn());
      assertEquals(594, javaCharStream0.getColumn());
      assertEquals(594, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertNotSame(token2, token1);
      assertEquals(47, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(594, token2.beginColumn);
      assertEquals(47, token2.endLine);
      assertEquals(594, token2.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token2.equals((Object)token1));
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      StringReader stringReader0 = new StringReader("Cs(!SF!dcNNywR5mJ]");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1368), 763);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-1368), javaCharStream0.getEndLine());
      assertEquals(763, javaCharStream0.getBeginColumn());
      assertEquals((-1368), javaCharStream0.getBeginLine());
      assertEquals((-1368), javaCharStream0.getLine());
      assertEquals(764, javaCharStream0.getEndColumn());
      assertEquals(764, javaCharStream0.getColumn());
      assertEquals("Cs", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(763, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1368), token0.beginLine);
      assertEquals((-1368), token0.endLine);
      assertEquals(764, token0.endColumn);
      
      long long0 = stringReader0.skip((-4659L));
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1345);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1345. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[2] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', '\u0000', 'U', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'>', '\u0000', 'U', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      StringReader stringReader0 = new StringReader("b`;jKyg6J]m");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 24, (-1065));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 106, 20);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', '\u0000', 'U', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(24, javaCharStream0.getBeginLine());
      assertEquals((-1065), javaCharStream0.getColumn());
      assertEquals(24, javaCharStream0.getLine());
      assertEquals(24, javaCharStream0.getEndLine());
      assertEquals((-1065), javaCharStream0.getEndColumn());
      assertEquals((-1065), javaCharStream0.getBeginColumn());
      assertEquals("b", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1065), token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(24, token1.endLine);
      assertEquals(24, token1.beginLine);
      assertEquals((-1065), token1.endColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 71);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 71. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'E';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'E', 'U', 'U', 'U', '-'}, charArray0);
      
      StringReader stringReader0 = new StringReader("]");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("9");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 47, 30);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'E', 'U', 'U', 'U', '-'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 30, 25);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'E', 'U', 'U', 'U', '-'}, charArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedReader0, 2103, 0);
      assertNotNull(javaCharStream2);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("EUUU", token0.toString());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(33, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(30, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(33, javaCharStream0.getColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(47, token0.beginLine);
      assertEquals(30, token0.beginColumn);
      assertEquals(33, token0.endColumn);
      assertEquals(47, token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'E', 'U', 'U', 'U', '-'}, charArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertEquals("9", token1.toString());
      assertEquals(25, javaCharStream1.getBeginColumn());
      assertEquals(25, javaCharStream1.getEndColumn());
      assertEquals(30, javaCharStream1.getEndLine());
      assertEquals(30, javaCharStream1.getLine());
      assertEquals(25, javaCharStream1.getColumn());
      assertEquals(30, javaCharStream1.getBeginLine());
      assertNotSame(token1, token0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(25, token1.endColumn);
      assertEquals(30, token1.endLine);
      assertEquals(66, token1.kind);
      assertEquals(25, token1.beginColumn);
      assertEquals(30, token1.beginLine);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token1.equals((Object)token0));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = 'y';
      charArray0[2] = '0';
      charArray0[3] = 'i';
      charArray0[4] = 'y';
      charArray0[5] = 'f';
      charArray0[6] = '\u0085';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'0', 'y', '0', 'i', 'y', 'f', '\u0085'}, charArray0);
      
      StringReader stringReader0 = new StringReader("`fu19MR*?&g");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 47, 113);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-1), 113);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'0', 'y', '0', 'i', 'y', 'f', '\u0085'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'0', 'y', '0', 'i', 'y', 'f', '\u0085'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals("0y0iyf", token1.toString());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(118, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(113, javaCharStream1.getBeginColumn());
      assertEquals(118, javaCharStream1.getEndColumn());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals((-1), token1.endLine);
      assertEquals(118, token1.endColumn);
      assertEquals((-1), token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(113, token1.beginColumn);
      assertEquals(5, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'0', 'y', '0', 'i', 'y', 'f', '\u0085'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1, column 120.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'J';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', 'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader0 = new StringReader("$Kz>tKQb|n");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, 110);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 34, 31);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'\u0000', 'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals("$Kz", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(47, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(112, token0.endColumn);
      assertEquals(47, token0.beginLine);
      assertEquals(110, token0.beginColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals("$Kz", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(47, token1.endLine);
      assertEquals(47, token1.beginLine);
      assertEquals(110, token1.beginColumn);
      assertEquals(112, token1.endColumn);
      assertEquals(74, token1.kind);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'\u0000', 'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'J';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', 'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader0 = new StringReader("$Kz>tKQb|n");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, 110);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 34, 31);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'\u0000', 'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals("$Kz", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(47, token1.endLine);
      assertEquals(112, token1.endColumn);
      assertEquals(110, token1.beginColumn);
      assertEquals(47, token1.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(113, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(113, javaCharStream0.getBeginColumn());
      assertEquals(113, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(">", token2.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token_GTToken0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(113, token2.beginColumn);
      assertEquals(113, token2.endColumn);
      assertEquals(47, token2.endLine);
      assertEquals(124, token2.kind);
      assertEquals(47, token2.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token_GTToken0));
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertEquals(113, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(113, javaCharStream0.getBeginColumn());
      assertEquals(113, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertNull(token_GTToken0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token_GTToken0, token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token_GTToken0.equals((Object)token2));
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 47);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 47. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'J';
      charArray0[2] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', 'J', ';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader0 = new StringReader("c*TV}C5=L|vL6QI");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      assertNotNull(bufferedReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\u0000', 'J', ';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      StringReader stringReader1 = new StringReader("(67X8g.Y_N=L<Ta");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-4029), 122);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals((-4029), javaCharStream0.getEndLine());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals((-4029), javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals((-4029), javaCharStream0.getBeginLine());
      assertEquals("(", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(122, token0.endColumn);
      assertEquals((-4029), token0.beginLine);
      assertEquals(77, token0.kind);
      assertEquals(122, token0.beginColumn);
      assertEquals((-4029), token0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaCharStream0.maxNextCharInd = 45;
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals((-4029), javaCharStream0.getEndLine());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals((-4029), javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals((-4029), javaCharStream0.getBeginLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals((-4029), javaCharStream0.getEndLine());
      assertEquals(127, javaCharStream0.getEndColumn());
      assertEquals((-4029), javaCharStream0.getLine());
      assertEquals(123, javaCharStream0.getBeginColumn());
      assertEquals(127, javaCharStream0.getColumn());
      assertEquals((-4029), javaCharStream0.getBeginLine());
      assertEquals("67X8g", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(127, token1.endColumn);
      assertEquals(123, token1.beginColumn);
      assertEquals((-4029), token1.endLine);
      assertEquals((-4029), token1.beginLine);
      assertEquals(74, token1.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(128, javaCharStream0.getEndColumn());
      assertEquals((-4029), javaCharStream0.getEndLine());
      assertEquals(128, javaCharStream0.getBeginColumn());
      assertEquals((-4029), javaCharStream0.getLine());
      assertEquals(128, javaCharStream0.getColumn());
      assertEquals((-4029), javaCharStream0.getBeginLine());
      assertEquals(".", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(128, token2.beginColumn);
      assertEquals(85, token2.kind);
      assertEquals(128, token2.endColumn);
      assertEquals((-4029), token2.beginLine);
      assertEquals((-4029), token2.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-4029));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -4029. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)74;
      StringReader stringReader0 = new StringReader("'");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("'");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("5JI~Ux");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 25, (-3567));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      stringReader2.reset();
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(25, javaCharStream0.getLine());
      assertEquals(25, javaCharStream0.getEndLine());
      assertEquals((-3567), javaCharStream0.getBeginColumn());
      assertEquals((-3565), javaCharStream0.getColumn());
      assertEquals((-3565), javaCharStream0.getEndColumn());
      assertEquals(25, javaCharStream0.getBeginLine());
      assertEquals("5JI", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(25, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(25, token0.beginLine);
      assertEquals((-3565), token0.endColumn);
      assertEquals((-3567), token0.beginColumn);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      long long0 = stringReader1.skip((-1558L));
      assertEquals(0L, long0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 763);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 763. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'u';
      charArray1[1] = 'w';
      charArray1[2] = '-';
      charArray1[3] = 'R';
      charArray1[4] = 'R';
      charArray1[5] = 'R';
      charArray1[6] = 'w';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'u', 'w', '-', 'R', 'R', 'R', 'w'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      StringReader stringReader0 = new StringReader("+(ta5jio 1=2");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 47, 47);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'u', 'w', '-', 'R', 'R', 'R', 'w'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'u', 'w', '-', 'R', 'R', 'R', 'w'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals("uw", token1.toString());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(48, javaCharStream0.getColumn());
      assertNotSame(charArray1, charArray0);
      assertEquals(47, token1.beginColumn);
      assertEquals(48, token1.endColumn);
      assertEquals(47, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(47, token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'u', 'w', '-', 'R', 'R', 'R', 'w'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals("-", token2.toString());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertNotSame(charArray1, charArray0);
      assertNotSame(token2, token1);
      assertEquals(47, token2.endLine);
      assertEquals(47, token2.beginLine);
      assertEquals(102, token2.kind);
      assertEquals(49, token2.endColumn);
      assertEquals(49, token2.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'u', 'w', '-', 'R', 'R', 'R', 'w'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(token2.equals((Object)token1));
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 88);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 88. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)74;
      StringReader stringReader0 = new StringReader("'");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("'");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("5JI~Ux");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 25, (-3567));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      stringReader2.reset();
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals((-3565), javaCharStream0.getEndColumn());
      assertEquals(25, javaCharStream0.getBeginLine());
      assertEquals((-3565), javaCharStream0.getColumn());
      assertEquals(25, javaCharStream0.getLine());
      assertEquals(25, javaCharStream0.getEndLine());
      assertEquals((-3567), javaCharStream0.getBeginColumn());
      assertEquals("5JI", token1.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(25, token1.beginLine);
      assertEquals((-3565), token1.endColumn);
      assertEquals((-3567), token1.beginColumn);
      assertEquals(25, token1.endLine);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertNotNull(mockPrintStream0);
      assertEquals((-3565), javaCharStream0.getEndColumn());
      assertEquals(25, javaCharStream0.getBeginLine());
      assertEquals((-3565), javaCharStream0.getColumn());
      assertEquals(25, javaCharStream0.getLine());
      assertEquals(25, javaCharStream0.getEndLine());
      assertEquals((-3567), javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals("~", token2.toString());
      assertEquals((-3564), javaCharStream0.getColumn());
      assertEquals((-3564), javaCharStream0.getEndColumn());
      assertEquals(25, javaCharStream0.getBeginLine());
      assertEquals((-3564), javaCharStream0.getBeginColumn());
      assertEquals(25, javaCharStream0.getLine());
      assertEquals(25, javaCharStream0.getEndLine());
      assertNotSame(token2, token1);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals((-3564), token2.beginColumn);
      assertEquals((-3564), token2.endColumn);
      assertEquals(25, token2.endLine);
      assertEquals(25, token2.beginLine);
      assertEquals(90, token2.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(token2.equals((Object)token1));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertEquals("Ux", token3.toString());
      assertEquals((-3563), javaCharStream0.getBeginColumn());
      assertEquals(25, javaCharStream0.getBeginLine());
      assertEquals((-3562), javaCharStream0.getEndColumn());
      assertEquals(25, javaCharStream0.getLine());
      assertEquals(25, javaCharStream0.getEndLine());
      assertEquals((-3562), javaCharStream0.getColumn());
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(25, token3.endLine);
      assertEquals(74, token3.kind);
      assertEquals(25, token3.beginLine);
      assertEquals((-3563), token3.beginColumn);
      assertEquals((-3562), token3.endColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("cnLs'5z>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, 60);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 47, (-1));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'0'}, charArray0);
      
      StringReader stringReader1 = new StringReader("3 `4>");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1, 2362, 2362);
      assertNotNull(javaCharStream2);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertEquals(47, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(47, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(47, javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals("cnLs", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream1.bufpos);
      assertEquals((-1), token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(47, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(47, token1.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1, 124);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 124. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'R';
      charArray0[3] = 'u';
      charArray0[4] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'w', 'w', 'R', 'u', '\''}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 41, 7);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'w', 'w', 'R', 'u', '\''}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'w', 'w', 'R', 'u', '\''}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'w', 'w', 'R', 'u', '\''}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'w', 'w', 'R', 'u', '\''}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(4, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(4, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals("wwRu", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertArrayEquals(new char[] {'w', 'w', 'R', 'u', '\''}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(4, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(4, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals("", token1.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertArrayEquals(new char[] {'w', 'w', 'R', 'u', '\''}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 6.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)74;
      StringReader stringReader0 = new StringReader("'");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("'");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("5JI~Ux");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 28, (-3567));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      stringReader2.reset();
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals((-3565), javaCharStream0.getEndColumn());
      assertEquals((-3565), javaCharStream0.getColumn());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals((-3567), javaCharStream0.getBeginColumn());
      assertEquals("5JI", token0.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(28, token0.beginLine);
      assertEquals(28, token0.endLine);
      assertEquals((-3565), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-3567), token0.beginColumn);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals((-3565), javaCharStream0.getEndColumn());
      assertEquals((-3565), javaCharStream0.getColumn());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals((-3567), javaCharStream0.getBeginColumn());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      long long0 = stringReader1.skip((-1558L));
      assertEquals(0L, long0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('~', char0);
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals((-3564), javaCharStream0.getColumn());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals((-3567), javaCharStream0.getBeginColumn());
      assertEquals((-3564), javaCharStream0.getEndColumn());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals("Ux", token1.toString());
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals((-3563), javaCharStream0.getBeginColumn());
      assertEquals((-3562), javaCharStream0.getColumn());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals((-3562), javaCharStream0.getEndColumn());
      assertNotSame(token1, token0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertEquals(28, token1.beginLine);
      assertEquals((-3562), token1.endColumn);
      assertEquals((-3563), token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(28, token1.endLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token1.equals((Object)token0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'D', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader0 = new StringReader("if");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 98, 917);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'D', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'D', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(98, javaCharStream0.getEndLine());
      assertEquals(917, javaCharStream0.getBeginColumn());
      assertEquals(917, javaCharStream0.getColumn());
      assertEquals(98, javaCharStream0.getBeginLine());
      assertEquals(98, javaCharStream0.getLine());
      assertEquals(917, javaCharStream0.getEndColumn());
      assertEquals("D", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(917, token1.beginColumn);
      assertEquals(98, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(917, token1.endColumn);
      assertEquals(98, token1.endLine);
      assertArrayEquals(new char[] {'D', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 98, column 918.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("OP]*.PV'NVmVJe}");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 61);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = '=';
      charArray0[2] = 'j';
      charArray0[3] = 'm';
      charArray0[4] = '`';
      charArray0[5] = 'K';
      charArray0[6] = 'h';
      charArray0[7] = 'k';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'t', '=', 'j', 'm', '`', 'K', 'h', 'k'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 47, (-2315));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'t', '=', 'j', 'm', '`', 'K', 'h', 'k'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'t', '=', 'j', 'm', '`', 'K', 'h', 'k'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      
      token_GTToken0.image = "'>L|<9:yWhvFOq?|0i";
      assertEquals("'>L|<9:yWhvFOq?|0i", token_GTToken0.toString());
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'t', '=', 'j', 'm', '`', 'K', 'h', 'k'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertEquals("t", token1.toString());
      assertEquals((-2315), javaCharStream0.getBeginColumn());
      assertEquals((-2315), javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals((-2315), javaCharStream0.getColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(47, token1.endLine);
      assertEquals(47, token1.beginLine);
      assertEquals((-2315), token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals((-2315), token1.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'t', '=', 'j', 'm', '`', 'K', 'h', 'k'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager1.debugStream);
      assertNotNull(mockPrintStream0);
      assertEquals((-2315), javaCharStream0.getBeginColumn());
      assertEquals((-2315), javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals((-2315), javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'t', '=', 'j', 'm', '`', 'K', 'h', 'k'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertEquals((-2315), javaCharStream0.getBeginColumn());
      assertEquals((-2315), javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals((-2315), javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'t', '=', 'j', 'm', '`', 'K', 'h', 'k'}, charArray0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertEquals("=", token2.toString());
      assertEquals((-2314), javaCharStream0.getBeginColumn());
      assertEquals((-2314), javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals((-2314), javaCharStream0.getColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertEquals((-2314), token2.endColumn);
      assertEquals(87, token2.kind);
      assertEquals((-2314), token2.beginColumn);
      assertEquals(47, token2.beginLine);
      assertEquals(47, token2.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'t', '=', 'j', 'm', '`', 'K', 'h', 'k'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotNull(token3);
      assertEquals("jm", token3.toString());
      assertEquals((-2313), javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals((-2312), javaCharStream0.getColumn());
      assertEquals((-2312), javaCharStream0.getEndColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertEquals((-2313), token3.beginColumn);
      assertEquals(47, token3.beginLine);
      assertEquals((-2312), token3.endColumn);
      assertEquals(47, token3.endLine);
      assertEquals(74, token3.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'t', '=', 'j', 'm', '`', 'K', 'h', 'k'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-119);
      StringReader stringReader0 = new StringReader("'");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      charArray0[1] = 'R';
      charArray0[2] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'}', 'R', 't'}, charArray0);
      
      StringReader stringReader1 = new StringReader("K");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 198, (byte) (-119));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'}', 'R', 't'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'}', 'R', 't'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-119), javaCharStream0.getColumn());
      assertEquals(198, javaCharStream0.getEndLine());
      assertEquals((-119), javaCharStream0.getEndColumn());
      assertEquals(198, javaCharStream0.getBeginLine());
      assertEquals((-119), javaCharStream0.getBeginColumn());
      assertEquals(198, javaCharStream0.getLine());
      assertEquals("}", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-119), token0.beginColumn);
      assertEquals((-119), token0.endColumn);
      assertEquals(80, token0.kind);
      assertEquals(198, token0.endLine);
      assertEquals(198, token0.beginLine);
      assertArrayEquals(new char[] {'}', 'R', 't'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals("Rt", token1.toString());
      assertEquals(198, javaCharStream0.getEndLine());
      assertEquals((-117), javaCharStream0.getColumn());
      assertEquals((-117), javaCharStream0.getEndColumn());
      assertEquals(198, javaCharStream0.getBeginLine());
      assertEquals(198, javaCharStream0.getLine());
      assertEquals((-118), javaCharStream0.getBeginColumn());
      assertNotSame(token1, token0);
      assertEquals((-118), token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(198, token1.beginLine);
      assertEquals(198, token1.endLine);
      assertEquals((-117), token1.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'}', 'R', 't'}, charArray0);
      assertFalse(token1.equals((Object)token0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(198, javaCharStream0.getEndLine());
      assertEquals((-117), javaCharStream0.getColumn());
      assertEquals((-117), javaCharStream0.getEndColumn());
      assertEquals(198, javaCharStream0.getBeginLine());
      assertEquals(198, javaCharStream0.getLine());
      assertEquals((-118), javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'}', 'R', 't'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertEquals("", token2.toString());
      assertEquals(198, javaCharStream0.getEndLine());
      assertEquals((-117), javaCharStream0.getBeginColumn());
      assertEquals((-117), javaCharStream0.getColumn());
      assertEquals((-117), javaCharStream0.getEndColumn());
      assertEquals(198, javaCharStream0.getBeginLine());
      assertEquals(198, javaCharStream0.getLine());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(198, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals((-117), token2.endColumn);
      assertEquals((-117), token2.beginColumn);
      assertEquals(198, token2.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'}', 'R', 't'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      javaParserTokenManager1.SkipLexicalActions(token_GTToken0);
      assertEquals(198, javaCharStream0.getEndLine());
      assertEquals((-117), javaCharStream0.getBeginColumn());
      assertEquals((-117), javaCharStream0.getColumn());
      assertEquals((-117), javaCharStream0.getEndColumn());
      assertEquals(198, javaCharStream0.getBeginLine());
      assertEquals(198, javaCharStream0.getLine());
      assertNull(token_GTToken0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertArrayEquals(new char[] {'}', 'R', 't'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotNull(token3);
      assertEquals("", token3.toString());
      assertEquals(198, javaCharStream0.getEndLine());
      assertEquals((-117), javaCharStream0.getBeginColumn());
      assertEquals((-117), javaCharStream0.getColumn());
      assertEquals((-117), javaCharStream0.getEndColumn());
      assertEquals(198, javaCharStream0.getBeginLine());
      assertEquals(198, javaCharStream0.getLine());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertEquals(0, token3.kind);
      assertEquals((-117), token3.endColumn);
      assertEquals((-117), token3.beginColumn);
      assertEquals(198, token3.endLine);
      assertEquals(198, token3.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'}', 'R', 't'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = 'r';
      charArray0[2] = '5';
      charArray0[3] = 'r';
      charArray0[4] = '5';
      charArray0[5] = 'u';
      charArray0[6] = 'B';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'^', 'r', '5', 'r', '5', 'u', 'B'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'^', 'r', '5', 'r', '5', 'u', 'B'}, charArray0);
      
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0);
      assertNotNull(pushbackReader0);
      assertArrayEquals(new char[] {'^', 'r', '5', 'r', '5', 'u', 'B'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackReader0, 14, 105);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'^', 'r', '5', 'r', '5', 'u', 'B'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager2);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'^', 'r', '5', 'r', '5', 'u', 'B'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      char char0 = javaCharStream1.readChar();
      assertEquals('^', char0);
      assertEquals(105, javaCharStream1.getBeginColumn());
      assertEquals(105, javaCharStream1.getColumn());
      assertEquals(14, javaCharStream1.getBeginLine());
      assertEquals(14, javaCharStream1.getLine());
      assertEquals(14, javaCharStream1.getEndLine());
      assertEquals(105, javaCharStream1.getEndColumn());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'^', 'r', '5', 'r', '5', 'u', 'B'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager3);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNull(token_GTToken0.toString());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager3);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager3));
      
      Token token0 = javaParserTokenManager2.getNextToken();
      assertNotNull(token0);
      assertEquals(106, javaCharStream1.getBeginColumn());
      assertEquals(14, javaCharStream1.getBeginLine());
      assertEquals(14, javaCharStream1.getLine());
      assertEquals(14, javaCharStream1.getEndLine());
      assertEquals(111, javaCharStream1.getEndColumn());
      assertEquals(111, javaCharStream1.getColumn());
      assertEquals("r5r5uB", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager3);
      assertEquals(5, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(14, token0.endLine);
      assertEquals(106, token0.beginColumn);
      assertEquals(14, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(111, token0.endColumn);
      assertArrayEquals(new char[] {'^', 'r', '5', 'r', '5', 'u', 'B'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager3));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      char[] charArray0 = new char[16];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = 'g';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 41, 47);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals("UU", token1.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(41, token1.beginLine);
      assertEquals(47, token1.beginColumn);
      assertEquals(48, token1.endColumn);
      assertEquals(41, token1.endLine);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertNotNull(mockPrintStream0);
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(">>>", token2.toString());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertNotSame(token2, token_GTToken0);
      assertNotSame(token2, token_GTToken1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(51, token2.endColumn);
      assertEquals(41, token2.endLine);
      assertEquals(49, token2.beginColumn);
      assertEquals(41, token2.beginLine);
      assertEquals(124, token2.kind);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token2.equals((Object)token_GTToken0));
      assertFalse(token2.equals((Object)token_GTToken1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotNull(token3);
      assertEquals(">>", token3.toString());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token_GTToken1);
      assertNotSame(token3, token_GTToken0);
      assertNotSame(token3, token2);
      assertEquals(50, token3.beginColumn);
      assertEquals(41, token3.endLine);
      assertEquals(124, token3.kind);
      assertEquals(51, token3.endColumn);
      assertEquals(41, token3.beginLine);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token_GTToken1));
      assertFalse(token3.equals((Object)token_GTToken0));
      assertFalse(token3.equals((Object)token2));
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals("UU", token1.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(41, token1.beginLine);
      assertEquals(47, token1.beginColumn);
      assertEquals(48, token1.endColumn);
      assertEquals(41, token1.endLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertEquals(">", token4.toString());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertNotSame(token4, token2);
      assertNotSame(token4, token_GTToken0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token_GTToken1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(51, token4.beginColumn);
      assertEquals(51, token4.endColumn);
      assertEquals(41, token4.endLine);
      assertEquals(41, token4.beginLine);
      assertEquals(124, token4.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token_GTToken0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token_GTToken1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'w', 'w', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader0 = new StringReader("3 `4>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2362, 2362);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(2362, javaCharStream0.getBeginLine());
      assertEquals(2362, javaCharStream0.getLine());
      assertEquals(2362, javaCharStream0.getColumn());
      assertEquals(2362, javaCharStream0.getEndColumn());
      assertEquals(2362, javaCharStream0.getBeginColumn());
      assertEquals(2362, javaCharStream0.getEndLine());
      assertEquals("3", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2362, token1.endLine);
      assertEquals(2362, token1.beginLine);
      assertEquals(66, token1.kind);
      assertEquals(2362, token1.beginColumn);
      assertEquals(2362, token1.endColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 2362);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2362. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader(")z&");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2452), (-2452));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals((-2452), javaCharStream0.getColumn());
      assertEquals((-2452), javaCharStream0.getEndLine());
      assertEquals((-2452), javaCharStream0.getEndColumn());
      assertEquals((-2452), javaCharStream0.getLine());
      assertEquals((-2452), javaCharStream0.getBeginLine());
      assertEquals((-2452), javaCharStream0.getBeginColumn());
      assertEquals(")", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2452), token1.endColumn);
      assertEquals((-2452), token1.endLine);
      assertEquals((-2452), token1.beginLine);
      assertEquals((-2452), token1.beginColumn);
      assertEquals(78, token1.kind);
      
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("OP]*.PV'NVmVJe}");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 61);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 61, 61);
      assertNotNull(javaCharStream0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals(62, javaCharStream0.getColumn());
      assertEquals(62, javaCharStream0.getEndColumn());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getBeginColumn());
      assertEquals("OP", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(61, token0.beginColumn);
      assertEquals(61, token0.beginLine);
      assertEquals(62, token0.endColumn);
      assertEquals(61, token0.endLine);
      assertEquals(74, token0.kind);
      
      long long0 = stringReader0.skip((-440L));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(lineNumberReader0);
      assertNotNull(javaCharStream1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token1 = token_GTToken0.specialToken;
      assertNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(63, javaCharStream0.getEndColumn());
      assertEquals(63, javaCharStream0.getBeginColumn());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals(63, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals("]", token2.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(63, token2.endColumn);
      assertEquals(63, token2.beginColumn);
      assertEquals(82, token2.kind);
      assertEquals(61, token2.beginLine);
      assertEquals(61, token2.endLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(63, javaCharStream0.getEndColumn());
      assertEquals(63, javaCharStream0.getBeginColumn());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals(63, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.TokenLexicalActions((Token) null);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(63, javaCharStream0.getEndColumn());
      assertEquals(63, javaCharStream0.getBeginColumn());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals(63, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token3);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(63, javaCharStream0.getEndColumn());
      assertEquals(63, javaCharStream0.getBeginColumn());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals(63, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals("]", token3.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(61, token3.endLine);
      assertEquals(61, token3.beginLine);
      assertEquals(82, token3.kind);
      assertEquals(63, token3.endColumn);
      assertEquals(63, token3.beginColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '0';
      charArray0[4] = 'U';
      charArray0[5] = '\'';
      charArray0[6] = 'U';
      charArray0[7] = '\'';
      charArray0[8] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '\'', '\'', '0', 'U', '\'', 'U', '\'', 'U'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 41, 29);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'\'', '\'', '\'', '0', 'U', '\'', 'U', '\'', 'U'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'\'', '\'', '\'', '0', 'U', '\'', 'U', '\'', 'U'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 2385, 29);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'\'', '\'', '\'', '0', 'U', '\'', 'U', '\'', 'U'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'\'', '\'', '\'', '0', 'U', '\'', 'U', '\'', 'U'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.jjmatchedKind = 0;
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 41, column 30.  Encountered: \"\\'\" (39), after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("cnLs'5z>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, 60);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 47, (-1));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'0'}, charArray0);
      
      StringReader stringReader1 = new StringReader("3 `4>");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1, 2362, 2362);
      assertNotNull(javaCharStream2);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      Token token0 = javaParserTokenManager2.getNextToken();
      assertNotNull(token0);
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(63, javaCharStream0.getColumn());
      assertEquals(63, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(60, javaCharStream0.getBeginColumn());
      assertEquals("cnLs", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(47, token0.endLine);
      assertEquals(63, token0.endColumn);
      assertEquals(47, token0.beginLine);
      assertEquals(60, token0.beginColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 47, column 66.  Encountered: \"z\" (122), after : \"\\'5\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("OP]*.PV'NVmVJe}");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 61);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = '=';
      charArray0[2] = 'j';
      charArray0[3] = 'm';
      charArray0[4] = '`';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'t', '=', 'j', 'm', '`', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader1 = new StringReader("~");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 61, (-4029));
      assertNotNull(javaCharStream0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      javaCharStream0.ReInit((Reader) pushbackReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("OP", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertEquals("]", token1.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertNotSame(token1, token0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(3, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      assertEquals(82, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token1.equals((Object)token0));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertEquals("*", token2.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(4, token2.beginColumn);
      assertEquals(103, token2.kind);
      assertEquals(4, token2.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertEquals(".", token3.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(5, token3.beginColumn);
      assertEquals(5, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertEquals(85, token3.kind);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      char[] charArray0 = new char[16];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 41, 47);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals("UU", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(48, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(41, token1.beginLine);
      assertEquals(47, token1.beginColumn);
      assertEquals(41, token1.endLine);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(">>>", token2.toString());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertNotSame(token2, token_GTToken1);
      assertNotSame(token2, token_GTToken0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(49, token2.beginColumn);
      assertEquals(124, token2.kind);
      assertEquals(41, token2.beginLine);
      assertEquals(51, token2.endColumn);
      assertEquals(41, token2.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(token2.equals((Object)token_GTToken1));
      assertFalse(token2.equals((Object)token_GTToken0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotNull(token3);
      assertEquals(">>", token3.toString());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token_GTToken1);
      assertNotSame(token3, token_GTToken0);
      assertNotSame(token3, token2);
      assertEquals(50, token3.beginColumn);
      assertEquals(51, token3.endColumn);
      assertEquals(41, token3.endLine);
      assertEquals(41, token3.beginLine);
      assertEquals(124, token3.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token_GTToken1));
      assertFalse(token3.equals((Object)token_GTToken0));
      assertFalse(token3.equals((Object)token2));
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals("UU", token1.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(48, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(41, token1.beginLine);
      assertEquals(47, token1.beginColumn);
      assertEquals(41, token1.endLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertEquals(">", token4.toString());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertNotSame(token4, token_GTToken1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token_GTToken0);
      assertNotSame(token4, token2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(124, token4.kind);
      assertEquals(41, token4.beginLine);
      assertEquals(41, token4.endLine);
      assertEquals(51, token4.beginColumn);
      assertEquals(51, token4.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(token4.equals((Object)token_GTToken1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token_GTToken0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("OP]*.PV'NVmVJe}");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 61);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = '=';
      charArray0[2] = 'j';
      charArray0[3] = 'm';
      charArray0[4] = '`';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'t', '=', 'j', 'm', '`', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader1 = new StringReader("~");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 61, (-4029));
      assertNotNull(javaCharStream0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      javaCharStream0.ReInit((Reader) pushbackReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader0, stringReader1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("OP", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertEquals("]", token1.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertNotSame(token1, token0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(82, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token1.equals((Object)token0));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertEquals("*", token2.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(103, token2.kind);
      assertEquals(4, token2.beginColumn);
      assertEquals(4, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertEquals(".", token3.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertEquals(5, token3.beginColumn);
      assertEquals(5, token3.endColumn);
      assertEquals(85, token3.kind);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals("PV", token4.toString());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(7, token4.endColumn);
      assertEquals(74, token4.kind);
      assertEquals(1, token4.beginLine);
      assertEquals(6, token4.beginColumn);
      assertEquals(1, token4.endLine);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("l Tc?!55");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1473, 1473);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token.GTToken token_GTToken2 = new Token.GTToken();
      assertNotNull(token_GTToken2);
      assertNull(token_GTToken2.toString());
      assertEquals(0, token_GTToken2.endColumn);
      assertEquals(0, token_GTToken2.beginColumn);
      assertEquals(0, token_GTToken2.beginLine);
      assertEquals(0, token_GTToken2.kind);
      assertEquals(0, token_GTToken2.endLine);
      assertFalse(token_GTToken2.equals((Object)token_GTToken1));
      assertFalse(token_GTToken2.equals((Object)token_GTToken0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(1473, javaCharStream0.getBeginLine());
      assertEquals(1473, javaCharStream0.getLine());
      assertEquals(1473, javaCharStream0.getEndColumn());
      assertEquals(1473, javaCharStream0.getBeginColumn());
      assertEquals(1473, javaCharStream0.getColumn());
      assertEquals(1473, javaCharStream0.getEndLine());
      assertEquals("l", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1473, token1.beginLine);
      assertEquals(1473, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(1473, token1.endColumn);
      assertEquals(1473, token1.endLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(1473, javaCharStream0.getBeginLine());
      assertEquals(1473, javaCharStream0.getLine());
      assertEquals(1473, javaCharStream0.getEndColumn());
      assertEquals(1473, javaCharStream0.getBeginColumn());
      assertEquals(1473, javaCharStream0.getColumn());
      assertEquals(1473, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.TokenLexicalActions((Token) null);
      assertEquals(1473, javaCharStream0.getBeginLine());
      assertEquals(1473, javaCharStream0.getLine());
      assertEquals(1473, javaCharStream0.getEndColumn());
      assertEquals(1473, javaCharStream0.getBeginColumn());
      assertEquals(1473, javaCharStream0.getColumn());
      assertEquals(1473, javaCharStream0.getEndLine());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token2);
      assertEquals(1473, javaCharStream0.getBeginLine());
      assertEquals(1473, javaCharStream0.getLine());
      assertEquals(1473, javaCharStream0.getEndColumn());
      assertEquals(1473, javaCharStream0.getBeginColumn());
      assertEquals(1473, javaCharStream0.getColumn());
      assertEquals(1473, javaCharStream0.getEndLine());
      assertEquals("l", token2.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token2.kind);
      assertEquals(1473, token2.beginLine);
      assertEquals(1473, token2.beginColumn);
      assertEquals(1473, token2.endColumn);
      assertEquals(1473, token2.endLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'J';
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'h';
      charArray1[2] = 'e';
      charArray1[3] = 'J';
      charArray1[4] = 'J';
      charArray1[5] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'h', '\u0000', 'e', 'J', 'J', 'a'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-2315), 'J');
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'h', '\u0000', 'e', 'J', 'J', 'a'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'h', '\u0000', 'e', 'J', 'J', 'a'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'h', '\u0000', 'e', 'J', 'J', 'a'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertEquals((-2315), javaCharStream0.getLine());
      assertEquals((-2315), javaCharStream0.getBeginLine());
      assertEquals(74, javaCharStream0.getBeginColumn());
      assertEquals(74, javaCharStream0.getColumn());
      assertEquals(74, javaCharStream0.getEndColumn());
      assertEquals((-2315), javaCharStream0.getEndLine());
      assertEquals("h", token1.toString());
      assertNotSame(charArray1, charArray0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals((-2315), token1.beginLine);
      assertEquals((-2315), token1.endLine);
      assertEquals(74, token1.endColumn);
      assertArrayEquals(new char[] {'h', '\u0000', 'e', 'J', 'J', 'a'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -2315, column 75.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("\\");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = '!';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'B', '!'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 41, 47);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'B', '!'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'B', '!'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      Token token0 = token_GTToken1.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals("B", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(41, token1.beginLine);
      assertEquals(47, token1.endColumn);
      assertEquals(41, token1.endLine);
      assertEquals(47, token1.beginColumn);
      assertArrayEquals(new char[] {'B', '!'}, charArray0);
      
      Token.GTToken token_GTToken2 = new Token.GTToken();
      assertNotNull(token_GTToken2);
      assertNull(token_GTToken2.toString());
      assertEquals(0, token_GTToken2.endLine);
      assertEquals(0, token_GTToken2.beginLine);
      assertEquals(0, token_GTToken2.kind);
      assertEquals(0, token_GTToken2.endColumn);
      assertEquals(0, token_GTToken2.beginColumn);
      assertFalse(token_GTToken2.equals((Object)token_GTToken1));
      assertFalse(token_GTToken2.equals((Object)token_GTToken0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'B', '!'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertEquals("!", token2.toString());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertNotSame(token2, token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(48, token2.endColumn);
      assertEquals(41, token2.endLine);
      assertEquals(41, token2.beginLine);
      assertEquals(48, token2.beginColumn);
      assertEquals(89, token2.kind);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'B', '!'}, charArray0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotNull(token3);
      assertEquals("", token3.toString());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, token3.kind);
      assertEquals(41, token3.beginLine);
      assertEquals(48, token3.endColumn);
      assertEquals(41, token3.endLine);
      assertEquals(48, token3.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'B', '!'}, charArray0);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token4 = token_GTToken0.next;
      assertNull(token4);
      
      javaParserTokenManager1.SkipLexicalActions((Token) null);
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'B', '!'}, charArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token5 = javaParserTokenManager1.getNextToken();
      assertNotNull(token5);
      assertEquals("", token5.toString());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertNotSame(token5, token1);
      assertNotSame(token5, token2);
      assertNotSame(token5, token3);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(48, token5.beginColumn);
      assertEquals(48, token5.endColumn);
      assertEquals(41, token5.beginLine);
      assertEquals(0, token5.kind);
      assertEquals(41, token5.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'B', '!'}, charArray0);
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token3));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'B', '!'}, charArray0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      javaParserTokenManager2.ReInit(javaCharStream0);
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'B', '!'}, charArray0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      char[] charArray0 = new char[16];
      charArray0[0] = 'U';
      StringReader stringReader0 = new StringReader("switch");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-5), (-5));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals((-5), javaCharStream0.getEndLine());
      assertEquals((-5), javaCharStream0.getLine());
      assertEquals((-5), javaCharStream0.getBeginLine());
      assertEquals((-5), javaCharStream0.getBeginColumn());
      assertEquals("switch", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(0, token1.endColumn);
      assertEquals(55, token1.kind);
      assertEquals((-5), token1.endLine);
      assertEquals((-5), token1.beginLine);
      assertEquals((-5), token1.beginColumn);
      
      try { 
        stringReader0.skip(562949953421312L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("protected");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, 33);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals("protected", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(33, token0.beginColumn);
      assertEquals(41, token0.endColumn);
      assertEquals(48, token0.kind);
      assertEquals(47, token0.beginLine);
      assertEquals(47, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(47, token1.endLine);
      assertEquals(41, token1.beginColumn);
      assertEquals(41, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(47, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertNotNull(mockPrintStream0);
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals("", token2.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(41, token2.endColumn);
      assertEquals(47, token2.endLine);
      assertEquals(41, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(47, token2.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals("", token3.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(41, token3.endColumn);
      assertEquals(47, token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals(47, token3.beginLine);
      assertEquals(41, token3.beginColumn);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals("", token4.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token4.kind);
      assertEquals(47, token4.beginLine);
      assertEquals(41, token4.endColumn);
      assertEquals(47, token4.endLine);
      assertEquals(41, token4.beginColumn);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 109, 109);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader("|e%wY2qF`o\"6");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader1);
      assertNotNull(pushbackReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackReader0, 32, 893);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      stringReader1.reset();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(893, javaCharStream1.getColumn());
      assertEquals(32, javaCharStream1.getLine());
      assertEquals(32, javaCharStream1.getBeginLine());
      assertEquals(893, javaCharStream1.getEndColumn());
      assertEquals(32, javaCharStream1.getEndLine());
      assertEquals(893, javaCharStream1.getBeginColumn());
      assertEquals("|", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(32, token0.beginLine);
      assertEquals(893, token0.endColumn);
      assertEquals(32, token0.endLine);
      assertEquals(893, token0.beginColumn);
      assertEquals(106, token0.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      Token token1 = token_GTToken0.specialToken;
      assertNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(894, javaCharStream1.getEndColumn());
      assertEquals(894, javaCharStream1.getColumn());
      assertEquals(32, javaCharStream1.getLine());
      assertEquals(32, javaCharStream1.getBeginLine());
      assertEquals(894, javaCharStream1.getBeginColumn());
      assertEquals(32, javaCharStream1.getEndLine());
      assertEquals("e", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(74, token2.kind);
      assertEquals(32, token2.endLine);
      assertEquals(32, token2.beginLine);
      assertEquals(894, token2.beginColumn);
      assertEquals(894, token2.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token0));
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 4802);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4802. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 109, 109);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader1 = new StringReader("?Qh$ C");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = (-1294);
      PushbackReader pushbackReader0 = new PushbackReader(stringReader1);
      assertNotNull(pushbackReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackReader0, 32, 893);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      stringReader1.reset();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(32, javaCharStream1.getBeginLine());
      assertEquals(893, javaCharStream1.getEndColumn());
      assertEquals(32, javaCharStream1.getLine());
      assertEquals(32, javaCharStream1.getEndLine());
      assertEquals(893, javaCharStream1.getBeginColumn());
      assertEquals(893, javaCharStream1.getColumn());
      assertEquals("?", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(893, token0.beginColumn);
      assertEquals(32, token0.endLine);
      assertEquals(91, token0.kind);
      assertEquals(893, token0.endColumn);
      assertEquals(32, token0.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-1294));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1294. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'J';
      charArray0[2] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', 'J', ';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader0 = new StringReader("c*TV}C5=L|vL6QI");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      assertNotNull(bufferedReader0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\u0000', 'J', ';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      StringReader stringReader1 = new StringReader("(67X8g.Y_N=L<Ta");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-4029), 'J');
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(74, javaCharStream0.getEndColumn());
      assertEquals(74, javaCharStream0.getBeginColumn());
      assertEquals(74, javaCharStream0.getColumn());
      assertEquals((-4029), javaCharStream0.getBeginLine());
      assertEquals((-4029), javaCharStream0.getLine());
      assertEquals((-4029), javaCharStream0.getEndLine());
      assertEquals("(", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.beginColumn);
      assertEquals(77, token0.kind);
      assertEquals(74, token0.endColumn);
      assertEquals((-4029), token0.beginLine);
      assertEquals((-4029), token0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('6', char0);
      assertEquals(75, javaCharStream0.getColumn());
      assertEquals(75, javaCharStream0.getEndColumn());
      assertEquals(74, javaCharStream0.getBeginColumn());
      assertEquals((-4029), javaCharStream0.getBeginLine());
      assertEquals((-4029), javaCharStream0.getLine());
      assertEquals((-4029), javaCharStream0.getEndLine());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endLine);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals("7X8g", token1.toString());
      assertEquals(76, javaCharStream0.getBeginColumn());
      assertEquals(79, javaCharStream0.getColumn());
      assertEquals((-4029), javaCharStream0.getBeginLine());
      assertEquals((-4029), javaCharStream0.getLine());
      assertEquals((-4029), javaCharStream0.getEndLine());
      assertEquals(79, javaCharStream0.getEndColumn());
      assertNotSame(token1, token0);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(74, token1.kind);
      assertEquals(76, token1.beginColumn);
      assertEquals((-4029), token1.endLine);
      assertEquals((-4029), token1.beginLine);
      assertEquals(79, token1.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = 'D';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '>';
      charArray0[6] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', '>', 'D', '>', '>', '>', '>'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 41, 41);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'>', '>', 'D', '>', '>', '>', '>'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'>', '>', 'D', '>', '>', '>', '>'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(">>", token1.toString());
      assertNotSame(token1, token_GTToken0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(41, token1.beginColumn);
      assertEquals(41, token1.beginLine);
      assertEquals(42, token1.endColumn);
      assertEquals(41, token1.endLine);
      assertEquals(124, token1.kind);
      assertArrayEquals(new char[] {'>', '>', 'D', '>', '>', '>', '>'}, charArray0);
      assertFalse(token1.equals((Object)token_GTToken0));
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endColumn);
      assertFalse(token_GTToken1.equals((Object)token1));
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 37, 42, 37);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', '>', 'D', '>', '>', '>', '>'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', '>', 'D', '>', '>', '>', '>'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertEquals(37, javaCharStream1.getEndLine());
      assertEquals(41, javaCharStream1.getColumn());
      assertEquals(37, javaCharStream1.getBeginLine());
      assertEquals(41, javaCharStream1.getEndColumn());
      assertEquals(41, javaCharStream1.getBeginColumn());
      assertEquals(37, javaCharStream1.getLine());
      assertEquals("", token2.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(41, token2.beginColumn);
      assertEquals(37, token2.beginLine);
      assertEquals(37, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(41, token2.endColumn);
      assertArrayEquals(new char[] {'>', '>', 'D', '>', '>', '>', '>'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertEquals(">", token3.toString());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertNotSame(token3, token1);
      assertNotSame(token3, token_GTToken0);
      assertNotSame(token3, token_GTToken1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(41, token3.endLine);
      assertEquals(124, token3.kind);
      assertEquals(42, token3.beginColumn);
      assertEquals(42, token3.endColumn);
      assertEquals(41, token3.beginLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', '>', 'D', '>', '>', '>', '>'}, charArray0);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token_GTToken0));
      assertFalse(token3.equals((Object)token_GTToken1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      token3.endColumn = 30;
      assertEquals(">", token3.toString());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.SkipLexicalActions(token3);
      assertEquals(">", token3.toString());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertNotSame(token3, token1);
      assertNotSame(token3, token_GTToken0);
      assertNotSame(token3, token_GTToken1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(41, token3.endLine);
      assertEquals(30, token3.endColumn);
      assertEquals(124, token3.kind);
      assertEquals(42, token3.beginColumn);
      assertEquals(41, token3.beginLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', '>', 'D', '>', '>', '>', '>'}, charArray0);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token_GTToken0));
      assertFalse(token3.equals((Object)token_GTToken1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', '>', 'D', '>', '>', '>', '>'}, charArray0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token4 = javaParserTokenManager2.getNextToken();
      assertNotNull(token4);
      assertEquals("D", token4.toString());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token4, token2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(74, token4.kind);
      assertEquals(41, token4.beginLine);
      assertEquals(43, token4.beginColumn);
      assertEquals(43, token4.endColumn);
      assertEquals(41, token4.endLine);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', '>', 'D', '>', '>', '>', '>'}, charArray0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      javaParserTokenManager1.ReInit(javaCharStream0);
      assertEquals(37, javaCharStream1.getEndLine());
      assertEquals(41, javaCharStream1.getColumn());
      assertEquals(37, javaCharStream1.getBeginLine());
      assertEquals(41, javaCharStream1.getEndColumn());
      assertEquals(41, javaCharStream1.getBeginColumn());
      assertEquals(37, javaCharStream1.getLine());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', '>', 'D', '>', '>', '>', '>'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      char[] charArray0 = new char[16];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 41, 47);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals("UU", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(48, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(41, token0.beginLine);
      assertEquals(47, token0.beginColumn);
      assertEquals(41, token0.endLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertEquals(">>>", token1.toString());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertNotSame(token1, token_GTToken0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(124, token1.kind);
      assertEquals(41, token1.beginLine);
      assertEquals(51, token1.endColumn);
      assertEquals(49, token1.beginColumn);
      assertEquals(41, token1.endLine);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token1.equals((Object)token_GTToken0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager3);
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertEquals(">>", token2.toString());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertNotSame(token2, token_GTToken0);
      assertNotSame(token2, token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager3);
      assertEquals(50, token2.beginColumn);
      assertEquals(51, token2.endColumn);
      assertEquals(41, token2.endLine);
      assertEquals(41, token2.beginLine);
      assertEquals(124, token2.kind);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token2.equals((Object)token_GTToken0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager3));
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotNull(token3);
      assertEquals(">", token3.toString());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertNotSame(token3, token_GTToken0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager3);
      assertEquals(124, token3.kind);
      assertEquals(41, token3.beginLine);
      assertEquals(41, token3.endLine);
      assertEquals(51, token3.beginColumn);
      assertEquals(51, token3.endColumn);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token3.equals((Object)token_GTToken0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager3));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[24];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = 'S';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '>';
      charArray0[6] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 41, 41);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      
      token_GTToken0.endColumn = 807;
      assertNull(token_GTToken0.toString());
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(">>", token1.toString());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertNotSame(token1, token_GTToken0);
      assertEquals(41, token1.endLine);
      assertEquals(41, token1.beginLine);
      assertEquals(124, token1.kind);
      assertEquals(41, token1.beginColumn);
      assertEquals(42, token1.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token1.equals((Object)token_GTToken0));
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertFalse(token_GTToken1.equals((Object)token1));
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 37, 42, 37);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertEquals(37, javaCharStream1.getLine());
      assertEquals(41, javaCharStream1.getEndColumn());
      assertEquals(41, javaCharStream1.getColumn());
      assertEquals(37, javaCharStream1.getBeginLine());
      assertEquals(41, javaCharStream1.getBeginColumn());
      assertEquals(37, javaCharStream1.getEndLine());
      assertEquals("", token2.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(37, token2.endLine);
      assertEquals(37, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(41, token2.beginColumn);
      assertEquals(41, token2.endColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertEquals(">", token3.toString());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertNotSame(token3, token_GTToken1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token_GTToken0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(124, token3.kind);
      assertEquals(42, token3.beginColumn);
      assertEquals(42, token3.endColumn);
      assertEquals(41, token3.beginLine);
      assertEquals(41, token3.endLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token3.equals((Object)token_GTToken1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token_GTToken0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      token3.endColumn = 30;
      assertEquals(">", token3.toString());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      
      javaParserTokenManager0.SkipLexicalActions(token3);
      assertEquals(">", token3.toString());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertNotSame(token3, token_GTToken1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token_GTToken0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(124, token3.kind);
      assertEquals(42, token3.beginColumn);
      assertEquals(41, token3.beginLine);
      assertEquals(41, token3.endLine);
      assertEquals(30, token3.endColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token3.equals((Object)token_GTToken1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token_GTToken0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token4 = javaParserTokenManager2.getNextToken();
      assertNotNull(token4);
      assertEquals("S", token4.toString());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(token4, token2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(43, token4.beginColumn);
      assertEquals(74, token4.kind);
      assertEquals(41, token4.beginLine);
      assertEquals(43, token4.endColumn);
      assertEquals(41, token4.endLine);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      javaParserTokenManager1.ReInit(javaCharStream0);
      assertEquals(37, javaCharStream1.getLine());
      assertEquals(41, javaCharStream1.getEndColumn());
      assertEquals(41, javaCharStream1.getColumn());
      assertEquals(37, javaCharStream1.getBeginLine());
      assertEquals(41, javaCharStream1.getBeginColumn());
      assertEquals(37, javaCharStream1.getEndLine());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = 'r';
      charArray0[2] = '5';
      charArray0[3] = 'r';
      charArray0[4] = '5';
      charArray0[5] = 'u';
      charArray0[6] = 'B';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'^', 'r', '5', 'r', '5', 'u', 'B'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'^', 'r', '5', 'r', '5', 'u', 'B'}, charArray0);
      
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0);
      assertNotNull(pushbackReader0);
      assertArrayEquals(new char[] {'^', 'r', '5', 'r', '5', 'u', 'B'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackReader0, 14, 105);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'^', 'r', '5', 'r', '5', 'u', 'B'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager2);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'^', 'r', '5', 'r', '5', 'u', 'B'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      
      Token token0 = javaParserTokenManager2.getNextToken();
      assertNotNull(token0);
      assertEquals(14, javaCharStream1.getEndLine());
      assertEquals(14, javaCharStream1.getLine());
      assertEquals(105, javaCharStream1.getBeginColumn());
      assertEquals(105, javaCharStream1.getEndColumn());
      assertEquals(105, javaCharStream1.getColumn());
      assertEquals(14, javaCharStream1.getBeginLine());
      assertEquals("^", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(105, token0.beginColumn);
      assertEquals(105, token0.endColumn);
      assertEquals(107, token0.kind);
      assertEquals(14, token0.beginLine);
      assertEquals(14, token0.endLine);
      assertArrayEquals(new char[] {'^', 'r', '5', 'r', '5', 'u', 'B'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager3);
      assertEquals(14, javaCharStream1.getEndLine());
      assertEquals(14, javaCharStream1.getLine());
      assertEquals(105, javaCharStream1.getBeginColumn());
      assertEquals(105, javaCharStream1.getEndColumn());
      assertEquals(105, javaCharStream1.getColumn());
      assertEquals(14, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'^', 'r', '5', 'r', '5', 'u', 'B'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("/zl`x~|>qY>fA");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, 47);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals("/", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(47, token1.endColumn);
      assertEquals(47, token1.beginColumn);
      assertEquals(104, token1.kind);
      assertEquals(47, token1.endLine);
      assertEquals(47, token1.beginLine);
      
      long long0 = stringReader0.skip(47);
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 47);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 47. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      char[] charArray0 = new char[16];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 41, 47);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("<6Upb");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-2429), 1487);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1487, javaCharStream1.getColumn());
      assertEquals((-2429), javaCharStream1.getLine());
      assertEquals((-2429), javaCharStream1.getBeginLine());
      assertEquals(1487, javaCharStream1.getEndColumn());
      assertEquals(1487, javaCharStream1.getBeginColumn());
      assertEquals((-2429), javaCharStream1.getEndLine());
      assertEquals("<", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-2429), token0.endLine);
      assertEquals((-2429), token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals(1487, token0.endColumn);
      assertEquals(1487, token0.beginColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals("6Upb", token1.toString());
      assertEquals((-2429), javaCharStream1.getLine());
      assertEquals((-2429), javaCharStream1.getBeginLine());
      assertEquals(1491, javaCharStream1.getColumn());
      assertEquals(1491, javaCharStream1.getEndColumn());
      assertEquals(1488, javaCharStream1.getBeginColumn());
      assertEquals((-2429), javaCharStream1.getEndLine());
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals((-2429), token1.endLine);
      assertEquals(1488, token1.beginColumn);
      assertEquals((-2429), token1.beginLine);
      assertEquals(1491, token1.endColumn);
      assertEquals(74, token1.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream1.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals("", token2.toString());
      assertEquals((-2429), javaCharStream1.getLine());
      assertEquals((-2429), javaCharStream1.getBeginLine());
      assertEquals(1491, javaCharStream1.getColumn());
      assertEquals(1491, javaCharStream1.getEndColumn());
      assertEquals(1491, javaCharStream1.getBeginColumn());
      assertEquals((-2429), javaCharStream1.getEndLine());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, token2.kind);
      assertEquals((-2429), token2.endLine);
      assertEquals(1491, token2.endColumn);
      assertEquals(1491, token2.beginColumn);
      assertEquals((-2429), token2.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedInputStream0, (-2138), 12);
      assertNotNull(javaCharStream2);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertEquals("", token3.toString());
      assertEquals((-2429), javaCharStream1.getLine());
      assertEquals((-2429), javaCharStream1.getBeginLine());
      assertEquals(1491, javaCharStream1.getColumn());
      assertEquals(1491, javaCharStream1.getEndColumn());
      assertEquals(1491, javaCharStream1.getBeginColumn());
      assertEquals((-2429), javaCharStream1.getEndLine());
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals((-2429), token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals((-2429), token3.beginLine);
      assertEquals(1491, token3.beginColumn);
      assertEquals(1491, token3.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      javaParserTokenManager0.setDebugStream(javaParserTokenManager1.debugStream);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals((-2429), javaCharStream1.getLine());
      assertEquals((-2429), javaCharStream1.getBeginLine());
      assertEquals(1491, javaCharStream1.getColumn());
      assertEquals(1491, javaCharStream1.getEndColumn());
      assertEquals(1491, javaCharStream1.getBeginColumn());
      assertEquals((-2429), javaCharStream1.getEndLine());
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      StringReader stringReader0 = new StringReader("\"\t\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, 47);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals("\"\t\"", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(73, token1.kind);
      assertEquals(49, token1.endColumn);
      assertEquals(47, token1.endLine);
      assertEquals(47, token1.beginColumn);
      assertEquals(47, token1.beginLine);
      
      long long0 = stringReader0.skip(47);
      assertEquals(0L, long0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 936);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 936. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = 'S';
      charArray0[2] = 'q';
      charArray0[3] = 'S';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'@', 'S', 'q', 'S'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte) (-119), (byte) (-119));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'@', 'S', 'q', 'S'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'@', 'S', 'q', 'S'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals((-119), javaCharStream0.getBeginLine());
      assertEquals((-119), javaCharStream0.getLine());
      assertEquals((-119), javaCharStream0.getEndColumn());
      assertEquals((-119), javaCharStream0.getBeginColumn());
      assertEquals((-119), javaCharStream0.getColumn());
      assertEquals((-119), javaCharStream0.getEndLine());
      assertEquals("@", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(86, token1.kind);
      assertEquals((-119), token1.beginLine);
      assertEquals((-119), token1.endColumn);
      assertEquals((-119), token1.beginColumn);
      assertEquals((-119), token1.endLine);
      assertArrayEquals(new char[] {'@', 'S', 'q', 'S'}, charArray0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 0, 0, 28);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'@', 'S', 'q', 'S'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals((-119), javaCharStream0.getBeginLine());
      assertEquals((-119), javaCharStream0.getLine());
      assertEquals((-119), javaCharStream0.getEndColumn());
      assertEquals((-119), javaCharStream0.getBeginColumn());
      assertEquals((-119), javaCharStream0.getColumn());
      assertEquals((-119), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'@', 'S', 'q', 'S'}, charArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertEquals((-119), javaCharStream0.getBeginLine());
      assertEquals((-116), javaCharStream0.getEndColumn());
      assertEquals((-119), javaCharStream0.getLine());
      assertEquals((-118), javaCharStream0.getBeginColumn());
      assertEquals((-116), javaCharStream0.getColumn());
      assertEquals((-119), javaCharStream0.getEndLine());
      assertEquals("SqS", token2.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-116), token2.endColumn);
      assertEquals((-119), token2.endLine);
      assertEquals((-118), token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals((-119), token2.beginLine);
      assertArrayEquals(new char[] {'@', 'S', 'q', 'S'}, charArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertEquals("", token3.toString());
      assertEquals((-119), javaCharStream0.getBeginLine());
      assertEquals((-116), javaCharStream0.getEndColumn());
      assertEquals((-119), javaCharStream0.getLine());
      assertEquals((-116), javaCharStream0.getBeginColumn());
      assertEquals((-116), javaCharStream0.getColumn());
      assertEquals((-119), javaCharStream0.getEndLine());
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals((-119), token3.beginLine);
      assertEquals((-116), token3.beginColumn);
      assertEquals((-116), token3.endColumn);
      assertEquals(0, token3.kind);
      assertEquals((-119), token3.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'@', 'S', 'q', 'S'}, charArray0);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals((-119), javaCharStream0.getBeginLine());
      assertEquals((-116), javaCharStream0.getEndColumn());
      assertEquals((-119), javaCharStream0.getLine());
      assertEquals((-116), javaCharStream0.getBeginColumn());
      assertEquals((-116), javaCharStream0.getColumn());
      assertEquals((-119), javaCharStream0.getEndLine());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'@', 'S', 'q', 'S'}, charArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[24];
      charArray0[1] = '>';
      StringReader stringReader0 = new StringReader("uY%c)!5i:]x");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 126, 126);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      Token.GTToken token_GTToken2 = new Token.GTToken();
      assertNotNull(token_GTToken2);
      assertNull(token_GTToken2.toString());
      assertEquals(0, token_GTToken2.kind);
      assertEquals(0, token_GTToken2.beginLine);
      assertEquals(0, token_GTToken2.endLine);
      assertEquals(0, token_GTToken2.beginColumn);
      assertEquals(0, token_GTToken2.endColumn);
      assertFalse(token_GTToken2.equals((Object)token_GTToken0));
      assertFalse(token_GTToken2.equals((Object)token_GTToken1));
      
      javaParserTokenManager0.lengthOfMatch = 0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(126, javaCharStream0.getLine());
      assertEquals(127, javaCharStream0.getEndColumn());
      assertEquals(126, javaCharStream0.getBeginLine());
      assertEquals(126, javaCharStream0.getBeginColumn());
      assertEquals(126, javaCharStream0.getEndLine());
      assertEquals(127, javaCharStream0.getColumn());
      assertEquals("uY", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(127, token0.endColumn);
      assertEquals(126, token0.beginColumn);
      assertEquals(126, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(126, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(126, javaCharStream0.getLine());
      assertEquals(126, javaCharStream0.getBeginLine());
      assertEquals(128, javaCharStream0.getBeginColumn());
      assertEquals(126, javaCharStream0.getEndLine());
      assertEquals(128, javaCharStream0.getEndColumn());
      assertEquals(128, javaCharStream0.getColumn());
      assertEquals("%", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(126, token1.endLine);
      assertEquals(108, token1.kind);
      assertEquals(128, token1.beginColumn);
      assertEquals(128, token1.endColumn);
      assertEquals(126, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 136);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 136. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader(", Tc?F55");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1473, 1473);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 521, 31);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(1473, javaCharStream0.getLine());
      assertEquals(1473, javaCharStream0.getColumn());
      assertEquals(1473, javaCharStream0.getEndLine());
      assertEquals(1473, javaCharStream0.getBeginColumn());
      assertEquals(1473, javaCharStream0.getBeginLine());
      assertEquals(1473, javaCharStream0.getEndColumn());
      assertEquals(",", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1473, token1.endLine);
      assertEquals(1473, token1.endColumn);
      assertEquals(84, token1.kind);
      assertEquals(1473, token1.beginColumn);
      assertEquals(1473, token1.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertEquals(1475, javaCharStream0.getBeginColumn());
      assertEquals(1473, javaCharStream0.getLine());
      assertEquals(1473, javaCharStream0.getEndLine());
      assertEquals(1476, javaCharStream0.getEndColumn());
      assertEquals(1473, javaCharStream0.getBeginLine());
      assertEquals(1476, javaCharStream0.getColumn());
      assertEquals("Tc", token2.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1473, token2.beginLine);
      assertEquals(1473, token2.endLine);
      assertEquals(1475, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(1476, token2.endColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertEquals(1473, javaCharStream0.getLine());
      assertEquals(1473, javaCharStream0.getEndLine());
      assertEquals(1477, javaCharStream0.getEndColumn());
      assertEquals(1473, javaCharStream0.getBeginLine());
      assertEquals(1477, javaCharStream0.getBeginColumn());
      assertEquals(1477, javaCharStream0.getColumn());
      assertEquals("?", token3.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(91, token3.kind);
      assertEquals(1477, token3.beginColumn);
      assertEquals(1477, token3.endColumn);
      assertEquals(1473, token3.endLine);
      assertEquals(1473, token3.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertEquals(1473, javaCharStream0.getLine());
      assertEquals(1473, javaCharStream0.getEndLine());
      assertEquals(1477, javaCharStream0.getEndColumn());
      assertEquals(1473, javaCharStream0.getBeginLine());
      assertEquals(1477, javaCharStream0.getBeginColumn());
      assertEquals(1477, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      Token token4 = javaParserTokenManager2.getNextToken();
      assertNotNull(token4);
      assertEquals(1473, javaCharStream0.getLine());
      assertEquals(1473, javaCharStream0.getEndLine());
      assertEquals(1478, javaCharStream0.getBeginColumn());
      assertEquals(1473, javaCharStream0.getBeginLine());
      assertEquals(1480, javaCharStream0.getColumn());
      assertEquals(1480, javaCharStream0.getEndColumn());
      assertEquals("F55", token4.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1478, token4.beginColumn);
      assertEquals(74, token4.kind);
      assertEquals(1480, token4.endColumn);
      assertEquals(1473, token4.endLine);
      assertEquals(1473, token4.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedInputStream0, 32, 1473);
      assertNotNull(javaCharStream2);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager3);
      assertEquals(1473, javaCharStream0.getLine());
      assertEquals(1473, javaCharStream0.getEndLine());
      assertEquals(1478, javaCharStream0.getBeginColumn());
      assertEquals(1473, javaCharStream0.getBeginLine());
      assertEquals(1480, javaCharStream0.getColumn());
      assertEquals(1480, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      
      Token token5 = javaParserTokenManager1.getNextToken();
      assertNotNull(token5);
      assertEquals(1473, javaCharStream0.getLine());
      assertEquals(1473, javaCharStream0.getEndLine());
      assertEquals(1473, javaCharStream0.getBeginLine());
      assertEquals(1480, javaCharStream0.getColumn());
      assertEquals(1480, javaCharStream0.getBeginColumn());
      assertEquals(1480, javaCharStream0.getEndColumn());
      assertEquals("", token5.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(token5, token2);
      assertNotSame(token5, token1);
      assertNotSame(token5, token4);
      assertNotSame(token5, token3);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager3);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token5.kind);
      assertEquals(1473, token5.endLine);
      assertEquals(1480, token5.endColumn);
      assertEquals(1480, token5.beginColumn);
      assertEquals(1473, token5.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token3));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      
      javaParserTokenManager2.setDebugStream(javaParserTokenManager0.debugStream);
      assertEquals(1473, javaCharStream0.getLine());
      assertEquals(1473, javaCharStream0.getEndLine());
      assertEquals(1473, javaCharStream0.getBeginLine());
      assertEquals(1480, javaCharStream0.getColumn());
      assertEquals(1480, javaCharStream0.getBeginColumn());
      assertEquals(1480, javaCharStream0.getEndColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager3);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager3));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("/zl`x~|>qY>fA");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, 47);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals("/", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(47, token0.endLine);
      assertEquals(47, token0.beginLine);
      assertEquals(104, token0.kind);
      assertEquals(47, token0.beginColumn);
      assertEquals(47, token0.endColumn);
      
      long long0 = stringReader0.skip(47);
      assertEquals(0L, long0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals("zl", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(47, token1.beginLine);
      assertEquals(48, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(49, token1.endColumn);
      assertEquals(47, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 47, column 50.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 109, 109);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader1 = new StringReader("|e%wY2qF`o\"6");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader1);
      assertNotNull(pushbackReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackReader0, 893, 14);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(14, javaCharStream1.getColumn());
      assertEquals(893, javaCharStream1.getLine());
      assertEquals(14, javaCharStream1.getEndColumn());
      assertEquals(893, javaCharStream1.getEndLine());
      assertEquals(893, javaCharStream1.getBeginLine());
      assertEquals(14, javaCharStream1.getBeginColumn());
      assertEquals("|", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(14, token1.beginColumn);
      assertEquals(14, token1.endColumn);
      assertEquals(893, token1.endLine);
      assertEquals(893, token1.beginLine);
      assertEquals(106, token1.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginColumn);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(893, javaCharStream1.getLine());
      assertEquals(15, javaCharStream1.getEndColumn());
      assertEquals(893, javaCharStream1.getEndLine());
      assertEquals(893, javaCharStream1.getBeginLine());
      assertEquals(15, javaCharStream1.getColumn());
      assertEquals(15, javaCharStream1.getBeginColumn());
      assertEquals("e", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(74, token2.kind);
      assertEquals(893, token2.beginLine);
      assertEquals(15, token2.beginColumn);
      assertEquals(15, token2.endColumn);
      assertEquals(893, token2.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token1));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertEquals(893, javaCharStream1.getLine());
      assertEquals(16, javaCharStream1.getEndColumn());
      assertEquals(16, javaCharStream1.getColumn());
      assertEquals(893, javaCharStream1.getEndLine());
      assertEquals(893, javaCharStream1.getBeginLine());
      assertEquals(16, javaCharStream1.getBeginColumn());
      assertEquals("%", token3.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals(108, token3.kind);
      assertEquals(16, token3.beginColumn);
      assertEquals(893, token3.beginLine);
      assertEquals(16, token3.endColumn);
      assertEquals(893, token3.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertEquals("wY2qF", token4.toString());
      assertEquals(893, javaCharStream1.getLine());
      assertEquals(893, javaCharStream1.getEndLine());
      assertEquals(893, javaCharStream1.getBeginLine());
      assertEquals(17, javaCharStream1.getBeginColumn());
      assertEquals(21, javaCharStream1.getEndColumn());
      assertEquals(21, javaCharStream1.getColumn());
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(893, token4.beginLine);
      assertEquals(893, token4.endLine);
      assertEquals(17, token4.beginColumn);
      assertEquals(74, token4.kind);
      assertEquals(21, token4.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream1.bufpos);
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      char[] charArray0 = new char[16];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = '>';
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'U';
      charArray1[1] = '>';
      charArray1[2] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'U', '>', 'W'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1661, 1661);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'U', '>', 'W'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("do");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 41, 47);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'U', '>', 'W'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'U', '>', 'W'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(47, javaCharStream1.getEndColumn());
      assertEquals(41, javaCharStream1.getBeginLine());
      assertEquals(47, javaCharStream1.getBeginColumn());
      assertEquals(41, javaCharStream1.getLine());
      assertEquals(47, javaCharStream1.getColumn());
      assertEquals(41, javaCharStream1.getEndLine());
      assertEquals("U", token0.toString());
      assertNotSame(charArray1, charArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(47, token0.endColumn);
      assertEquals(41, token0.endLine);
      assertEquals(47, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(41, token0.beginLine);
      assertArrayEquals(new char[] {'U', '>', 'W'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(">", token1.toString());
      assertEquals(41, javaCharStream1.getBeginLine());
      assertEquals(48, javaCharStream1.getBeginColumn());
      assertEquals(41, javaCharStream1.getLine());
      assertEquals(48, javaCharStream1.getColumn());
      assertEquals(48, javaCharStream1.getEndColumn());
      assertEquals(41, javaCharStream1.getEndLine());
      assertNotSame(token1, token_GTToken0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(48, token1.beginColumn);
      assertEquals(48, token1.endColumn);
      assertEquals(41, token1.endLine);
      assertEquals(41, token1.beginLine);
      assertEquals(124, token1.kind);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'U', '>', 'W'}, charArray1);
      assertFalse(token1.equals((Object)token_GTToken0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals("W", token2.toString());
      assertEquals(41, javaCharStream1.getBeginLine());
      assertEquals(49, javaCharStream1.getBeginColumn());
      assertEquals(41, javaCharStream1.getLine());
      assertEquals(49, javaCharStream1.getColumn());
      assertEquals(49, javaCharStream1.getEndColumn());
      assertEquals(41, javaCharStream1.getEndLine());
      assertNotSame(token2, token0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(49, token2.beginColumn);
      assertEquals(41, token2.endLine);
      assertEquals(49, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(41, token2.beginLine);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'U', '>', 'W'}, charArray1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedInputStream0, 1133, 124);
      assertNotNull(javaCharStream2);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertEquals(41, javaCharStream1.getBeginLine());
      assertEquals(49, javaCharStream1.getBeginColumn());
      assertEquals(41, javaCharStream1.getLine());
      assertEquals(49, javaCharStream1.getColumn());
      assertEquals(49, javaCharStream1.getEndColumn());
      assertEquals(41, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'U', '>', 'W'}, charArray1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertEquals("", token3.toString());
      assertEquals(41, javaCharStream1.getBeginLine());
      assertEquals(49, javaCharStream1.getBeginColumn());
      assertEquals(41, javaCharStream1.getLine());
      assertEquals(49, javaCharStream1.getColumn());
      assertEquals(49, javaCharStream1.getEndColumn());
      assertEquals(41, javaCharStream1.getEndLine());
      assertNotSame(charArray1, charArray0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(49, token3.endColumn);
      assertEquals(41, token3.endLine);
      assertEquals(49, token3.beginColumn);
      assertEquals(0, token3.kind);
      assertEquals(41, token3.beginLine);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'U', '>', 'W'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      javaParserTokenManager0.setDebugStream(javaParserTokenManager1.debugStream);
      assertEquals(41, javaCharStream1.getBeginLine());
      assertEquals(49, javaCharStream1.getBeginColumn());
      assertEquals(41, javaCharStream1.getLine());
      assertEquals(49, javaCharStream1.getColumn());
      assertEquals(49, javaCharStream1.getEndColumn());
      assertEquals(41, javaCharStream1.getEndLine());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'U', '>', 'W'}, charArray1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'J';
      charArray0[2] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', 'J', ';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader0 = new StringReader("xJ]5e\"P.\"V/vO`f*");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (-4044), (-4044));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals((-4044), javaCharStream0.getBeginColumn());
      assertEquals((-4043), javaCharStream0.getColumn());
      assertEquals((-4044), javaCharStream0.getEndLine());
      assertEquals((-4044), javaCharStream0.getBeginLine());
      assertEquals((-4043), javaCharStream0.getEndColumn());
      assertEquals((-4044), javaCharStream0.getLine());
      assertEquals("xJ", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-4044), token1.endLine);
      assertEquals((-4044), token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals((-4044), token1.beginColumn);
      assertEquals((-4043), token1.endColumn);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"super\"");
      assertFalse(boolean0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals((-4042), javaCharStream0.getBeginColumn());
      assertEquals((-4042), javaCharStream0.getColumn());
      assertEquals((-4044), javaCharStream0.getEndLine());
      assertEquals((-4044), javaCharStream0.getBeginLine());
      assertEquals((-4042), javaCharStream0.getEndColumn());
      assertEquals((-4044), javaCharStream0.getLine());
      assertEquals("]", token2.toString());
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-4044), token2.endLine);
      assertEquals((-4044), token2.beginLine);
      assertEquals(82, token2.kind);
      assertEquals((-4042), token2.endColumn);
      assertEquals((-4042), token2.beginColumn);
      assertFalse(token2.equals((Object)token1));
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals((-4042), javaCharStream0.getBeginColumn());
      assertEquals((-4042), javaCharStream0.getColumn());
      assertEquals((-4044), javaCharStream0.getEndLine());
      assertEquals((-4044), javaCharStream0.getBeginLine());
      assertEquals((-4042), javaCharStream0.getEndColumn());
      assertEquals((-4044), javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("V]J4(F&#^");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-526), (-526));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader1 = new StringReader("aag%!U!WG4");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-1235), (-1));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertEquals((-526), javaCharStream0.getBeginColumn());
      assertEquals((-526), javaCharStream0.getEndLine());
      assertEquals((-526), javaCharStream0.getColumn());
      assertEquals((-526), javaCharStream0.getLine());
      assertEquals((-526), javaCharStream0.getBeginLine());
      assertEquals((-526), javaCharStream0.getEndColumn());
      assertEquals("V", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-526), token0.endColumn);
      assertEquals((-526), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-526), token0.beginLine);
      assertEquals((-526), token0.beginColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertEquals((-526), javaCharStream0.getBeginColumn());
      assertEquals((-526), javaCharStream0.getEndLine());
      assertEquals((-526), javaCharStream0.getColumn());
      assertEquals((-526), javaCharStream0.getLine());
      assertEquals((-526), javaCharStream0.getBeginLine());
      assertEquals((-526), javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      Token token1 = javaParserTokenManager2.jjFillToken();
      assertNotNull(token1);
      assertEquals((-526), javaCharStream0.getBeginColumn());
      assertEquals((-526), javaCharStream0.getEndLine());
      assertEquals((-526), javaCharStream0.getColumn());
      assertEquals((-526), javaCharStream0.getLine());
      assertEquals((-526), javaCharStream0.getBeginLine());
      assertEquals((-526), javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-526), token1.endLine);
      assertEquals((-526), token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals((-526), token1.endColumn);
      assertEquals((-526), token1.beginColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      javaParserTokenManager2.ReInit(javaCharStream1);
      assertEquals((-526), javaCharStream0.getBeginColumn());
      assertEquals((-526), javaCharStream0.getEndLine());
      assertEquals((-526), javaCharStream0.getColumn());
      assertEquals((-526), javaCharStream0.getLine());
      assertEquals((-526), javaCharStream0.getBeginLine());
      assertEquals((-526), javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)122;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)65, (byte)122}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-171), (byte)65, 3249);
      assertNotNull(javaCharStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)65, (byte)122}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)65, (byte)122}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(66, javaCharStream0.getEndColumn());
      assertEquals(66, javaCharStream0.getColumn());
      assertEquals(65, javaCharStream0.getBeginColumn());
      assertEquals((-171), javaCharStream0.getLine());
      assertEquals((-171), javaCharStream0.getBeginLine());
      assertEquals((-171), javaCharStream0.getEndLine());
      assertEquals("Az", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(66, token0.endColumn);
      assertEquals((-171), token0.endLine);
      assertEquals((-171), token0.beginLine);
      assertEquals(65, token0.beginColumn);
      assertArrayEquals(new byte[] {(byte)65, (byte)122}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (int) (byte)65);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 65. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-119);
      StringReader stringReader0 = new StringReader("'");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("Pen2o\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (byte) (-119), (byte) (-119));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      assertNotNull(bufferedReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader1);
      assertNotNull(pushbackReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackReader0, 858, (-2030));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      char char0 = javaCharStream0.readChar();
      assertEquals('P', char0);
      assertEquals((-119), javaCharStream0.getBeginLine());
      assertEquals((-119), javaCharStream0.getBeginColumn());
      assertEquals((-119), javaCharStream0.getLine());
      assertEquals((-119), javaCharStream0.getEndColumn());
      assertEquals((-119), javaCharStream0.getEndLine());
      assertEquals((-119), javaCharStream0.getColumn());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      Token.GTToken token_GTToken2 = new Token.GTToken();
      assertNotNull(token_GTToken2);
      assertNull(token_GTToken2.toString());
      assertEquals(0, token_GTToken2.endLine);
      assertEquals(0, token_GTToken2.beginColumn);
      assertEquals(0, token_GTToken2.kind);
      assertEquals(0, token_GTToken2.beginLine);
      assertEquals(0, token_GTToken2.endColumn);
      assertFalse(token_GTToken2.equals((Object)token_GTToken0));
      assertFalse(token_GTToken2.equals((Object)token_GTToken1));
      
      Token token0 = token_GTToken2.specialToken;
      assertNull(token0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-119), javaCharStream0.getBeginLine());
      assertEquals((-119), javaCharStream0.getBeginColumn());
      assertEquals((-119), javaCharStream0.getLine());
      assertEquals((-119), javaCharStream0.getEndColumn());
      assertEquals((-119), javaCharStream0.getEndLine());
      assertEquals((-119), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals((-119), javaCharStream0.getBeginLine());
      assertEquals((-119), javaCharStream0.getBeginColumn());
      assertEquals((-119), javaCharStream0.getLine());
      assertEquals((-119), javaCharStream0.getEndColumn());
      assertEquals((-119), javaCharStream0.getEndLine());
      assertEquals((-119), javaCharStream0.getColumn());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager1);
      assertEquals((-119), javaCharStream0.getBeginLine());
      assertEquals((-119), javaCharStream0.getBeginColumn());
      assertEquals((-119), javaCharStream0.getLine());
      assertEquals((-119), javaCharStream0.getEndColumn());
      assertEquals((-119), javaCharStream0.getEndLine());
      assertEquals((-119), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertEquals((-119), javaCharStream0.getBeginLine());
      assertEquals((-119), javaCharStream0.getBeginColumn());
      assertEquals((-119), javaCharStream0.getLine());
      assertEquals((-119), javaCharStream0.getEndColumn());
      assertEquals((-119), javaCharStream0.getEndLine());
      assertEquals((-119), javaCharStream0.getColumn());
      assertNull(token_GTToken0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token_GTToken0, token_GTToken1);
      assertNotSame(token_GTToken0, token_GTToken2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token_GTToken0.equals((Object)token_GTToken1));
      assertFalse(token_GTToken0.equals((Object)token_GTToken2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertEquals("en2o", token1.toString());
      assertEquals((-119), javaCharStream0.getBeginLine());
      assertEquals((-118), javaCharStream0.getBeginColumn());
      assertEquals((-119), javaCharStream0.getLine());
      assertEquals((-119), javaCharStream0.getEndLine());
      assertEquals((-115), javaCharStream0.getColumn());
      assertEquals((-115), javaCharStream0.getEndColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals((-115), token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals((-119), token1.beginLine);
      assertEquals((-118), token1.beginColumn);
      assertEquals((-119), token1.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[24];
      charArray0[0] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      StringReader stringReader0 = new StringReader("V]J4(F&#^");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 37, 110);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader("Z.XQI-L?e+hjdBC");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-1235), 54);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-1235), javaCharStream1.getEndLine());
      assertEquals((-1235), javaCharStream1.getBeginLine());
      assertEquals(54, javaCharStream1.getColumn());
      assertEquals(54, javaCharStream1.getEndColumn());
      assertEquals((-1235), javaCharStream1.getLine());
      assertEquals(54, javaCharStream1.getBeginColumn());
      assertEquals("Z", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1235), token0.endLine);
      assertEquals((-1235), token0.beginLine);
      assertEquals(54, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(54, token0.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertEquals((-1235), javaCharStream1.getEndLine());
      assertEquals((-1235), javaCharStream1.getBeginLine());
      assertEquals(54, javaCharStream1.getColumn());
      assertEquals(54, javaCharStream1.getEndColumn());
      assertEquals((-1235), javaCharStream1.getLine());
      assertEquals(54, javaCharStream1.getBeginColumn());
      assertEquals("Z", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1235), token1.beginLine);
      assertEquals(54, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(54, token1.beginColumn);
      assertEquals((-1235), token1.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals((-1235), javaCharStream1.getEndLine());
      assertEquals((-1235), javaCharStream1.getBeginLine());
      assertEquals(55, javaCharStream1.getColumn());
      assertEquals(55, javaCharStream1.getEndColumn());
      assertEquals((-1235), javaCharStream1.getLine());
      assertEquals(55, javaCharStream1.getBeginColumn());
      assertEquals(".", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(55, token2.beginColumn);
      assertEquals((-1235), token2.beginLine);
      assertEquals(55, token2.endColumn);
      assertEquals(85, token2.kind);
      assertEquals((-1235), token2.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("OP]*.PV'NVmVJe}");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 61);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = '=';
      charArray0[2] = '@';
      charArray0[3] = 'm';
      charArray0[4] = '`';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'t', '=', '@', 'm', '`', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader1 = new StringReader("~");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = lineNumberReader0.read(charArray0);
      assertEquals(8, int0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotSame(stringReader0, stringReader1);
      assertArrayEquals(new char[] {'O', 'P', ']', '*', '.', 'P', 'V', '\''}, charArray0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 61, (-4029));
      assertNotNull(javaCharStream0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals((-4029), javaCharStream0.getBeginColumn());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals((-4024), javaCharStream0.getColumn());
      assertEquals((-4024), javaCharStream0.getEndColumn());
      assertEquals("NVmVJe", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(61, token0.beginLine);
      assertEquals((-4024), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-4029), token0.beginColumn);
      assertEquals(61, token0.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals("}", token1.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals((-4023), javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals((-4023), javaCharStream0.getBeginColumn());
      assertEquals((-4023), javaCharStream0.getEndColumn());
      assertNotSame(token1, token0);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(80, token1.kind);
      assertEquals(61, token1.endLine);
      assertEquals((-4023), token1.endColumn);
      assertEquals(61, token1.beginLine);
      assertEquals((-4023), token1.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals("", token2.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals((-4023), javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals((-4023), javaCharStream0.getBeginColumn());
      assertEquals((-4023), javaCharStream0.getEndColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(0, token2.kind);
      assertEquals(61, token2.beginLine);
      assertEquals((-4023), token2.beginColumn);
      assertEquals((-4023), token2.endColumn);
      assertEquals(61, token2.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals((-4023), javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals((-4023), javaCharStream0.getBeginColumn());
      assertEquals((-4023), javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals("", token3.toString());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals((-4023), javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals((-4023), javaCharStream0.getBeginColumn());
      assertEquals((-4023), javaCharStream0.getEndColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(61, token3.beginLine);
      assertEquals(61, token3.endLine);
      assertEquals((-4023), token3.beginColumn);
      assertEquals(0, token3.kind);
      assertEquals((-4023), token3.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token4 = javaParserTokenManager1.jjFillToken();
      assertNotNull(token4);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals("", token4.toString());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals((-4023), javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals((-4023), javaCharStream0.getBeginColumn());
      assertEquals((-4023), javaCharStream0.getEndColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertEquals((-4023), token4.endColumn);
      assertEquals(61, token4.endLine);
      assertEquals(0, token4.kind);
      assertEquals((-4023), token4.beginColumn);
      assertEquals(61, token4.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', '>', '>', '>', '>', '>', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 47, 41);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', '>', '>', '>', '>', '>', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', '>', '>', '>', '>', '>', '\u0000'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endLine);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      token_GTToken1.image = null;
      assertNull(token_GTToken1.toString());
      
      Token token0 = token_GTToken1.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(">>>", token1.toString());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertNotSame(token1, token_GTToken0);
      assertNotSame(token1, token_GTToken1);
      assertEquals(47, token1.beginLine);
      assertEquals(43, token1.endColumn);
      assertEquals(124, token1.kind);
      assertEquals(47, token1.endLine);
      assertEquals(41, token1.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', '>', '>', '>', '>', '>', '\u0000'}, charArray0);
      assertFalse(token1.equals((Object)token_GTToken0));
      assertFalse(token1.equals((Object)token_GTToken1));
      
      Token.GTToken token_GTToken2 = new Token.GTToken();
      assertNotNull(token_GTToken2);
      assertNull(token_GTToken2.toString());
      assertEquals(0, token_GTToken2.endLine);
      assertEquals(0, token_GTToken2.kind);
      assertEquals(0, token_GTToken2.beginLine);
      assertEquals(0, token_GTToken2.beginColumn);
      assertEquals(0, token_GTToken2.endColumn);
      assertFalse(token_GTToken2.equals((Object)token1));
      assertFalse(token_GTToken2.equals((Object)token_GTToken1));
      assertFalse(token_GTToken2.equals((Object)token_GTToken0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(">>>", token2.toString());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertNotSame(token2, token_GTToken0);
      assertNotSame(token2, token_GTToken1);
      assertNotSame(token2, token_GTToken2);
      assertNotSame(token2, token1);
      assertEquals(47, token2.endLine);
      assertEquals(42, token2.beginColumn);
      assertEquals(124, token2.kind);
      assertEquals(44, token2.endColumn);
      assertEquals(47, token2.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'>', '>', '>', '>', '>', '>', '\u0000'}, charArray0);
      assertFalse(token2.equals((Object)token_GTToken0));
      assertFalse(token2.equals((Object)token_GTToken1));
      assertFalse(token2.equals((Object)token_GTToken2));
      assertFalse(token2.equals((Object)token1));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertEquals(">>>", token3.toString());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertNotSame(token3, token2);
      assertNotSame(token3, token_GTToken0);
      assertNotSame(token3, token_GTToken1);
      assertNotSame(token3, token_GTToken2);
      assertNotSame(token3, token1);
      assertEquals(47, token3.beginLine);
      assertEquals(45, token3.endColumn);
      assertEquals(124, token3.kind);
      assertEquals(43, token3.beginColumn);
      assertEquals(47, token3.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'>', '>', '>', '>', '>', '>', '\u0000'}, charArray0);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token_GTToken0));
      assertFalse(token3.equals((Object)token_GTToken1));
      assertFalse(token3.equals((Object)token_GTToken2));
      assertFalse(token3.equals((Object)token1));
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertEquals(">>>", token4.toString());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(44, javaCharStream0.getColumn());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertNotSame(token4, token_GTToken2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token_GTToken0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token_GTToken1);
      assertEquals(46, token4.endColumn);
      assertEquals(47, token4.endLine);
      assertEquals(124, token4.kind);
      assertEquals(44, token4.beginColumn);
      assertEquals(47, token4.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'>', '>', '>', '>', '>', '>', '\u0000'}, charArray0);
      assertFalse(token4.equals((Object)token_GTToken2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token_GTToken0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token_GTToken1));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = 'U';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'1', 'U', 'B', 'B', ' '}, charArray0);
      
      StringReader stringReader0 = new StringReader("\"return\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 40, 20);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'1', 'U', 'B', 'B', ' '}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'1', 'U', 'B', 'B', ' '}, charArray0);
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals("1UBB", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(40, token0.endLine);
      assertEquals(23, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(40, token0.beginLine);
      assertEquals(20, token0.beginColumn);
      assertArrayEquals(new char[] {'1', 'U', 'B', 'B', ' '}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals("", token1.toString());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(24, javaCharStream0.getColumn());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(24, javaCharStream0.getEndColumn());
      assertNotSame(token1, token0);
      assertEquals(40, token1.endLine);
      assertEquals(24, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(24, token1.beginColumn);
      assertEquals(40, token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'1', 'U', 'B', 'B', ' '}, charArray0);
      assertFalse(token1.equals((Object)token0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 2404, 69);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'1', 'U', 'B', 'B', ' '}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 43);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 43. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("||");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 43, 40);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader1);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 656, 70);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(43, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getEndColumn());
      assertEquals(39, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(39, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(39, token1.endColumn);
      assertEquals(39, token1.beginColumn);
      assertEquals(43, token1.endLine);
      assertEquals(43, token1.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token2);
      assertEquals(43, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getEndColumn());
      assertEquals(39, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(39, javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token2.kind);
      assertEquals(43, token2.beginLine);
      assertEquals(39, token2.endColumn);
      assertEquals(39, token2.beginColumn);
      assertEquals(43, token2.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token1));
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertEquals(43, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getEndColumn());
      assertEquals(39, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(39, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertEquals(43, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getEndColumn());
      assertEquals(39, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(39, javaCharStream0.getColumn());
      assertEquals("||", token3.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(656, token3.endLine);
      assertEquals(97, token3.kind);
      assertEquals(656, token3.beginLine);
      assertEquals(71, token3.endColumn);
      assertEquals(70, token3.beginColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      
      javaParserTokenManager0.SkipLexicalActions(token3);
      assertEquals(43, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getEndColumn());
      assertEquals(39, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(39, javaCharStream0.getColumn());
      assertEquals("||", token3.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(656, token3.endLine);
      assertEquals(97, token3.kind);
      assertEquals(656, token3.beginLine);
      assertEquals(71, token3.endColumn);
      assertEquals(70, token3.beginColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'J';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', 'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader0 = new StringReader("$Kz>tKQb|n");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, 110);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals("$Kz", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(47, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(110, token0.beginColumn);
      assertEquals(47, token0.beginLine);
      assertEquals(112, token0.endColumn);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(113, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(113, javaCharStream0.getEndColumn());
      assertEquals(113, javaCharStream0.getBeginColumn());
      assertEquals(">", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token_GTToken0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(47, token1.beginLine);
      assertEquals(124, token1.kind);
      assertEquals(113, token1.beginColumn);
      assertEquals(113, token1.endColumn);
      assertEquals(47, token1.endLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token_GTToken0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(117, javaCharStream0.getColumn());
      assertEquals(117, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(114, javaCharStream0.getBeginColumn());
      assertEquals("tKQb", token2.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token2.kind);
      assertEquals(117, token2.endColumn);
      assertEquals(47, token2.endLine);
      assertEquals(47, token2.beginLine);
      assertEquals(114, token2.beginColumn);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(117, javaCharStream0.getColumn());
      assertEquals(117, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(114, javaCharStream0.getBeginColumn());
      assertEquals("$Kz", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token0, token2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(47, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(110, token0.beginColumn);
      assertEquals(47, token0.beginLine);
      assertEquals(112, token0.endColumn);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token0.equals((Object)token2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotNull(token3);
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(118, javaCharStream0.getEndColumn());
      assertEquals(118, javaCharStream0.getBeginColumn());
      assertEquals(118, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals("|", token3.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(47, token3.beginLine);
      assertEquals(118, token3.endColumn);
      assertEquals(118, token3.beginColumn);
      assertEquals(106, token3.kind);
      assertEquals(47, token3.endLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(119, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(119, javaCharStream0.getBeginColumn());
      assertEquals(119, javaCharStream0.getColumn());
      assertEquals("n", token4.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(74, token4.kind);
      assertEquals(119, token4.beginColumn);
      assertEquals(47, token4.endLine);
      assertEquals(47, token4.beginLine);
      assertEquals(119, token4.endColumn);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
  }
}
