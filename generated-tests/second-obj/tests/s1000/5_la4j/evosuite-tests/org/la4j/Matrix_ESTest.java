/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:37:14 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.iterator.MatrixIterator;
import org.la4j.iterator.VectorIterator;
import org.la4j.linear.LinearSystemSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = null;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.hadamardProduct((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.block((Matrix) null, (Matrix) null, (Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = (-332);
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[14];
      doubleArray1[9] = (double) (-332);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      rowMajorSparseMatrix0.rank();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      int int1 = 4;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.maxInColumn(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[7][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1.8408762837757815E-10;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray1);
      rowMajorSparseMatrix0.rank();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.diagonalProduct();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[][] doubleArray0 = new double[0][0];
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.from2DArray(doubleArray0);
      int int0 = 2;
      // Undeclared exception!
      try { 
        basic2DMatrix0.ensureIndexesAreInBounds(2, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[14];
      doubleArray1[7] = (double) 50;
      doubleArray1[3] = (double) (-332);
      doubleArray1[5] = 615.1434100844508;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      int int0 = rowMajorSparseMatrix0.rank();
      assertEquals(0, int0);
      
      Matrix matrix0 = rowMajorSparseMatrix0.shuffle();
      assertNotSame(matrix0, rowMajorSparseMatrix0);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(matrix0.equals((Object)rowMajorSparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 32;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(32, 32);
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        denseMatrix0.sliceTopLeft(32, 2305);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 37, 0);
      assertEquals(37, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      int int1 = (-2079);
      double double0 = 130.841000255891;
      VectorAccumulator vectorAccumulator0 = null;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      double double0 = cCSMatrix0.euclideanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfRows((-332));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -332x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      double double0 = denseMatrix0.minInRow((-2135));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      
      Integer integer0 = new Integer((-2135));
      assertEquals((-2135), (int)integer0);
      assertNotNull(integer0);
      
      DenseVector denseVector0 = DenseVector.constant(16, (-2135));
      assertEquals(16, denseVector0.length());
      assertNotNull(denseVector0);
      
      MatrixIterator matrixIterator0 = denseMatrix0.iterator();
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(matrixIterator0);
      
      Matrix matrix0 = ((Basic2DMatrix) denseMatrix0).copyOfShape(1944, 1944);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(1944, matrix0.columns());
      assertEquals(1944, matrix0.rows());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = (-332);
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[14];
      doubleArray1[9] = (double) (-332);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertNotNull(rowMajorSparseMatrix0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = rowMajorSparseMatrix0.non(matrixPredicate0);
      assertTrue(boolean0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      
      int int1 = rowMajorSparseMatrix0.rank();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      
      Iterator<Integer> iterator0 = rowMajorSparseMatrix0.iteratorOfNonZeroRows();
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertNotNull(iterator0);
      
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.JACOBI;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(44, 44);
      assertEquals(44, basic2DMatrix0.rows());
      assertEquals(44, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.identity(44);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(44, basic2DMatrix1.rows());
      assertEquals(44, basic2DMatrix1.columns());
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      
      Integer integer0 = new Integer(44);
      assertEquals(44, (int)integer0);
      assertNotNull(integer0);
      
      double double0 = basic2DMatrix1.trace();
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(44.0, double0, 0.01);
      assertEquals(44, basic2DMatrix1.rows());
      assertEquals(44, basic2DMatrix1.columns());
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      
      String string0 = basic2DMatrix0.toMatrixMarket();
      assertFalse(basic2DMatrix0.equals((Object)basic2DMatrix1));
      assertEquals(44, basic2DMatrix0.rows());
      assertEquals(44, basic2DMatrix0.columns());
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotNull(string0);
      
      Basic2DMatrix basic2DMatrix2 = Basic2DMatrix.unit(44, 44);
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertEquals(44, basic2DMatrix2.columns());
      assertEquals(44, basic2DMatrix2.rows());
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotNull(basic2DMatrix2);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      Matrix matrix0 = basic2DMatrix0.select(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(basic2DMatrix0.equals((Object)basic2DMatrix2));
      assertFalse(basic2DMatrix0.equals((Object)basic2DMatrix1));
      assertFalse(matrix0.equals((Object)basic2DMatrix2));
      assertFalse(matrix0.equals((Object)basic2DMatrix0));
      assertFalse(matrix0.equals((Object)basic2DMatrix1));
      assertEquals(44, basic2DMatrix0.rows());
      assertEquals(44, basic2DMatrix0.columns());
      assertEquals(1, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertNotSame(basic2DMatrix0, basic2DMatrix2);
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix2);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotSame(matrix0, basic2DMatrix1);
      assertNotNull(matrix0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic2DMatrix basic2DMatrix3 = Basic2DMatrix.zero(44, 44);
      assertTrue(basic2DMatrix3.equals((Object)basic2DMatrix0));
      assertFalse(basic2DMatrix3.equals((Object)basic2DMatrix2));
      assertFalse(basic2DMatrix3.equals((Object)matrix0));
      assertFalse(basic2DMatrix3.equals((Object)basic2DMatrix1));
      assertEquals(44, basic2DMatrix3.rows());
      assertEquals(44, basic2DMatrix3.columns());
      assertNotSame(basic2DMatrix3, basic2DMatrix2);
      assertNotSame(basic2DMatrix3, matrix0);
      assertNotSame(basic2DMatrix3, basic2DMatrix1);
      assertNotSame(basic2DMatrix3, basic2DMatrix0);
      assertNotNull(basic2DMatrix3);
      
      int int0 = 9;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) basic2DMatrix1, (-2090970919), 44, 9, 1884, 44, (-1994091957));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 44x-1994091957
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 1789;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      DenseMatrix denseMatrix0 = basic2DMatrix0.toDenseMatrix();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertSame(basic2DMatrix0, denseMatrix0);
      assertSame(denseMatrix0, basic2DMatrix0);
      assertNotNull(denseMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.transform(matrixFunction0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotSame(basic2DMatrix0, matrix0);
      assertSame(basic2DMatrix0, denseMatrix0);
      assertSame(denseMatrix0, basic2DMatrix0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertNotNull(matrix0);
      
      Integer integer0 = new Integer(1789);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1789, (int)integer0);
      assertNotNull(integer0);
      
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      DenseVector.zero(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-87L));
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(9984L);
      assertNotNull(intStream0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(6, (-107.6));
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
      assertEquals((-107.6), cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(6);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.16666666666666666, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(6, cRSMatrix1.rows());
      assertEquals(6, cRSMatrix1.columns());
      assertEquals(6, cRSMatrix1.cardinality());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotNull(cRSMatrix1);
      
      boolean boolean0 = cRSMatrix1.equals((Matrix) cRSMatrix0, 0.5);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertFalse(boolean0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
      assertEquals((-107.6), cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.16666666666666666, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(6, cRSMatrix1.rows());
      assertEquals(6, cRSMatrix1.columns());
      assertEquals(6, cRSMatrix1.cardinality());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)RowMajorSparseMatrix.identity(6);
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertEquals(6, cRSMatrix2.rows());
      assertEquals(0.16666666666666666, cRSMatrix2.density(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(1.0, cRSMatrix2.max(), 0.01);
      assertEquals(6, cRSMatrix2.cardinality());
      assertEquals(6, cRSMatrix2.columns());
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotNull(cRSMatrix2);
      
      double double0 = cRSMatrix1.trace();
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix2));
      assertEquals(6.0, double0, 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.16666666666666666, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(6, cRSMatrix1.rows());
      assertEquals(6, cRSMatrix1.columns());
      assertEquals(6, cRSMatrix1.cardinality());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      CRSMatrix cRSMatrix3 = (CRSMatrix)ooPlaceMatricesMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix1, (RowMajorSparseMatrix) cRSMatrix1);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.16666666666666666, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(6, cRSMatrix1.rows());
      assertEquals(6, cRSMatrix1.columns());
      assertEquals(6, cRSMatrix1.cardinality());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.16666666666666666, cRSMatrix3.density(), 0.01);
      assertEquals(6, cRSMatrix3.rows());
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(1.0, cRSMatrix3.max(), 0.01);
      assertEquals(6, cRSMatrix3.columns());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertEquals(6, cRSMatrix3.cardinality());
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix3);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotNull(cRSMatrix3);
      
      byte[] byteArray0 = cRSMatrix2.toBinary();
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix3));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertEquals(6, cRSMatrix2.rows());
      assertEquals(0.16666666666666666, cRSMatrix2.density(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(1.0, cRSMatrix2.max(), 0.01);
      assertEquals(6, cRSMatrix2.cardinality());
      assertEquals(6, cRSMatrix2.columns());
      assertNotSame(cRSMatrix2, cRSMatrix3);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotNull(byteArray0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CRSMatrix cRSMatrix4 = (CRSMatrix)cRSMatrix2.transform(matrixFunction0);
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix3));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix4.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix4.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix4.equals((Object)cRSMatrix3));
      assertFalse(cRSMatrix4.equals((Object)cRSMatrix1));
      assertEquals(6, cRSMatrix2.rows());
      assertEquals(0.16666666666666666, cRSMatrix2.density(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(1.0, cRSMatrix2.max(), 0.01);
      assertEquals(6, cRSMatrix2.cardinality());
      assertEquals(6, cRSMatrix2.columns());
      assertEquals(6, cRSMatrix4.columns());
      assertEquals(0, cRSMatrix4.cardinality());
      assertEquals(6, cRSMatrix4.rows());
      assertEquals(0.0, cRSMatrix4.density(), 0.01);
      assertEquals(0.0, cRSMatrix4.max(), 0.01);
      assertTrue(cRSMatrix4.isRowMajor());
      assertEquals(0.0, cRSMatrix4.min(), 0.01);
      assertNotSame(cRSMatrix2, cRSMatrix3);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix4);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix4, cRSMatrix0);
      assertNotSame(cRSMatrix4, cRSMatrix2);
      assertNotSame(cRSMatrix4, cRSMatrix3);
      assertNotSame(cRSMatrix4, cRSMatrix1);
      assertNotNull(cRSMatrix4);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix1.updateRow(1925, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1925
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(6);
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      double double0 = rowMajorSparseMatrix0.manhattanNorm();
      assertEquals(6.0, double0, 0.01);
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.rows());
      
      CompressedVector compressedVector0 = (CompressedVector)rowMajorSparseMatrix0.toRowVector();
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertEquals(6, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.toSparseMatrix();
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
      assertEquals(6, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      
      VectorIterator vectorIterator0 = rowMajorSparseMatrix0.iteratorOfColumn(6);
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotNull(vectorIterator0);
      
      double double1 = cRSMatrix0.infinityNorm();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
      assertEquals(6, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertSame(cRSMatrix0, rowMajorSparseMatrix0);
      
      Iterator<Integer> iterator0 = cRSMatrix0.iteratorOfNonZeroRows();
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
      assertEquals(6, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(iterator0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)RowMajorSparseMatrix.zero(6, 8);
      assertFalse(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(6, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(8, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotNull(cRSMatrix1);
      
      Integer integer0 = new Integer(8);
      assertEquals(8, (int)integer0);
      assertNotNull(integer0);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)rowMajorSparseMatrix0.insertRow(5, compressedVector0);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)rowMajorSparseMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertEquals(6, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(7, cRSMatrix2.cardinality());
      assertEquals(1.0, cRSMatrix2.max(), 0.01);
      assertEquals(6, cRSMatrix2.columns());
      assertEquals(7, cRSMatrix2.rows());
      assertEquals(0.16666666666666666, cRSMatrix2.density(), 0.01);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix1);
      assertSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotNull(cRSMatrix2);
      
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)basic2DMatrix0.rotate();
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.GAUSSIAN;
      basic2DMatrix0.setRow(1490, (double) 1490);
      assertTrue(basic2DMatrix0.equals((Object)basic2DMatrix1));
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      
      // Undeclared exception!
      try { 
        cRSMatrix1.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 32;
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(32, 1033.456491563474);
      assertEquals(0.03125, cRSMatrix0.density(), 0.01);
      assertEquals(32, cRSMatrix0.cardinality());
      assertEquals(1033.456491563474, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(32, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(32, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(32, (double) 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(22, 12);
      assertEquals(22, basic2DMatrix0.rows());
      assertEquals(12, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      basic2DMatrix0.setRow(12, (double) 1490);
      assertEquals(22, basic2DMatrix0.rows());
      assertEquals(12, basic2DMatrix0.columns());
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[14];
      doubleArray1[9] = (double) (-332);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = rowMajorSparseMatrix0.columnMajorIterator();
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertNotNull(columnMajorMatrixIterator0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = rowMajorSparseMatrix0.non(matrixPredicate0);
      assertTrue(boolean0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      
      int int0 = rowMajorSparseMatrix0.rank();
      assertEquals(0, int0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      
      Iterator<Integer> iterator0 = rowMajorSparseMatrix0.iteratorOfNonZeroRows();
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertNotNull(iterator0);
      
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      LinearSystemSolver linearSystemSolver0 = rowMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(1, linearSystemSolver0.equations());
      assertEquals(0, linearSystemSolver0.unknowns());
      assertNotNull(linearSystemSolver0);
      
      Matrix matrix0 = rowMajorSparseMatrix0.add((-1.0));
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(1, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      VectorIterator vectorIterator0 = rowMajorSparseMatrix0.iteratorOfColumn(1);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(vectorIterator0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.offerLast(integer0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      IntStream intStream0 = mockRandom0.ints((long) 1);
      assertNotNull(intStream0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, denseVector0.length());
      assertNotNull(denseVector0);
      
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(byteArray0);
      
      int int0 = rowMajorSparseMatrix0.rank();
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertEquals(0, int0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 44;
      doubleArray1[1] = (double) 44;
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(2, rowMajorSparseMatrix0.columns());
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(44.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(2, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      int int0 = rowMajorSparseMatrix0.rank();
      assertEquals(1, int0);
      assertEquals(2, rowMajorSparseMatrix0.columns());
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(44.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(2, rowMajorSparseMatrix0.cardinality());
      
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(44.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(2, cRSMatrix0.columns());
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      
      Iterator<Integer> iterator0 = cRSMatrix0.iteratorOfNonZeroRows();
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(44.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(2, cRSMatrix0.columns());
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(iterator0);
      
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.JACOBI;
      // Undeclared exception!
      try { 
        cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      VectorIterator vectorIterator0 = rowMajorSparseMatrix0.iteratorOfColumn(1);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(vectorIterator0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.offerLast(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(2, linkedList0.size());
      assertEquals(2, denseVector0.length());
      assertNotNull(denseVector0);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertColumn(1, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(0, 0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      denseMatrix0.setAll(0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      double double0 = denseMatrix0.trace();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.multiplyByItsTranspose();
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      
      VectorIterator vectorIterator0 = rowMajorSparseMatrix0.iteratorOfColumn(1);
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotNull(vectorIterator0);
      
      int int0 = (-257);
      // Undeclared exception!
      try { 
        DenseMatrix.random((-257), 1571, (Random) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 2178;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(2178);
      assertEquals(4.591368227731864E-4, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(2178, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(2178, rowMajorSparseMatrix0.columns());
      assertEquals(2178, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      // Undeclared exception!
      rowMajorSparseMatrix0.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 3;
      int int1 = 17;
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 17);
      assertEquals(17, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(17, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.toRowVector();
      assertEquals(17, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(17, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.toSparseMatrix();
      assertEquals(17, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(17, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertSame(cRSMatrix0, cRSMatrix1);
      assertSame(cRSMatrix1, cRSMatrix0);
      assertNotNull(cRSMatrix1);
      
      double double1 = cRSMatrix0.infinityNorm();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(17, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertSame(cRSMatrix0, cRSMatrix1);
      
      Iterator<Integer> iterator0 = cRSMatrix0.iteratorOfNonZeroRows();
      assertEquals(17, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertSame(cRSMatrix0, cRSMatrix1);
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("&\rrGb|Wu%,-dpdC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 6;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(6);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      double double0 = rowMajorSparseMatrix0.manhattanNorm();
      assertEquals(6.0, double0, 0.01);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      
      SparseMatrix sparseMatrix0 = rowMajorSparseMatrix0.toSparseMatrix();
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(6, sparseMatrix0.columns());
      assertEquals(0.16666666666666666, sparseMatrix0.density(), 0.01);
      assertEquals(6, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(6, sparseMatrix0.cardinality());
      assertEquals(1.0, sparseMatrix0.max(), 0.01);
      assertSame(rowMajorSparseMatrix0, sparseMatrix0);
      assertSame(sparseMatrix0, rowMajorSparseMatrix0);
      assertNotNull(sparseMatrix0);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.setColumn(6, 2048.4938868491745);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 6;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(6, (-52.0));
      assertEquals(6, basic2DMatrix0.rows());
      assertEquals(6, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      VectorIterator vectorIterator0 = basic2DMatrix0.iteratorOfColumn(6);
      assertEquals(6, basic2DMatrix0.rows());
      assertEquals(6, basic2DMatrix0.columns());
      assertNotNull(vectorIterator0);
      
      int int1 = 7;
      String string0 = "OG";
      String string1 = basic2DMatrix0.mkString("OG", "kwvd");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-52.000kwvd  0.000kwvd  0.000kwvd  0.000kwvd  0.000kwvd  0.000OG  0.000kwvd-52.000kwvd  0.000kwvd  0.000kwvd  0.000kwvd  0.000OG  0.000kwvd  0.000kwvd-52.000kwvd  0.000kwvd  0.000kwvd  0.000OG  0.000kwvd  0.000kwvd  0.000kwvd-52.000kwvd  0.000kwvd  0.000OG  0.000kwvd  0.000kwvd  0.000kwvd  0.000kwvd-52.000kwvd  0.000OG  0.000kwvd  0.000kwvd  0.000kwvd  0.000kwvd  0.000kwvd-52.000OG", string1);
      assertEquals(6, basic2DMatrix0.rows());
      assertEquals(6, basic2DMatrix0.columns());
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeRow(7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      int int0 = 3;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        DenseMatrix.from1DArray(3, Integer.MAX_VALUE, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 32;
      Matrix matrix0 = Matrix.zero(0, 0);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[14];
      doubleArray1[9] = (double) (-332);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertNotNull(rowMajorSparseMatrix0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = rowMajorSparseMatrix0.non(matrixPredicate0);
      assertTrue(boolean0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.trace();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 1;
      Matrix matrix0 = Matrix.constant(1, 4000, 1);
      assertEquals(4000, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertNotNull(matrix0);
      
      int int1 = 3396;
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.random(3396, 30, (-2709.40511), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(0, mockRandom0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = denseMatrix0.shuffle();
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertNotNull(matrix0);
      
      DenseMatrix denseMatrix1 = denseMatrix0.toDenseMatrix();
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertTrue(denseMatrix1.equals((Object)matrix0));
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix1.columns());
      assertEquals(0, denseMatrix1.rows());
      assertSame(denseMatrix0, denseMatrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertSame(denseMatrix1, denseMatrix0);
      assertNotSame(denseMatrix1, matrix0);
      assertNotNull(denseMatrix1);
      
      int int0 = (-332);
      Integer integer0 = new Integer((-332));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-332), (int)integer0);
      assertNotNull(integer0);
      
      DenseVector denseVector0 = DenseVector.constant(15, (-1860.9682336737012));
      assertEquals(15, denseVector0.length());
      assertNotNull(denseVector0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (int)integer0;
      doubleArray0[1] = (double) 15;
      doubleArray0[2] = (-1860.9682336737012);
      doubleArray0[3] = (-1860.9682336737012);
      doubleArray0[4] = 642.7;
      doubleArray0[5] = (-1860.9682336737012);
      int int1 = 32;
      DenseMatrix denseMatrix2 = DenseMatrix.unit(2794, 32);
      assertFalse(denseMatrix2.equals((Object)denseMatrix1));
      assertFalse(denseMatrix2.equals((Object)denseMatrix0));
      assertFalse(denseMatrix2.equals((Object)matrix0));
      assertEquals(32, denseMatrix2.columns());
      assertEquals(2794, denseMatrix2.rows());
      assertNotSame(denseMatrix2, denseMatrix1);
      assertNotSame(denseMatrix2, denseMatrix0);
      assertNotSame(denseMatrix2, matrix0);
      assertNotNull(denseMatrix2);
      
      // Undeclared exception!
      try { 
        denseMatrix2.power(32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 2794 does not equal to 32.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(6);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      double double0 = rowMajorSparseMatrix0.manhattanNorm();
      assertEquals(6.0, double0, 0.01);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.rows());
      
      SparseMatrix sparseMatrix0 = rowMajorSparseMatrix0.toSparseMatrix();
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertEquals(6, sparseMatrix0.rows());
      assertEquals(0.16666666666666666, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(1.0, sparseMatrix0.max(), 0.01);
      assertEquals(6, sparseMatrix0.columns());
      assertEquals(6, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertSame(rowMajorSparseMatrix0, sparseMatrix0);
      assertSame(sparseMatrix0, rowMajorSparseMatrix0);
      assertNotNull(sparseMatrix0);
      
      VectorIterator vectorIterator0 = rowMajorSparseMatrix0.iteratorOfColumn(0);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertSame(rowMajorSparseMatrix0, sparseMatrix0);
      assertNotNull(vectorIterator0);
      
      double double1 = sparseMatrix0.infinityNorm();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertEquals(6, sparseMatrix0.rows());
      assertEquals(0.16666666666666666, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(1.0, sparseMatrix0.max(), 0.01);
      assertEquals(6, sparseMatrix0.columns());
      assertEquals(6, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertSame(rowMajorSparseMatrix0, sparseMatrix0);
      assertSame(sparseMatrix0, rowMajorSparseMatrix0);
      
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(0, 8);
      assertFalse(rowMajorSparseMatrix1.equals((Object)sparseMatrix0));
      assertFalse(rowMajorSparseMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix1.cardinality());
      assertEquals(8, rowMajorSparseMatrix1.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix1.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix1.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix1.rows());
      assertNotSame(rowMajorSparseMatrix1, sparseMatrix0);
      assertNotSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      assertNotNull(rowMajorSparseMatrix1);
      
      RowMajorSparseMatrix rowMajorSparseMatrix2 = RowMajorSparseMatrix.zero(6, 0, 0);
      assertFalse(rowMajorSparseMatrix2.equals((Object)rowMajorSparseMatrix1));
      assertFalse(rowMajorSparseMatrix2.equals((Object)sparseMatrix0));
      assertFalse(rowMajorSparseMatrix2.equals((Object)rowMajorSparseMatrix0));
      assertEquals(0, rowMajorSparseMatrix2.columns());
      assertEquals(6, rowMajorSparseMatrix2.rows());
      assertEquals(0, rowMajorSparseMatrix2.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix2.max(), 0.01);
      assertTrue(rowMajorSparseMatrix2.isRowMajor());
      assertEquals(Double.NaN, rowMajorSparseMatrix2.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix2.min(), 0.01);
      assertNotSame(rowMajorSparseMatrix2, rowMajorSparseMatrix1);
      assertNotSame(rowMajorSparseMatrix2, sparseMatrix0);
      assertNotSame(rowMajorSparseMatrix2, rowMajorSparseMatrix0);
      assertNotNull(rowMajorSparseMatrix2);
      
      Integer integer0 = new Integer((-745));
      assertEquals((-745), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = 1027;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix1.power(1027);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 0 does not equal to 8.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[14];
      doubleArray1[7] = (double) 50;
      doubleArray1[3] = (double) (-332);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
      
      // Undeclared exception!
      try { 
        Matrix.zero((-332), (-332));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -332x-332
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = denseMatrix0.shuffle();
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertNotNull(matrix0);
      
      DenseMatrix denseMatrix1 = denseMatrix0.toDenseMatrix();
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertTrue(denseMatrix1.equals((Object)matrix0));
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix1.rows());
      assertEquals(0, denseMatrix1.columns());
      assertSame(denseMatrix0, denseMatrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix1, matrix0);
      assertSame(denseMatrix1, denseMatrix0);
      assertNotNull(denseMatrix1);
      
      double double0 = matrix0.maxInColumn((-332));
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertTrue(matrix0.equals((Object)denseMatrix1));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertSame(denseMatrix0, denseMatrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix1);
      assertNotSame(matrix0, denseMatrix0);
      
      DenseVector denseVector0 = DenseVector.constant(4, (-1861.9));
      assertEquals(4, denseVector0.length());
      assertNotNull(denseVector0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (-1861.9);
      doubleArray0[3] = (-1861.9);
      doubleArray0[4] = 642.7;
      doubleArray0[5] = (-1861.9);
      int int0 = 3329;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(3329, (-3072.4312));
      assertEquals(3.0039050765995795E-4, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3329, rowMajorSparseMatrix0.columns());
      assertEquals((-3072.4312), rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3329, rowMajorSparseMatrix0.rows());
      assertEquals(3329, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertRow(0, denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 4. Should be: 3329.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      int int0 = 1789;
      MatrixOperation<Matrix> matrixOperation0 = ooPlaceMatricesSubtraction0.partiallyApply((ColumnMajorSparseMatrix) null);
      assertNotNull(matrixOperation0);
      
      int int1 = 644;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(644, 2147483123);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(644, rowMajorSparseMatrix0.rows());
      assertEquals(0.0015527950310559005, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(2.147483123E9, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(644, rowMajorSparseMatrix0.cardinality());
      assertEquals(644, rowMajorSparseMatrix0.columns());
      assertNotNull(rowMajorSparseMatrix0);
      
      int int2 = (-199);
      DenseVector denseVector0 = DenseVector.unit(1000);
      assertEquals(1000, denseVector0.length());
      assertNotNull(denseVector0);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertRow((-199), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..643
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(0, 0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(1, 571);
      assertFalse(rowMajorSparseMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertEquals(571, rowMajorSparseMatrix1.columns());
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix1.density(), 0.01);
      assertEquals(1, rowMajorSparseMatrix1.rows());
      assertEquals(0.0, rowMajorSparseMatrix1.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix1.cardinality());
      assertNotSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      assertNotNull(rowMajorSparseMatrix1);
      
      double double0 = rowMajorSparseMatrix1.trace();
      assertFalse(rowMajorSparseMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertEquals(0.0, double0, 0.01);
      assertEquals(571, rowMajorSparseMatrix1.columns());
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix1.density(), 0.01);
      assertEquals(1, rowMajorSparseMatrix1.rows());
      assertEquals(0.0, rowMajorSparseMatrix1.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix1.cardinality());
      assertNotSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix1);
      assertFalse(rowMajorSparseMatrix0.equals((Object)rowMajorSparseMatrix1));
      assertFalse(rowMajorSparseMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix1));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(571, rowMajorSparseMatrix1.columns());
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix1.density(), 0.01);
      assertEquals(1, rowMajorSparseMatrix1.rows());
      assertEquals(0.0, rowMajorSparseMatrix1.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix1.cardinality());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(571, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotSame(rowMajorSparseMatrix0, rowMajorSparseMatrix1);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix1, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix1);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertFalse(rowMajorSparseMatrix0.equals((Object)rowMajorSparseMatrix1));
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertFalse(rowMajorSparseMatrix1.equals((Object)cRSMatrix0));
      assertFalse(rowMajorSparseMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix1));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(571, rowMajorSparseMatrix1.columns());
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix1.density(), 0.01);
      assertEquals(1, rowMajorSparseMatrix1.rows());
      assertEquals(0.0, rowMajorSparseMatrix1.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix1.cardinality());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(571, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotSame(rowMajorSparseMatrix0, rowMajorSparseMatrix1);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix1, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix1);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(byteArray0);
      
      rowMajorSparseMatrix1.hashCode();
      assertFalse(rowMajorSparseMatrix1.equals((Object)cRSMatrix0));
      assertFalse(rowMajorSparseMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertEquals(571, rowMajorSparseMatrix1.columns());
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix1.density(), 0.01);
      assertEquals(1, rowMajorSparseMatrix1.rows());
      assertEquals(0.0, rowMajorSparseMatrix1.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix1.cardinality());
      assertNotSame(rowMajorSparseMatrix1, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      // Undeclared exception!
      Matrix.randomSymmetric(2266, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(32, 32);
      assertEquals(32, denseMatrix0.columns());
      assertEquals(32, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 32;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = denseMatrix0.non(matrixPredicate0);
      assertTrue(boolean0);
      assertEquals(32, denseMatrix0.columns());
      assertEquals(32, denseMatrix0.rows());
      
      intArray0[1] = 32;
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.to(matrixFactory0);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertSame(cCSMatrix0, cCSMatrix1);
      assertSame(cCSMatrix1, cCSMatrix0);
      assertNotNull(cCSMatrix1);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cCSMatrix0.columnMajorIterator();
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertSame(cCSMatrix0, cCSMatrix1);
      assertNotNull(columnMajorMatrixIterator0);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)cCSMatrix1.subtract((-1.0));
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertSame(cCSMatrix0, cCSMatrix1);
      assertSame(cCSMatrix1, cCSMatrix0);
      assertNotNull(basic2DMatrix0);
      
      double double0 = basic2DMatrix0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertSame(cCSMatrix0, cCSMatrix1);
      assertSame(cCSMatrix1, cCSMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.updateAt(2972, 32, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Integer integer0 = linkedList0.poll();
      assertEquals(0, linkedList0.size());
      assertNull(integer0);
      
      IntStream intStream0 = mockRandom0.ints(962L);
      assertNotNull(intStream0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2366, 2);
      assertEquals(2, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(2366, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.transformColumn(1, vectorFunction0);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix1);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.power(0);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)rowMajorSparseMatrix0));
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.cardinality());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix2);
      
      CRSMatrix cRSMatrix3 = (CRSMatrix)RowMajorSparseMatrix.identity(0);
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix3.equals((Object)rowMajorSparseMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix2));
      assertEquals(0, cRSMatrix3.cardinality());
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix3.density(), 0.01);
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(0, cRSMatrix3.columns());
      assertEquals(0, cRSMatrix3.rows());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotNull(cRSMatrix3);
      
      double double0 = cRSMatrix0.trace();
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix3));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      
      CRSMatrix cRSMatrix4 = (CRSMatrix)cRSMatrix0.shuffle();
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix3));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix4.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix4.equals((Object)cRSMatrix3));
      assertTrue(cRSMatrix4.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix4.equals((Object)rowMajorSparseMatrix0));
      assertTrue(cRSMatrix4.equals((Object)cRSMatrix0));
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix4.cardinality());
      assertEquals(0, cRSMatrix4.columns());
      assertEquals(0.0, cRSMatrix4.min(), 0.01);
      assertEquals(0, cRSMatrix4.rows());
      assertEquals(Double.NaN, cRSMatrix4.density(), 0.01);
      assertEquals(0.0, cRSMatrix4.max(), 0.01);
      assertTrue(cRSMatrix4.isRowMajor());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix4);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(cRSMatrix4, cRSMatrix3);
      assertNotSame(cRSMatrix4, cRSMatrix0);
      assertNotSame(cRSMatrix4, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix4, cRSMatrix2);
      assertNotSame(cRSMatrix4, cRSMatrix1);
      assertNotNull(cRSMatrix4);
      
      CRSMatrix cRSMatrix5 = (CRSMatrix)Matrix.diagonal(1, 2057.08705);
      assertFalse(cRSMatrix5.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix5.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix5.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix5.equals((Object)cRSMatrix3));
      assertFalse(cRSMatrix5.equals((Object)cRSMatrix4));
      assertFalse(cRSMatrix5.equals((Object)rowMajorSparseMatrix0));
      assertEquals(1, cRSMatrix5.columns());
      assertEquals(2057.08705, cRSMatrix5.max(), 0.01);
      assertEquals(1, cRSMatrix5.rows());
      assertTrue(cRSMatrix5.isRowMajor());
      assertEquals(0.0, cRSMatrix5.min(), 0.01);
      assertEquals(1, cRSMatrix5.cardinality());
      assertEquals(1.0, cRSMatrix5.density(), 0.01);
      assertNotSame(cRSMatrix5, cRSMatrix1);
      assertNotSame(cRSMatrix5, cRSMatrix0);
      assertNotSame(cRSMatrix5, cRSMatrix2);
      assertNotSame(cRSMatrix5, cRSMatrix3);
      assertNotSame(cRSMatrix5, cRSMatrix4);
      assertNotSame(cRSMatrix5, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix5);
      
      BasicVector basicVector0 = (BasicVector)Vector.constant(1789, 2366);
      assertFalse(basicVector0.equals((Object)denseVector0));
      assertEquals(1789, basicVector0.length());
      assertNotSame(basicVector0, denseVector0);
      assertNotNull(basicVector0);
      
      MatrixOperation<DenseMatrix> matrixOperation0 = (MatrixOperation<DenseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      DenseMatrix denseMatrix0 = cRSMatrix0.apply(matrixOperation0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix4));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix3));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix5));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix4);
      assertNotSame(cRSMatrix0, cRSMatrix5);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNull(denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      VectorIterator vectorIterator0 = rowMajorSparseMatrix0.iteratorOfColumn(1);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(vectorIterator0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      IntStream intStream0 = mockRandom0.ints((long) 1);
      assertNotNull(intStream0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = Matrix.diagonal(2266, 1);
      long long0 = 1L;
      long long1 = (-31L);
      matrix0.mkString((NumberFormat) null);
      mockRandom0.longs(long0, long1, (long) int0);
      matrix0.equals((Object) mockRandom0);
      int int1 = 1610;
      SparseVector.zero(int1);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      matrix0.product();
      rowMajorSparseMatrix0.toMatrixMarket();
      MatrixOperation<DenseMatrix> matrixOperation0 = (MatrixOperation<DenseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.apply(matrixOperation0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = denseMatrix0.shuffle();
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertNotNull(matrix0);
      
      DenseMatrix denseMatrix1 = denseMatrix0.toDenseMatrix();
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertTrue(denseMatrix1.equals((Object)matrix0));
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix1.columns());
      assertEquals(0, denseMatrix1.rows());
      assertNotSame(denseMatrix0, matrix0);
      assertSame(denseMatrix0, denseMatrix1);
      assertSame(denseMatrix1, denseMatrix0);
      assertNotSame(denseMatrix1, matrix0);
      assertNotNull(denseMatrix1);
      
      Vector vector0 = matrix0.toColumnVector();
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertTrue(matrix0.equals((Object)denseMatrix1));
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, vector0.length());
      assertNotSame(denseMatrix0, matrix0);
      assertSame(denseMatrix0, denseMatrix1);
      assertNotSame(matrix0, denseMatrix1);
      assertNotSame(matrix0, denseMatrix0);
      assertNotNull(vector0);
      
      double double0 = matrix0.maxInColumn((-332));
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertTrue(matrix0.equals((Object)denseMatrix1));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotSame(denseMatrix0, matrix0);
      assertSame(denseMatrix0, denseMatrix1);
      assertNotSame(matrix0, denseMatrix1);
      assertNotSame(matrix0, denseMatrix0);
      
      int int0 = 50;
      DenseVector denseVector0 = DenseVector.constant(50, Double.NEGATIVE_INFINITY);
      assertFalse(denseVector0.equals((Object)vector0));
      assertEquals(50, denseVector0.length());
      assertNotSame(denseVector0, vector0);
      assertNotNull(denseVector0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) 50;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) (-332);
      doubleArray0[5] = 642.7;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        matrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0, 0);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      int int1 = (-2079);
      double double0 = 130.841000255891;
      VectorAccumulator vectorAccumulator0 = null;
      double[] doubleArray0 = columnMajorSparseMatrix0.foldColumns((VectorAccumulator) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(doubleArray0);
      
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("D;i;:L}}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 44;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(44, 44);
      assertEquals(44, basic2DMatrix0.rows());
      assertEquals(44, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      assertNotNull(basic2DMatrix1);
      
      double double0 = basic2DMatrix1.trace();
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      
      Basic2DMatrix basic2DMatrix2 = Basic2DMatrix.unit(44, 44);
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertEquals(44, basic2DMatrix2.rows());
      assertEquals(44, basic2DMatrix2.columns());
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertNotNull(basic2DMatrix2);
      
      // Undeclared exception!
      basic2DMatrix2.toColumnMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 91;
      int int1 = 3362;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(3362, 2937);
      assertEquals(2937, basic2DMatrix0.columns());
      assertEquals(3362, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      // Undeclared exception!
      basic2DMatrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      RowMajorSparseMatrix.identity(6);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(6, 6);
      Matrix matrix0 = basic2DMatrix0.removeLastRow();
      Integer integer0 = new Integer(6);
      int int0 = 27;
      int int1 = 214;
      // Undeclared exception!
      try { 
        matrix0.slice(27, 27, 6, 214);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [27..6][27..214].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 9;
      int int1 = (-761);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-761);
      doubleArray0[1] = (double) 9;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(9, (-761), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 9x-761
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1.0);
      doubleArray1[2] = 1853.3589637;
      doubleArray1[3] = 623.0245380618;
      doubleArray1[4] = 584.846296605;
      doubleArray1[5] = 1.0;
      doubleArray0[0] = doubleArray1;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix.zero(2, 2);
      RowMajorSparseMatrix.zero(7, 2366);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(7);
      rowMajorSparseMatrix0.trace();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      rowMajorSparseMatrix0.updateRow(4, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = (-332);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toRowMajorSparseMatrix();
      int int1 = (-327);
      // Undeclared exception!
      try { 
        SparseVector.zero((-327), (-6));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -327
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      denseMatrix0.shuffle();
      DenseMatrix denseMatrix1 = denseMatrix0.toDenseMatrix();
      Integer integer0 = new Integer((-332));
      DenseVector.constant(15, (-1860.9682336737012));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (int)integer0;
      doubleArray0[1] = (double) 15;
      doubleArray0[2] = (-1860.9682336737012);
      doubleArray0[3] = (-1860.9682336737012);
      // Undeclared exception!
      try { 
        denseMatrix1.power((-332));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -332.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = (-332);
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[15];
      doubleArray1[9] = (double) (-332);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      rowMajorSparseMatrix0.subtract((Matrix) sparseMatrix0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.getRow(Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2096353083);
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 6;
      int[] intArray0 = new int[7];
      intArray0[0] = (-2096353083);
      intArray0[1] = (-2096353083);
      intArray0[2] = (-2096353083);
      intArray0[3] = (-2096353083);
      intArray0[4] = (-2096353083);
      intArray0[5] = 6;
      intArray0[6] = (-2096353083);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      columnMajorSparseMatrix0.diagonalProduct();
      ooPlaceMatricesSubtraction0.partiallyApply(columnMajorSparseMatrix0);
      CCSMatrix cCSMatrix1 = null;
      try {
        cCSMatrix1 = new CCSMatrix(6, 6, (-2096353083), doubleArray0, intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -2096353083.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(1, 1);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply((DenseMatrix) basic2DMatrix0, (DenseMatrix) basic2DMatrix0);
      basic2DMatrix0.multiply(matrix0);
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.identity(1);
      basic2DMatrix1.insert((Matrix) basic2DMatrix0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.each(matrixProcedure0);
      basic2DMatrix1.trace();
      int[] intArray0 = new int[1];
      DenseMatrix.identity(1);
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(44, 44);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      basic2DMatrix0.non(matrixPredicate0);
      Basic2DMatrix.identity(44);
      Integer integer0 = new Integer(44);
      double double0 = new Integer(44);
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.unit(44, 44);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      Basic2DMatrix.unit(44, 44);
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix.zero(44, 44);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(795, 0.0);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) basic2DMatrix1, 795, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 795 rows and 9 cols at 0, 0 from a 44x44 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.poll();
      mockRandom0.ints(962L);
      DenseVector.fromCollection(linkedList0);
      int int0 = 2249;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2249, 2249, 2249);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) null, 2249, 2429);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      Matrix matrix0 = denseMatrix0.shuffle();
      DenseMatrix denseMatrix1 = denseMatrix0.toDenseMatrix();
      int int0 = (-332);
      matrix0.maxInColumn((-332));
      int int1 = 32;
      // Undeclared exception!
      try { 
        denseMatrix1.insert(matrix0, (-332), (-332), 32, 32, 32, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 32, 32
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      NumberFormat numberFormat0 = null;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 809;
      doubleArray0[1] = (double) 809;
      doubleArray0[2] = (double) 809;
      doubleArray0[3] = (double) 809;
      doubleArray0[4] = (double) 809;
      doubleArray0[5] = (double) 809;
      doubleArray0[6] = (double) 809;
      doubleArray0[7] = (double) 809;
      doubleArray0[8] = (double) 809;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertRow(809, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(0, 0);
      denseMatrix0.blankOfRows(1242);
      // Undeclared exception!
      try { 
        denseMatrix0.removeRow(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      Matrix matrix0 = denseMatrix0.shuffle();
      matrix0.maxInColumn((-332));
      DenseVector.constant(4, (-1861.9));
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.norm();
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix0, (-149), (-149));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -149x-149
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2764.7515368023446;
      doubleArray1[1] = (-3020.68534639166);
      doubleArray1[2] = (-3020.68534639166);
      doubleArray1[3] = (double) 3129;
      doubleArray1[4] = 2764.7515368023446;
      doubleArray1[5] = (double) 3129;
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = 2764.7515368023446;
      doubleArray1[8] = (-1.0);
      doubleArray0[0] = doubleArray1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      int int0 = 2358;
      // Undeclared exception!
      try { 
        sparseMatrix0.swapColumns(2358, 3129);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2358' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 5;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(5, 5);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      basic2DMatrix0.setAll(5);
      basic2DMatrix0.removeFirstColumn();
      // Undeclared exception!
      try { 
        basic2DMatrix0.getRow(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        denseMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[14];
      doubleArray1[9] = (double) (-332);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      rowMajorSparseMatrix0.rank();
      rowMajorSparseMatrix0.iteratorOfNonZeroRows();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.transformRow(0, vectorFunction0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        mockRandom0.longs((-3245L), 4592L, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 32;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(32, 32);
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        denseMatrix0.sliceTopLeft((-3026), (-3026));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-3026][0..-3026].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 3129;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      int int1 = 17;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(17, 17);
      Matrix matrix0 = cRSMatrix0.subtract((double) 17);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.transformRow(17, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(32, 32);
      int[] intArray0 = new int[6];
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      denseMatrix0.transformRow(13, vectorFunction0);
      intArray0[0] = 32;
      intArray0[1] = 32;
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(8);
      basic2DMatrix0.shuffle();
      DenseMatrix denseMatrix0 = basic2DMatrix0.toDenseMatrix();
      int int0 = (-332);
      // Undeclared exception!
      try { 
        denseMatrix0.maxInColumn(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1145.3786766716094);
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      rowMajorSparseMatrix0.is(matrixPredicate0);
      MatrixOperation<SparseMatrix> matrixOperation0 = (MatrixOperation<SparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(rowMajorSparseMatrix0).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      rowMajorSparseMatrix0.apply(matrixOperation0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1144.162833);
      doubleArray1[2] = (-1411.8);
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      rowMajorSparseMatrix0.is(matrixPredicate0);
      MatrixOperation<SparseMatrix> matrixOperation0 = (MatrixOperation<SparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      rowMajorSparseMatrix0.apply(matrixOperation0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      Matrix matrix0 = denseMatrix0.shuffle();
      matrix0.maxInColumn((-332));
      matrix0.slice(1944, 1944, 1944, 1944);
      DenseVector.constant(4, (-1861.9));
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, 4, 446);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 4 rows and 446 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.poll();
      mockRandom0.ints(962L);
      DenseVector.fromCollection(linkedList0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.divide((-281.08));
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      MatrixVectorOperation<String> matrixVectorOperation0 = (MatrixVectorOperation<String>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.getColumn(1718);
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1.0);
      doubleArray1[2] = 1853.3589637;
      doubleArray1[3] = 623.0245380618;
      doubleArray1[4] = 584.846296605;
      doubleArray1[5] = (-1421.6555470562846);
      doubleArray0[0] = doubleArray1;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 2, 2);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2, 2366);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.identity(2);
      rowMajorSparseMatrix1.trace();
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      cRSMatrix0.removeFirstRow();
      cRSMatrix0.toBinary();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix1.updateRow(2, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(1055, 1055);
      // Undeclared exception!
      try { 
        basic2DMatrix0.updateColumn(7, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[14];
      doubleArray1[9] = (double) (-332);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      rowMajorSparseMatrix0.rank();
      ((CRSMatrix) rowMajorSparseMatrix0).setAll((-332));
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) (-1789569705), (Random) mockRandom0);
      cRSMatrix0.determinant();
      CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.transpose();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(44, 44);
      int[] intArray0 = new int[1];
      basic2DMatrix0.select(intArray0, intArray0);
      Basic2DMatrix.zero(44, 6);
      basic2DMatrix0.toCSV();
      // Undeclared exception!
      try { 
        Matrix.constant((-1135), (-929), (-1206));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      int int0 = Double.SIZE;
      int[] intArray0 = new int[4];
      intArray0[0] = 50;
      intArray0[1] = 1424;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.update(matrixFunction0);
      intArray0[2] = 1424;
      intArray0[3] = 64;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '50' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(17, 17);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(30);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix1.equals((Object) cRSMatrix0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(17, 30);
      cRSMatrix0.infinityNorm();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      basic2DMatrix0.toMatrixMarket();
      cRSMatrix1.update(matrixFunction0);
      cRSMatrix1.insert((Matrix) basic2DMatrix0, 17, 3);
      int int0 = (-1752);
      Matrix.fromMatrixMarket(".");
      double double0 = (-0.4375);
      DenseVector.constant(int0, double0);
      String string0 = null;
      CRSMatrix cRSMatrix2 = CRSMatrix.fromCSV(string0);
      int int1 = 504;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.transformColumn(int1, vectorFunction0);
      basic2DMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[2] = 1853.3589637;
      doubleArray1[3] = 584.846296605;
      doubleArray1[5] = 1853.3589637;
      doubleArray0[0] = doubleArray1;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2, 2);
      int int1 = 7;
      int int2 = 2366;
      int int3 = 6;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.transformColumn(6, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[14];
      doubleArray1[9] = (double) (-332);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      rowMajorSparseMatrix0.non(matrixPredicate0);
      rowMajorSparseMatrix0.toString();
      rowMajorSparseMatrix0.rank();
      rowMajorSparseMatrix0.iteratorOfNonZeroRows();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      rowMajorSparseMatrix0.apply(matrixOperation0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      DenseMatrix denseMatrix0 = basic2DMatrix0.toDenseMatrix();
      denseMatrix0.getColumn(1789);
      Matrix matrix0 = basic2DMatrix0.add((double) 32);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix1 = basic2DMatrix0.transformRow((-154), vectorFunction0);
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix(37, 4340);
      Matrix matrix2 = matrix0.multiply(matrix1);
      basic2DMatrix0.sum();
      // Undeclared exception!
      try { 
        matrix0.insert(matrix2, 37, 4340, 1789, 4340);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 37, 4340
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      int int0 = 2;
      int int1 = 1484;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1484, 1484);
      Matrix matrix0 = cRSMatrix0.subtract(1256.121);
      matrix0.insert((Matrix) cRSMatrix0, 2, 1484, 1565, 8);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(int1);
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = null;
      matrix0.equals(object0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Vector vector0 = null;
      cRSMatrix0.insertColumn(int0, vector0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(int0);
      basic2DMatrix0.removeLastColumn();
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.apply(matrixOperation0);
      long long0 = 297L;
      MockRandom mockRandom1 = new MockRandom(long0);
      int int2 = 6;
      double double0 = Double.POSITIVE_INFINITY;
      DenseVector.constant(int2, double0);
      basic2DMatrix0.min();
      int int3 = 0;
      basic2DMatrix0.insert((Matrix) cRSMatrix1, int2, int3);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "";
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      int int0 = (-316);
      int int1 = (-2135);
      denseMatrix0.minInRow((-2135));
      Integer integer0 = new Integer((-2135));
      DenseVector.constant(4, (-2135));
      denseMatrix0.iterator();
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) denseMatrix0, 4, (-316));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 4x-316
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[14];
      doubleArray1[9] = (double) (-332);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = rowMajorSparseMatrix0.blankOfColumns(2326);
      // Undeclared exception!
      try { 
        matrix0.removeRow((-78));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 2;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1107;
      Matrix.from1DArray(2, 1107, doubleArray0);
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("`4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(Integer.MAX_VALUE, Integer.MAX_VALUE, 2254);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[14];
      doubleArray1[7] = (double) 50;
      doubleArray1[3] = (double) (-332);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      rowMajorSparseMatrix0.rank();
      rowMajorSparseMatrix0.toBinary();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.get((-1109), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1109' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 91;
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int1 = 1123;
      SparseVector sparseVector0 = SparseVector.zero(1123, 91);
      SparseVector sparseVector1 = sparseVector0.toSparseVector();
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector1);
      // Undeclared exception!
      try { 
        matrix0.slice((-332), 3, (-59), (-830));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [-332..-59][3..-830].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.poll();
      mockRandom0.nextInt(2);
      mockRandom0.ints((long) 2);
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      linkedList0.poll();
      int int0 = 114;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2248, 2248, 114);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      // Undeclared exception!
      try { 
        cRSMatrix0.insertColumn((-2013265919), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2247
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.poll();
      int int0 = 2;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt(32);
      mockRandom0.ints((long) 32);
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      linkedList0.poll();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(32, 1400, 2);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      // Undeclared exception!
      try { 
        cRSMatrix0.insertColumn(0, denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 32.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 44;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(44, 44);
      int[] intArray0 = new int[1];
      basic2DMatrix0.select(intArray0, intArray0);
      Basic2DMatrix.zero(44, 6);
      basic2DMatrix0.toCSV();
      int int1 = 6;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(10);
      DenseVector denseVector0 = DenseVector.constant(44, 44);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertColumn(6, denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 44. Should be: 10.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1484);
      Matrix.diagonal(2, 1256.121);
      MockRandom mockRandom0 = new MockRandom();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(2);
      basic2DMatrix0.removeLastColumn();
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      basic2DMatrix0.apply(matrixOperation0);
      basic2DMatrix0.rotate();
      Matrix.unit(1468, 2);
      MockRandom mockRandom1 = new MockRandom(297L);
      DenseVector.constant(6, Double.POSITIVE_INFINITY);
      basic2DMatrix0.min();
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) cRSMatrix0, 6, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 6 rows and 0 cols at 0, 0 in a 2x2 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MockRandom mockRandom0 = new MockRandom((-3192));
      // Undeclared exception!
      try { 
        Matrix.random((-3192), (-3192), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      rowMajorSparseMatrix0.iteratorOfColumn(1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      mockRandom0.ints((long) 1);
      DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = Matrix.diagonal(2266, 1);
      mockRandom0.longs(1L, (-31L), (long) 1);
      matrix0.equals((Object) mockRandom0);
      SparseVector.zero(1610);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      matrix0.product();
      MatrixOperation<DenseMatrix> matrixOperation0 = (MatrixOperation<DenseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.apply(matrixOperation0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(44);
      MockRandom mockRandom0 = new MockRandom();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      basic2DMatrix0.slice(44, 44, 1789, 44);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1, (-739.9259998264778));
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      basic2DMatrix1.foldColumns(vectorAccumulator0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1789;
      intArray0[1] = 1;
      intArray0[2] = 1789;
      intArray0[4] = 1;
      intArray0[5] = 1789;
      intArray0[6] = 1;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1789' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 3129;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      int int1 = 17;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(17, 17);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      // Undeclared exception!
      try { 
        cRSMatrix0.minInColumn((-1516));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1516' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 44;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(44, 44);
      Matrix matrix0 = basic2DMatrix0.subtract(100.0);
      matrix0.blankOfShape(44, 44);
      int int1 = 6;
      basic2DMatrix0.toCSV();
      // Undeclared exception!
      try { 
        Matrix.constant((-1135), (-929), (-1206));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 91;
      double[][] doubleArray0 = new double[11][0];
      double[] doubleArray1 = new double[14];
      doubleArray1[7] = (double) 91;
      doubleArray1[9] = (double) (-332);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      rowMajorSparseMatrix0.rank();
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      rowMajorSparseMatrix0.iteratorOfNonZeroRows();
      rowMajorSparseMatrix0.equals(matrix0, 91.0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) 91, (long) 0, 1645L);
      matrix0.equals((Object) mockRandom0);
      // Undeclared exception!
      try { 
        SparseVector.zero((-332));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -332
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 998;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(998, 998);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(998, 545);
      // Undeclared exception!
      try { 
        cRSMatrix0.add((Matrix) rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 998x998 does not equal to 998x545.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 5;
      Basic2DMatrix.zero(5, 5);
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("6");
      denseMatrix0.removeLastRow();
      Integer integer0 = new Integer(5);
      int int1 = 2247;
      denseMatrix0.slice(10, 5, 10, 2247);
      int int2 = (-1823);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.diagonal((-1823), 2247);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(44, 44);
      basic2DMatrix0.removeLastRow();
      Integer integer0 = new Integer(44);
      Matrix matrix0 = basic2DMatrix0.slice(44, 1789, 44, 1789);
      RowMajorSparseMatrix.diagonal(1789, (double) integer0);
      Basic2DMatrix.constant(37, 44, 37);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.foldColumns(vectorAccumulator0);
      Locale locale0 = Locale.CANADA_FRENCH;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      String string0 = basic2DMatrix0.toCSV(numberFormat0);
      CRSMatrix.fromCSV(string0);
      CRSMatrix cRSMatrix0 = CRSMatrix.fromMatrixMarket(string0);
      CRSMatrix cRSMatrix1 = CRSMatrix.fromCSV(string0);
      int int0 = 4;
      Vector vector0 = basic2DMatrix0.getColumn(int0);
      MatrixVectorOperation<String> matrixVectorOperation0 = (MatrixVectorOperation<String>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.apply(matrixVectorOperation0, vector0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.JACOBI;
      cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int1 = 8;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateRow(int1, vectorFunction0);
      basic2DMatrix0.rows();
      Object object0 = new Object();
      matrix0.norm();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.poll();
      mockRandom0.ints(962L);
      DenseVector.fromCollection(linkedList0);
      int int0 = 2249;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2249, 2249, 2249);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      int int1 = 6;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(6);
      basic2DMatrix0.removeLastColumn();
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      basic2DMatrix0.apply(matrixOperation0);
      RowMajorSparseMatrix.diagonal(2759, 2038.8676304211408);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction1 = new OoPlaceVectorsSubtraction();
      // Undeclared exception!
      cRSMatrix0.product();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 3129;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(17, 17);
      cRSMatrix0.subtract(2630.7345);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(2);
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      cRSMatrix1.equals(object0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(3129, 2);
      cRSMatrix0.infinityNorm();
      // Undeclared exception!
      try { 
        basic2DMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(17, 17);
      Matrix matrix0 = cRSMatrix0.subtract((double) 17);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(3129);
      MockRandom mockRandom0 = new MockRandom();
      MatrixVectorOperation<String> matrixVectorOperation0 = (MatrixVectorOperation<String>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.equals((Object) cRSMatrix0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      matrix0.iterator();
      int int0 = 3124;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) cRSMatrix0, 3124, 3106);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 3124 rows and 3106 cols at 0, 0 in a 17x17 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(1, 0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 3129;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      int int1 = 17;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(17, 17);
      Matrix matrix0 = cRSMatrix0.subtract((double) 17);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      CRSMatrix cRSMatrix1 = new CRSMatrix(3129, 3129, 17);
      MockRandom mockRandom0 = new MockRandom();
      MatrixVectorOperation<String> matrixVectorOperation0 = (MatrixVectorOperation<String>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      matrix0.divide(Double.POSITIVE_INFINITY);
      cRSMatrix1.equals((Object) cRSMatrix0);
      CCSMatrix.fromCSV("        ");
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      DenseVector denseVector0 = null;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("        ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[14];
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      rowMajorSparseMatrix0.non(matrixPredicate0);
      rowMajorSparseMatrix0.rank();
      rowMajorSparseMatrix0.iteratorOfNonZeroRows();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.poll();
      mockRandom0.ints(962L);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.divide((-281.08));
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      MatrixVectorOperation<String> matrixVectorOperation0 = (MatrixVectorOperation<String>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      basic2DMatrix0.apply(matrixOperation0);
      RowMajorSparseMatrix.diagonal(8, (-281.08));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.updateColumn(28, vectorFunction0);
      // Undeclared exception!
      try { 
        Matrix.fromCSV("rows");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(17, 17);
      cRSMatrix0.subtract((double) 17);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      CRSMatrix.identity(3129);
      String string0 = "%%MatrixMarket";
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.poll();
      mockRandom0.ints(962L);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Matrix matrix0 = basic2DMatrix0.divide((-281.08));
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      MatrixVectorOperation<String> matrixVectorOperation0 = (MatrixVectorOperation<String>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      cRSMatrix0.setColumn(10, (double) 962L);
      cRSMatrix0.isColumnMajor();
      matrix0.divide((-1.0));
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      NumberFormat.getNumberInstance();
      Locale locale0 = Locale.forLanguageTag("9>g991l~in@");
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      cRSMatrix1.mkString(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = (-332);
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[14];
      doubleArray1[9] = (double) (-332);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      rowMajorSparseMatrix0.non(matrixPredicate0);
      rowMajorSparseMatrix0.rank();
      rowMajorSparseMatrix0.iteratorOfNonZeroRows();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      rowMajorSparseMatrix0.iteratorOfColumn(1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      mockRandom0.ints(1000L);
      DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = Matrix.diagonal(2266, 1000L);
      mockRandom0.longs(11L, (-31L), 1000L);
      matrix0.equals((Object) mockRandom0);
      SparseVector.zero(1610);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      Matrix.unit(1, 1);
      rowMajorSparseMatrix0.columnMajorIterator();
      matrix0.mkString((NumberFormat) null, "CK-fhHV5Y6[rR}", "CK-fhHV5Y6[rR}");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(1, 1);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 1);
      Matrix matrix0 = cRSMatrix0.subtract((double) 1);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(1);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix1.equals((Object) matrix0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      Basic2DMatrix.unit(0, 32);
      cRSMatrix1.infinityNorm();
      basic2DMatrix0.determinant();
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) basic2DMatrix0, 37, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 37 rows and 4 cols at 0, 0 in a 0x1 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(17, 17);
      Matrix matrix0 = cRSMatrix0.subtract((double) 17);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(3129);
      MockRandom mockRandom0 = new MockRandom();
      MatrixVectorOperation<String> matrixVectorOperation0 = (MatrixVectorOperation<String>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.equals((Object) cRSMatrix0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      Basic2DMatrix.unit(17, 3129);
      cRSMatrix0.infinityNorm();
      matrix0.determinant();
      int[] intArray0 = new int[1];
      intArray0[0] = 30;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '30' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      Matrix matrix0 = denseMatrix0.shuffle();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(17, 17);
      DenseVector.constant(4, (-1861.9));
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.min();
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.minInRow(17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1484, 1484);
      Matrix matrix0 = cRSMatrix0.subtract(1256.121);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      CRSMatrix.identity(1484);
      MockRandom mockRandom0 = new MockRandom();
      matrix0.equals((Object) null);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      matrix0.toString();
      MockRandom mockRandom1 = new MockRandom();
      int int0 = (-239);
      Basic2DMatrix.randomSymmetric(int0, mockRandom1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 40;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(40, 40);
      Integer integer0 = new Integer(40);
      Basic2DMatrix.unit(40, 40);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(40, (double) integer0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.equals((Matrix) basic2DMatrix0, (double) 40);
      Matrix.zero(40, 40);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      CRSMatrix.zero(40, 40);
      String string0 = "array";
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("array");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      rowMajorSparseMatrix0.iteratorOfColumn(1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.offerLast(integer0);
      DenseVector.fromCollection(linkedList0);
      Basic2DMatrix.zero(1, 1);
      int int0 = 9;
      int int1 = 795;
      int int2 = 26;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(26, 1.0092936802973977);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) rowMajorSparseMatrix0, 26, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 26 rows and 1 cols at 0, 0 from a 1x1 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 44;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(44, 44);
      Integer integer0 = new Integer(44);
      Basic2DMatrix.unit(44, 44);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(44, (double) integer0);
      basic2DMatrix0.max();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.equals((Matrix) basic2DMatrix0, (double) 44);
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      // Undeclared exception!
      basic2DMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 44;
      Basic2DMatrix.zero(44, 44);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(44);
      basic2DMatrix0.trace();
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.unit(44, 44);
      int int1 = 446;
      int int2 = 1317;
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) basic2DMatrix1, 44, 1317);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 44 rows and 1317 cols at 0, 0 in a 44x44 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(44, 44);
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.identity(44);
      Integer integer0 = new Integer(44);
      basic2DMatrix1.trace();
      Basic2DMatrix basic2DMatrix2 = Basic2DMatrix.unit(44, 44);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      basic2DMatrix0.select(intArray0, intArray0);
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix.zero(44, 44);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = basic2DMatrix2.select(intArray0, intArray0);
      int int0 = 390;
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight(9, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [9..1][9..1].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2220);
      Matrix matrix0 = cCSMatrix0.copy();
      matrix0.blankOfShape(0, 0);
      // Undeclared exception!
      try { 
        matrix0.swapColumns(0, 2220);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2221
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2220);
      cCSMatrix0.blankOfShape(2220, 2590);
      cCSMatrix0.swapColumns(2220, 2220);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 3129;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3129, 17, 3129);
      Matrix matrix0 = cRSMatrix0.subtract((double) 17);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(3129);
      MockRandom mockRandom0 = new MockRandom();
      MatrixVectorOperation<String> matrixVectorOperation0 = (MatrixVectorOperation<String>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.equals((Object) cRSMatrix0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      Basic2DMatrix.unit(17, 3129);
      cRSMatrix0.infinityNorm();
      double double0 = new Double(int0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.transform(matrixFunction0);
      matrix0.rotate();
      basic2DMatrix0.toRowVector();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(40, 40);
      Integer integer0 = new Integer(40);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(40, (double) integer0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.equals((Matrix) basic2DMatrix0, (double) 40);
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      Matrix matrix0 = basic2DMatrix0.rotate();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      DenseVector.constant(40, 0.0);
      basic2DMatrix0.setColumn(30, (double) 30);
      DecimalFormat decimalFormat0 = new DecimalFormat("Can");
      rowMajorSparseMatrix0.mkString((NumberFormat) decimalFormat0);
      Basic2DMatrix basic2DMatrix2 = new Basic2DMatrix();
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[2] = 40;
      intArray0[3] = 40;
      DenseVector.constant((-1), 0);
      double double0 = matrix0.trace();
      basic2DMatrix1.multiply(double0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(40);
      Integer integer0 = new Integer(40);
      Basic2DMatrix.unit(40, 40);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(40, (double) integer0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.equals((Matrix) basic2DMatrix0, (double) 40);
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      Matrix matrix0 = basic2DMatrix0.rotate();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)9).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      ((CRSMatrix) rowMajorSparseMatrix0).updateAt(9, 2245, matrixFunction0);
      DenseVector.constant(40, 40);
      DecimalFormat decimalFormat0 = new DecimalFormat("Can");
      String string0 = rowMajorSparseMatrix0.mkString((NumberFormat) decimalFormat0);
      Basic2DMatrix basic2DMatrix2 = new Basic2DMatrix();
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 40;
      intArray0[3] = 40;
      Locale locale0 = Locale.US;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      rowMajorSparseMatrix0.mkString(numberFormat0, "Can", string0);
      DenseVector.constant((-1), (-1.0));
      basic2DMatrix0.toColumnVector();
      matrix0.trace();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      int int0 = 17;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(17, 17);
      Matrix matrix0 = cRSMatrix0.subtract((double) 17);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      MockRandom mockRandom0 = new MockRandom();
      MatrixVectorOperation<String> matrixVectorOperation0 = (MatrixVectorOperation<String>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      Matrix matrix1 = matrix0.rotate();
      cRSMatrix0.equals((Object) cRSMatrix0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Basic2DMatrix.unit(17, 30);
      cRSMatrix0.infinityNorm();
      matrix0.determinant();
      Matrix.unit(17, 7);
      matrix0.hadamardProduct(matrix1);
      cRSMatrix0.infinityNorm();
      NumberFormat.getNumberInstance();
      // Undeclared exception!
      try { 
        DenseVector.random((-1732), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[14];
      doubleArray1[9] = (double) (-332);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      rowMajorSparseMatrix0.non(matrixPredicate0);
      rowMajorSparseMatrix0.toString();
      rowMajorSparseMatrix0.rank();
      rowMajorSparseMatrix0.iteratorOfNonZeroRows();
      Locale locale0 = Locale.JAPANESE;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      rowMajorSparseMatrix0.mkString(numberFormat0, "WvobRfh3qB:", "org.la4j.matrix.sparse.CRSMatrix");
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      rowMajorSparseMatrix0.kroneckerProduct(columnMajorSparseMatrix0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      basic2DMatrix0.maxInRow(1657);
      basic2DMatrix0.toMatrixMarket();
  }
}
