/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:47:14 GMT 2018
 */

package org.objectweb.asm.jip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.lang.reflect.Member;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.objectweb.asm.jip.AnnotationVisitor;
import org.objectweb.asm.jip.Attribute;
import org.objectweb.asm.jip.ByteVector;
import org.objectweb.asm.jip.ClassReader;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.Edge;
import org.objectweb.asm.jip.FieldWriter;
import org.objectweb.asm.jip.Frame;
import org.objectweb.asm.jip.Item;
import org.objectweb.asm.jip.Label;
import org.objectweb.asm.jip.MethodWriter;
import org.objectweb.asm.jip.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodWriter_ESTest extends MethodWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2042);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, 2042, ")B", "7|Y5X/,{$GaSo4_", ")B", stringArray0, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(285212683);
      String string0 = "RuntimeInvisibleAnnotations";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "StackMap";
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, 2, "StackMap", "StackMap", "RuntimeInvisibleAnnotations", stringArray0, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)13;
      // Undeclared exception!
      try { 
        MethodWriter.writeShort(byteArray0, 127, 1144);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 127
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 3;
      MethodWriter.getNewOffset(intArray0, intArray0, (-1), (-5));
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)0;
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 662;
      intArray0[1] = 552;
      intArray0[2] = 4142;
      int int0 = MethodWriter.getNewOffset(intArray0, intArray0, 512, 4142);
      assertEquals(8986, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$|CcvPz.~K3vO";
      stringArray0[1] = "Deprecated";
      int int0 = Frame.UNINITIALIZED_THIS;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-650), "Deprecated", "$L`#~crFxE", "$L`#~crFxE", stringArray0, false, false);
      methodWriter0.visitIntInsn((-650), 1);
      String string0 = classWriter0.thisName;
      methodWriter0.visitFieldInsn((-650), "$|CcvPz.~K3vO", "Deprecated", "sc)y*4?");
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation((-650), "$|CcvPz.~K3vO", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$|CcvPz.~K3vO";
      stringArray0[1] = "$L`#~c:FxE";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-650), "Deprecated", "$L`#~c:FxE", "$L`#~c:FxE", stringArray0, false, false);
      int int0 = Frame.BYTE;
      methodWriter0.visitTypeInsn((-1128), "Deprecated");
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation((short) (-21267), "Depreated", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4258));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprect&d";
      stringArray0[1] = "Deprect&d";
      FieldWriter fieldWriter0 = classWriter0.firstField;
      byte[] byteArray0 = new byte[3];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4258), "Deprect&d", "Deprect&d", "Deprect&d", stringArray0, false, false);
      methodWriter0.visitMultiANewArrayInsn("`#~c:FE", 1);
      boolean boolean0 = ClassReader.RESIZE;
      methodWriter0.visitAnnotationDefault();
      // Undeclared exception!
      try { 
        MethodWriter.readInt(byteArray0, (byte)10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprecatd";
      stringArray0[1] = "Deprecatd";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-650), "Deprecatd", "W tV/#&qCZ;2G){Rw/", "Deprecatd", stringArray0, true, false);
      methodWriter0.visitMaxs(1, (-650));
      Label label0 = new Label();
      methodWriter0.visitLocalVariable("Deprecatd", "LoalVariableTypeTable", "Deprecatd", label0, label0, (-650));
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        MethodWriter.readInt(byteArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4208));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ydN>H1sc4p=";
      stringArray0[1] = "ydN>H1sc4p=";
      int int0 = Frame.ARRAY_OF;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4208), "ydN>H1sc4p=", "ydN>H1sc4p=", "ydN>H1sc4p=", stringArray0, false, false);
      methodWriter0.visitMethodInsn(268435456, "ydN>H1sc4p=", "ydN>H1sc4p=", "ydN>H1sc4p=");
      methodWriter0.visitVarInsn(1, 0);
      methodWriter0.visitInsn((-2404));
      methodWriter0.visitMaxs((-1), (-4208));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4209));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprected";
      stringArray0[1] = "Deprected";
      int int0 = Frame.UNINITIALIZED_THIS;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4209), "Deprected", "$L`#~crFxE", "$L`#~crFxE", stringArray0, false, false);
      methodWriter0.visitIntInsn((-4209), 1);
      MethodWriter methodWriter1 = null;
      try {
        methodWriter1 = new MethodWriter(classWriter0, 1, "Deprected", "/3K-", "Deprected", stringArray0, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4200));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cg|AL.qh|}396J$";
      classWriter0.newConstItem("cg|AL.qh|}396J$");
      stringArray0[1] = "cg|AL.qh|}396J$";
      int int0 = Type.FLOAT;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Q8p;q#", "cg|AL.qh|}396J$", "cg|AL.qh|}396J$", stringArray0, false, false);
      methodWriter0.visitIincInsn(285212683, 2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$L`#~crFxE";
      stringArray0[1] = "Deprecated";
      int int0 = Frame.UNINITIALIZED_THIS;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-650), "Deprecated", "$L`#~crFxE", "$L`#~crFxE", stringArray0, false, false);
      methodWriter0.visitIntInsn((-650), 1);
      String string0 = classWriter0.thisName;
      methodWriter0.visitFieldInsn((-650), "$L`#~crFxE", "Deprecated", "s)y*4?");
      methodWriter0.visitIincInsn(2, 37);
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation((-2689), (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4211));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ydN>H1sc4p=";
      stringArray0[1] = "ydN>H1sc4p=";
      int int0 = Frame.ARRAY_OF;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4211), "ydN>H1sc4p=", "ydN>H1sc4p=", "ydN>H1sc4p=", stringArray0, false, false);
      methodWriter0.visitMethodInsn(268435456, "ydN>H1sc4p=", "ydN>H1sc4p=", "ydN>H1sc4p=");
      methodWriter0.visitFrame(10, 1, stringArray0, 2, stringArray0);
      methodWriter0.visitLdcInsn("ydN>H1sc4p=");
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 84;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<*[krmQlGN");
      ClassWriter classWriter0 = new ClassWriter(84);
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, 1, "", "", "", (String[]) null, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = (-650);
      ClassWriter classWriter0 = new ClassWriter((-650));
      String[] stringArray0 = new String[2];
      boolean boolean0 = ClassReader.FRAMES;
      stringArray0[0] = "iepecated";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[1] = "iepecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "iepecated", "W tV/x#&qC;2G){Rw/", "iepecated", stringArray0, true, false);
      methodWriter0.visitTypeInsn(186, "iepecated");
      methodWriter0.visitIntInsn(186, (-650));
      methodWriter0.visitIincInsn(186, (-650));
      Type type0 = Type.LONG_TYPE;
      methodWriter0.visitFieldInsn(6, "W tV/x#&qC;2G){Rw/", "iepecated", "W tV/x#&qC;2G){Rw/");
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      // Undeclared exception!
      try { 
        methodWriter1.visitParameterAnnotation((-1476), "iepecated", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2426);
      String[] stringArray0 = new String[2];
      boolean boolean0 = classWriter0.invalidFrames;
      stringArray0[0] = "$|CQQ6cPz.Kv";
      stringArray0[1] = "$|CQQ6cPz.Kv";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2426, "$|CQQ6cPz.Kv", "$|CQQ6cPz.Kv", "$|CQQ6cPz.Kv", stringArray0, false, false);
      methodWriter0.visitIntInsn(2426, 1);
      ByteVector byteVector0 = new ByteVector(2);
      byteVector0.put11(2426, 2426);
      methodWriter0.put(byteVector0);
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn(185, "$|CQQ6cPz.Kv", "$|CQQ6cPz.Kv", "$|CQQ6cPz.Kv");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$|CcvPz.~K3vO";
      stringArray0[1] = "Deprecated";
      int int0 = Frame.UNINITIALIZED_THIS;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-650), "Deprecated", "$L`#~crFxE", "$L`#~crFxE", stringArray0, false, false);
      methodWriter0.visitIntInsn((-650), 1);
      String string0 = classWriter0.thisName;
      methodWriter0.visitFieldInsn((-650), "$|CcvPz.~K3vO", "Deprecated", "sc)y*4?");
      methodWriter0.visitIincInsn(2, 37);
      Frame frame0 = new Frame();
      Label label0 = frame0.owner;
      // Undeclared exception!
      try { 
        methodWriter0.visitLineNumber(1, (Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(258);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classWriter0.addType("|CcvPz.~K3vO");
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "|CcvPz.~K3vO", "|CcvPz.~K3vO", "|CcvPz.~K3vO", stringArray0, false, false);
      classWriter0.addUninitializedType("Nuxrt+Apoyg", (-658));
      methodWriter0.visitEnd();
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(1, "K~#5 %(O__-", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      classWriter0.newNameType("$|CcvPz.~K3vO", "$|CcvPz.~K3vO");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "YFlBG[C`\"Ti]I";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "YFlBG[C`\"Ti]I", "[lN", "[lN", stringArray0, false, false);
      methodWriter0.visitVarInsn(132, (-650));
      classWriter0.lastMethod = methodWriter0;
      methodWriter0.visitLdcInsn("[lN");
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("StackMapTable", false);
      methodWriter0.visitEnd();
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitAnnotationDefault();
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4208));
      String string0 = "ydN>H1sc4p=";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ydN>H1sc4p=";
      stringArray0[1] = "ydN>H1sc4p=";
      int int0 = Frame.ARRAY_OF;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4208), "ydN>H1sc4p=", "ydN>H1sc4p=", "ydN>H1sc4p=", stringArray0, false, false);
      String string1 = "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII";
      classWriter0.newField("ydN>H1sc4p=", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "'zEA;");
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      methodWriter1.visitVarInsn(2, (-4208));
      Integer integer0 = new Integer(252);
      methodWriter0.visitLdcInsn(integer0);
      Label label0 = new Label();
      Label[] labelArray0 = new Label[3];
      labelArray0[0] = label0;
      labelArray0[1] = label0;
      labelArray0[2] = label0;
      // Undeclared exception!
      try { 
        methodWriter0.visitLookupSwitchInsn(label0, (int[]) null, labelArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$|CcvPz.~K3vO";
      stringArray0[1] = "Deprecated";
      int int0 = Frame.UNINITIALIZED_THIS;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-650), "Deprecated", "Deprecated", "Deprecated", stringArray0, false, false);
      methodWriter0.visitIntInsn((-650), 1);
      methodWriter0.visitInsn((-650));
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      methodWriter0.visitIincInsn(1, 936);
      // Undeclared exception!
      try { 
        MethodWriter.readUnsignedShort((byte[]) null, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-128));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Ljava/lang/Synthetic;";
      stringArray0[1] = "a0i2";
      stringArray0[2] = "a0i2";
      stringArray0[3] = "a0i2";
      stringArray0[4] = "a0i2";
      stringArray0[5] = "Ljava/lang/Synthetic;";
      stringArray0[6] = "Ljava/lang/Synthetic;";
      stringArray0[7] = "Ljava/lang/Synthetic;";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 185, "a0i2", "a0i2", "Ljava/lang/Synthetic;", stringArray0, false, false);
      methodWriter0.getSize();
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("a0i2", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-648));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-664), "f tV/x#&q&;2G){Rw/", "<init>", "LocalVariable8able", (String[]) null, false, false);
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      Integer.getInteger("e1precat");
      methodWriter1.visitVarInsn(169, 169);
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4208));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ydN>H1sc4p=";
      stringArray0[1] = "ydN>H1sc4p=";
      int int0 = Frame.ARRAY_OF;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4208), "ydN>H1sc4p=", "ydN>H1sc4p=", "ydN>H1sc4p=", stringArray0, false, false);
      methodWriter0.visitMethodInsn(268435456, "ydN>H1sc4p=", "ydN>H1sc4p=", "ydN>H1sc4p=");
      methodWriter0.visitVarInsn(187, 1416);
      ClassWriter classWriter1 = new ClassWriter(1);
      classWriter1.newMethodItem("W tV/#&qCZ;2G){Rw/", "ydN>H1sc4p=", "ydN>H1sc4p=", false);
      ByteVector byteVector0 = new ByteVector();
      methodWriter0.visitInsn(1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$|CcvPz.~K3vO";
      stringArray0[1] = "Deprecated";
      int int0 = Frame.UNINITIALIZED_THIS;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-650), "Deprecated", "$L`#~crFxE", "$L`#~crFxE", stringArray0, false, false);
      methodWriter0.visitIntInsn((-650), 1);
      String string0 = classWriter0.thisName;
      methodWriter0.visitFieldInsn((-650), "$|CcvPz.~K3vO", "Deprecated", "sc)y*4?");
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation((-650), "$|CcvPz.~K3vO", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4208));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ydN>H1sc4p=";
      stringArray0[1] = "ydN>H1sc4p=";
      int int0 = Type.BYTE;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4208), "ydN>H1sc4p=", "ydN>H1sc4p=", "ydN>H1sc4p=", stringArray0, false, false);
      methodWriter0.visitMethodInsn(3, "ydN>H1sc4p=", "ydN>H1sc4p=", "ydN>H1sc4p=");
      methodWriter0.visitTypeInsn(3, "~V[_AkFt-,mTXqe;C'");
      Label label0 = new Label();
      boolean boolean0 = classWriter0.invalidFrames;
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "ydN>H1sc4p=");
      methodWriter0.visitMaxs(3319, 183);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-658));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "DprVcated";
      stringArray0[1] = "DprVcated";
      classWriter0.newFieldItem("DprVcated", "DprVcated", ".class");
      int int0 = Type.ARRAY;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "DprVcated", "W tV/x#&qCm;2G){Rw/", "DprVcated", stringArray0, true, true);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = classWriter0.pool;
      ByteVector byteVector2 = byteVector1.putInt(9);
      ByteVector byteVector3 = byteVector0.putUTF8(".class");
      byteVector3.putLong(1);
      methodWriter0.put(byteVector2);
      methodWriter0.visitFrame(1, 795, stringArray0, 191, stringArray0);
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4208));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ydN>H1sc4p=";
      stringArray0[1] = "ydN>H1sc4p=";
      int int0 = Frame.ARRAY_OF;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4208), "ydN>H1sc4p=", "ydN>H1sc4p=", "ydN>H1sc4p=", stringArray0, false, false);
      methodWriter0.visitMethodInsn(268435456, "ydN>H1sc4p=", "ydN>H1sc4p=", "ydN>H1sc4p=");
      methodWriter0.visitVarInsn(1, 2);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-674));
      String[] stringArray0 = new String[2];
      classWriter0.newNameTypeItem("`^N<8|PE%R*9ML]iw", ":{`;O{~TM!_'");
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-674), "Deprecated", "W tV/x#&qC;2G){Rw/", "Deprecated", stringArray0, true, false);
      Item item0 = new Item();
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      methodWriter1.visitMultiANewArrayInsn("Deprecated", 2);
      methodWriter1.visitTypeInsn(171, "Deprecated");
      methodWriter1.visitAnnotationDefault();
      Label label0 = new Label();
      byte[] byteArray0 = classWriter0.toByteArray();
      methodWriter1.visitJumpInsn(184, label0);
      int int0 = MethodWriter.readInt(byteArray0, 2);
      assertEquals((-1161953280), int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$|CcvPz.~K3vO";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-650), "Deprecated", "Deprecated", "Deprecated", stringArray0, false, false);
      int int0 = Frame.BYTE;
      methodWriter0.visitVarInsn(132, 2);
      int int1 = methodWriter0.getSize();
      assertEquals(59, int1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-677));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Deprecated";
      classWriter0.visit((-677), 5, "Deprecated", "<init>", "Deprecated", stringArray0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "$|CcvPz.~K3vO";
      stringArray1[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-677), "Deprecated", ",F<`9~cFxj", ",F<`9~cFxj", stringArray1, false, false);
      methodWriter0.visitIntInsn(16777220, (-677));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      methodWriter0.visitMultiANewArrayInsn("char", 256);
      classWriter0.newLong(1051L);
      methodWriter0.visitIincInsn((-1730866561), (-1453759544));
      byte[] byteArray0 = new byte[2];
      ByteVector byteVector0 = new ByteVector();
      byteVector0.putUTF8("Deprecated");
      methodWriter0.put(byteVector0);
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)4;
      // Undeclared exception!
      try { 
        MethodWriter.readShort(byteArray0, (-1453759544));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1453759544
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "DeprVecated";
      stringArray0[1] = "DeprVecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-650), "DeprVecated", "$L`#~c:FxE", "$L`#~c:FxE", stringArray0, false, false);
      Integer integer0 = new Integer(1);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, (-650), "DeprVecated", "W tV/x#&qC;2G){Rw/", (String) null, stringArray0, true, true);
      methodWriter1.visitTypeInsn(2418, "-bAG57c");
      MethodWriter methodWriter2 = methodWriter0.next;
      methodWriter2.visitVarInsn(17, (-650));
      methodWriter2.visitAnnotationDefault();
      methodWriter1.visitIntInsn(17, 24);
      methodWriter2.visitAnnotation("DeprVecated", false);
      // Undeclared exception!
      try { 
        methodWriter2.visitIincInsn((-1031), (-496));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1031
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4223));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprected";
      classWriter0.newDouble(1.0);
      stringArray0[1] = "$L`#~crFxE";
      int int0 = Frame.UNINITIALIZED_THIS;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4223), "Deprected", "$L`#~crFxE", "$L`#~crFxE", stringArray0, false, false);
      Label label0 = new Label();
      Label[] labelArray0 = new Label[1];
      labelArray0[0] = label0;
      methodWriter0.visitTableSwitchInsn(16777222, (-1510), label0, labelArray0);
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn(2, "$L`#~crFxE", (String) null, "Deprected");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-677));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Depreated";
      stringArray0[1] = "Depreated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-677), "Depreated", ",F<`9~cFxj", ",F<`9~cFxj", stringArray0, false, false);
      methodWriter0.visitIntInsn(16777220, (-677));
      boolean boolean0 = classWriter0.invalidFrames;
      classWriter0.newClassItem("$|CcvPz.~K3vO");
      methodWriter0.visitMultiANewArrayInsn("har", 256);
      Label label0 = new Label();
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "har");
      classWriter0.newLong(1051L);
      methodWriter0.visitIincInsn((-1730866561), (-1453759527));
      ByteVector byteVector0 = new ByteVector();
      byteVector0.putUTF8("Depreated");
      methodWriter0.put(byteVector0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$L`#~c:FxE";
      stringArray0[1] = "$L`#~c:FxE";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-650), "Deprecated", "$L`#~c:FxE", "$L`#~c:FxE", stringArray0, false, false);
      methodWriter0.visitIntInsn((-650), 1);
      methodWriter0.visitFieldInsn((-650), "$L`#~c:FxE", "$L`#~c:FxE", "sc)y*4?");
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      methodWriter1.visitAnnotation("$L`#~c:FxE", true);
      Label label0 = new Label();
      methodWriter1.visitMethodInsn(2, " o0E:2A5x0j~pi", "pdc@#Hxn]", "$L`#~c:FxE");
      methodWriter1.visitFrame(3, 1, stringArray0, 1, stringArray0);
      methodWriter1.visitLdcInsn(" o0E:2A5x0j~pi");
      methodWriter0.visitCode();
      methodWriter1.visitIincInsn((-1333), 1);
      methodWriter0.visitAnnotationDefault();
      methodWriter0.visitTypeInsn(2, "H5SspXP%\"4[%687");
      assertSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$|CcvPz.~K3vO";
      stringArray0[1] = "$L`#~c:FxE";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-650), "Deprecated", "$L`#~c:FxE", "$L`#~c:FxE", stringArray0, false, false);
      int int0 = Frame.BYTE;
      methodWriter0.visitMethodInsn((-650), "$|CcvPz.~K3vO", "org.objectweb.asm.jip.MethodWriter", "LineNumberTable");
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(1, 16777226, stringArray0, 1, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-674));
      String[] stringArray0 = new String[2];
      Item item0 = classWriter0.key3;
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-674), "Deprecated", "W tV/x#&qC;2G)f{Rw/", "Deprecated", stringArray0, true, false);
      classWriter0.newMethodItem("Deprecated", "Deprecated", "W tV/x#&qC;2G)f{Rw/", true);
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      Integer.getInteger("W tV/x#&qC;2G)f{Rw/");
      methodWriter1.visitVarInsn(158, 158);
      methodWriter0.visitMaxs(1, (-1035));
      assertSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 2394;
      ClassWriter classWriter0 = new ClassWriter(2394);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "BRGLB5=", "WhWT'@)YW?Xm", "<n+Tg", stringArray0, true, true);
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      int int1 = 16777191;
      Integer.getInteger("Deprecated");
      // Undeclared exception!
      try { 
        methodWriter1.visitVarInsn(Integer.MAX_VALUE, (-2560));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4096, "Deprecated", "W tTV/x#&qC;2G){Rw/", "Deprecated", stringArray0, true, true);
      methodWriter0.visitFrame(375, (-650), stringArray0, (-650), stringArray0);
      Integer.getInteger("W tTV/x#&qC;2G){Rw/");
      Integer.sum(16777216, (-650));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = ClassReader.SIGNATURES;
      MethodWriter methodWriter1 = methodWriter0.next;
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(179, "W tTV/x#&qC;2G){Rw/", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3304);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h";
      stringArray0[1] = "h";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 3304, "PR", "ConstantValue", "??#3Ec*-lcFLC", stringArray0, false, false);
      methodWriter0.visitMaxs(2, 1);
      Label label0 = new Label();
      methodWriter0.visitVarInsn(16777221, 3304);
      methodWriter0.visitLocalVariable("Code", "*<mr", "9", label0, label0, 1);
      Label label1 = label0.successor;
      Edge edge0 = new Edge();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-674));
      String[] stringArray0 = new String[2];
      classWriter0.newNameTypeItem("`^N<8|PE%R*9ML]iw", ":{`;O{~TM!_'");
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-674), "Deprecated", "W tV/x#&qC;2G){Rw/", "Deprecated", stringArray0, true, false);
      Item item0 = new Item(1);
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      methodWriter1.visitMultiANewArrayInsn("Deprecated", 2);
      methodWriter1.visitTypeInsn(171, "Deprecated");
      methodWriter1.visitAnnotationDefault();
      Label label0 = new Label();
      methodWriter1.visitJumpInsn(184, label0);
      methodWriter0.visitVarInsn(83, (-674));
      assertSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4266));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprect&d";
      stringArray0[1] = "Deprect&d";
      int int0 = Frame.TOP;
      classWriter0.newMethod("Deprect&d", "Deprect&d", "Deprect&d", true);
      classWriter0.invalidFrames = false;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4266), "Deprect&d", "Deprect&d", "Deprect&d", stringArray0, false, false);
      methodWriter0.visitIntInsn((-4266), 1);
      Label label0 = new Label();
      classWriter0.visitOuterClass("FM-NHy9e)9#.M", "hQ}1uy", ":'E=r}yHy~?u%ajXg'");
      methodWriter0.visitFrame(2, 2, stringArray0, 16777216, stringArray0);
      classWriter0.newLong(16777216);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Deprect&d");
      Label label1 = label0.getFirst();
      methodWriter0.visitJumpInsn(2, label0);
      assertSame(label0, label1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$L`#~c:FxE";
      stringArray0[1] = "Deprecated";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4112, "$L`#~c:FxE", "W tTV/x#&qC;2G){Rw/", (String) null, stringArray0, true, true);
      methodWriter0.visitLdcInsn("$L`#~c:FxE");
      String string0 = classWriter0.thisName;
      methodWriter0.visitIntInsn(12, 1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4108, "Deprecated", "W tV/x#&qC;2G){rRw/", "Deprecated", stringArray0, false, false);
      Label label0 = new Label();
      methodWriter0.visitLabel(label0);
      Frame frame0 = new Frame();
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      byte[] byteArray0 = new byte[0];
      label0.resolve(methodWriter0, (-1048595), byteArray0);
      Label label1 = label0.next;
      label0.info = (Object) label0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Deprecated");
      methodWriter0.visitJumpInsn(1, label0);
      // Undeclared exception!
      try { 
        MethodWriter.readShort(byteArray0, 200);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 200
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4258));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprect&d";
      stringArray0[1] = "Deprect&d";
      FieldWriter fieldWriter0 = classWriter0.lastField;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[10];
      boolean boolean0 = ClassReader.RESIZE;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4258), "Deprect&d", "Deprect&d", "Deprect&d", stringArray0, false, false);
      methodWriter0.visitAnnotationDefault();
      methodWriter0.visitFrame(2, 2, stringArray0, 1, stringArray0);
      methodWriter0.signature = "Deprect&d";
      classWriter0.version = 0;
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      methodWriter1.visitLdcInsn("Deprect&d");
      methodWriter0.getSize();
      methodWriter0.visitFrame(2, 1, stringArray0, (byte)0, stringArray0);
      assertSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      String[] stringArray0 = new String[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "$|CcvPz.~K3vO";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4091, "$|CcvPz.~K3vO", "W tV/x#&qC;2G){Rw/", (String) null, stringArray0, true, false);
      methodWriter0.visitMaxs(1, 770);
      methodWriter0.visitLdcInsn("$L`#~c:FxE");
      Label label0 = new Label();
      int[] intArray0 = new int[1];
      intArray0[0] = 770;
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      methodWriter0.visitVarInsn((-156), 4091);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4209));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$L`#~crFxE";
      Item item0 = new Item();
      stringArray0[1] = "Deprected";
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4209), "Deprected", "$L`#~crFxE", "$L`#~crFxE", stringArray0, false, false);
      Label label0 = new Label();
      methodWriter0.classReaderLength = 2;
      methodWriter0.visitMethodInsn(1, "$L`#~crFxE", "$L`#~crFxE", "$L`#~crFxE");
      methodWriter0.visitFrame((-1), 1, stringArray0, 2, stringArray0);
      methodWriter0.visitAnnotationDefault();
      methodWriter0.visitMultiANewArrayInsn("Deprected", 1);
      methodWriter0.visitIincInsn((-1), 4650);
      methodWriter0.visitTypeInsn(16777219, "Deprected");
      methodWriter0.visitLineNumber((-641), label0);
      label0.getFirst();
      methodWriter0.visitJumpInsn((-4209), label0);
      int[] intArray0 = new int[1];
      intArray0[0] = 4650;
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      methodWriter0.getSize();
      methodWriter0.visitMethodInsn((-641), "<init>", "Deprected", "Deprected");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-657));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      Item item0 = classWriter0.newNameTypeItem("Deprcated", "Deprcated");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      stringArray0[0] = "Deprcated";
      stringArray0[1] = "Deprcated";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-657), "Deprcated", "W tV/x#&qC;2G)fRw/", "Deprcated", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitMethodInsn(1, "'$5(T#tq", "Deprcated", "e$");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitTypeInsn(3063, "e$");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "DeprsKcated";
      stringArray0[1] = "DeprsKcated";
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4096, "DeprsKcated", "W tV/x#&qC;2G){Rw/", (String) null, stringArray0, false, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Item item0 = classWriter0.newInteger((-650));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      methodWriter0.visitTypeInsn(2418, "-bAG57c");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLdcInsn("$L`#~c:=xE");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.firstMethod = methodWriter0;
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitTryCatchBlock(label1, label0, label0, "Signature");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      classWriter0.firstMethod.visitInsn(1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.firstMethod.visitTryCatchBlock(label1, label1, label1, "z");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-275));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-657));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      Item item0 = classWriter0.newNameTypeItem("StackM5BapTable", "StackM5BapTable");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      stringArray0[0] = "StackM5BapTable";
      stringArray0[1] = "StackM5BapTable";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-657), "StackM5BapTable", "W tV/x#&qC;2G)fRw/", "StackM5BapTable", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitIntInsn(1, 140);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn(140, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D+wc!?YMh^s1x:{");
      assertFalse(boolean0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Label label0 = edge0.successor;
      assertNull(label0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(169);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/:{)-J^J";
      stringArray0[1] = "Synthetic";
      stringArray0[2] = "Synthetic";
      stringArray0[3] = "/:{)-J^J";
      stringArray0[4] = "/:{)-J^J";
      stringArray0[5] = "Synthetic";
      stringArray0[6] = "/:{)-J^J";
      stringArray0[7] = "Synthetic";
      stringArray0[8] = "/:{)-J^J";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Synthetic", "/:{)-J^J", "/:{)-J^J", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitIincInsn((-2001), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2001
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|CcvPz.~K3vO";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4066, "|CcvPz.~K3vO", "W tR/x#&qC;2G){RwR", (String) null, stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitTypeInsn(1, "(K1uZRS8mYW;AH;");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIincInsn(1, 690);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitJumpInsn(191, (Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$L`#~c:FxE";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4112, "$L`#~c:FxE", "W tTV/x#&qC;2G){Rw/", (String) null, stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitLdcInsn("$L`#~c:FxE");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = classWriter0.thisName;
      assertNull(string0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      int int0 = methodWriter0.getSize();
      assertEquals(52, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMultiANewArrayInsn("$L`#~c:FxE", 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitTypeInsn(52, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassWriter classWriter0 = new ClassWriter((-4209));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$L`#~crFxE";
      Item item0 = classWriter0.newNameTypeItem("$L`#~crFxE", "Deprected");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      stringArray0[1] = "Deprected";
      int int0 = Frame.FLOAT;
      assertEquals(16777218, int0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4209), "Deprected", "$L`#~crFxE", "$L`#~crFxE", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.classReaderLength = 2;
      Item item1 = new Item(2);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      
      Attribute attribute0 = new Attribute("$L`#~crFxE");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      ClassWriter classWriter1 = new ClassWriter(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      classWriter1.visitInnerClass("W(OREl\"\"Xr9\"/", "Deprected", "W(OREl\"\"Xr9\"/", 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotSame(classWriter1, classWriter0);
      
      methodWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertNotSame(classWriter0, classWriter1);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("Deprected", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertNotSame(classWriter0, classWriter1);
      
      int int1 = classWriter0.newMethod("", "Deprected", "Deprected", false);
      assertEquals(9, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(int1 == int0);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertNotSame(classWriter0, classWriter1);
      
      // Undeclared exception!
      try { 
        methodWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      Item item0 = classWriter0.newInteger(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-650), "Deprecated", "q tV/x#&q&;2G){Rw/", "Deprecated", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Item item1 = new Item(1);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      
      item0.index = 2;
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitMultiANewArrayInsn("Deprecated", 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = 87;
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      Label label0 = frame0.owner;
      assertNull(label0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitJumpInsn(87, (Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-658));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if(Tq8].b=T7p");
      assertFalse(boolean0);
      
      stringArray0[0] = "if(Tq8].b=T7p";
      stringArray0[1] = "if(Tq8].b=T7p";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-658), "if(Tq8].b=T7p", "W t/x#&q2G){Ww/", "W t/x#&q2G){Ww/", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Item item0 = classWriter0.newClassItem("if(Tq8].b=T7p");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      methodWriter0.visitTypeInsn(2, "if(Tq8].b=T7p");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean1 = ClassReader.WRITER;
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      methodWriter0.visitMultiANewArrayInsn("W t/x#&q2G){Ww/", 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitFieldInsn((-658), "if(Tq8].b=T7p", "T|i;hZ^p", "K/r8~:uz0C6Y");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      boolean boolean3 = classWriter0.invalidFrames;
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      methodWriter0.visitVarInsn(168, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label1, label0);
      assertSame(label0, label1);
      
      methodWriter0.visitLdcInsn("W t/x#&q2G){Ww/");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter1.visitLocalVariable("MprVcU<eq", "if(Tq8].b=T7p", "T|i;hZ^p", label0, label1, (-658));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(label1, label0);
      assertSame(methodWriter1, methodWriter0);
      assertSame(label0, label1);
      
      methodWriter1.visitIntInsn((-658), 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.visitMaxs(1, 285212675);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      methodWriter1.put(byteVector0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      int[] intArray0 = new int[0];
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      assertSame(label0, label1);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-658));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "DprVcated";
      stringArray0[1] = "DprVcated";
      Item item0 = classWriter0.newFieldItem("DprVcated", "DprVcated", ".class");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      int int0 = Type.ARRAY;
      assertEquals(9, int0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "DprVcated", "W tV/x#&qCm;2G){Rw/", (String) null, stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = classWriter0.pool;
      assertNotNull(byteVector1);
      assertFalse(byteVector1.equals((Object)byteVector0));
      assertNotSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector1.putInt(9);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteVector2);
      assertFalse(byteVector1.equals((Object)byteVector0));
      assertFalse(byteVector2.equals((Object)byteVector0));
      assertSame(byteVector1, byteVector2);
      assertNotSame(byteVector1, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertNotSame(byteVector2, byteVector0);
      
      ByteVector byteVector3 = byteVector0.putUTF8(".class");
      assertNotNull(byteVector3);
      assertFalse(byteVector0.equals((Object)byteVector2));
      assertFalse(byteVector0.equals((Object)byteVector1));
      assertFalse(byteVector3.equals((Object)byteVector2));
      assertFalse(byteVector3.equals((Object)byteVector1));
      assertNotSame(byteVector0, byteVector2);
      assertNotSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector3);
      assertNotSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector0);
      assertNotSame(byteVector3, byteVector1);
      
      ByteVector byteVector4 = byteVector0.put11(9, 1);
      assertNotNull(byteVector4);
      assertFalse(byteVector0.equals((Object)byteVector2));
      assertFalse(byteVector0.equals((Object)byteVector1));
      assertFalse(byteVector4.equals((Object)byteVector2));
      assertFalse(byteVector4.equals((Object)byteVector1));
      assertNotSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector4);
      assertNotSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector3);
      assertNotSame(byteVector4, byteVector2);
      assertSame(byteVector4, byteVector3);
      assertSame(byteVector4, byteVector0);
      assertNotSame(byteVector4, byteVector1);
      
      ByteVector byteVector5 = byteVector3.putLong(1);
      assertNotNull(byteVector5);
      assertFalse(byteVector0.equals((Object)byteVector2));
      assertFalse(byteVector0.equals((Object)byteVector1));
      assertFalse(byteVector3.equals((Object)byteVector2));
      assertFalse(byteVector3.equals((Object)byteVector1));
      assertFalse(byteVector5.equals((Object)byteVector2));
      assertFalse(byteVector5.equals((Object)byteVector1));
      assertNotSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector5);
      assertSame(byteVector0, byteVector4);
      assertNotSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector3);
      assertNotSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector0);
      assertNotSame(byteVector3, byteVector1);
      assertSame(byteVector3, byteVector5);
      assertSame(byteVector3, byteVector4);
      assertNotSame(byteVector5, byteVector2);
      assertSame(byteVector5, byteVector3);
      assertSame(byteVector5, byteVector0);
      assertSame(byteVector5, byteVector4);
      assertNotSame(byteVector5, byteVector1);
      
      methodWriter0.put(byteVector2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(byteVector1.equals((Object)byteVector5));
      assertFalse(byteVector1.equals((Object)byteVector4));
      assertFalse(byteVector1.equals((Object)byteVector0));
      assertFalse(byteVector1.equals((Object)byteVector3));
      assertFalse(byteVector2.equals((Object)byteVector3));
      assertFalse(byteVector2.equals((Object)byteVector5));
      assertFalse(byteVector2.equals((Object)byteVector0));
      assertFalse(byteVector2.equals((Object)byteVector4));
      assertNotSame(byteVector1, byteVector5);
      assertSame(byteVector1, byteVector2);
      assertNotSame(byteVector1, byteVector4);
      assertNotSame(byteVector1, byteVector0);
      assertNotSame(byteVector1, byteVector3);
      assertNotSame(byteVector2, byteVector3);
      assertSame(byteVector2, byteVector1);
      assertNotSame(byteVector2, byteVector5);
      assertNotSame(byteVector2, byteVector0);
      assertNotSame(byteVector2, byteVector4);
      
      methodWriter0.visitFrame(1, 2, stringArray0, 1, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|CcvPz.~K3vO";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4091, "|CcvPz.~K3vO", "W tV/x#&qC;2G){Rw/", (String) null, stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Attribute attribute0 = new Attribute("lK@%V.QkpU$86");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      methodWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4258));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprect&d";
      stringArray0[1] = "Deprect&d";
      FieldWriter fieldWriter0 = classWriter0.firstField;
      assertNull(fieldWriter0);
      
      boolean boolean0 = ClassReader.FRAMES;
      assertTrue(boolean0);
      
      classWriter0.invalidFrames = true;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4258), "Deprect&d", "Deprect&d", "Deprect&d", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitIntInsn(1, 86);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      methodWriter0.visitFrame(2, 2, stringArray0, 1, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      classWriter0.firstMethod = methodWriter0;
      classWriter0.version = 0;
      int int0 = methodWriter0.getSize();
      assertEquals(65, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4258));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprect&d";
      stringArray0[1] = "Deprect&d";
      FieldWriter fieldWriter0 = classWriter0.lastField;
      assertNull(fieldWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Type.VOID;
      assertEquals(0, int0);
      
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      classWriter0.invalidFrames = true;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4258), "Deprect&d", "Deprect&d", "Deprect&d", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitFrame(2, 2, stringArray0, 0, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      int int1 = methodWriter0.getSize();
      assertEquals(40, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(int1 == int0);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter0.exceptions = null;
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassWriter classWriter0 = new ClassWriter((-4209));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprected";
      Item item0 = classWriter0.newNameTypeItem("$L`#~crFxE", "Deprected");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      stringArray0[1] = "Deprected";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4209), "Deprected", "$L`#~crFxE", "$L`#~crFxE", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.classReaderLength = 2;
      methodWriter0.visitMethodInsn(2057, "Signature", "Signature", "Deprected");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFrame((-1), 1, stringArray0, 2, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIntInsn((-1), (-4209));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.classReaderLength = 13;
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitMultiANewArrayInsn("Deprected", 2057);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMaxs(2, (-11));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitTypeInsn(2, "Deprected");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLocalVariable(":'E=r}yHy~?u%ajXg'", ":'E=r}yHy~?u%ajXg'", "Deprected", label0, label0, 1122);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      methodWriter0.visitLocalVariable("Deprected", "Deprected", ".", label0, label0, (-3556));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2426);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      boolean boolean0 = classWriter0.invalidFrames;
      assertFalse(boolean0);
      
      stringArray0[0] = "$|CQQ6cPz.Kv";
      stringArray0[1] = "$|CQQ6cPz.Kv";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2426, "$|CQQ6cPz.Kv", "$|CQQ6cPz.Kv", "$|CQQ6cPz.Kv", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitIntInsn(2426, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$|CQQ6cPz.Kv");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      methodWriter0.visitFrame(1, (-3452), stringArray0, 2426, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitSource((String) null, (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "EOC,");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = methodWriter0.getSize();
      assertEquals(59, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame((-3452), 57, stringArray0, (-2595), stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4258));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprect&d";
      stringArray0[1] = "Deprect&d";
      FieldWriter fieldWriter0 = classWriter0.firstField;
      assertNull(fieldWriter0);
      
      byte[] byteArray0 = new byte[3];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4258), "Deprect&d", "Deprect&d", "Deprect&d", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitMultiANewArrayInsn("`#~c:FE", 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      methodWriter0.visitFrame(2, 2, stringArray0, 1, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      stringArray0[1] = "Deprect&d";
      Item item0 = classWriter0.newConstItem("Deprect&d");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      classWriter0.version = (-1271);
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      int int0 = methodWriter0.getSize();
      assertEquals(73, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter0.visitTypeInsn((-1271), "cpX25W(){?Jn=uo_S^");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      
      // Undeclared exception!
      try { 
        MethodWriter.readUnsignedShort(byteArray0, (-1271));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1271
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-674));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      Item item0 = classWriter0.newFieldItem("Deprecated", "Deprecated", "Deprecated");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-674), "Deprecated", "W tV/x#&qC;2)f{Rw/", "Deprecated", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Item item1 = classWriter0.newClassItem("W tV/x#&qC;2)f{Rw/");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      Integer integer0 = new Integer((-128));
      assertEquals((-128), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("W/tV/x &qC;2G){Rw/");
      assertNull(integer1);
      
      methodWriter0.visitIntInsn(1, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitVarInsn(1, 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLdcInsn("W tV/x#&qC;2)f{Rw/");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("Deprecated");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Item item0 = new Item();
      assertNotNull(item0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      label0.inputStackTop = (-779);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1082);
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      assertArrayEquals(new int[] {(-1082)}, intArray0);
      
      label0.visitSubroutine(label0, 171, (-1082));
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      assertArrayEquals(new int[] {(-1082)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777222);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "eprVUe";
      stringArray0[1] = "$O~c:hE";
      int int0 = Frame.BASE;
      assertEquals(16777216, int0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4096, "eprVUe", "W tV/x#&qC;2G){Rw/", "$O~c:hE", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eprVUe");
      assertFalse(boolean0);
      
      methodWriter0.visitIntInsn(4096, 16777216);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      int int1 = methodWriter0.getSize();
      assertEquals(54, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int1 == int0);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter1.visitMultiANewArrayInsn("Signature", 4096);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      classWriter0.firstMethod.visitLdcInsn(2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4091, "Deprecated", "W tV/x#&qC;2G){Rw/", (String) null, stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Deprecated");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertNotNull(label1);
      assertFalse(label1.equals((Object)label0));
      
      int[] intArray0 = new int[1];
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      assertFalse(label0.equals((Object)label1));
      assertNotSame(label0, label1);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int int0 = classWriter0.newField("*np#", "Deprecated", "*np#");
      assertEquals(7, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(label0.equals((Object)label1));
      assertNotSame(label0, label1);
      assertArrayEquals(new int[] {0}, intArray0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      methodWriter0.visitInsn((-650));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame((-1070), (-650), stringArray0, (-650), labelArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIntInsn(1, 1603);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLineNumber(1, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label1, label0);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putInt(262144);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      methodWriter0.put(byteVector1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777216);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "1_)f0'X";
      stringArray0[1] = "1_)f0'X";
      stringArray0[2] = "Code";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "\"O", "1_)f0'X", "Code", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 16777216;
      intArray0[6] = 16777216;
      Label[] labelArray0 = new Label[2];
      labelArray0[0] = label0;
      labelArray0[1] = label1;
      methodWriter0.visitLookupSwitchInsn(label1, intArray0, labelArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertArrayEquals(new int[] {2, 2, 2, 1, 1, 16777216, 16777216}, intArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$|CQ6cvPz.6K\"v";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4112, "$|CQ6cvPz.6K\"v", "W tTV/x#&qC;2G){Rw/", (String) null, stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitLdcInsn("$L`#~c:FxE");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = classWriter0.thisName;
      assertNull(string0);
      
      methodWriter0.visitFieldInsn((-663), "xequ+r{1oLFfQ", "$L`#~c:FxE", "Deprecated");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs((-663), 770);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3302);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cv2Yi5XUh;?Xs^a";
      stringArray0[1] = "cv2Yi5XUh;?Xs^a";
      classWriter0.index = 3302;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4096, "cv2Yi5XUh;?Xs^a", "a tV/x#&qC;2G){Rw/", "cv2Yi5XUh;?Xs^a", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LocalVariableTypeTable");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      methodWriter0.visitFieldInsn(3310, "T\u0000C \"=", "cv2Yi5XUh;?Xs^a", "LocalVariableTypeTable");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Type type0 = Type.BYTE_TYPE;
      assertEquals(1, type0.getSize());
      assertEquals(3, type0.getSort());
      assertEquals(7, Type.LONG);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(9, Type.ARRAY);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(10, Type.OBJECT);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Deprecated", "W tTV/x#&qC;G){Rw/", "Deprecated", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      classWriter0.index = (-650);
      Label label0 = new Label();
      assertNotNull(label0);
      
      classWriter0.invalidFrames = false;
      methodWriter0.visitMethodInsn(3176, "Deprecated", "Deprecated", "Deprecated");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "57X5#^;PZ_2a");
      assertFalse(boolean0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("Deprecated", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitFrame((-650), 2, stringArray0, 1024, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      methodWriter0.visitCode();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.exceptionCount = (-547);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor1);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertNotSame(annotationVisitor1, annotationVisitor0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      methodWriter0.visitTypeInsn(1024, "Deprecated");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitJumpInsn(3176, label0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$|CcvPz.~K3vO";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4096, "$|CcvPz.~K3vO", "W tTV/x#&qC;2G){Rw/", "$|CcvPz.~K3vO", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      classWriter0.index = (-650);
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLocalVariable("b%Da:WohjY_", "Deprecated", "$|CcvPz.~K3vO", label0, label0, 132);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitJumpInsn(2, (Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-653));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MeprVcU<ed";
      stringArray0[1] = "MeprVcU<ed";
      int int0 = Frame.BASE;
      assertEquals(16777216, int0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4096, "MeprVcU<ed", "W/tV/x &qC;2G){Rw/", "MeprVcU<ed", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitLdcInsn("$`#~c:FE");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Integer integer0 = new Integer((-653));
      assertEquals((-653), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MeprVcU<ed");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      methodWriter0.visitMethodInsn(2, "MeprVcU<ed", "Ljava/lang/Synthetic;", "W/tV/x &qC;2G){Rw/");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = Type.ARRAY;
      assertEquals(9, int1);
      assertFalse(int1 == int0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("W/tV/x &qC;2G){Rw/", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      int int2 = methodWriter0.getSize();
      assertEquals(69, int2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(methodWriter0, methodWriter1);
      
      int int3 = Edge.EXCEPTION;
      assertEquals(Integer.MAX_VALUE, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      // Undeclared exception!
      try { 
        label0.getOffset();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Label offset position has not been resolved yet
         //
         verifyException("org.objectweb.asm.jip.Label", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-677));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      int int0 = 186;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1691, "Deprecated", "W tV/xm&K=C;2J){Rw/", "W tV/xm&K=C;2J){Rw/", stringArray0, false, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.visitInsn(1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitMethodInsn(2, "k%3EmVhL3jH>'x*M1$", "Su?wp9\"q", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3310);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h";
      stringArray0[1] = "h";
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      assertNull(methodWriter0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Member.DECLARED;
      assertEquals(1, int0);
      
      int int1 = Integer.min(4096, 1);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 4096, "h", "WEtV/x#&qC;tG){Rw/", "h", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter1);
      
      methodWriter1.visitFieldInsn(2, "h", "h", "e =(0");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      classWriter0.firstMethod = methodWriter1;
      Attribute attribute0 = new Attribute("h");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      boolean boolean0 = ClassReader.FRAMES;
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitInsn(4935);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4935
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-674));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      Item item0 = classWriter0.key3;
      assertNotNull(item0);
      
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-674), "Deprecated", "W tV/x#&qC;2G){Rw/", "Deprecated", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Item item1 = new Item(1);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitMultiANewArrayInsn("Deprecated", 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      Integer integer0 = new Integer((-128));
      assertEquals((-128), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("lDY*F~k_8vBWWv6C`");
      assertNull(integer1);
      
      methodWriter0.visitVarInsn(171, (-128));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      int int0 = Integer.remainderUnsigned((-674), 939);
      assertEquals(341, int0);
      
      int int1 = Integer.sum(196, 17);
      assertEquals(213, int1);
      assertFalse(int1 == int0);
      
      methodWriter1.visitInsn(5);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-663));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      boolean boolean0 = ClassReader.WRITER;
      assertTrue(boolean0);
      
      Item item0 = classWriter0.newInteger(1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      stringArray0[0] = "peca4ed";
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "peca4ed");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      stringArray0[1] = "peca4ed";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "peca4ed", "W t7/x#&qC;2G){Rwk", "peca4ed", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      methodWriter0.visitTypeInsn(186, "peca4ed");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn((-663), ">YG*", ">YG*", ">YG*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777222);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eprVUe");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "eprVUe";
      stringArray0[1] = "eprVUe";
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eprVUe");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = Type.FLOAT;
      assertEquals(6, int0);
      
      Item item0 = classWriter0.newLong(4294967295L);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4084, "eprVUe", "W tV/x#&qC;2G){Rw/", "eprVUe", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitIntInsn(4084, 6);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      classWriter0.firstMethod.visitLdcInsn(2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      methodWriter0.visitIincInsn(1, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      int int1 = Frame.NULL;
      assertEquals(16777221, int1);
      assertFalse(int1 == int0);
      
      methodWriter0.visitFrame((-2034), (-2514), stringArray0, 1467, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter0.visitInsn(5);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter1.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4108, "Deprecated", "W tV/x#&qC;2G){rRw/", "Deprecated", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLabel(label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      label0.outputStackMax = 200;
      classWriter0.visitOuterClass("StackMapTable", "StackMapTable", "Deprecated");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.exceptionCount = 200;
      methodWriter1.visitTypeInsn((-650), "StackMapTable");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      Label label1 = frame0.owner;
      assertNull(label1);
      
      methodWriter1.visitTryCatchBlock(label0, (Label) null, (Label) null, "Deprecated");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitMaxs((-2580), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Deprecated");
      assertFalse(boolean0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4108, "Deprecated", "W tV/x#&qC;2G){Rw/", "Deprecated", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      Label label1 = label0.next;
      assertNull(label1);
      
      label0.info = (Object) null;
      methodWriter1.visitTryCatchBlock(label0, (Label) null, (Label) null, "Deprecated");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.visitInsn(126);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitMaxs((-2580), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777222);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "eprVUe";
      stringArray0[1] = "$O~c:hE";
      int int0 = Frame.BASE;
      assertEquals(16777216, int0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4096, "eprVUe", "W tV/x#&qC;2G){Rw/", "$O~c:hE", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eprVUe");
      assertFalse(boolean0);
      
      methodWriter0.visitIntInsn(4096, 16777216);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLocalVariable("<init>", ":p[ e<)X>+)Tc5gb", "?9t", label0, label0, 16777217);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      int int1 = methodWriter0.getSize();
      assertEquals(90, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(int1 == int0);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter1.visitMultiANewArrayInsn("Signature", 4096);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      classWriter0.firstMethod.visitLdcInsn(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-658));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "DeprVecated";
      stringArray0[1] = "DeprVecated";
      int int0 = classWriter0.newClass("LocalVariableTable");
      assertEquals(2, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4096, "DeprVecated", "W tV/x#&qC;2G){Rw/", (String) null, stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitLdcInsn("$L`#~c:FxE");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLabel(label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFieldInsn(2, "$L`#~c:FxE", (String) null, "LineNumberTable");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4258));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprect&d";
      stringArray0[1] = "Deprect&d";
      FieldWriter fieldWriter0 = classWriter0.firstField;
      assertNull(fieldWriter0);
      
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ClassReader.FRAMES;
      assertTrue(boolean0);
      
      classWriter0.invalidFrames = true;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4258), "Deprect&d", "Deprect&d", "Deprect&d", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Deprect&d");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      methodWriter0.visitIntInsn(8, 86);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      methodWriter0.visitFrame(2, 2, stringArray0, 1, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.signature = "Deprect&d";
      classWriter0.firstMethod = methodWriter0;
      classWriter0.lastMethod = methodWriter0;
      classWriter0.firstMethod.exceptionCount = (-1604);
      classWriter0.version = 0;
      int int0 = methodWriter0.getSize();
      assertEquals(53, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(2, 1, stringArray0, (byte)0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = ClassReader.SIGNATURES;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-671));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 39, "MeprVcU<ed", "]", "JZO~C}", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitIntInsn((-438), (-671));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFieldInsn((-32768), "K_9", "K~#5 %(O__-", "Synthetic");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putUTF8("JZO~C}");
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector0.putLong(2145L);
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      
      ByteVector byteVector3 = byteVector0.putUTF8("c:{s`");
      assertNotNull(byteVector3);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector3, byteVector0);
      assertSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      methodWriter0.put(byteVector1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector3);
      assertSame(byteVector1, byteVector2);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn(1443168256, (String) null, "K~#5 %(O__-", "c:{s`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4213));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4108, "Deprecated", "W tV/x#&qC;2G){rRw/", "Deprecated", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.classReaderOffset = (-4213);
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLabel(label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      label0.outputStackMax = 200;
      classWriter0.visitOuterClass("StackMapTable", "StackMapTable", "DoDi");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.exceptionCount = 200;
      Item item0 = classWriter0.newFieldItem("Deprecated", "DoDi", "Deprecated");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      int int0 = methodWriter0.getSize();
      assertEquals(6, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter0.visitFrame((-4213), 10, stringArray0, 10, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassReader.RESIZE;
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4108, "Deprecated", "W tV/x#&qC;2G){rRw/", "Deprecated", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.classReaderOffset = (-650);
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      int int0 = Type.SHORT;
      assertEquals(4, int0);
      
      methodWriter0.visitIntInsn(4, 255);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      // Undeclared exception!
      try { 
        methodWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-674));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String string0 = "Deprecated";
      String[] stringArray0 = new String[2];
      Item item0 = classWriter0.key3;
      assertNotNull(item0);
      
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-674), "Deprecated", "W tV/x#&qC;2G){Rw/", "Deprecated", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Item item1 = new Item(1);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitMultiANewArrayInsn("Deprecated", 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      Integer integer0 = new Integer((-128));
      assertEquals((-128), (int)integer0);
      assertNotNull(integer0);
      
      methodWriter0.visitFieldInsn((-674), "W tV/x#&qC;2G){Rw/", "Deprecated", "Deprecated");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter0.visitMaxs(1, 10);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-355));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprecate{";
      stringArray0[1] = "Deprecate{";
      int int0 = Type.VOID;
      assertEquals(0, int0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-355), "Deprecate{", "Deprecate{", "Deprecate{", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFieldInsn((-355), "Deprecate{", "Deprecate{", "Deprecate{");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMethodInsn(1, "Deprecate{", "Deprecate{", "eprVU<ed");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      Attribute attribute0 = new Attribute("Deprecate{");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      Attribute attribute1 = new Attribute("Signature");
      assertFalse(attribute1.isCodeAttribute());
      assertTrue(attribute1.isUnknown());
      assertNotNull(attribute1);
      assertFalse(attribute1.equals((Object)attribute0));
      
      int int1 = classWriter0.newNameType("Deprecate{", "Deprecate{");
      assertEquals(3, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int1 == int0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitAttribute(attribute1);
      assertFalse(attribute1.isCodeAttribute());
      assertTrue(attribute1.isUnknown());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotSame(attribute1, attribute0);
      assertSame(methodWriter1, methodWriter0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Edge edge1 = new Edge();
      assertNotNull(edge1);
      assertFalse(edge1.equals((Object)edge0));
      
      MethodWriter methodWriter2 = methodWriter0.next;
      assertNull(methodWriter2);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putUTF8("Deprecate{");
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      // Undeclared exception!
      try { 
        methodWriter1.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4266));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprect&d";
      stringArray0[1] = "Deprect&d";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Frame.TOP;
      assertEquals(16777216, int0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-5);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4266), "Deprect&d", "Deprect&d", "Deprect&d", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitIntInsn((-4266), 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      String string0 = label0.toString();
      assertEquals("L10", string0);
      assertNotNull(string0);
      
      methodWriter0.visitFrame(2, 2, stringArray0, 16777216, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label1 = label0.successor;
      assertNull(label1);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Deprect&d");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      label0.outputStackMax = 2;
      byte[] byteArray1 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(0, ";N", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-658));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "DeprVecated";
      stringArray0[1] = "DeprVecated";
      int int0 = classWriter0.newClass("LocalVariableTable");
      assertEquals(2, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4096, "DeprVecated", "W tV/x#&qC;2G){Rw/", (String) null, stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLabel(label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      classWriter0.firstMethod = methodWriter0;
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      // Undeclared exception!
      try { 
        classWriter0.firstMethod.visitMaxs(17, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4209));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$L`M#~crFxE";
      Item item0 = new Item();
      assertNotNull(item0);
      
      stringArray0[1] = "?(FQ|6$i$H";
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4209), "?(FQ|6$i$H", "$L`M#~crFxE", "$L`M#~crFxE", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      label0.info = (Object) 2;
      methodWriter0.visitMethodInsn(1, "$L`M#~crFxE", "$L`M#~crFxE", "$L`M#~crFxE");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame((-1), 1, stringArray0, 2, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLdcInsn("?(FQ|6$i$H");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      label0.successor = label1;
      label1.addToSubroutine(2, 1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      classWriter0.visitInnerClass("$L`M#~crFxE", "sgX9", "?(FQ|6$i$H", (-4209));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitTypeInsn(1, "?(FQ|6$i$H");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      label1.status = (-663);
      methodWriter0.visitTryCatchBlock(label0, label0.successor, label0.successor, (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(label0, label1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-677));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      Item item0 = classWriter0.newMethodItem("Deprecated", "Deprecated", "Deprecated", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Deprecated", "W tV/x#&K~C;2J){Rw/", "Deprecated", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitMaxs(1, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-677);
      boolean boolean1 = ClassReader.WRITER;
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte byte0 = (byte)127;
      boolean boolean2 = ClassReader.FRAMES;
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Label[] labelArray0 = new Label[1];
      labelArray0[0] = label0;
      methodWriter0.visitTableSwitchInsn(1, 1, label0, labelArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMethodInsn(784, "]B:^kQ13=yCpGKro.=", "]B:^kQ13=yCpGKro.=", "Deprecated");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        classWriter0.newFieldItem((String) null, "java/lang/Throwable", "void");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4096, "Deprecated", "W tTV/x#&qC;G){Rw/", "Deprecated", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      classWriter0.index = (-650);
      Label label0 = new Label();
      assertNotNull(label0);
      
      classWriter0.invalidFrames = false;
      methodWriter0.visitMethodInsn(3176, "Deprecated", "Deprecated", "Deprecated");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "57X5#^;PZ_2a");
      assertFalse(boolean0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("Q8pK\"#", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitFrame((-650), 4096, stringArray0, 1024, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      methodWriter0.exceptionCount = (-547);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor1);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertNotSame(annotationVisitor1, annotationVisitor0);
      
      label0.outputStackMax = (-647);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      methodWriter0.visitTypeInsn((-2343), "Deprecated");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitJumpInsn(3176, label0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String string0 = "eprVU<ed";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "eprVU<ed";
      stringArray0[1] = "eprVU<ed";
      int int0 = Frame.BASE;
      assertEquals(16777216, int0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4096, "eprVU<ed", "W tV/x#&qC;2G){Rw/", "eprVU<ed", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitIntInsn(4096, 16777216);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLdcInsn("$`#~c:FE");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int1 = classWriter0.newConst("eprVU<ed");
      assertEquals(6, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int1 == int0);
      
      methodWriter0.visitFieldInsn(16777216, "eprVU<ed", "eprVU<ed", "9cF/Q{");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Deprecated");
      assertFalse(boolean0);
      
      methodWriter0.visitIntInsn(2, (-640));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitVarInsn((-1660), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1660
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-658));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      classWriter0.version = (-658);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      stringArray0[0] = "DeprVecated";
      stringArray0[1] = "DeprVecated";
      int int0 = classWriter0.newClass("LoalVanribleTale");
      assertEquals(2, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-658), "DeprVecated", "W tV/x#&qC;2G){Rw/", "DeprVecated", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitTypeInsn(2450, "-bAG57c");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLdcInsn("DeprVecated");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      label0.frame = frame0;
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      classWriter0.firstMethod = methodWriter0;
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      Integer integer0 = Integer.getInteger("DeprVecated");
      assertNull(integer0);
      
      methodWriter1.visitVarInsn(24, 2450);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      int int1 = Integer.remainderUnsigned((-658), 1);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      methodWriter1.visitFrame(2, 0, stringArray0, 0, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3302);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cv2Yi5XUh;?Xs^a";
      stringArray0[1] = "cv2Yi5XUh;?Xs^a";
      classWriter0.index = 3302;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Member.DECLARED;
      assertEquals(1, int0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4096, "cv2Yi5XUh;?Xs^a", "a tV/x#&qC;2G){Rw/", "cv2Yi5XUh;?Xs^a", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Attribute attribute0 = new Attribute("cv2Yi5XUh;?Xs^a");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Label offset position has not been resolved yet");
      assertFalse(boolean0);
      
      methodWriter0.visitMethodInsn(1, "cv2Yi5XUh;?Xs^a", "D1lLl%cKf-Yz*Q", "Ui)ep!");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      methodWriter0.visitFieldInsn(3314, "T\u0000C \"=", "cv2Yi5XUh;?Xs^a", "Label offset position has not been resolved yet");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Type type0 = Type.BYTE_TYPE;
      assertEquals(1, type0.getSize());
      assertEquals(3, type0.getSort());
      assertEquals(0, Type.VOID);
      assertEquals(4, Type.SHORT);
      assertEquals(3, Type.BYTE);
      assertEquals(8, Type.DOUBLE);
      assertEquals(7, Type.LONG);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(9, Type.ARRAY);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      stringArray0[0] = "iepecated";
      stringArray0[1] = "iepecated";
      int int0 = classWriter0.newField("iepecated", "iepecated", "iepecated");
      assertEquals(4, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 5, "iepecated", "W tV/x#&qC;2G){Rw/", "iepecated", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitTypeInsn(186, "WOXau52");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newDouble((-650));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      methodWriter0.visitMaxs(1, 789);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLdcInsn("iepecated");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      label0.status = 789;
      String string0 = label0.toString();
      assertEquals("L18", string0);
      assertNotNull(string0);
      
      methodWriter0.visitLdcInsn("iepecated");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      label0.inputStackTop = 5;
      label0.inputStackTop = 2;
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label1, label0);
      assertSame(label0, label1);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(label0, label1);
      
      methodWriter0.visitIntInsn((-553), (-547));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn(76, 5);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(76, "Deprecated", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4266));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprect&d";
      stringArray0[1] = "Deprect&d";
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      classWriter0.version = 247;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Frame.TOP;
      assertEquals(16777216, int0);
      
      byte[] byteArray0 = new byte[10];
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4266), "Deprect&d", "Deprect&d", "Deprect&d", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitIntInsn((-4266), 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFrame(2, 2, stringArray0, 16777216, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Deprect&d");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      byte[] byteArray1 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      methodWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(0, ";N", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-658));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "DeprVecated";
      stringArray0[1] = "DeprVecated";
      int int0 = classWriter0.newClass("LocalVariableTable");
      assertEquals(2, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4096, "DeprVecated", "W tV/x#&qC;2G){Rw/", (String) null, stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.firstMethod = methodWriter0;
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.visitLocalVariable("DeprVecated", "DeprVecated", (String) null, label0, label0, (-262590116));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      stringArray0[0] = "DeprecatZd";
      stringArray0[1] = "DeprecatZd";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "DeprecatZd", "W tV/x#&qC;2G){Rw/", (String) null, stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitMaxs(1, (-650));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLdcInsn("DeprecatZd");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertNotNull(label1);
      assertFalse(label1.equals((Object)label0));
      
      int int0 = classWriter0.newField("*np#", "DeprecatZd", "*np#");
      assertEquals(8, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      label1.successor = label0;
      Attribute attribute0 = new Attribute("0+Yt:_7Igg?l-CLf-");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      classWriter0.visitAttribute(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLocalVariable("DeprecatZd", "LcalVariableTpeable", "DeprecatZd", label1, label0, (-650));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0+Yt:_7Igg?l-CLf-");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      methodWriter0.visitVarInsn(22, 512);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Type type0 = Type.SHORT_TYPE;
      assertEquals(1, type0.getSize());
      assertEquals(4, type0.getSort());
      assertEquals(2, Type.CHAR);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(6, Type.FLOAT);
      assertEquals(4, Type.SHORT);
      assertEquals(3, Type.BYTE);
      assertEquals(8, Type.DOUBLE);
      assertEquals(0, Type.VOID);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertNotNull(type0);
      
      Type type1 = Type.LONG_TYPE;
      assertEquals(7, type1.getSort());
      assertEquals(2, type1.getSize());
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(0, Type.VOID);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertNotNull(type1);
      assertFalse(type1.equals((Object)type0));
      assertNotSame(type1, type0);
      
      Type type2 = Type.BYTE_TYPE;
      assertEquals(3, type2.getSort());
      assertEquals(1, type2.getSize());
      assertEquals(2, Type.CHAR);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(10, Type.OBJECT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(4, Type.SHORT);
      assertEquals(0, Type.VOID);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(6, Type.FLOAT);
      assertNotNull(type2);
      assertFalse(type2.equals((Object)type1));
      assertFalse(type2.equals((Object)type0));
      assertNotSame(type2, type1);
      assertNotSame(type2, type0);
      
      methodWriter0.visitTypeInsn(7, "*np#");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-674));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      Item item0 = classWriter0.key3;
      assertNotNull(item0);
      
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-674), "Deprecated", "W tV/x#&qC;2G){Rw/", "Deprecated", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Item item1 = new Item(1);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitMultiANewArrayInsn("Deprecated", 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      Integer integer0 = new Integer((-128));
      assertEquals((-128), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("lDY*F~k_8vBWWv6C`");
      assertNull(integer1);
      
      methodWriter0.visitVarInsn(171, (-128));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      int int0 = Integer.remainderUnsigned((-674), 939);
      assertEquals(341, int0);
      
      int int1 = Integer.sum(179, 17);
      assertEquals(196, int1);
      assertFalse(int1 == int0);
      
      methodWriter0.visitInsn(196);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter0.visitFrame(1, (-674), stringArray0, 696, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-658));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      boolean boolean0 = ClassReader.FRAMES;
      assertTrue(boolean0);
      
      stringArray0[0] = "DeprVecated";
      stringArray0[1] = "DeprVecated";
      int int0 = classWriter0.newClass("LoalVariableTable");
      assertEquals(2, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4096, "DeprVecated", "W tV/x#&qC;2G){Rw/", "W tV/x#&qC;2G){Rw/", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitTypeInsn(2450, "W tV/x#&qC;2G){Rw/");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLdcInsn("DeprVecated");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitInsn(176);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitFrame(2, 989, stringArray0, 1, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.visitIntInsn(989, 2450);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter0.visitIincInsn(2450, (-1547623810));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter0.exceptionCount = 176;
      methodWriter1.visitJumpInsn(13, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-653));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MeprVcU<ed";
      stringArray0[1] = "MeprVcU<ed";
      int int0 = Frame.BASE;
      assertEquals(16777216, int0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4096, "MeprVcU<ed", "W/tV/x &qC;2G){Rw/", "MeprVcU<ed", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitLdcInsn("$`#~c:FE");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Integer integer0 = new Integer((-653));
      assertEquals((-653), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      classWriter0.firstMethod = methodWriter0;
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter1.visitAnnotation("W/tV/x &qC;2G){Rw/", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      assertSame(methodWriter1, methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter1.visitLineNumber(16777216, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.visitInsn(1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      Integer integer1 = new Integer(4096);
      assertEquals(4096, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      methodWriter1.visitIincInsn(1, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitMethodInsn(4096, "", "-OZx9oObLQ", "W/tV/x &qC;2G){Rw/");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      stringArray0[1] = "-OZx9oObLQ";
      methodWriter1.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      classWriter0.firstMethod.visitMaxs(16777216, (int) integer0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      
      methodWriter1.visitLineNumber(2, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-658));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newNameTypeItem("nC*N", "nC*N");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      String[] stringArray0 = new String[2];
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      stringArray0[0] = "nC*N";
      stringArray0[1] = "nC*N";
      int int0 = classWriter0.newClass("LoalVariableTasble");
      assertEquals(4, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-5249), "nC*N", "W tV/x#&qC;2G){Ww/", "W tV/x#&qC;2G){Ww/", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitTypeInsn((-658), "Exceptions");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean1 = ClassReader.WRITER;
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      classWriter0.firstMethod = methodWriter0;
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      classWriter0.firstMethod.visitFieldInsn(1, "rg.ojectwb.asm.jip.Edge", "nC*N", "W tV/x#&qC;2G){Ww/");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter1.visitInsn(141);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitFrame(4, 141, stringArray0, 1, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        MethodWriter.readInt((byte[]) null, (-5249));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-658));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "DprVcated";
      stringArray0[1] = "DprVcated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "DprVcated", "W tV/x#&qCm;2G){Rw/", (String) null, stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      methodWriter0.visitTypeInsn(2, "W tV/x#&qCm;2G){Rw/");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label1 = new Label();
      assertNotNull(label1);
      assertFalse(label1.equals((Object)label0));
      
      label1.next = label0;
      boolean boolean1 = classWriter0.invalidFrames;
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      methodWriter0.visitTryCatchBlock(label0, label1, label1, "DprVcated");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      methodWriter0.visitInsn(22);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs((-4101), (-4101));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "DeprsKcated";
      stringArray0[1] = "DeprsKcated";
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = 4096;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4096, "DeprsKcated", "W tV/x#&qC;2G){Rw/", (String) null, stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      int int1 = 2418;
      Item item0 = classWriter0.newInteger((-650));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      methodWriter0.visitTypeInsn(2418, "-bAG57c");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLdcInsn("$L`#~c:FxE");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.firstMethod = methodWriter0;
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitTryCatchBlock(label1, label0, label0, "Signature");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      // Undeclared exception!
      try { 
        classWriter0.firstMethod.visitMaxs(2, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-657));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "W/tVx &qC;2G){Rw";
      stringArray0[1] = "W/tVx &qC;2G){Rw";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 186, "W/tVx &qC;2G){Rw", "MeprVcU<ed", "W/tVx &qC;2G){Rw", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      String string0 = "<init>";
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 2, "<init>", "W/tVx &qC;2G){Rw", "MeprVcU<ed", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter1);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      
      AnnotationVisitor annotationVisitor0 = methodWriter1.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertNotSame(methodWriter1, methodWriter0);
      
      int int0 = 46;
      methodWriter0.visitIntInsn(46, (-1135));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertNotSame(methodWriter0, methodWriter1);
      
      methodWriter0.visitVarInsn((-657), (-657));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertNotSame(methodWriter0, methodWriter1);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      ByteVector byteVector0 = null;
      try {
        byteVector0 = new ByteVector((-141));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-658));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newFieldItem("BC*N", "BC*N", "BC*N");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[2];
      boolean boolean0 = classWriter0.invalidFrames;
      assertFalse(boolean0);
      
      stringArray0[0] = "BC*N";
      stringArray0[1] = "BC*N";
      int int0 = Member.PUBLIC;
      assertEquals(0, int0);
      
      int int1 = classWriter0.newUTF8("W tV/x#&qC;2G){Rw/");
      assertEquals(5, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(int1 == int0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "BC*N", "W tV/x#&qC;2G){Rw/", "W tV/x#&qC;2G){Rw/", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      classWriter0.firstMethod = methodWriter0;
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitFrame(0, 989, stringArray0, 1, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2411);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2411, "Deprecated", "Deprecated", "Deprecated", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitIntInsn(33554432, 2411);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      methodWriter0.visitFieldInsn(47, "6E>;_Du20ae", ":fQ R&-CC$i;B\">", "6E>;_Du20ae");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter1.visitTypeInsn((-2333), "wL0m.GUL");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      Object object0 = label0.info;
      assertNull(object0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = label0.resolve(methodWriter1, 2, byteArray0);
      assertFalse(boolean1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(boolean1 == boolean0);
      assertSame(methodWriter1, methodWriter0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      MethodWriter methodWriter2 = classWriter0.firstMethod;
      assertNotNull(methodWriter2);
      assertSame(methodWriter2, methodWriter0);
      assertSame(methodWriter2, methodWriter1);
      
      methodWriter2.visitJumpInsn((byte) (-96), label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter2, methodWriter0);
      assertSame(methodWriter2, methodWriter1);
      
      methodWriter0.visitMaxs(169, (-3702));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      assertSame(methodWriter0, methodWriter2);
      
      AnnotationVisitor annotationVisitor0 = methodWriter2.visitParameterAnnotation(1048575, "Ljava/lang/Synthetic;", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      assertSame(methodWriter2, methodWriter0);
      assertSame(methodWriter2, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3310);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h";
      stringArray0[1] = "h";
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      assertNull(methodWriter0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Member.DECLARED;
      assertEquals(1, int0);
      
      int int1 = Frame.TOP_IF_LONG_OR_DOUBLE;
      assertEquals(8388608, int1);
      assertFalse(int1 == int0);
      
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 4096, "h", "WEtV/x#&qC;tG){Rw/", "h", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter1);
      
      methodWriter1.visitFieldInsn(180, "h", "h", "e =(0");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int0));
      
      classWriter0.firstMethod = methodWriter1;
      Attribute attribute0 = new Attribute("h");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      boolean boolean0 = ClassReader.FRAMES;
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitInsn(4935);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4935
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = ClassReader.SIGNATURES;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-671));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MeprVcU<ed";
      stringArray0[1] = "MeprVcU<ed";
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "MeprVcU<ed", "W/tV/x &qC;2G){Rw/", "MeprVcU<ed", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      Attribute attribute0 = new Attribute("MeprVcU<ed");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      methodWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter0.visitFrame(2, 2, stringArray0, 1, (Object[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter0.visitTypeInsn(2, "MeprVcU<ed");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      
      AnnotationVisitor annotationVisitor0 = methodWriter1.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      assertSame(methodWriter1, methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      methodWriter0.visitJumpInsn(168, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      methodWriter0.visitMaxs(168, (-671));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      
      // Undeclared exception!
      try { 
        methodWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-658));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "DprVcated";
      stringArray0[1] = "DprVcated";
      int int0 = Type.ARRAY;
      assertEquals(9, int0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "DprVcated", "W tV/x#&qCm;2G){Rw/", (String) null, stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Item item0 = classWriter0.newClassItem(".class");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      methodWriter0.visitLdcInsn("DprVcated");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      methodWriter0.visitInsn(57);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("0/hRS|oc4X\"M", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitJumpInsn(24, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("StackMap");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = ClassReader.SIGNATURES;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-671));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MeprVcU<ed";
      stringArray0[1] = "MeprVcU<ed";
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "MeprVcU<ed", "W/tV/x &qC;2G){Rw/", "MeprVcU<ed", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      Attribute attribute0 = new Attribute("MeprVcU<ed");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      methodWriter0.visitAttribute(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      classWriter0.visitInnerClass("MeprVcU<ed", "MeprVcU<ed", "MeprVcU<ed", (-671));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFrame(2, 2, stringArray0, 1, (Object[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter0.visitTypeInsn(2, "MeprVcU<ed");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter1.visitFieldInsn(1, "RuntimeInvisibleParameterAnnotations", "MeprVcU<ed", "MeprVcU<ed");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitInsn(191);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitFrame((-930), 185, (Object[]) null, 2, (Object[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.visitIincInsn(2, Integer.MAX_VALUE);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.successor;
      assertNull(label1);
      
      Frame frame0 = label0.frame;
      assertNull(frame0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-663));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      boolean boolean0 = ClassReader.SIGNATURES;
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-122);
      classWriter0.threshold = (int) (byte) (-122);
      byteArray0[2] = (byte) (-89);
      byteArray0[4] = (byte)14;
      Item item0 = classWriter0.newMethodItem("peae", "peae", "\"", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P9CxkZ?|YS~");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Item item1 = classWriter0.newInteger(1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      
      stringArray0[0] = "peae";
      boolean boolean3 = ClassReader.SIGNATURES;
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      boolean boolean4 = classWriter0.invalidFrames;
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      
      stringArray0[1] = "peae";
      boolean boolean5 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "peae", "W t7/x#&qC;2G){Rwk", "peae", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      boolean boolean6 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean6);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      
      methodWriter0.visitIntInsn((byte) (-89), (-663));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.version = (int) (byte) (-89);
      int int0 = Member.PUBLIC;
      assertEquals(0, int0);
      
      methodWriter0.visitFrame(0, 2, stringArray0, 2, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-693));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      Item item0 = classWriter0.newConstItem("Deprecated");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      int int0 = classWriter0.newNameType("Deprecated", "Deprecated");
      assertEquals(3, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4108, "Deprecated", "W tV/x#&qC;2G){Rw/", "Deprecated", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIincInsn(3, (-693));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      label0.info = (Object) label0;
      methodWriter0.visitInsn(126);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter1.visitMaxs((-2580), 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitIincInsn(25165824, 3);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitMaxs(25165824, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3302);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cv2Yi5XUh;?Xs^a";
      stringArray0[1] = "cv2Yi5XUh;?Xs^a";
      classWriter0.index = 3302;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Member.DECLARED;
      assertEquals(1, int0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4096, "cv2Yi5XUh;?Xs^a", "a tV/x#&qC;2G){Rw/", "cv2Yi5XUh;?Xs^a", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      Attribute attribute0 = new Attribute("cv2Yi5XUh;?Xs^a");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      methodWriter0.visitLdcInsn("cv2Yi5XUh;?Xs^a");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      methodWriter0.visitTypeInsn(32, "java/lang/String");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean1 = classWriter0.invalidFrames;
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      methodWriter0.visitMaxs(1, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-658));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "DprVcated";
      stringArray0[1] = "DprVcated";
      String string0 = null;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "DprVcated", "W tV/x#&qCm;2G){Rw/", (String) null, stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Item item0 = classWriter0.newClassItem(".class");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      methodWriter0.visitLdcInsn("DprVcated");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      label0.frame = frame0;
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[3] = (-658);
      intArray0[4] = 2;
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      assertArrayEquals(new int[] {2, 1, 2, (-658), 2}, intArray0);
      
      methodWriter0.visitTypeInsn(10, "W tV/x#&qCm;2G){Rw/");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label1 = new Label();
      assertNotNull(label1);
      assertFalse(label1.equals((Object)label0));
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(label0.equals((Object)label1));
      assertNotSame(label0, label1);
      
      boolean boolean1 = classWriter0.invalidFrames;
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      methodWriter0.visitTryCatchBlock(label0, label1, label1, "DprVcated");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(label1.equals((Object)label0));
      assertFalse(label0.equals((Object)label1));
      assertNotSame(label1, label0);
      assertNotSame(label0, label1);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitInsn(22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = ClassReader.SIGNATURES;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-671));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$`#~c:FE";
      stringArray0[1] = "MeprVcU<ed";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "$`#~c:FE", "W/tV/x &qC;2G){Rw/", "MeprVcU<ed", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitIntInsn(2, (-671));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      classWriter0.visitInnerClass("<init>", "$`#~c:FE", "$`#~c:FE", (-671));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFrame(1, 1, stringArray0, 1, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter0.visitTypeInsn(1, "$`#~c:FE");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitInsn(2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      classWriter0.visitInnerClass("4G)tqxhq: Zv<_NG", "Code", "4G)tqxhq: Zv<_NG", 986);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      methodWriter0.visitJumpInsn(168, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      methodWriter1.visitIincInsn(2, 480);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitMaxs(1, 4087);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.visitMaxs(3117, 480);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation((-671), "b2'`i&", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-643));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      stringArray0[0] = ";UE f";
      stringArray0[1] = ";UE f";
      int int0 = Frame.BASE_VALUE;
      assertEquals(1048575, int0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4096, ";UE f", "WrV/x#&qC;2G)0w/", "WrV/x#&qC;2G)0w/", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      int int1 = Frame.UNINITIALIZED_THIS;
      assertEquals(16777222, int1);
      assertFalse(int1 == int0);
      
      Integer integer0 = Integer.getInteger("TdS");
      assertNull(integer0);
      
      methodWriter0.visitMaxs(16777222, (-99));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFieldInsn(68, ";UE f", ";UE f", "TdS");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = new ByteVector(2);
      assertNotNull(byteVector0);
      
      int int2 = classWriter0.firstMethod.getSize();
      assertEquals(55, int2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.firstMethod.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitVarInsn(55, 3643);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@W");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitAnnotation(";UE f", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor1);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertNotSame(annotationVisitor1, annotationVisitor0);
      
      methodWriter0.visitCode();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-658));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "nC*N");
      assertFalse(boolean0);
      
      boolean boolean1 = ClassReader.RESIZE;
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      stringArray0[0] = "nC*N";
      stringArray0[1] = "nC*N";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-658), "nC*N", "W tV/x#&qC;2G){Ww/", "W tV/x#&qC;2G){Ww/", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Item item0 = classWriter0.newFieldItem("W tV/x#&qC;2G){Ww/", "nC*N", "nC*N");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      methodWriter0.visitTypeInsn(2537, "nC*N");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean2 = ClassReader.WRITER;
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      methodWriter0.visitMultiANewArrayInsn("W tV/x#&qC;2G){Ww/", 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitFieldInsn((-658), "nC*N", " 7A;hp", "K/r8~:uz0C6Y");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitCode();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitMethodInsn(186, "nC*N", "W t7/x#&qC;2G){Rwk", "DeprVecated");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-635));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "SDw;ZWWKkqm<";
      stringArray1[1] = "SDw;ZWWKkqm<";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 186, "SDw;ZWWKkqm<", "SDw;ZWWKkqm<", "SDw;ZWWKkqm<", stringArray1, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitInsn((-635));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      int int0 = Member.PUBLIC;
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame((-1), 2, stringArray0, (-1), stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-653));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("MGVxXtV^w]", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MeprVcU<ed";
      stringArray0[1] = "MeprVcU<ed";
      int int0 = Frame.BASE;
      assertEquals(16777216, int0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4096, "MeprVcU<ed", "W/tV/x &qC;2G){Rw/", "MeprVcU<ed", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitLdcInsn("$`#~c:FE");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      methodWriter0.visitTypeInsn(115, "W/tV/x &qC;2G){Rw/");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean2 = ClassReader.WRITER;
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      methodWriter0.visitMultiANewArrayInsn("MeprVcU<ed", (-653));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitFieldInsn(1, "?(FQ|6$i$H", "MeprVcU<ed", "?(FQ|6$i$H");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitCode();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitMethodInsn(2, "/fh\"V3v", (String) null, " 7A;hp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-663));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("peae", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      String[] stringArray0 = new String[2];
      boolean boolean0 = ClassReader.SIGNATURES;
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-89);
      byteArray0[4] = (byte)14;
      Item item0 = classWriter0.newMethodItem("peae", "peae", "\"", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newInteger(1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      
      stringArray0[0] = "peae";
      boolean boolean1 = ClassReader.SIGNATURES;
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = classWriter0.invalidFrames;
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      stringArray0[1] = "peae";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "peae", "W t7/x#&qC;2G){Rwk", "peae", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitIntInsn((-176), (-663));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.version = (int) (byte) (-122);
      methodWriter0.visitTypeInsn(186, "peae");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIntInsn(186, 186);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item2 = classWriter0.newDouble((byte) (-122));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item2);
      assertFalse(item2.equals((Object)item0));
      assertFalse(item2.equals((Object)item1));
      assertNotSame(item2, item0);
      assertNotSame(item2, item1);
      
      methodWriter0.visitVarInsn(169, (-715));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMethodInsn((byte) (-89), "T<).}wObc'", "T<).}wObc'", "pea4e");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitTypeInsn(1, "peae");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "Deprecated";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4108, "Deprecated", "W tV/x#&qC;2G){rRw/", "Deprecated", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLabel(label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      label0.frame = frame0;
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Edge edge1 = edge0.next;
      assertNull(edge1);
      
      label0.outputStackMax = 200;
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = label0.resolve(methodWriter0, (-1048595), byteArray0);
      assertFalse(boolean0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Label label1 = label0.next;
      assertNull(label1);
      
      label0.info = (Object) null;
      methodWriter0.visitJumpInsn(4096, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      // Undeclared exception!
      try { 
        MethodWriter.readShort(byteArray0, 200);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 200
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-658));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      stringArray0[0] = "if(Tq8].b=T7p";
      stringArray0[1] = "if(Tq8].b=T7p";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-658), "if(Tq8].b=T7p", "n t/x#&qNG){Ww/", "n t/x#&qNG){Ww/", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Item item0 = classWriter0.newClassItem("if(Tq8].b=T7p");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      methodWriter0.visitTypeInsn(2, "if(Tq8].b=T7p");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 1, "W tV/x#&;qC;2)fRI/", "W t7/x#&qC;2G){Rwk", "if(Tq8].b=T7p", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter1);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertNotSame(methodWriter0, methodWriter1);
      
      methodWriter1.visitIntInsn((-658), 4095);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertNotSame(methodWriter1, methodWriter0);
      
      MethodWriter methodWriter2 = classWriter0.firstMethod;
      assertNotNull(methodWriter2);
      assertFalse(methodWriter2.equals((Object)methodWriter1));
      assertSame(methodWriter2, methodWriter0);
      assertNotSame(methodWriter2, methodWriter1);
      
      methodWriter2.visitVarInsn(57, 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(methodWriter2.equals((Object)methodWriter1));
      assertSame(methodWriter2, methodWriter0);
      assertNotSame(methodWriter2, methodWriter1);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      // Undeclared exception!
      try { 
        methodWriter2.visitParameterAnnotation(2, "n t/x#&qNG){Ww/", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2391);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deprecete";
      stringArray0[1] = "Deprecete";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2391, "Deprecete", "Deprecete", "Deprecete", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitIntInsn(2391, 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      methodWriter0.visitFieldInsn(2391, "Deprecete", "Deprecete", "Deprecete");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label[] labelArray0 = new Label[8];
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Deprecete");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      methodWriter0.visitTypeInsn(1, "Deprecete");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      labelArray0[0] = label0;
      boolean boolean2 = ClassReader.WRITER;
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      byteArray0[0] = (byte) (-57);
      byteArray0[2] = (byte)0;
      labelArray0[1] = label0;
      labelArray0[2] = label0;
      labelArray0[3] = label0;
      labelArray0[4] = label0;
      labelArray0[5] = label0;
      labelArray0[6] = label0;
      boolean boolean3 = ClassReader.RESIZE;
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      labelArray0[7] = label0;
      methodWriter0.visitTableSwitchInsn(1, 2, label0, labelArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newFieldItem("MeprcU[ed", "Deprecete", "org.objectweb.asm.jip.ClassWriter");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(1, 119, labelArray0, (byte) (-57), labelArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(64300);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@=6";
      classWriter0.invalidFrames = true;
      stringArray0[1] = "@=6";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "@=6", "W8tV/x#&qCm;G){}", "W8tV/x#&qCm;G){}", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      classWriter0.firstMethod = methodWriter0;
      methodWriter0.visitLdcInsn("@=6");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label[] labelArray0 = new Label[0];
      classWriter0.firstMethod.visitTableSwitchInsn(1, 5, label0, labelArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(classWriter0.firstMethod, methodWriter0);
      
      methodWriter0.visitLabel(label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = 4589;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      classWriter0.firstMethod.visitTypeInsn(1, "@=6");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitVarInsn(1, 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean2 = classWriter0.invalidFrames;
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "@=6");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean3 = ClassReader.SIGNATURES;
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      int int1 = 2489;
      int int2 = 42;
      // Undeclared exception!
      try { 
        methodWriter0.visitVarInsn(16777225, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }
}
