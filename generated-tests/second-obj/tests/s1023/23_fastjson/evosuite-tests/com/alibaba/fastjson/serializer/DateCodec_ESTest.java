/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:45:35 GMT 2018
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.serializer.DateCodec;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateCodec_ESTest extends DateCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("illegal setter");
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) null, (Object) serializerFeature0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse error
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Integer> class0 = Integer.TYPE;
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      boolean boolean0 = jSONSerializer0.out.writeDirect;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = new Long(6742705432718011775L);
      jSONSerializer0.writeWithFieldName((Object) mockGregorianCalendar0, (Object) long0);
      mockGregorianCalendar0.getGregorianChange();
      Object object0 = new Object();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      SerializeWriter serializeWriter0 = new SerializeWriter();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0, serializeConfig0);
      Float float0 = new Float(0.0);
      dateCodec0.instance.write(jSONSerializer0, float0, float0, (Type) null, (-1173));
      assertEquals(1, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("8y/Gk?vmk#<|9");
      Double double0 = dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) "8y/Gk?vmk#<|9", (Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      int int0 = Calendar.NARROW_FORMAT;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("!lICoe");
      Long long0 = new Long(1);
      Object object0 = dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) "!lICoe", (Object) long0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", object0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      DateCodec dateCodec0 = DateCodec.instance;
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Class<Double> class0 = Double.TYPE;
      dateCodec0.write(jSONSerializer0, (Object) null, (Object) null, class0, 182);
      assertTrue(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      int int0 = Opcodes.GETSTATIC;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("8n/Gk<vmk#<|9");
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) defaultJSONParser0, (Object) "yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yyyy-MM-dd HH:mm:ss\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0001-01-01t00:00:00+08:00");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) 0, (Object) "0001-01-01t00:00:00+08:00");
      assertNull(mockThaiBuddhistDate0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      MockMinguoDate mockMinguoDate0 = dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) null, (Object) "");
      assertNull(mockMinguoDate0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      MockDate mockDate0 = new MockDate();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      MockDate mockDate1 = new MockDate((-5848));
      Float float0 = new Float((float) 44);
      SerializeWriter serializeWriter0 = new SerializeWriter(43);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_LOCAL_TIME;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float1 = new Float((float) 719);
      Class<Method> class0 = Method.class;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0000-00-00t00:00:00");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) mockHijrahDate0, (Object) "0000-00-00t00:00:00");
      Integer integer0 = new Integer(44);
      assertEquals(44, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Float> class0 = Float.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("00x000-00TH:00:00.000", parserConfig0);
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) aSMDeserializerFactory0, (Object) "00x000-00TH:00:00.000");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"00x000-00TH:00:00.000\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4sd/-#EE&$");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[3] = serializerFeature2;
      SerializeWriter serializeWriter0 = new SerializeWriter(mockPrintWriter0, serializerFeatureArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0, serializeConfig0);
      MockDate mockDate0 = new MockDate((-1961582582), (-1961582582), (-1961582582), (-1961582582), 3877);
      // Undeclared exception!
      try { 
        dateCodec0.write(jSONSerializer0, mockDate0, mockDate0, (Type) null, 3877);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4sd/-#EE&$");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeature1;
      SerializeWriter serializeWriter0 = new SerializeWriter(mockPrintWriter0, serializerFeatureArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0, serializeConfig0);
      dateCodec0.getFastMatchToken();
      Short short0 = new Short((short)0);
      dateCodec0.getFastMatchToken();
      dateCodec0.write(jSONSerializer0, short0, serializeConfig0, (Type) null, (-1887589357));
      assertEquals(13, serializeWriter0.size());
      assertEquals(2, dateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<Integer> class0 = Integer.TYPE;
      ParserConfig parserConfig1 = new ParserConfig();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      parserConfig1.propertyNamingStrategy = propertyNamingStrategy0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjs");
      parserConfig1.createJavaBeanDeserializer(class0, class0);
      parserConfig1.setAsmEnable(false);
      Class<Float> class1 = Float.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0000-00-00", parserConfig1);
      defaultJSONParser0.getDateFormat();
      System.setCurrentTimeMillis(1);
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
      
      dateCodec0.cast(defaultJSONParser0, (Type) class1, (Object) aSMDeserializerFactory0, (Object) "0000-00-00");
      assertEquals(2, dateCodec0.getFastMatchToken());
  }
}
