/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:36:29 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.infinityNorm();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix0.toColumnMajorSparseMatrix();
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          double[] doubleArray0 = new double[0];
          double[] doubleArray1 = new double[5];
          doubleArray1[1] = 1799.77;
          doubleArray1[0] = 1799.77;
          // Undeclared exception!
          try { 
            RowMajorSparseMatrix.from1DArray(244, 3, doubleArray1);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // 5
             //
             verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
          cRSMatrix0.rank();
          cRSMatrix0.toColumnMajorSparseMatrix();
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1626);
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      CRSMatrix.from2DArray(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1555, 1555);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1555;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1555;
      CRSMatrix.from1DArray(0, 0, doubleArray0);
      cRSMatrix0.nonZeroIteratorOfRow((-743));
      String string0 = "";
      CRSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2210);
      SparseMatrix.random(2210, 5, (-1984.91), (Random) null);
      cRSMatrix0.toColumnMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1016, 173);
      int[] intArray0 = new int[0];
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2664);
      cRSMatrix0.infinityNorm();
      cRSMatrix0.iterator();
      cRSMatrix0.toColumnMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(32);
      Matrix matrix0 = cRSMatrix0.rotate();
      matrix0.removeLastRow();
      cRSMatrix0.insert(matrix0);
      CRSMatrix cRSMatrix1 = new CRSMatrix(25, 25, (-2227));
      cRSMatrix0.toCSV();
      int int0 = 0;
      cRSMatrix1.getColumn(int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow(22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      cRSMatrix0.toBinary();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2210);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(2210, 2210);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix1);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 32;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2233, 32, 32);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      cRSMatrix0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      mockRandom0.longs();
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(48, 48);
      Matrix.identity(0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (double)0, (-2185.1220730801933), 933.4606590253775, 933.4606590253775).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      int[] intArray0 = new int[0];
      cRSMatrix0.select(intArray0, intArray0);
      cRSMatrix0.rotate();
      cRSMatrix0.min();
      String string0 = "2TU62?L\\6]r";
      CRSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      cRSMatrix0.toMatrixMarket();
      double double0 = new Integer(6);
      cRSMatrix0.toBinary();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(6, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2236, 125.76);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRow(1870, vectorAccumulator0);
      cRSMatrix0.eachInRow(2236, vectorProcedure0);
      cRSMatrix0.iteratorOfNonZeroRows();
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2210);
      cRSMatrix0.removeFirstRow();
      String string0 = "No rows or columns selected.";
      CRSMatrix.fromMatrixMarket(string0);
      cRSMatrix0.toColumnVector();
      cRSMatrix0.toColumnMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(32);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix1, cRSMatrix1);
      cRSMatrix1.toColumnMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      Matrix matrix0 = cRSMatrix0.select(intArray0, intArray0);
      cRSMatrix0.rotate();
      matrix0.min();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(32, 32);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(1608, 32);
      CRSMatrix cRSMatrix2 = CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix1, cRSMatrix0);
      cRSMatrix2.min();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 173;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 1016;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray3[0] = (double) 173;
      doubleArray4[1] = 6.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[1] = 6.0;
      doubleArray0[4] = doubleArray5;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      RowMajorSparseMatrix.zero(5203, 173);
      CRSMatrix cRSMatrix2 = CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix0, cRSMatrix0);
      cRSMatrix2.getColumn(1016);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(30);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix1, cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2210, 32, 32);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(167);
      cRSMatrix0.maxInRow(167);
      cRSMatrix1.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2181, 2181, 2181);
      cRSMatrix0.multiplyByItsTranspose();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.minInRow(2181);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(8);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix1, cRSMatrix1, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(32);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      MockRandom mockRandom0 = new MockRandom(32);
      mockRandom0.longs();
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(32, 32);
      SparseMatrix sparseMatrix0 = SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix1, cRSMatrix0);
      CRSMatrix.block(cRSMatrix0, cRSMatrix1, cRSMatrix2, sparseMatrix0);
      cRSMatrix2.min();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      cRSMatrix0.toColumnMajorSparseMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.transformRow(6, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      Matrix matrix0 = cRSMatrix0.select(intArray0, intArray0);
      cRSMatrix0.rotate();
      matrix0.min();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      cRSMatrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(1, vectorFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2210, 32, 32);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformRow(32, vectorFunction0);
      cRSMatrix0.minInRow(32);
      org.evosuite.runtime.Random.setNextRandom(2210);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      cRSMatrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)6, (double)1, (double)1, (double)6, (double)1).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(1, vectorFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      cRSMatrix0.rank();
      cRSMatrix0.rotate();
      cRSMatrix0.getColumn(6);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0);
      cRSMatrix0.max();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(0, 0);
      cRSMatrix1.setAll(0.0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(0);
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric((-483), (double) 0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -483x-483
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(32);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix0.minInRow(4);
      cRSMatrix0.getColumn((-1));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 2210;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2210, 32);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(2210, 1325, 2210);
      cRSMatrix0.getColumn(4);
      cRSMatrix1.rank();
      cRSMatrix1.getColumn(int0);
      int int1 = (-2208);
      double double0 = (-801.7584308898751);
      CRSMatrix.diagonal(int1, double0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(32, 32);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(32);
      SparseMatrix sparseMatrix0 = cRSMatrix0.toSparseMatrix();
      CRSMatrix cRSMatrix2 = CRSMatrix.block(cRSMatrix0, cRSMatrix1, sparseMatrix0, cRSMatrix1);
      cRSMatrix2.min();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      cRSMatrix0.rank();
      cRSMatrix0.setAll(6);
      cRSMatrix0.getColumn(6);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(6, 6, (double) 6, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DenseMatrix.identity(5);
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      cRSMatrix0.rank();
      org.evosuite.runtime.Random.setNextRandom(1);
      cRSMatrix0.setAll(1);
      cRSMatrix0.getColumn(0);
      cRSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix1.toColumnMajorSparseMatrix();
      cRSMatrix0.minInRow(4);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      cRSMatrix0.rank();
      // Undeclared exception!
      try { 
        cRSMatrix0.foldNonZero((MatrixAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrices$33", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 125.76;
      doubleArray0[1] = 203.0;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(48, (-2087.33396723));
      cRSMatrix0.sliceTopLeft(48, 48);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(4, 48, 4);
      cRSMatrix0.getColumn(48);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix1.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix1.rank();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2189);
      Matrix matrix0 = cRSMatrix0.sliceBottomRight(3, 2189);
      Matrix matrix1 = cRSMatrix0.copyOfColumns(3);
      CRSMatrix.block(matrix0, cRSMatrix0, matrix1, matrix0);
      cRSMatrix0.toColumnMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CRSMatrix.identity(330);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2210);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 32;
      int int1 = 2210;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2210, 32, 32);
      int int2 = 167;
      int int3 = 49;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.random(49, 32, 1.0, (Random) mockRandom0);
      CRSMatrix cRSMatrix1 = CRSMatrix.random(2210, 49, 420.54186084967205, (Random) mockRandom0);
      int[] intArray0 = new int[9];
      intArray0[0] = int0;
      intArray0[1] = int2;
      intArray0[2] = int0;
      intArray0[3] = int3;
      intArray0[4] = int0;
      intArray0[5] = int1;
      intArray0[6] = int0;
      intArray0[7] = int1;
      intArray0[8] = int1;
      cRSMatrix1.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      CRSMatrix.random(86, 2, (double) 0, (Random) mockRandom0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2213);
      cRSMatrix0.multiplyByItsTranspose();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
  }
}
