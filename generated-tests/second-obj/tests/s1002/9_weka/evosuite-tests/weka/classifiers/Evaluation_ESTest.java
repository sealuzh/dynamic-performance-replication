/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:12:22 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BorderLayout;
import java.awt.TextArea;
import java.io.File;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Properties;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import javax.swing.JApplet;
import javax.swing.JSplitPane;
import javax.swing.JTree;
import javax.swing.plaf.nimbus.NimbusStyle;
import javax.swing.text.AbstractDocument;
import javax.swing.tree.DefaultMutableTreeNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.ConditionalDensityEstimator;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.PART;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.LMT;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.converters.ArffLoader;
import weka.core.converters.CSVLoader;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.WordTokenizer;
import weka.estimators.UnivariateKernelEstimator;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Evaluation.handleCostOption("\tUse error on probabilities instead of misclassification error for stopping criterion of LogitBoost.", 97);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.addNumericTrainClass(45.0, 1.0E10);
      double double0 = 2.0;
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CSVLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.weightedFalsePositiveRate();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getDirectory();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@data";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      stringArray0[1] = "@relation";
      stringArray0[2] = "@data";
      textDirectoryLoader0.setOptions(stringArray0);
      textDirectoryLoader0.setOptions(stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation.getGlobalInfo(costSensitiveClassifier0);
      costSensitiveClassifier0.getCapabilities();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Evaluation.handleCostOption("", 65);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      LMT lMT0 = new LMT();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 65;
      doubleArray0[1] = 2104.306677618;
      doubleArray0[2] = 976.2497281052232;
      doubleArray0[3] = 2104.306677618;
      doubleArray0[4] = (-3477.9);
      doubleArray0[5] = (double) 65;
      doubleArray0[6] = (double) 65;
      doubleArray0[7] = (double) 65;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2104.306677618, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = JSplitPane.TOP;
      PART pART0 = new PART();
      evaluation0.updateNumericScores((double[]) null, (double[]) null, (-1953.909));
      String string1 = XML.VAL_YES;
      evaluation0.weightedFalsePositiveRate();
      evaluation0.rootRelativeSquaredError();
      evaluation0.coverageOfTestCasesByPredictedRegions();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      instances0.compactify();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.SFMeanSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-353.144002));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -353
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.toString();
      PART pART0 = new PART();
      evaluation0.addNumericTrainClass((-4010.84199167195), 2669.4380309);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.numTrueNegatives(3);
      evaluation0.rootMeanSquaredError();
      evaluation0.kappa();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[2];
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(1);
      String string0 = JTree.SHOWS_ROOT_HANDLES_PROPERTY;
      costSensitiveClassifier0.listOptions();
      costMatrix0.getRevision();
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, "o#+sOIQIT<1};>8");
      MockRandom mockRandom0 = new MockRandom(42L);
      // Undeclared exception!
      try { 
        mockRandom0.nextBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = NimbusStyle.SMALL_SCALE;
      evaluation0.addNumericTrainClass(0.857, 0.857);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@data";
      Logistic logistic0 = new Logistic();
      logistic0.getCapabilities();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) logistic0, instances0, 141, (Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      costSensitiveClassifier0.getCostMatrixSource();
      costSensitiveClassifier0.setClassifier(costSensitiveClassifier0);
      String[] stringArray0 = new String[0];
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.fMeasure(1);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        Evaluation.evaluateModel(".xrff.gz", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name .xrff.gz.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setOptions(testInstances0.DEFAULT_WORDS);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.useNoPriors();
      evaluation0.unweightedMicroFmeasure();
      String string0 = ArffLoader.FILE_EXTENSION_COMPRESSED;
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      evaluation0.falseNegativeRate((-868));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      MockRandom mockRandom0 = new MockRandom();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ArffLoader arffLoader0 = new ArffLoader();
      File file0 = arffLoader0.retrieveFile();
      textDirectoryLoader0.setSource(file0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.equalHeadersMsg(instances0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".bsi";
      textDirectoryLoader0.setOptions(stringArray0);
      Evaluation.main(stringArray0);
      DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode();
      JTree jTree0 = new JTree(defaultMutableTreeNode0, false);
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      String string0 = CostMatrix.FILE_EXTENSION;
      evaluation0.correct();
      evaluation0.toSummaryString(false);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        Evaluation.evaluateModel(classifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.sizeOfPredictedRegions();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.toCumulativeMarginDistributionString();
      String[] stringArray0 = new String[3];
      stringArray0[2] = ".arff";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DatabaseLoader.main(stringArray0);
      evaluation0.toSummaryString(true);
      evaluation0.fMeasure(1);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      costSensitiveClassifier0.setDebug(true);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.evaluateModel((Classifier) inputMappedClassifier0, instances0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      try { 
        evaluation0.evaluateModelOnce((double) 1, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorSqrErr;
      evaluation0.addNumericTrainClass(2313.684295244, (-3780.539));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@data";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@data";
      textDirectoryLoader0.setOptions(stringArray0);
      textDirectoryLoader0.setOptions(stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      ArrayList<TextArea> arrayList0 = new ArrayList<TextArea>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CostMatrix costMatrix0 = new CostMatrix(1);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      costMatrix0.getRevision();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.numTrueNegatives(1);
      evaluation0.toSummaryString(false);
      MockRandom mockRandom0 = new MockRandom(1L);
      try { 
        evaluation0.crossValidateModel("@data", instances0, 2, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @data
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setDebug(true);
      instances0.toArray();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      evaluation0.addNumericTrainClass(2004.6197168691, 0.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.KBRelativeInformation();
      evaluation0.setDiscardPredictions(false);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.toCumulativeMarginDistributionString();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = JSplitPane.TOP;
      PART pART0 = new PART();
      String string1 = XML.VAL_YES;
      evaluation0.weightedFalsePositiveRate();
      evaluation0.rootRelativeSquaredError();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.setDiscardPredictions(false);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".bsi";
      textDirectoryLoader0.setOptions(stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      double double0 = evaluation0.m_SumClassPredicted;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      textDirectoryLoader0.setDebug(false);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.rootRelativeSquaredError();
      double double1 = KStarConstants.INITIAL_STEP;
      evaluation0.toMatrixString("@data");
      evaluation0.recall(2);
      double double2 = evaluation0.m_Incorrect;
      evaluation0.toSummaryString();
      double double3 = UnivariateKernelEstimator.CONST;
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      costSensitiveClassifier0.getOptions();
      double double0 = evaluation0.m_ClassPriorsSum;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      evaluation0.pctCorrect();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.rootRelativeSquaredError();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      evaluation0.pctUnclassified();
      evaluation0.addNumericTrainClass((-291.625017164817), 0.693147181);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.toCumulativeMarginDistributionString();
      String[] stringArray0 = new String[3];
      stringArray0[2] = ".bsi";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DatabaseLoader.main(stringArray0);
      evaluation0.equals(evaluation0);
      double double0 = NimbusStyle.LARGE_SCALE;
      evaluation0.SFMeanEntropyGain();
      evaluation0.getClassPriors();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setDebug(true);
      instances0.toArray();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      evaluation0.addNumericTrainClass(0.0, 0.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      textDirectoryLoader0.getDataSet();
      evaluation0.KBRelativeInformation();
      evaluation0.setDiscardPredictions(true);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      evaluation0.equals(naiveBayesMultinomialUpdateable0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setDebug(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      evaluation0.addNumericTrainClass(0.0, 0.0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Logistic logistic0 = new Logistic();
      logistic0.getCapabilities();
      MockRandom mockRandom0 = new MockRandom();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.shouldAllThrowIOExceptions();
      costSensitiveClassifier0.setDebug(true);
      evaluation0.KBRelativeInformation();
      instances0.enumerateInstances();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      DenseInstance denseInstance0 = new DenseInstance(2);
      evaluation0.SFSchemeEntropy();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      evaluation0.addNumericTrainClass((-55.597227745), 4096.221900745768);
      double[] doubleArray0 = new double[1];
      Logistic logistic0 = new Logistic();
      logistic0.getCapabilities();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.listOptions();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      costSensitiveClassifier0.toString();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.sizeOfPredictedRegions();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      evaluation0.SFMeanSchemeEntropy();
      double double1 = KStarConstants.INITIAL_STEP;
      double double2 = evaluation0.m_ConfLevel;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      evaluation0.numInstances();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      evaluation0.addNumericTrainClass(0.0, 0.0);
      byte[] byteArray0 = new byte[10];
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@data";
      textDirectoryLoader0.setOptions(stringArray0);
      evaluation0.addNumericTrainClass(0.0, 45.0);
      Logistic logistic0 = new Logistic();
      logistic0.getCapabilities();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBytes(byteArray0);
      evaluation0.avgCost();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      textDirectoryLoader0.setDirectory(file0);
      evaluation0.weightedTruePositiveRate();
      evaluation0.trueNegativeRate((-2068));
      evaluation0.pctIncorrect();
      evaluation0.totalCost();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(102);
      binarySparseInstance0.setMissing(102);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2775);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2775);
      doubleArray0[5] = (double) (-2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setDebug(true);
      instances0.toArray();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      evaluation0.addNumericTrainClass(0.0, 0.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double1 = KStarConstants.EPSILON;
      evaluation0.matthewsCorrelationCoefficient(2146023845);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".arff";
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      evaluation0.addNumericTrainClass(0.0, 0.0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@data";
      Logistic logistic0 = new Logistic();
      logistic0.getCapabilities();
      MockRandom mockRandom0 = new MockRandom();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setDebug(true);
      evaluation0.KBRelativeInformation();
      evaluation0.sizeOfPredictedRegions();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      DenseInstance denseInstance0 = new DenseInstance(2);
      try { 
        evaluation0.evaluateModelOnce((double[]) null, (Instance) denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorSqrErr;
      double double1 = (-3780.539);
      evaluation0.addNumericTrainClass(0.0, (-3780.539));
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@relation";
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      String string0 = XML.ATT_VERSION;
      evaluation0.sizeOfPredictedRegions();
      double double2 = KStarConstants.FLOOR;
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.iterator();
      String[] stringArray0 = new String[0];
      evaluation0.SFMeanEntropyGain();
      evaluation0.addNumericTrainClass(2665.913430786837, 2665.913430786837);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.toSummaryString(false);
      evaluation0.fMeasure(2);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      evaluation0.m_CoverageStatisticsAvailable = false;
      mockRandom1.nextGaussian();
      evaluation0.SFMeanPriorEntropy();
      MockRandom mockRandom2 = new MockRandom();
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.recall(1);
      evaluation0.SFEntropyGain();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCapabilities();
      costSensitiveClassifier0.setMinimizeExpectedCost(false);
      evaluation0.addNumericTrainClass(1208.8562, 28.18406645882841);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Logistic logistic0 = new Logistic();
      logistic0.getCapabilities();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.setDebug(false);
      evaluation0.KBRelativeInformation();
      evaluation0.sizeOfPredictedRegions();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      DenseInstance denseInstance0 = new DenseInstance(46);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".bsi";
      textDirectoryLoader0.setOptions(stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      evaluation0.falsePositiveRate(2);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.rootRelativeSquaredError();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      evaluation0.setDiscardPredictions(false);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.trueNegativeRate(1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      textDirectoryLoader0.setSource(file0);
      textDirectoryLoader0.getDirectory();
      evaluation0.matthewsCorrelationCoefficient((-1084));
      evaluation0.unweightedMicroFmeasure();
      evaluation0.equals(instances0);
      double[] doubleArray0 = null;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(Double.NaN, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Logistic logistic0 = new Logistic();
      logistic0.getCapabilities();
      logistic0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      evaluation0.areaUnderPRC((-66));
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      evaluation0.rootMeanSquaredError();
      testInstances0.setNumRelationalNominal(190);
      evaluation0.kappa();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Evaluation.getGlobalInfo(multiClassClassifierUpdateable0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\nSynopsis for weka.classifiers.meta.MultiClassClassifierUpdateable:\n\nA metaclassifier for handling multi-class datasets with 2-class classifiers. This classifier is also capable of applying error correcting output codes for increased accuracy. The base classifier must be an updateable classifier";
      stringArray0[1] = "\nSynopsis for weka.classifiers.meta.MultiClassClassifierUpdateable:\n\nA metaclassifier for handling multi-class datasets with 2-class classifiers. This classifier is also capable of applying error correcting output codes for increased accuracy. The base classifier must be an updateable classifier";
      stringArray0[2] = "\nSynopsis for weka.classifiers.meta.MultiClassClassifierUpdateable:\n\nA metaclassifier for handling multi-class datasets with 2-class classifiers. This classifier is also capable of applying error correcting output codes for increased accuracy. The base classifier must be an updateable classifier";
      stringArray0[3] = "\nSynopsis for weka.classifiers.meta.MultiClassClassifierUpdateable:\n\nA metaclassifier for handling multi-class datasets with 2-class classifiers. This classifier is also capable of applying error correcting output codes for increased accuracy. The base classifier must be an updateable classifier";
      stringArray0[4] = "\nSynopsis for weka.classifiers.meta.MultiClassClassifierUpdateable:\n\nA metaclassifier for handling multi-class datasets with 2-class classifiers. This classifier is also capable of applying error correcting output codes for increased accuracy. The base classifier must be an updateable classifier";
      stringArray0[5] = "\nSynopsis for weka.classifiers.meta.MultiClassClassifierUpdateable:\n\nA metaclassifier for handling multi-class datasets with 2-class classifiers. This classifier is also capable of applying error correcting output codes for increased accuracy. The base classifier must be an updateable classifier";
      Evaluation.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.addNumericTrainClass(1.0E10, 0.0);
      evaluation0.addNumericTrainClass(1.0E10, Double.NaN);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      DenseInstance denseInstance0 = new DenseInstance((-1.0), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) null, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorSqrErr;
      evaluation0.addNumericTrainClass(2313.684295244, (-3780.539));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@data";
      evaluation0.m_ClassIsNominal = false;
      stringArray0[1] = ".arff";
      stringArray0[2] = "@data";
      textDirectoryLoader0.setOptions(stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.numTrueNegatives(1);
      evaluation0.toSummaryString(true);
      double double1 = evaluation0.m_SumSqrPredicted;
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      costSensitiveClassifier0.getCapabilities();
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.addNumericTrainClass(0.0, 0.0);
      evaluation0.addNumericTrainClass((-256.0), 0.0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double1 = UnivariateKernelEstimator.CONST;
      evaluation0.weightedFMeasure();
      evaluation0.relativeAbsoluteError();
      evaluation0.SFPriorEntropy();
      evaluation0.weightedRecall();
      evaluation0.sizeOfPredictedRegions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.num2ShortID(1445, (char[]) null, 0);
      evaluation0.weightedFMeasure();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(1445, (char[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = NimbusStyle.SMALL_SCALE;
      evaluation0.addNumericTrainClass(0.857, 0.857);
      String[] stringArray0 = new String[1];
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(117, charArray0, 117);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorSqrErr;
      evaluation0.addNumericTrainClass(0.0, (-3780.539));
      evaluation0.addNumericTrainClass((-256.0), 0.0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double1 = UnivariateKernelEstimator.CONST;
      evaluation0.weightedFMeasure();
      evaluation0.relativeAbsoluteError();
      evaluation0.weightedRecall();
      evaluation0.sizeOfPredictedRegions();
      char[] charArray0 = new char[4];
      charArray0[0] = 'W';
      charArray0[2] = 'D';
      charArray0[3] = 'W';
      evaluation0.num2ShortID(21, charArray0, 15000);
      evaluation0.weightedFMeasure();
      evaluation0.meanPriorAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.getWords();
      evaluation0.toMatrixString("quick,brown,fox,jumps,over,the,lazy,dog");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.weightedTrueNegativeRate();
      costSensitiveClassifier0.getCostMatrixSource();
      costSensitiveClassifier0.getCostMatrix();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.SFMeanEntropyGain();
      evaluation0.KBRelativeInformation();
      evaluation0.setDiscardPredictions(false);
      evaluation0.trueNegativeRate(1);
      evaluation0.totalCost();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      try { 
        Evaluation.evaluateModel((Classifier) costSensitiveClassifier0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.CostSensitiveClassifier:
         // 
         // -M
         // \tMinimize expected misclassification cost. Default is to
         // \treweight training instances according to costs per class
         // -C <cost file name>
         // \tFile name of a cost matrix to use. If this is not supplied,
         // \ta cost matrix will be loaded on demand. The name of the
         // \ton-demand file is the relation name of the training data
         // \tplus \".cost\", and the path to the on-demand file is
         // \tspecified with the -N option.
         // -N <directory>
         // \tName of a directory to search for cost files when loading
         // \tcosts on demand (default current directory).
         // -cost-matrix <matrix>
         // \tThe cost matrix in Matlab single line format.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumInstancesRelational(58);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.getRevision();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorSqrErr;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = JTree.INVOKES_STOP_CELL_EDITING_PROPERTY;
      Float float0 = new Float((double) 1);
      CostMatrix costMatrix0 = new CostMatrix(1);
      double double1 = evaluation0.m_SumSchemeEntropy;
      evaluation0.SFSchemeEntropy();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.useNoPriors();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1862.9);
      evaluation0.trueNegativeRate(2);
      evaluation0.KBMeanInformation();
      evaluation0.matthewsCorrelationCoefficient(2);
      evaluation0.KBMeanInformation();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = Locale.getISOCountries();
      costSensitiveClassifier0.setMinimizeExpectedCost(true);
      CostMatrix costMatrix0 = new CostMatrix(2);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      costSensitiveClassifier0.getCostMatrixSource();
      textDirectoryLoader0.setDebug(true);
      costSensitiveClassifier0.setClassifier(gaussianProcesses0);
      costSensitiveClassifier0.getCostMatrix();
      CostSensitiveClassifier.main(stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double double0 = evaluation0.m_SumKBInfo;
      double double1 = UnivariateKernelEstimator.CONST;
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.costMatrixSourceTipText();
      evaluation0.toSummaryString(true);
      evaluation0.fMeasure(1);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier1, instances0, 0, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      PART pART0 = new PART();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("@relation");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      evaluation0.getDiscardPredictions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDirectory();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      costSensitiveClassifier0.getCostMatrixSource();
      textDirectoryLoader0.setDebug(false);
      costSensitiveClassifier0.setClassifier(costSensitiveClassifier0);
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.addNumericTrainClass(2665.913430786837, 2665.913430786837);
      SMOreg sMOreg0 = new SMOreg();
      evaluation0.equals((Object) null);
      double double0 = KStarConstants.INITIAL_STEP;
      Float float0 = new Float(0.05);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      evaluation0.setDiscardPredictions(false);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.toString();
      PART pART0 = new PART();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(981);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      binarySparseInstance0.setMissing(981);
      evaluation0.useNoPriors();
      evaluation0.unweightedMicroFmeasure();
      evaluation0.sizeOfPredictedRegions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCapabilities();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      evaluation0.SFMeanEntropyGain();
      CostSensitiveClassifier costSensitiveClassifier3 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      evaluation0.SFMeanSchemeEntropy();
      double double0 = KStarConstants.INITIAL_STEP;
      evaluation0.meanPriorAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setDebug(true);
      instances0.toArray();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      evaluation0.addNumericTrainClass(0.0, 0.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.KBRelativeInformation();
      evaluation0.setDiscardPredictions(true);
      evaluation0.trueNegativeRate((-813));
      evaluation0.totalCost();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@data";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "@relation";
      stringArray0[3] = "-r\n";
      try { 
        Evaluation.evaluateModel((Classifier) randomSubSpace0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.RandomSubSpace:
         // 
         // -P
         // \tSize of each subspace:
         // \t\t< 1: percentage of the number of attributes
         // \t\t>=1: absolute number of attributes
         // 
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -num-slots <num>
         // \tNumber of execution slots.
         // \t(default 1 - i.e. no parallelism)
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.REPTree)
         // 
         // Options specific to classifier weka.classifiers.trees.REPTree:
         // 
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf (default 2).
         // -V <minimum variance for split>
         // \tSet minimum numeric class variance proportion
         // \tof train variance for split (default 1e-3).
         // -N <number of folds>
         // \tNumber of folds for reduced error pruning (default 3).
         // -S <seed>
         // \tSeed for random data shuffling (default 1).
         // -P
         // \tNo pruning.
         // -L
         // \tMaximum tree depth (default -1, no maximum)
         // -I
         // \tInitial class value count (default 0)
         // -R
         // \tSpread initial count over all class values (i.e. don't use 1 per value)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      costSensitiveClassifier0.setClassifier(costSensitiveClassifier0);
      String[] stringArray0 = new String[0];
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.fMeasure(1);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.useNoPriors();
      double double1 = evaluation0.m_SumErr;
      evaluation0.addNumericTrainClass(0.0, 2);
      SMOreg sMOreg0 = new SMOreg();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance((-3127.707), doubleArray0);
      sparseInstance0.setDataset(instances0);
      textDirectoryLoader0.setRetrieval((-2775));
      evaluation0.evaluateModel((Classifier) sMOreg0, instances0, (Object[]) stringArray0);
      double double2 = evaluation0.m_SumKBInfo;
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.relativeAbsoluteError();
      double double3 = KStarConstants.EPSILON;
      evaluation0.KBRelativeInformation();
      evaluation0.areaUnderPRC((-1456287556));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.iterator();
      costSensitiveClassifier0.getCostMatrix();
      costSensitiveClassifier0.getCapabilities();
      evaluation0.setNumericPriorsFromBuffer();
      SMOreg sMOreg0 = new SMOreg();
      sMOreg0.listOptions();
      CostMatrix costMatrix0 = new CostMatrix(2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      String string0 = CostMatrix.FILE_EXTENSION;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.SFMeanSchemeEntropy();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      String[] stringArray0 = new String[1];
      textDirectoryLoader0.setOutputFilename(false);
      stringArray0[0] = ".bsi";
      textDirectoryLoader0.setOptions(stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Logistic logistic0 = new Logistic();
      Locale.getISOCountries();
      logistic0.getCapabilities();
      textDirectoryLoader0.outputFilenameTipText();
      MockRandom mockRandom0 = new MockRandom();
      String string0 = AbstractDocument.ElementNameAttribute;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCapabilities();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      double double0 = KStarConstants.INITIAL_STEP;
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator((ConditionalDensityEstimator) null, (Instance) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      costSensitiveClassifier0.getCostMatrixSource();
      costSensitiveClassifier0.setClassifier(costSensitiveClassifier0);
      String[] stringArray0 = new String[0];
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.fMeasure(1);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.SFMeanPriorEntropy();
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, instances0, 2, (Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.iterator();
      costSensitiveClassifier0.getCostMatrix();
      String[] stringArray0 = new String[0];
      evaluation0.addNumericTrainClass(2665.913430786837, 2665.913430786837);
      costSensitiveClassifier0.getCapabilities();
      evaluation0.setNumericPriorsFromBuffer();
      SMOreg sMOreg0 = new SMOreg();
      sMOreg0.listOptions();
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation.main(stringArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      String string0 = CostMatrix.FILE_EXTENSION;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      double double0 = KStarConstants.ROOT_FINDER_ACCURACY;
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      evaluation0.addNumericTrainClass(Double.NaN, (-6.880178236997202));
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".bsi";
      textDirectoryLoader0.setOptions(stringArray0);
      evaluation0.addNumericTrainClass(Double.NaN, Double.NaN);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale.getISOCountries();
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.priorEntropy();
      evaluation0.numTrueNegatives(866);
      evaluation0.pctUnclassified();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.useNoPriors();
      evaluation0.pctCorrect();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[2];
      textDirectoryLoader0.listOptions();
      doubleArray0[0] = Double.NaN;
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.setDiscardPredictions(true);
      evaluation2.weightedFalseNegativeRate();
      evaluation0.toMatrixString(".arff");
      evaluation0.rootRelativeSquaredError();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorSqrErr;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      evaluation0.addNumericTrainClass(3432.786488181, 1);
      costSensitiveClassifier0.getCostMatrixSource();
      costSensitiveClassifier0.getCostMatrix();
      textDirectoryLoader0.setRetrieval((-206797271));
      costSensitiveClassifier0.getCostMatrix();
      costSensitiveClassifier0.listOptions();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".arff");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.rootRelativeSquaredError();
      evaluation0.setDiscardPredictions(false);
      evaluation0.weightedFalseNegativeRate();
      SparseInstance sparseInstance0 = new SparseInstance(119);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-2775);
      intArray0[1] = (-2775);
      SparseInstance sparseInstance1 = new SparseInstance(1019);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      evaluation0.fMeasure((-2775));
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) inputMappedClassifier0, (Instance) sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumClassPredicted = (-2119.6);
      String string0 = JSplitPane.TOP;
      PART pART0 = new PART();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.rootRelativeSquaredError();
      evaluation0.setDiscardPredictions(true);
      evaluation0.confusionMatrix();
      evaluation0.incorrect();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorSqrErr;
      String[] stringArray0 = new String[2];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AbstractClassifier.runClassifier(costSensitiveClassifier0, stringArray0);
      String string0 = JTree.INVOKES_STOP_CELL_EDITING_PROPERTY;
      Float float0 = new Float((double) 1);
      CostMatrix costMatrix0 = new CostMatrix(1);
      double double1 = evaluation0.m_SumSchemeEntropy;
      evaluation0.SFSchemeEntropy();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double2 = evaluation0.m_SumPredicted;
      evaluation0.KBRelativeInformation();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix1 = costSensitiveClassifier0.getCostMatrix();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      DenseInstance denseInstance0 = new DenseInstance(2);
      instances0.add((Instance) denseInstance0);
      CostMatrix costMatrix2 = new CostMatrix(costMatrix1);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.getModelHeader(instances0);
      String string1 = CostMatrix.FILE_EXTENSION;
      evaluation0.matthewsCorrelationCoefficient(2147483645);
      evaluation0.trueNegativeRate(2);
      evaluation0.pctCorrect();
      evaluation0.setPriors(instances0);
      evaluation0.fMeasure(97);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      testInstances0.getOptions();
      costSensitiveClassifier0.setMinimizeExpectedCost(true);
      CostMatrix costMatrix0 = new CostMatrix(2);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/DatabaseUtils.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".bsi");
      costSensitiveClassifier0.getCostMatrix();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DatabaseLoader.main(testInstances0.DEFAULT_WORDS);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      evaluation0.equals(randomCommittee0);
      double double0 = NimbusStyle.LARGE_SCALE;
      evaluation0.SFMeanEntropyGain();
      evaluation0.getClassPriors();
      evaluation0.weightedFalsePositiveRate();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      try { 
        Evaluation.evaluateModel((Classifier) gaussianProcesses0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.GaussianProcesses:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -L <double>
         // \tLevel of Gaussian Noise wrt transformed target. (default 1)
         // -N
         // \tWhether to 0=normalize/1=standardize/2=neither. (default 0=normalize)
         // -K <classname and parameters>
         // \tThe Kernel to use.
         // \t(default: weka.classifiers.functions.supportVector.PolyKernel)
         // 
         // Options specific to kernel weka.classifiers.functions.supportVector.PolyKernel:
         // 
         // -D
         // \tEnables debugging output (if available) to be printed.
         // \t(default: off)
         // -no-checks
         // \tTurns off all checks - use with caution!
         // \t(default: checks on)
         // -C <num>
         // \tThe size of the cache (a prime number), 0 for full cache and 
         // \t-1 to turn it off.
         // \t(default: 250007)
         // -E <num>
         // \tThe Exponent to use.
         // \t(default: 1.0)
         // -L
         // \tUse lower-order terms.
         // \t(default: no)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.m_MissingClass = (double) 1;
      evaluation0.unweightedMacroFmeasure();
      evaluation0.KBInformation();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setMinimizeExpectedCost(true);
      CostMatrix costMatrix0 = new CostMatrix(0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.outputFilenameTipText();
      String string0 = AbstractDocument.ElementNameAttribute;
      evaluation0.sizeOfPredictedRegions();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier3 = new CostSensitiveClassifier();
      evaluation0.SFMeanEntropyGain();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostSensitiveClassifier costSensitiveClassifier4 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      SparseInstance sparseInstance0 = new SparseInstance(110);
      evaluation0.confusionMatrix();
      evaluation0.SFMeanEntropyGain();
      evaluation0.getClassPriors();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setOptions(testInstances0.DEFAULT_WORDS);
      testInstances0.getRevision();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      simpleLinearRegression0.setSuppressErrorMessage(false);
      evaluation0.KBMeanInformation();
      evaluation0.SFEntropyGain();
      evaluation0.falsePositiveRate((-1));
      try { 
        Evaluation.evaluateModel((Classifier) simpleLinearRegression0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.SimpleLinearRegression:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      testInstances0.getOptions();
      costSensitiveClassifier0.setMinimizeExpectedCost(true);
      CostMatrix costMatrix0 = new CostMatrix(2);
      costSensitiveClassifier0.getCostMatrix();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DatabaseLoader.main(testInstances0.DEFAULT_WORDS);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      evaluation0.equals(randomCommittee0);
      double double0 = NimbusStyle.LARGE_SCALE;
      evaluation0.SFMeanEntropyGain();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.compactify();
      evaluation0.m_DiscardPredictions = true;
      textDirectoryLoader0.setCharSet("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      String[] stringArray0 = null;
      DatabaseLoader.main((String[]) null);
      evaluation0.equals(evaluation0);
      evaluation0.m_NumClasses = 479;
      double double0 = NimbusStyle.LARGE_SCALE;
      double double1 = evaluation0.m_Incorrect;
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      DenseInstance denseInstance0 = new DenseInstance(32);
      evaluation0.falseNegativeRate((-2775));
      // Undeclared exception!
      try { 
        evaluation0.weightedFMeasure();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.m_MissingClass = (double) 2;
      evaluation0.unweightedMacroFmeasure();
      evaluation0.KBInformation();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      evaluation0.sizeOfPredictedRegions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      evaluation0.sizeOfPredictedRegions();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      Capabilities capabilities0 = allFilter1.getCapabilities(instances0);
      J48 j48_0 = new J48();
      capabilities0.getClassCapabilities();
      costSensitiveClassifier1.getCostMatrix();
      CostMatrix costMatrix0 = new CostMatrix(1);
      evaluation0.SFMeanSchemeEntropy();
      double double0 = KStarConstants.INITIAL_STEP;
      evaluation0.weightedFalseNegativeRate();
      evaluation0.meanPriorAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      costSensitiveClassifier0.getCostMatrixSource();
      costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (-820.49042468134);
      textDirectoryLoader0.getStructure();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".cost");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_TotalSizeOfRegions = 0.25;
      evaluation0.m_Unclassified = (-820.49042468134);
      evaluation0.updateMargins(doubleArray0, 2, (-1436.2754315294262));
      try { 
        evaluation0.evaluateModel((Classifier) decisionTable0, instances0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorSqrErr;
      String[] stringArray0 = new String[2];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AbstractClassifier.runClassifier(costSensitiveClassifier0, stringArray0);
      String string0 = JTree.INVOKES_STOP_CELL_EDITING_PROPERTY;
      Float float0 = new Float((double) 1);
      CostMatrix costMatrix0 = new CostMatrix(1);
      double double1 = evaluation0.m_SumSchemeEntropy;
      evaluation0.SFSchemeEntropy();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.useNoPriors();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      PipedWriter pipedWriter0 = new PipedWriter();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      textDirectoryLoader0.getDataSet();
      evaluation0.SFMeanEntropyGain();
      StringReader stringReader0 = new StringReader(".names");
      CostMatrix costMatrix1 = null;
      try {
        costMatrix1 = new CostMatrix(stringReader0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \".names\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.m_MissingClass = (double) 2;
      evaluation0.unweightedMacroFmeasure();
      Utils.log2 = 2.0;
      evaluation0.KBInformation();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      evaluation0.sizeOfPredictedRegions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      evaluation0.sizeOfPredictedRegions();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      AllFilter allFilter0 = new AllFilter();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier3 = new CostSensitiveClassifier();
      textDirectoryLoader0.listOptions();
      DecisionTable decisionTable0 = new DecisionTable();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Evaluation.makeOptionString((Classifier) null, true);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClass;
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setOptions(testInstances0.DEFAULT_WORDS);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      costMatrix0.initialize();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      AbstractClassifier.runClassifier(costSensitiveClassifier0, testInstances0.DEFAULT_WORDS);
      simpleLinearRegression0.setSuppressErrorMessage(false);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(102);
      FileSystemHandling.shouldAllThrowIOExceptions();
      binarySparseInstance0.setMissing(4384);
      evaluation0.useNoPriors();
      costMatrix0.getRevision();
      evaluation0.rootMeanSquaredError();
      evaluation0.kappa();
      double double1 = evaluation0.m_SumSqrPredicted;
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.reset();
      evaluation0.meanPriorAbsoluteError();
      double[] doubleArray0 = evaluation0.m_TrainClassVals;
      evaluation0.getHeader();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Locale.getISOCountries();
      costSensitiveClassifier0.setMinimizeExpectedCost(true);
      costSensitiveClassifier0.getCostMatrix();
      costSensitiveClassifier0.getCostMatrix();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostMatrix costMatrix0 = new CostMatrix(19);
      String string0 = AbstractDocument.ElementNameAttribute;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.toSummaryString(true);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.m_MissingClass = (double) 2;
      evaluation0.unweightedMacroFmeasure();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setOptions(testInstances0.DEFAULT_WORDS);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      GaussianProcesses.main(testInstances0.DEFAULT_WORDS);
      CostSensitiveClassifier.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.m_SumPriorSqrErr;
      double double1 = UnivariateKernelEstimator.CONST;
      evaluation0.toSummaryString(false);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      costSensitiveClassifier0.setDebug(true);
      evaluation0.KBRelativeInformation();
      evaluation0.sizeOfPredictedRegions();
      instances0.enumerateAttributes();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      int int0 = (-1995138716);
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-1995138716));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.getWords();
      evaluation0.toMatrixString("quick,brown,fox,jumps,over,the,lazy,dog");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.weightedTrueNegativeRate();
      costSensitiveClassifier0.getCostMatrixSource();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      simpleLinearRegression1.setSuppressErrorMessage(true);
      evaluation0.KBMeanInformation();
      double double0 = evaluation0.m_Correct;
      DenseInstance denseInstance0 = new DenseInstance(24);
      evaluation0.numInstances();
      evaluation0.weightedAreaUnderROC();
      evaluation0.getClassPriors();
      evaluation0.pctUnclassified();
      evaluation0.getHeader();
      evaluation0.pctCorrect();
      evaluation0.toSummaryString();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("@relation");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.weightedTrueNegativeRate();
      costSensitiveClassifier0.getCostMatrixSource();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      simpleLinearRegression0.listOptions();
      simpleLinearRegression0.setSuppressErrorMessage(true);
      evaluation0.KBMeanInformation();
      evaluation0.numInstances();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.setDiscardPredictions(true);
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        arffLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setOptions(testInstances0.DEFAULT_WORDS);
      testInstances0.getRevision();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      simpleLinearRegression0.setSuppressErrorMessage(false);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(102);
      binarySparseInstance0.setMissing(102);
      evaluation0.toClassDetailsString(" ");
      evaluation0.equals("8034");
      evaluation0.setDiscardPredictions(false);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.m_SumClass;
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setOptions(testInstances0.DEFAULT_WORDS);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      costSensitiveClassifier0.getCostMatrix();
      CostSensitiveClassifier.main(testInstances0.DEFAULT_WORDS);
      double double1 = evaluation0.m_SumKBInfo;
      double double2 = UnivariateKernelEstimator.CONST;
      evaluation0.numTrueNegatives(1);
      costSensitiveClassifier0.costMatrixSourceTipText();
      boolean boolean0 = false;
      evaluation0.toSummaryString(false);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(842);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 842
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.addNumericTrainClass((-1877.0870218287), 2);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getOptions();
      textDirectoryLoader0.setOptions(testInstances0.DEFAULT_WORDS);
      textDirectoryLoader0.setOptions(testInstances0.DEFAULT_WORDS);
      textDirectoryLoader0.setOptions(testInstances0.DEFAULT_WORDS);
      evaluation0.addNumericTrainClass(788.5544, (-1));
      String string0 = JTree.SHOWS_ROOT_HANDLES_PROPERTY;
      testInstances0.setRelation(".arff");
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.toString();
      evaluation0.trueNegativeRate(2);
      evaluation0.KBMeanInformation();
      evaluation0.matthewsCorrelationCoefficient((-3506));
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.m_TrainClassWeights;
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      evaluation1.weightedFMeasure();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
          Instances instances0 = textDirectoryLoader0.getStructure();
          textDirectoryLoader0.getStructure();
          Evaluation evaluation0 = new Evaluation(instances0);
          instances0.toString();
          PART pART0 = new PART();
          BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(981);
          FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
          binarySparseInstance0.setMissing(981);
          evaluation0.useNoPriors();
          evaluation0.unweightedMicroFmeasure();
          evaluation0.toClassDetailsString("JV?}U25yEXuxrq~<");
          double[] doubleArray0 = new double[4];
          doubleArray0[0] = Double.NaN;
          doubleArray0[1] = (double) 981;
          CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
          costSensitiveClassifier0.getCostMatrix();
          CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
          MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
          evaluation0.SFMeanEntropyGain();
          CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
          CostSensitiveClassifier costSensitiveClassifier3 = new CostSensitiveClassifier();
          AbstractClassifier.makeCopy(multiClassClassifier0);
          costSensitiveClassifier1.getCostMatrix();
          evaluation0.SFMeanSchemeEntropy();
          evaluation0.rootMeanPriorSquaredError();
          evaluation0.unweightedMacroFmeasure();
          evaluation0.SFSchemeEntropy();
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.unweightedMacroFmeasure();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setOptions(testInstances0.DEFAULT_WORDS);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(102);
      FileSystemHandling.shouldAllThrowIOExceptions();
      binarySparseInstance0.setMissing(1360);
      evaluation0.useNoPriors();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.toClassDetailsString();
      evaluation0.toClassDetailsString(".cost");
      evaluation0.SFMeanPriorEntropy();
      evaluation0.weightedFalsePositiveRate();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      JRip jRip0 = new JRip();
      Evaluation.getGlobalInfo(costSensitiveClassifier0);
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) regressionByDiscretization0, instances0, 2, (Random) mockRandom0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.useNoPriors();
      evaluation0.unweightedMicroFmeasure();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.toClassDetailsString("gp$J");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation1.weightedFMeasure();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      evaluation0.SFMeanEntropyGain();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      costSensitiveClassifier2.getCostMatrix();
      evaluation1.SFMeanSchemeEntropy();
      BayesNet bayesNet0 = new BayesNet();
      evaluation0.numTrueNegatives(16);
      CostSensitiveClassifier costSensitiveClassifier3 = new CostSensitiveClassifier();
      costSensitiveClassifier3.costMatrixSourceTipText();
      evaluation1.toSummaryString(true);
      evaluation1.fMeasure((-3380));
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      costSensitiveClassifier0.setDebug(false);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation2.crossValidateModel((Classifier) costSensitiveClassifier1, (Instances) null, 1, (Random) mockRandom0, (Object[]) costSensitiveClassifier2.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1448.8814676032164), (-1448.8814676032164));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.setNumericPriorsFromBuffer();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.addNumericTrainClass(2, 2077.7041454308);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".arff";
      stringArray0[3] = "@relation";
      stringArray0[4] = "@data";
      stringArray0[5] = "@relation";
      stringArray0[6] = "@data";
      stringArray0[7] = ".bsi";
      CostSensitiveClassifier.main(stringArray0);
      double double0 = evaluation0.m_SumPriorSqrErr;
      evaluation0.numTrueNegatives(1);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.costMatrixSourceTipText();
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      evaluation0.toSummaryString(false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(1218.86886, doubleArray0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, sparseInstance0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setDebug(false);
      costSensitiveClassifier0.getCostMatrixSource();
      instances0.iterator();
      costSensitiveClassifier0.setClassifier(costSensitiveClassifier0);
      costSensitiveClassifier0.getCostMatrix();
      String[] stringArray0 = new String[0];
      evaluation0.SFMeanEntropyGain();
      evaluation0.addNumericTrainClass(2665.913430786837, 2665.913430786837);
      SMOreg sMOreg0 = new SMOreg();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation.main(stringArray0);
      evaluation0.m_NoPriors = true;
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(2077.7041454308, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      sparseInstance0.setDataset(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      textDirectoryLoader0.setRetrieval(1);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.evaluateModel((Classifier) sMOreg0, instances0, (Object[]) stringArray0);
      evaluation0.errorRate();
      evaluation0.weightedAreaUnderPRC();
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.relativeAbsoluteError();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.areaUnderPRC(0);
      evaluation0.SFEntropyGain();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Locale.getISOCountries();
      costSensitiveClassifier0.setMinimizeExpectedCost(true);
      costSensitiveClassifier0.getCostMatrix();
      costSensitiveClassifier0.getCostMatrix();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostMatrix costMatrix0 = new CostMatrix(19);
      String string0 = AbstractDocument.ElementNameAttribute;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      evaluation0.KBMeanInformation();
      evaluation0.updateMargins(doubleArray0, 1, 0.25);
      evaluation0.SFEntropyGain();
      evaluation0.falsePositiveRate(15);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".arff";
      try { 
        Evaluation.evaluateModel((Classifier) gaussianProcesses0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.GaussianProcesses:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -L <double>
         // \tLevel of Gaussian Noise wrt transformed target. (default 1)
         // -N
         // \tWhether to 0=normalize/1=standardize/2=neither. (default 0=normalize)
         // -K <classname and parameters>
         // \tThe Kernel to use.
         // \t(default: weka.classifiers.functions.supportVector.PolyKernel)
         // 
         // Options specific to kernel weka.classifiers.functions.supportVector.PolyKernel:
         // 
         // -D
         // \tEnables debugging output (if available) to be printed.
         // \t(default: off)
         // -no-checks
         // \tTurns off all checks - use with caution!
         // \t(default: checks on)
         // -C <num>
         // \tThe size of the cache (a prime number), 0 for full cache and 
         // \t-1 to turn it off.
         // \t(default: 250007)
         // -E <num>
         // \tThe Exponent to use.
         // \t(default: 1.0)
         // -L
         // \tUse lower-order terms.
         // \t(default: no)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      costSensitiveClassifier0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      costSensitiveClassifier0.getCostMatrixSource();
      textDirectoryLoader0.setDebug(false);
      costSensitiveClassifier0.setClassifier(costSensitiveClassifier0);
      costSensitiveClassifier0.getCostMatrix();
      String[] stringArray0 = new String[0];
      CostSensitiveClassifier.main(stringArray0);
      double double0 = evaluation0.m_SumKBInfo;
      costSensitiveClassifier0.costMatrixSourceTipText();
      evaluation0.toSummaryString(false);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      costSensitiveClassifier0.setDebug(false);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.evaluateModel((Classifier) costSensitiveClassifier0, instances0, (Object[]) stringArray0);
      evaluation0.getHeader();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClass;
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      evaluation0.m_CoverageStatisticsAvailable = false;
      Double double1 = new Double((-1));
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      evaluation0.sizeOfPredictedRegions();
      double double2 = KStarConstants.FLOOR;
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1127281206));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1127281206
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClass;
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      Double double1 = new Double((-1));
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.addNumericTrainClass((-2), 3944.2954870995);
      Logistic logistic0 = new Logistic();
      logistic0.getCapabilities();
      Logistic logistic1 = new Logistic();
      logistic1.getCapabilities();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation.getGlobalInfo(logistic0);
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.toString();
      evaluation1.trueNegativeRate((-2));
      evaluation0.KBMeanInformation();
      Evaluation evaluation2 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (-1177.31716);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-10.0);
      // Undeclared exception!
      try { 
        evaluation2.updateMargins(doubleArray0, 1, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -295079
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = JSplitPane.TOP;
      PART pART0 = new PART();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.rootRelativeSquaredError();
      evaluation0.setDiscardPredictions(true);
      evaluation0.confusionMatrix();
      evaluation0.errorRate();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.iterator();
      String[] stringArray0 = new String[0];
      evaluation0.SFMeanEntropyGain();
      evaluation0.addNumericTrainClass(2665.913430786837, 2665.913430786837);
      Evaluation.main(stringArray0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(2066.5742166967093, doubleArray0);
      sparseInstance0.setDataset(instances0);
      String string0 = CostMatrix.FILE_EXTENSION;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.getRevision();
      evaluation0.errorRate();
      double double0 = NimbusStyle.MINI_SCALE;
      try { 
        evaluation0.updateStatsForPredictor(2665.913430786837, sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2665
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.SFSchemeEntropy();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      binarySparseInstance0.setDataset(instances0);
      Properties properties0 = new Properties();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2775);
      doubleArray0[1] = 386.8918891453;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-1.0), doubleArray0);
      binarySparseInstance1.setMissing(2);
      instances1.add((Instance) binarySparseInstance1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance0);
      evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) costSensitiveClassifier0, (Instance) binarySparseInstance0);
      ArffLoader arffLoader0 = new ArffLoader();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      arffLoader0.setSource(file0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".bsi";
      try { 
        Evaluation.evaluateModel((Classifier) costSensitiveClassifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.CostSensitiveClassifier:
         // 
         // -M
         // \tMinimize expected misclassification cost. Default is to
         // \treweight training instances according to costs per class
         // -C <cost file name>
         // \tFile name of a cost matrix to use. If this is not supplied,
         // \ta cost matrix will be loaded on demand. The name of the
         // \ton-demand file is the relation name of the training data
         // \tplus \".cost\", and the path to the on-demand file is
         // \tspecified with the -N option.
         // -N <directory>
         // \tName of a directory to search for cost files when loading
         // \tcosts on demand (default current directory).
         // -cost-matrix <matrix>
         // \tThe cost matrix in Matlab single line format.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setDebug(true);
      costSensitiveClassifier0.getCostMatrixSource();
      instances0.iterator();
      costSensitiveClassifier0.setClassifier(costSensitiveClassifier0);
      costSensitiveClassifier0.getCostMatrix();
      String[] stringArray0 = new String[0];
      evaluation0.SFMeanEntropyGain();
      evaluation0.addNumericTrainClass(2665.913430786837, 2665.913430786837);
      SMOreg sMOreg0 = new SMOreg();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation.main(stringArray0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(2077.7041454308, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      sparseInstance0.setDataset(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      textDirectoryLoader0.setRetrieval(1);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.evaluateModel((Classifier) sMOreg0, instances0, (Object[]) stringArray0);
      evaluation0.errorRate();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.relativeAbsoluteError();
      evaluation0.rootMeanPriorSquaredError();
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      costSensitiveClassifier0.getCostMatrixSource();
      instances0.iterator();
      String[] stringArray0 = new String[0];
      evaluation0.SFMeanEntropyGain();
      evaluation0.addNumericTrainClass(2, 2);
      CostMatrix costMatrix0 = new CostMatrix(2);
      costSensitiveClassifier0.getCostMatrix();
      Evaluation.main(stringArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".cost");
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(2077.7041454308, doubleArray0);
      sparseInstance0.setDataset(instances0);
      String string0 = CostMatrix.FILE_EXTENSION;
      evaluation0.getRevision();
      evaluation0.errorRate();
      sparseInstance0.enumerateAttributes();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.updateStatsForPredictor(Double.NaN, sparseInstance0);
      evaluation0.setDiscardPredictions(true);
      ArffLoader arffLoader0 = new ArffLoader();
      File file0 = arffLoader0.retrieveFile();
      arffLoader0.setSource(file0);
      evaluation0.unclassified();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setDebug(false);
      String[] stringArray0 = new String[0];
      double double0 = evaluation0.m_SumKBInfo;
      double double1 = UnivariateKernelEstimator.CONST;
      evaluation0.toSummaryString(false);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.useNoPriors();
      evaluation0.priorEntropy();
      Stacking stacking0 = new Stacking();
      evaluation0.equals(stacking0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.setDiscardPredictions(false);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double1 = KStarConstants.INITIAL_STEP;
      evaluation0.relativeAbsoluteError();
      evaluation0.SFPriorEntropy();
      double double2 = evaluation0.m_MinTarget;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.costMatrixSourceTipText();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      boolean boolean0 = false;
      costSensitiveClassifier0.setMinimizeExpectedCost(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@data";
      stringArray0[1] = "@data";
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(485);
      binarySparseInstance0.setDataset(instances0);
      String string0 = CostMatrix.FILE_EXTENSION;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.getRevision();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      evaluation1.errorRate();
      binarySparseInstance0.enumerateAttributes();
      evaluation0.weightedAreaUnderPRC();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(485);
      try { 
        evaluation1.updateStatsForPredictor(1, binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      String string0 = BorderLayout.EAST;
      try { 
        evaluation0.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
