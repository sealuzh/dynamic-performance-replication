/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 01:39:14 GMT 2019
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(4, 4, 8);
      int[] intArray0 = new int[8];
      cRSMatrix0.select(intArray0, intArray0);
      intArray0[0] = 8;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 8;
      intArray0[4] = 37;
      intArray0[5] = 4;
      intArray0[6] = 8;
      intArray0[7] = (-2024);
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 13;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(13, 13);
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 13;
      doubleArray1[1] = 847.9923981;
      doubleArray1[2] = (double) 13;
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 13;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 847.9923981;
      doubleArray2[4] = (double) 13;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 847.9923981;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) 13;
      doubleArray3[3] = (double) 13;
      doubleArray3[4] = (-56.2167015778);
      doubleArray3[5] = Double.POSITIVE_INFINITY;
      doubleArray3[6] = 847.9923981;
      doubleArray3[7] = 0.0;
      doubleArray3[8] = 847.9923981;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = 847.9923981;
      doubleArray4[2] = (double) 13;
      doubleArray4[3] = 847.9923981;
      doubleArray4[4] = (double) 13;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 847.9923981;
      doubleArray4[7] = (double) 13;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 5935.192657627126;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = Double.POSITIVE_INFINITY;
      doubleArray5[3] = (double) 13;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = (double) 13;
      doubleArray5[6] = 1391.0;
      doubleArray5[7] = (double) 13;
      doubleArray5[8] = 847.9923981;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = 5935.192657627126;
      doubleArray6[1] = (-56.2167015778);
      doubleArray6[2] = 641.0;
      doubleArray6[3] = 847.9923981;
      doubleArray6[4] = (-529.0);
      doubleArray6[5] = 5935.192657627126;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = (double) 13;
      doubleArray7[1] = 1391.0;
      doubleArray7[2] = 5935.192657627126;
      doubleArray7[3] = 0.0;
      doubleArray0[6] = doubleArray7;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = (double) 460;
      doubleArray0[2] = (double) 460;
      doubleArray0[3] = (double) 460;
      doubleArray0[4] = (double) 460;
      doubleArray0[5] = (double) 460;
      doubleArray0[6] = (double) 460;
      int[] intArray0 = new int[4];
      intArray0[0] = 460;
      intArray0[1] = 460;
      intArray0[2] = 460;
      int[] intArray1 = new int[9];
      doubleArray0[3] = (double) 1095;
      intArray1[1] = 460;
      intArray1[2] = (-136);
      intArray1[3] = 460;
      intArray1[4] = 460;
      intArray1[5] = 460;
      intArray1[6] = 460;
      intArray1[7] = 460;
      intArray1[8] = 460;
      CRSMatrix cRSMatrix0 = new CRSMatrix(460, 460, 460, doubleArray0, intArray0, intArray1);
      double[][] doubleArray1 = new double[4][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      SparseMatrix.from2DArray(doubleArray1);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 5;
      int int1 = 972;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(5, 972);
      cRSMatrix0.iteratorOfNonZeroRows();
      cRSMatrix0.getColumn(972);
      cRSMatrix0.rowMajorIterator();
      Matrix matrix0 = cRSMatrix0.copyOfShape(5, 993);
      int int2 = 2734;
      int int3 = 1722;
      // Undeclared exception!
      try { 
        SparseMatrix.block(cRSMatrix0, matrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 1013;
      double double0 = 477.83931805904;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1013, 477.83931805904);
      int int1 = 359;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.is(matrixPredicate0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(359, vectorFunction0);
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(359, 359, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 1512.58603223495);
      RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      int int1 = 4;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1512.58603223495;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = 1512.58603223495;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 4;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      double double0 = 1860.108651737;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 465);
      // Undeclared exception!
      try { 
        sparseVector0.hadamardProduct(denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 5 does not equal to 465.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 1490;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1490);
      // Undeclared exception!
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 8;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(8, 8);
      int int1 = 7;
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.JACOBI;
      cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      RowMajorSparseMatrix.diagonal(7, 2.0);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(8, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 1248;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 1248);
      cRSMatrix0.maxInRow(0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromCSV("Sides of blocks are incompatible!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3507);
      cRSMatrix0.spliterator();
      cRSMatrix0.nonZeroColumnMajorIterator();
      cRSMatrix0.minInRow(2863);
      int int0 = (-620);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3507;
      doubleArray0[2] = 695.3;
      doubleArray0[3] = (double) (-620);
      doubleArray0[4] = (double) 3;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray((-620), 3, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -620x3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 508;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(508);
      int int1 = 506;
      cRSMatrix0.getRow(506);
      int int2 = 1000;
      int int3 = 8;
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(1000, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 509
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = (double) 989;
      int[] intArray0 = new int[0];
      CRSMatrix cRSMatrix0 = new CRSMatrix(989, 762, 32, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 13;
      double double0 = (-579.0);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(13, (-579.0));
      int int1 = 836;
      SparseMatrix.identity(836);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZero((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 38;
      doubleArray0[1] = (double) 3669;
      doubleArray0[2] = (double) 3669;
      doubleArray0[3] = (double) 38;
      int[] intArray0 = new int[2];
      intArray0[0] = 38;
      intArray0[1] = 38;
      CRSMatrix cRSMatrix0 = new CRSMatrix(3669, 3669, 38, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZero((MatrixProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(16, 16);
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      
      Matrix matrix0 = cRSMatrix0.copyOfShape(16, 3);
      assertEquals(16, matrix0.rows());
      assertEquals(3, matrix0.columns());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(3, 16);
      assertEquals(3, cRSMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 948;
      MockRandom mockRandom0 = new MockRandom(948);
      // Undeclared exception!
      CRSMatrix.random(948, 948, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-2496.2);
      doubleArray1[1] = (-878.735);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-878.735);
      doubleArray2[1] = (-2496.2);
      doubleArray2[2] = (-2496.2);
      doubleArray2[3] = (-878.735);
      doubleArray2[4] = (-2496.2);
      doubleArray2[5] = (-878.735);
      doubleArray2[6] = (-878.735);
      doubleArray2[7] = (-2496.2);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-878.735);
      doubleArray3[1] = (-878.735);
      doubleArray3[2] = (-2496.2);
      doubleArray3[4] = (-2496.2);
      doubleArray3[5] = 1362.2642222842;
      doubleArray3[6] = (-2496.2);
      doubleArray3[7] = (-2496.2);
      doubleArray3[8] = (-878.735);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[1] = (-878.735);
      doubleArray0[3] = doubleArray4;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.norm();
      cRSMatrix0.equals((Object) doubleArray4);
      assertEquals((-2496.2), cRSMatrix0.min(), 0.01);
      
      cRSMatrix0.setAll(0.0);
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1739, 1739);
      // Undeclared exception!
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1405);
      int[] intArray0 = new int[6];
      intArray0[0] = 32;
      intArray0[1] = 16;
      intArray0[2] = 1405;
      intArray0[3] = 1405;
      intArray0[4] = (-351);
      intArray0[5] = 1405;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1405' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 2429;
      int int1 = 1000;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2429, 296, 1000);
      int[] intArray0 = new int[3];
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)296, 2.0, (-1.0), (-1.0), (double)1000).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.updateRow(296, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)32;
      byteArray0[0] = (byte)32;
      byte byte1 = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)28;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 2429;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2429, 296, 1000);
      int[] intArray0 = new int[3];
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(296, vectorFunction0);
      int int1 = 2248;
      intArray0[0] = 2248;
      intArray0[1] = 1000;
      intArray0[2] = 8;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2248' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = new CRSMatrix(4, 4, 4);
      int int1 = 534;
      cRSMatrix0.setAll(534);
      cRSMatrix0.removeLastColumn();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow(534);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 534
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 4.9E-324;
      doubleArray1[1] = (-45.87158596615976);
      doubleArray1[2] = (-1927.23382);
      doubleArray1[3] = 2282.2;
      doubleArray1[4] = (-2134.8936806215);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-2134.8936806215);
      doubleArray2[1] = (-45.87158596615976);
      doubleArray2[2] = (-1927.23382);
      doubleArray2[3] = 2282.2;
      doubleArray2[4] = 4.9E-324;
      doubleArray2[5] = 2282.2;
      doubleArray2[6] = 4.9E-324;
      doubleArray2[7] = 2282.2;
      doubleArray2[8] = (-45.87158596615976);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 4.9E-324;
      doubleArray3[1] = 2282.2;
      doubleArray3[2] = 2282.2;
      doubleArray3[3] = (-45.87158596615976);
      doubleArray3[4] = 4.9E-324;
      doubleArray3[5] = 4.9E-324;
      doubleArray3[6] = (-2134.8936806215);
      doubleArray3[7] = (-2134.8936806215);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-2958.2534339599315);
      doubleArray4[1] = (-45.87158596615976);
      doubleArray4[2] = 4.9E-324;
      doubleArray4[3] = (-45.87158596615976);
      doubleArray4[4] = (-2134.8936806215);
      doubleArray4[5] = (-1927.23382);
      doubleArray4[6] = (-45.87158596615976);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (-2134.8936806215);
      doubleArray5[1] = 2282.2;
      doubleArray5[2] = Double.NEGATIVE_INFINITY;
      doubleArray5[3] = 2282.2;
      doubleArray5[4] = (-45.87158596615976);
      doubleArray5[5] = (-2134.8936806215);
      doubleArray5[6] = (-2134.8936806215);
      doubleArray5[7] = (-2134.8936806215);
      doubleArray5[8] = 2346.4;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = (-45.87158596615976);
      doubleArray6[1] = 4.9E-324;
      doubleArray6[2] = (-1.0);
      doubleArray6[3] = (-2958.2534339599315);
      doubleArray6[4] = (-2958.2534339599315);
      doubleArray6[5] = (-2134.8936806215);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = 4.9E-324;
      doubleArray7[1] = (-2958.2534339599315);
      doubleArray7[2] = (-2134.8936806215);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = 553.018111794259;
      doubleArray8[1] = (-45.87158596615976);
      doubleArray8[2] = (-45.87158596615976);
      doubleArray8[3] = (-2958.2534339599315);
      doubleArray8[4] = 2282.2;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[8];
      doubleArray9[0] = 2346.4;
      doubleArray9[1] = (-1927.23382);
      doubleArray9[2] = 2282.2;
      doubleArray9[3] = Double.NEGATIVE_INFINITY;
      doubleArray9[4] = (-1.0);
      doubleArray9[5] = (-1.0);
      doubleArray9[6] = 2916.0112461;
      doubleArray9[7] = (-1927.23382);
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 643.392820781564);
      // Undeclared exception!
      try { 
        cRSMatrix0.swapColumns(1, (-4084));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-4084' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(239, 239, 3384);
      double double0 = 4389.4892822222;
      cRSMatrix0.toColumnMajorSparseMatrix();
      // Undeclared exception!
      cRSMatrix0.setAll(4389.4892822222);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(17, 17);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumn((-1), vectorAccumulator0);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeRow((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..16
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(17, 2);
      cRSMatrix0.copyOfShape(2, 2);
      cRSMatrix0.iteratorOfNonZeroRows();
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow(3742);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3742
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 769;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(769, 769, 769);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 1632.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-309.73);
      doubleArray0[1] = (double) 0;
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(0, 0, doubleArray0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 409;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 409;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 409;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(409, 2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 523;
      Matrix matrix0 = cRSMatrix0.blankOfShape(523, 523);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 628;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(628, 628);
      cRSMatrix0.sliceBottomRight(628, 597);
      Matrix.constant(628, 628, 628);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.transformRow(628, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-2496.2);
      doubleArray1[1] = (-878.735);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-878.735);
      doubleArray2[1] = (-2496.2);
      doubleArray2[2] = (-2496.2);
      doubleArray2[3] = (-878.735);
      doubleArray2[4] = (-2496.2);
      doubleArray2[5] = (-878.735);
      doubleArray2[6] = (-878.735);
      doubleArray2[7] = (-2496.2);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-878.735);
      doubleArray3[1] = (-878.735);
      doubleArray3[2] = (-2496.2);
      doubleArray3[3] = (-878.735);
      doubleArray3[4] = (-2496.2);
      doubleArray3[5] = 1362.2642222842;
      doubleArray3[6] = (-2496.2);
      doubleArray3[7] = (-2496.2);
      doubleArray3[8] = (-878.735);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-2496.2);
      doubleArray4[1] = (-878.735);
      doubleArray0[3] = doubleArray4;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.equals((Object) doubleArray4);
      cRSMatrix0.setAll((-2496.2));
      assertEquals(4, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4590);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(8, vectorProcedure0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(4590, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 48;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(48);
      cRSMatrix0.nonZeroRowMajorIterator();
      int int1 = 4;
      cRSMatrix0.blankOfRows(48);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(4, vectorProcedure0);
      int int2 = (-989);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-989);
      doubleArray0[1] = (double) 4;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray((-989), 48, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -989x48
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      Matrix matrix0 = cRSMatrix0.rotate();
      assertEquals(1, matrix0.columns());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.block(matrix0, matrix0, cRSMatrix0, matrix0);
      cRSMatrix1.rowMajorIterator();
      assertEquals(2, cRSMatrix1.rows());
      assertEquals(2, cRSMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (-1742.28255047433), (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.fromCSV("");
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      // Undeclared exception!
      try { 
        cRSMatrix1.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(364, 13, 364);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(13, 13);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, sparseMatrix0, matrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1737, 1737);
      cRSMatrix0.multiply(2.0);
      cRSMatrix0.trace();
      cRSMatrix0.toColumnMajorSparseMatrix();
      SparseMatrix.zero(1737, 1737, 1737);
      int int0 = 1756;
      cRSMatrix0.multiplyByItsTranspose();
      Matrix.zero(6, 1756);
      cRSMatrix0.sliceTopLeft(2, 2);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1737;
      doubleArray0[1] = (double) 374;
      doubleArray0[2] = (double) 6;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(374, 6, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 37;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(37, 3, 0.5, (Random) mockRandom0);
      cRSMatrix0.getColumn(37);
      CRSMatrix.identity(37);
      int int1 = (-136);
      // Undeclared exception!
      try { 
        CRSMatrix.random((-136), (-2203), 13.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = (-576);
      int int1 = 985;
      long long0 = (-940L);
      MockRandom mockRandom0 = new MockRandom((-940L));
      // Undeclared exception!
      try { 
        CRSMatrix.random((-576), 985, 0.0, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2575, 2575);
      cRSMatrix0.max();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setMultiplier(2575);
      decimalFormat0.setParseBigDecimal(true);
      cRSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.columnMajorIterator();
      cRSMatrix0.iteratorOfNonZeroRows();
      cRSMatrix0.blankOfShape(418, 1);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.set(418, 418, 2575);
      cRSMatrix0.nonZeroAt(418, 418);
      cRSMatrix0.getColumn(Integer.MAX_VALUE);
      cRSMatrix0.min();
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 2575;
      doubleArray1[2] = (double) 418;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 418;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) 2575;
      doubleArray3[1] = (double) 418;
      doubleArray3[2] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 2575;
      doubleArray4[1] = (double) Integer.MAX_VALUE;
      doubleArray4[2] = (double) Integer.MAX_VALUE;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-3223.91332);
      doubleArray5[2] = (double) 2575;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (-3223.91332);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (double) 2575;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = (double) Integer.MAX_VALUE;
      doubleArray7[1] = (-3223.91332);
      doubleArray7[2] = 0.0;
      doubleArray7[3] = Double.POSITIVE_INFINITY;
      doubleArray7[4] = 539.0;
      doubleArray7[5] = (-3223.91332);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = Double.POSITIVE_INFINITY;
      doubleArray8[2] = (double) Integer.MAX_VALUE;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[8];
      doubleArray9[0] = 0.0;
      doubleArray9[1] = 1300.0897808598;
      doubleArray9[2] = 0.0;
      doubleArray9[3] = (double) 2575;
      doubleArray9[4] = 851.573265889171;
      doubleArray9[5] = (double) 1;
      doubleArray9[6] = 0.0;
      doubleArray9[7] = Double.POSITIVE_INFINITY;
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(460, 460);
      double double0 = cRSMatrix0.max();
      assertEquals(460.0, double0, 0.01);
      
      cRSMatrix0.nonZeroAt(32, 1820);
      assertEquals(0.002173913043478261, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 7;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(7, 7);
      SparseMatrix sparseMatrix0 = cRSMatrix0.toSparseMatrix();
      // Undeclared exception!
      try { 
        sparseMatrix0.minInColumn(7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 1638;
      double double0 = (-644.4833569873);
      long long0 = 1L;
      MockRandom mockRandom0 = new MockRandom(1L);
      // Undeclared exception!
      try { 
        CRSMatrix.random(1638, 1638, (-644.4833569873), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 409;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 409;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 409;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 409;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(409, 2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (-2666.7943528863098);
      doubleArray1[2] = 2898.87152250946;
      doubleArray1[3] = 100.0;
      doubleArray1[4] = 2618.5187178;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      double double0 = cRSMatrix0.max();
      assertEquals(2898.87152250946, double0, 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 537;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(537);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      cRSMatrix0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(605);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '606' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 558;
      CRSMatrix cRSMatrix0 = new CRSMatrix(558, 558);
      cRSMatrix0.iteratorOfNonZeroRows();
      int int1 = 5;
      int int2 = 2435;
      int int3 = 522;
      Matrix.zero(2435, 522);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(5, vectorProcedure0);
      double double0 = (-2036.55308);
      MockRandom mockRandom0 = new MockRandom(558);
      mockRandom0.nextFloat();
      // Undeclared exception!
      try { 
        mockRandom0.longs((long) 2435, (long) 2435);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.manhattanNorm();
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertEquals(17, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 1550;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1550, Double.NEGATIVE_INFINITY);
      cRSMatrix0.min();
      int int1 = 557;
      cRSMatrix0.toRowVector();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(1550, 557);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1551
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 460;
      doubleArray0[1] = (double) 460;
      doubleArray0[2] = (double) 460;
      doubleArray0[3] = (double) 460;
      doubleArray0[4] = (double) 460;
      doubleArray0[5] = (double) 460;
      doubleArray0[6] = (double) 460;
      int[] intArray0 = new int[4];
      intArray0[0] = 460;
      intArray0[1] = 460;
      intArray0[2] = 460;
      intArray0[3] = 460;
      int[] intArray1 = new int[9];
      intArray1[0] = 1095;
      intArray1[1] = 460;
      intArray1[2] = (-136);
      intArray1[3] = 460;
      intArray1[4] = 460;
      intArray1[5] = 460;
      intArray1[6] = 460;
      intArray1[7] = 460;
      intArray1[8] = 460;
      CRSMatrix cRSMatrix0 = new CRSMatrix(460, 460, 460, doubleArray0, intArray0, intArray1);
      double double0 = cRSMatrix0.minInRow(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(536, 536);
      cRSMatrix0.eachNonZero((MatrixProcedure) null);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toString();
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(804);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 805
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 4148.08;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = (-2506.31);
      doubleArray1[3] = (-2405.6);
      doubleArray1[4] = 2869.0;
      doubleArray1[5] = (-1081.8964739492);
      doubleArray1[6] = (-2510.72);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertEquals(105, byteArray0.length);
      assertEquals(7, cRSMatrix0.columns());
      assertEquals((-2510.72), cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CRSMatrix.fromCSV("");
      int int0 = 496;
      int int1 = 398;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        mockRandom0.longs((long) 398, (long) 496, (-1062L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("No rows or columns selected.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)56;
      byte byte0 = (byte)42;
      byteArray0[8] = (byte)42;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 0;
      int int1 = 541;
      // Undeclared exception!
      try { 
        CRSMatrix.zero(0, 0, 541);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.set(5, 5, (-72.19661));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 785;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(785);
      // Undeclared exception!
      cRSMatrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 353;
      int int1 = (-3784);
      // Undeclared exception!
      try { 
        CRSMatrix.zero(353, (-3784));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 353x-3784
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 807;
      double double0 = 0.0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(807, 0.0);
      int int1 = 2516;
      MockRandom mockRandom0 = new MockRandom();
      int int2 = 0;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.transformColumn(0, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      Matrix matrix0 = cRSMatrix0.copyOfShape(0, 0);
      assertTrue(matrix0.equals((Object)cRSMatrix0));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 566;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(566, (-3208.194));
      cRSMatrix0.max();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow(2034);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2034
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 13;
      MockRandom mockRandom0 = new MockRandom(13);
      // Undeclared exception!
      try { 
        CRSMatrix.random(13, 13, (double) 13, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = (-4845);
      int int1 = 380;
      double[] doubleArray0 = new double[0];
      int[] intArray0 = null;
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix((-4845), 380, (-4845), doubleArray0, (int[]) null, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -4845x380
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1470L);
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric((-424), (double) (-424), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -424x-424
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = (-16);
      // Undeclared exception!
      try { 
        CRSMatrix.identity((-16));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = 43;
      CRSMatrix cRSMatrix0 = new CRSMatrix(43, 43);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '44' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[8];
      double double0 = 409.0;
      doubleArray1[0] = 409.0;
      double double1 = 1357.85542292;
      doubleArray1[1] = 1357.85542292;
      double double2 = 46.4580376463911;
      doubleArray1[2] = 46.4580376463911;
      double double3 = 409.0;
      doubleArray1[3] = 409.0;
      doubleArray1[4] = (-235.79518116);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-1049.8581582933443);
      double double4 = 260.0;
      doubleArray1[7] = 260.0;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      ooPlaceMatrixByItsTransposeMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0);
      cRSMatrix0.kroneckerProduct(matrix0);
      int int0 = 17;
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(17, 17, (MatrixFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 22;
      doubleArray0[1] = (double) 22;
      doubleArray0[2] = (double) 22;
      int[] intArray0 = new int[5];
      intArray0[0] = 22;
      intArray0[1] = 0;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 22;
      intArray0[4] = 1172;
      int[] intArray1 = new int[1];
      intArray1[0] = 1172;
      CRSMatrix cRSMatrix0 = new CRSMatrix(22, 22, 22, doubleArray0, intArray0, intArray1);
      SparseMatrix.diagonal(32, 364.80630461);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(5, 32, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int int0 = 548;
      double double0 = 2664.75487418;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(548, 2664.75487418);
      cRSMatrix0.toColumnVector();
      cRSMatrix0.min();
      cRSMatrix0.iteratorOfRow(548);
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 548;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(548.0, 548.0, (double)548, (-52.0), 2071.40978607255).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.transform(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = (-162);
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix((-162), (-162));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -162x-162
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
