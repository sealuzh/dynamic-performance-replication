/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 07:30:27 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int[] intArray0 = new int[2];
      intArray0[0] = 1332;
      intArray0[1] = 1332;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1332' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      cRSMatrix0.iterator();
      SparseMatrix.diagonal(190, 0.0);
      cRSMatrix0.blank();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      int[] intArray0 = new int[7];
      int int0 = 0;
      cRSMatrix0.getColumn((-1));
      intArray0[0] = 0;
      intArray0[1] = (-79);
      intArray0[2] = 1233;
      cRSMatrix0.infinityNorm();
      intArray0[3] = 0;
      intArray0[4] = 1259;
      intArray0[5] = (-779);
      intArray0[6] = (-3375);
      cRSMatrix0.select(intArray0, intArray0);
      int int1 = 8;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(int1, vectorProcedure0);
      cRSMatrix0.nonZeroIteratorOfRow(int0);
      int int2 = 1000;
      int int3 = (-1188);
      CRSMatrix.zero(int2, int3, intArray0[5]);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0);
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix.randomSymmetric(364, (double) 0, (Random) mockRandom0);
      cRSMatrix0.nonZeroAt(0, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      cRSMatrix0.norm();
      cRSMatrix0.add(3169.8126586530966);
      cRSMatrix0.setAll(626.443113);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 1273);
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 220;
      CRSMatrix cRSMatrix0 = new CRSMatrix(220, 1908);
      int int1 = 0;
      cRSMatrix0.toColumnVector();
      Matrix.diagonal(0, (-969.0003311));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(0, vectorProcedure0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2427, 2427);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(13, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-24);
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.copy();
      // Undeclared exception!
      try { 
        cRSMatrix0.set((-1825), (-1825), (-1825));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1825' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1289;
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      int int1 = 4341;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 4341, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1793;
      RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 230.62;
      doubleArray0[3] = (double) 1793;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1793;
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(1793, 0, doubleArray0);
      Matrix.zero(4341, 4341);
      cRSMatrix1.toSparseMatrix();
      cRSMatrix0.setAll(0.0);
      int int2 = 0;
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 3411.74;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-3619.1);
      doubleArray1[6] = 1084.4284663695191;
      doubleArray1[7] = (-886.854469);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertEquals(3411.74, cRSMatrix0.max(), 0.01);
      assertEquals(0.625, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1, 1);
      Matrix.zero(1, 1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertEquals(1, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 13;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(13, 13, (-431.3265), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      cRSMatrix0.sliceTopLeft(0, 0);
      cRSMatrix0.blankOfShape(0, 0);
      CRSMatrix.diagonal(0, 0.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt((-3440), (-3440), matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3440
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt(516);
      // Undeclared exception!
      try { 
        CRSMatrix.random(8, 8, (double) 8, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 132);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn(2, vectorProcedure0);
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(283, 283, 0);
      cRSMatrix0.multiplyByItsTranspose();
      cRSMatrix0.minInColumn(0);
      cRSMatrix0.copyOfShape(0, 13);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.multiply((double) 0);
      cRSMatrix0.eachInRow(13, vectorProcedure0);
      cRSMatrix0.iteratorOfNonZeroRows();
      cRSMatrix0.rowMajorIterator();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 1;
      int int1 = 6;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 6);
      Matrix matrix0 = cRSMatrix0.rotate();
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      cRSMatrix0.multiplyByItsTranspose();
      cRSMatrix0.eachNonZero((MatrixProcedure) null);
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("z^.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(194, 194);
      Matrix matrix0 = cRSMatrix0.copyOfShape(1, 34);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, matrix0, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 8;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(8, 8, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1731, 923, 1078);
      cRSMatrix0.rotate();
      cRSMatrix0.nonZeroIteratorOfColumn(765);
      int[] intArray0 = new int[3];
      intArray0[0] = 765;
      intArray0[1] = 1078;
      intArray0[2] = 1078;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1078' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1793;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 230.62;
      doubleArray0[3] = (double) 1793;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1793;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(1793, 0, doubleArray0);
      Matrix.zero(4341, 4341);
      cRSMatrix0.toSparseMatrix();
      SparseMatrix.zero(0, 1793);
      double[][] doubleArray1 = new double[4][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray1);
      CRSMatrix.zero(0, 404, 0);
      cRSMatrix1.maxInColumn(0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      intArray0[0] = 4341;
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1731, 923, 1078);
      cRSMatrix0.toRowVector();
      cRSMatrix0.nonZeroIteratorOfColumn(765);
      cRSMatrix0.columnMajorIterator();
      cRSMatrix0.power(923);
      cRSMatrix0.rowMajorIterator();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 4341, 0);
      int int0 = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1793;
      RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 230.62;
      doubleArray0[3] = (double) 1793;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1793;
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(1793, 0, doubleArray0);
      Matrix.zero(4341, 4341);
      cRSMatrix1.toSparseMatrix();
      cRSMatrix1.blankOfShape(6, 1793);
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(1793, 1.0);
      Matrix matrix0 = cRSMatrix2.blank();
      CRSMatrix.block(cRSMatrix0, matrix0, cRSMatrix1, matrix0);
      int int1 = 1032;
      cRSMatrix1.copyOfShape(int0, int1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-3491.28107217938);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = (-357.270633);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-3491.28107217938);
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = (-3491.28107217938);
      doubleArray2[3] = (-3491.28107217938);
      doubleArray2[4] = (-3491.28107217938);
      doubleArray2[5] = (-3491.28107217938);
      doubleArray2[6] = Double.NEGATIVE_INFINITY;
      doubleArray2[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      SparseMatrix.diagonal(2295, (-3376.0372785));
      int int0 = (-493);
      cRSMatrix0.nonZeroIteratorOfRow((-493));
      int int1 = 144;
      int int2 = 8;
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(int1, int0, int2);
      String string0 = "0z/'4X";
      CRSMatrix cRSMatrix2 = CRSMatrix.fromMatrixMarket(string0);
      cRSMatrix2.toRowVector();
      int int3 = (-1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.updateAt(int3, int3, matrixFunction0);
      CRSMatrix cRSMatrix3 = CRSMatrix.fromCSV(string0);
      int int4 = 8;
      Matrix matrix0 = cRSMatrix3.sliceTopLeft(int3, int4);
      CRSMatrix.block(cRSMatrix0, cRSMatrix3, cRSMatrix3, matrix0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 4341, 0);
      int int0 = 1793;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1793;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 230.62;
      doubleArray0[3] = (double) 1793;
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(4341, 2252, doubleArray0);
      int int1 = (-1689);
      int int2 = 135;
      Matrix.zero(int1, int2);
      SparseMatrix sparseMatrix0 = cRSMatrix1.toSparseMatrix();
      int int3 = 6;
      int int4 = 899;
      cRSMatrix1.blankOfShape(int1, int4);
      double double0 = 1.0;
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(int0, double0);
      cRSMatrix0.blank();
      CRSMatrix.block(cRSMatrix1, rowMajorSparseMatrix0, sparseMatrix0, rowMajorSparseMatrix0);
      int int5 = 1032;
      cRSMatrix2.copyOfShape(int5, int3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(283, 283, 283);
      Matrix matrix0 = cRSMatrix0.multiplyByItsTranspose();
      int int0 = 765;
      int int1 = 1351;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformRow((-1), vectorFunction0);
      int[] intArray0 = new int[2];
      intArray0[0] = int1;
      intArray0[1] = int0;
      matrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      cRSMatrix1.select(intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow(379);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 379
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1078);
      int[] intArray0 = new int[9];
      intArray0[0] = 923;
      intArray0[1] = 923;
      intArray0[2] = 923;
      intArray0[3] = 1062;
      intArray0[4] = 923;
      intArray0[5] = 765;
      intArray0[6] = 1062;
      intArray0[7] = 765;
      intArray0[8] = 923;
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 2163;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2163, 2163);
      cRSMatrix0.nonZeroIterator();
      cRSMatrix0.determinant();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateAt(int0, int0, matrixFunction0);
      int int1 = 10;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(int1, int0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      int int2 = 2729;
      cRSMatrix1.getColumn(int2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2981);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(1829, 1829, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      cRSMatrix0.rotate();
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      CRSMatrix cRSMatrix1 = null;
      try {
        cRSMatrix1 = new CRSMatrix(1, 1, (-2836));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -2836.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-3076.305145404);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 1;
      cRSMatrix0.multiplyByItsTranspose();
      intArray0[2] = (-1612);
      intArray0[3] = 978;
      intArray0[4] = 2100;
      intArray0[5] = (-1);
      intArray0[6] = 966;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.minInColumn(8);
      cRSMatrix0.max();
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-4250), (-4250), (-4157));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -4250x-4250
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1060.44);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-1060.44);
      doubleArray2[1] = (-1060.44);
      doubleArray2[2] = (-1060.44);
      doubleArray2[3] = (-1060.44);
      doubleArray2[4] = (-1060.44);
      doubleArray2[5] = (-1060.44);
      doubleArray2[6] = (-1060.44);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-1060.44);
      doubleArray3[1] = (-1060.44);
      doubleArray3[2] = (-1060.44);
      doubleArray3[3] = (-1060.44);
      doubleArray3[4] = (-1060.44);
      doubleArray3[5] = (-1060.44);
      doubleArray3[6] = (-1060.44);
      doubleArray3[7] = (-1060.44);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 178.444;
      doubleArray4[1] = (-1060.44);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 178.444;
      doubleArray5[1] = (-1060.44);
      doubleArray5[2] = (-1969.651080099043);
      doubleArray0[4] = doubleArray5;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      double double0 = cRSMatrix0.max();
      assertEquals((-1060.44), cRSMatrix0.min(), 0.01);
      assertEquals(5, cRSMatrix0.cardinality());
      assertEquals(178.444, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      double double0 = cRSMatrix0.max();
      assertEquals(1.0, double0, 0.01);
      
      cRSMatrix0.iteratorOfRow(1);
      assertEquals(1, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(0, 100.0);
      cRSMatrix1.setAll(178.444);
      cRSMatrix0.getColumn(2771);
      cRSMatrix1.toBinary();
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0, cRSMatrix1.cardinality());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal((byte)32, 2219.54331813);
      cRSMatrix0.setAll((byte)32);
      cRSMatrix0.getColumn(2771);
      cRSMatrix0.toBinary();
      int int0 = (-3127);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow((-3127));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3127
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1);
      cRSMatrix0.setAll(2774.571);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(2774.571, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2, 0.0);
      cRSMatrix0.multiply((double) 2622);
      cRSMatrix0.copyOfShape(2622, 1780);
      cRSMatrix0.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal((byte)32, 2219.54331813);
      cRSMatrix0.setAll((byte)32);
      cRSMatrix0.getColumn(2771);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      org.evosuite.runtime.Random.setNextRandom(140);
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 9;
      int int1 = 2146762935;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(9, 2146762935);
      cRSMatrix0.getColumn(2146762935);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 18x-1441426
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 143;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(143);
      double double0 = sparseMatrix0.determinant();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      ((CRSMatrix) sparseMatrix0).updateAt(int0, int0, matrixFunction0);
      CRSMatrix.diagonal(int0, double0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      ((CRSMatrix) sparseMatrix0).each(matrixProcedure0);
      int int1 = 2729;
      int int2 = 265;
      int int3 = (-1109);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int1;
      double double1 = (-1.0);
      doubleArray0[2] = double1;
      double double2 = 975.6458509;
      doubleArray0[3] = double2;
      int[] intArray0 = new int[8];
      intArray0[0] = int2;
      intArray0[1] = int2;
      intArray0[2] = int0;
      int int4 = 252;
      intArray0[3] = int4;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int3;
      intArray0[7] = int3;
      int[] intArray1 = new int[0];
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int2, int3, doubleArray0, intArray0, intArray1);
      cRSMatrix0.getColumn(int1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(963);
      int int0 = 2;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(2, 114, matrixFunction0);
      CRSMatrix.diagonal(2, (-571.6389427997722));
      cRSMatrix0.getColumn(109);
      cRSMatrix0.power(2481);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(int0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(6, (-0.837903330420152));
      cRSMatrix0.nonZeroRowMajorIterator();
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn((-669));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals((-0.837903330420152), cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.nonZeroRowMajorIterator();
      Matrix matrix0 = cRSMatrix0.copyOfColumns(2);
      // Undeclared exception!
      try { 
        SparseMatrix.block(matrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal((byte)32, 2219.54331813);
      cRSMatrix0.setAll((byte)32);
      cRSMatrix0.getColumn(2771);
      cRSMatrix0.rowMajorIterator();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      Matrix matrix0 = cRSMatrix0.multiplyByItsTranspose();
      matrix0.insert((Matrix) cRSMatrix0, 4, 4, 4, 4);
      MatrixProcedure matrixProcedure0 = null;
      cRSMatrix0.eachNonZero((MatrixProcedure) null);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(283, 283, 283);
      cRSMatrix0.multiplyByItsTranspose();
      cRSMatrix0.minInColumn(0);
      cRSMatrix0.copyOfShape(283, 13);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.multiply((double) 0);
      cRSMatrix0.eachInRow(13, vectorProcedure0);
      cRSMatrix0.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(28, 106, 28);
      cRSMatrix0.setAll(106);
      Matrix matrix0 = cRSMatrix0.copyOfColumns(28);
      CRSMatrix.block(matrix0, cRSMatrix0, cRSMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.nonZeroRowMajorIterator();
      CRSMatrix cRSMatrix1 = new CRSMatrix(16, 136, 136);
      cRSMatrix1.setAll(136);
      cRSMatrix1.copyOfColumns(16);
      SparseMatrix.zero(136, 16);
      // Undeclared exception!
      try { 
        cRSMatrix1.maxInRow((-794));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -794
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(32, 32);
      double double0 = cRSMatrix0.maxInRow(2);
      assertEquals(32, cRSMatrix0.columns());
      assertEquals(0.0, double0, 0.01);
      assertEquals(32, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(140);
      ((CRSMatrix) sparseMatrix0).maxInRow(8);
      sparseMatrix0.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2738, 2738, 1);
      cRSMatrix0.iteratorOfNonZeroRows();
      MockRandom mockRandom0 = new MockRandom(2738);
      CRSMatrix cRSMatrix1 = CRSMatrix.random(1, 1, (double) 1, (Random) mockRandom0);
      assertEquals(1, cRSMatrix1.cardinality());
      assertEquals(1, cRSMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 1332;
      MockRandom mockRandom0 = new MockRandom(1332);
      MockRandom mockRandom1 = new MockRandom();
      SparseMatrix.random(1332, 1332, (double) 0L, (Random) mockRandom1);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.nonZeroAt(1332, 1332);
      cRSMatrix0.iteratorOfNonZeroRows();
      cRSMatrix0.minInColumn(int0);
      int int1 = 142;
      cRSMatrix0.minInRow(int1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      double double0 = cRSMatrix0.min();
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.nonZeroRowMajorIterator();
      CRSMatrix cRSMatrix1 = new CRSMatrix(28, 136, 136);
      cRSMatrix1.setAll(136);
      cRSMatrix1.copyOfColumns(28);
      SparseMatrix.zero(136, 28);
      cRSMatrix1.min();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(143, 143);
      cRSMatrix0.maxInRow(2);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '144' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(283, 283, 283);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.multiplyByItsTranspose();
      int int0 = 0;
      int int1 = (-551);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix1.update(matrixFunction0);
      cRSMatrix1.minInColumn(int1);
      int int2 = 8;
      int int3 = 2145505181;
      cRSMatrix1.copyOfShape(int2, int3);
      double double0 = 1300.3;
      cRSMatrix0.multiply(double0);
      VectorProcedure vectorProcedure0 = null;
      cRSMatrix1.eachInRow(int0, vectorProcedure0);
      cRSMatrix1.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      assertEquals(1, cRSMatrix0.rows());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 143;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(143);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      sparseMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      sparseMatrix0.nonZeroRowMajorIterator();
      Matrix matrix0 = sparseMatrix0.copyOfColumns(int0);
      SparseMatrix.block(sparseMatrix0, sparseMatrix0, matrix0, sparseMatrix0);
      int int1 = 224;
      ((CRSMatrix) sparseMatrix0).maxInRow(int1);
      int int2 = 111;
      int int3 = 3754;
      CRSMatrix.zero(int2, int1, int3);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.nonZeroRowMajorIterator();
      int int0 = 1;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(1, 5);
      // Undeclared exception!
      try { 
        SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix1.set(1, 1, (-52.0));
      assertEquals(0.25, cRSMatrix1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(283, 283, 283);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.multiplyByItsTranspose();
      int int0 = (-551);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1287.96501963), (double)(-551), (-1287.96501963), (-1287.96501963), (double)283).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix1.update(matrixFunction0);
      cRSMatrix1.minInColumn(int0);
      int int1 = 8;
      int int2 = 2145505181;
      cRSMatrix1.copyOfShape(int1, int2);
      int int3 = 2355;
      cRSMatrix0.norm();
      cRSMatrix0.set(int3, int1, int2);
      int int4 = 1061;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.foldNonZeroInColumn(int1, vectorAccumulator0);
      cRSMatrix0.getColumn(int4);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2147453020);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = new CRSMatrix(28, 136, 136);
      cRSMatrix0.setAll(136);
      cRSMatrix0.copyOfColumns(28);
      SparseMatrix.zero(136, 28);
      cRSMatrix0.min();
      CRSMatrix.zero(28, 136);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(1, 1, matrixFunction0);
      CRSMatrix.from2DArray((double[][]) null);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(143);
      ((CRSMatrix) sparseMatrix0).minInRow(2);
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 143;
      intArray0[4] = 143;
      intArray0[5] = 2;
      intArray0[6] = 13;
      intArray0[7] = 2;
      ((CRSMatrix) sparseMatrix0).select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(140, 140);
      double double0 = cRSMatrix0.minInRow(8);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(131);
      sparseMatrix0.setRow(98, 23.284160036619);
      ((CRSMatrix) sparseMatrix0).maxInRow(131);
      CRSMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 1);
      cRSMatrix0.rotate();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(0, vectorFunction0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(143);
      ((CRSMatrix) sparseMatrix0).maxInRow(2);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      sparseMatrix0.updateRow(2, vectorFunction0);
      CRSMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
      ((CRSMatrix) sparseMatrix0).min();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SparseMatrix.identity(143);
      int int0 = 8;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(137);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRow(96, vectorAccumulator0);
      cRSMatrix0.shuffle();
      cRSMatrix0.transpose();
      cRSMatrix0.minInRow(int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(140);
      int[] intArray0 = new int[0];
      ((CRSMatrix) sparseMatrix0).select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2004.761818682888);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-2004.761818682888);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) 143;
      doubleArray3[1] = (-2004.761818682888);
      doubleArray3[2] = (-2004.761818682888);
      doubleArray0[2] = doubleArray3;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.multiplyByItsTranspose();
      int int0 = (-551);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInColumn((-551));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-551' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 45.597466679;
      doubleArray1[1] = 272.0;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.transform(matrixFunction0);
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("cZU0$]MSW1LAf?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = 143;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(143);
      int int1 = 2;
      double double0 = ((CRSMatrix) sparseMatrix0).maxInRow(2);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3984.794836737, 1000.0, Double.POSITIVE_INFINITY, (-398.88621746827), (-3872.4432966627323)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      sparseMatrix0.updateRow(2, vectorFunction0);
      int int2 = 115;
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix.randomSymmetric(int2, (double) int0, (Random) mockRandom0);
      CRSMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[5];
      double double1 = 136.0;
      doubleArray1[0] = double1;
      doubleArray1[1] = (double) int1;
      doubleArray1[2] = double0;
      doubleArray1[3] = double0;
      doubleArray1[4] = (double) int0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = double1;
      doubleArray2[1] = double0;
      doubleArray2[2] = (double) int1;
      doubleArray2[3] = (double) int1;
      double double2 = 693.4666538486188;
      doubleArray2[4] = double2;
      doubleArray2[5] = double1;
      doubleArray2[6] = (double) int0;
      doubleArray2[7] = (double) int0;
      doubleArray2[8] = double1;
      doubleArray0[1] = doubleArray2;
      CRSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2004.761818682888);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-2004.761818682888);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) 143;
      doubleArray3[1] = (-2004.761818682888);
      doubleArray3[2] = (-2004.761818682888);
      doubleArray0[2] = doubleArray3;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.multiplyByItsTranspose();
      int int0 = (-551);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(666.2612100370244, (-2004.761818682888), 623.2302945139942).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInColumn((-551));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-551' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(69);
      ((CRSMatrix) sparseMatrix0).copyOfShape(66, 69);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      ((CRSMatrix) sparseMatrix0).eachInRow(66, vectorProcedure0);
      sparseMatrix0.nonZeroAt((-1), 66);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 110;
      doubleArray0[1] = (double) 110;
      int[] intArray0 = new int[6];
      intArray0[0] = 110;
      intArray0[1] = 3330;
      intArray0[2] = 110;
      intArray0[3] = 110;
      int int0 = 224;
      intArray0[4] = 224;
      intArray0[5] = 110;
      CRSMatrix cRSMatrix0 = new CRSMatrix(110, 110, 110, doubleArray0, intArray0, intArray0);
      int int1 = 110;
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.forEach(consumer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = new CRSMatrix(28, 106, 136);
      cRSMatrix0.setAll(136);
      cRSMatrix0.copyOfColumns(106);
      cRSMatrix0.minInRow(8);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.random(8, 136, 0.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(10, 136, 10);
      cRSMatrix0.rowMajorIterator();
      Matrix.constant(2, 9, 10);
      SparseMatrix.diagonal(1426, 1422.3);
      cRSMatrix0.setAll(136);
      cRSMatrix0.infinityNorm();
      cRSMatrix0.maxInRow(2);
      CRSMatrix.fromMatrixMarket("G:");
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 1);
      cRSMatrix0.rotate();
      cRSMatrix0.toMatrixMarket();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
