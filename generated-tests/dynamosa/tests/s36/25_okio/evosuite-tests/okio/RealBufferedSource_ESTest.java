/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 02:51:52 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealBufferedSource_ESTest extends RealBufferedSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.select(options0);
      realBufferedSource0.buffer.snapshot();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer1 = new Buffer();
      buffer0.writeAll(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully(buffer0, (-547L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -547
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource2.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Pipe pipe0 = new Pipe(4L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      try { 
        realBufferedSource0.readByteString(186L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      HashingSource hashingSource2 = HashingSource.md5(hashingSource1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource2);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSource0.readFully(buffer1, 0L);
      assertTrue(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer1, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Charset charset0 = null;
      inflaterSource0.timeout();
      inflater0.end();
      // Undeclared exception!
      try { 
        realBufferedSource0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.request(3355L);
      buffer0.writeByte(2126634292);
      Pipe pipe0 = new Pipe(3355L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      realBufferedSource0.readDecimalLong();
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Pipe pipe0 = new Pipe(2146L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(2146L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      ByteString byteString0 = ByteString.EMPTY;
      realBufferedSource0.indexOfElement(byteString0);
      byteArray0[1] = (byte)0;
      try { 
        realBufferedSource0.readUtf8LineStrict(1000000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=3 content=383632\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = buffer0.md5();
      HashingSource hashingSource0 = HashingSource.hmacSha1(realBufferedSource0, byteString1);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(source0);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource1.select(options0);
      // Undeclared exception!
      try { 
        byteString0.substring((-2146937213), (-1904));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-547L));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      try { 
        realBufferedSource0.readFully(buffer1, (long) (byte)34);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Charset.defaultCharset();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.closed = true;
      realBufferedSource0.readAll(buffer0);
      realBufferedSource0.timeout();
      // Undeclared exception!
      try { 
        realBufferedSource0.request(100000000000L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = 32L;
      Pipe pipe0 = new Pipe(32L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.inputStream();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      pipe0.sourceClosed = true;
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      byte[] byteArray0 = new byte[0];
      pipe_PipeSource0.close();
      realBufferedSource0.readFully(byteArray0);
      long long0 = (-836L);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.exhausted();
      try { 
        realBufferedSource0.require(55L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = (-3929L);
      realBufferedSource0.skip((-3929L));
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Inflater inflater0 = new Inflater();
      Pipe pipe0 = new Pipe(32L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8Line();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Options options0 = null;
      try { 
        realBufferedSource0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.readAll(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)34);
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8((-3140L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3140
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = buffer0.md5();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSink0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLongLe((-1009L));
      Charset.defaultCharset();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink1.writeString("a4w|&?", charset0);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(((RealBufferedSink) bufferedSink0).buffer);
      realBufferedSource3.rangeEquals((-1009L), byteString1);
      // Undeclared exception!
      try { 
        realBufferedSource2.indexOf((byte)109, (-732L), 32L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-732 toIndex=32
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict((-4648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -4648
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = new Buffer();
      realBufferedSource0.exhausted();
      try { 
        realBufferedSource0.require(55L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = buffer0.md5();
      HashingSource hashingSource0 = HashingSource.hmacSha1(realBufferedSource0, byteString0);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(source0);
      byte byte0 = (byte)5;
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)5, (-844L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-844 toIndex=9223372036854775807
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Pipe pipe0 = new Pipe(2159L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.read(buffer0, 1L);
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(646L);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      realBufferedSource0.readByteArray(2L);
      long long0 = realBufferedSource1.indexOf((byte) (-8));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)34);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.require((-1323L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1323
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeHexadecimalUnsignedLong(3355L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-120);
      realBufferedSource0.read(byteArray0);
      Charset.defaultCharset();
      Pipe pipe0 = new Pipe((byte)102);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(pipe_PipeSource0);
      Charset.defaultCharset();
      try { 
        realBufferedSource0.readString((long) (byte)13, (Charset) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      long long0 = realBufferedSource0.indexOf((byte)104);
      assertEquals((-1L), long0);
      
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals((-1), int0);
      
      realBufferedSource0.readByteString();
      boolean boolean0 = realBufferedSource1.rangeEquals((-1L), byteString0, (int) (byte)104, 2147221535);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer1, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      byte byte0 = (byte) (-24);
      byte byte1 = (byte)80;
      try { 
        realBufferedSource0.readUtf8();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1235L);
      Inflater inflater0 = new Inflater();
      inflater0.end();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      long long0 = realBufferedSource0.readAll(buffer0);
      assertEquals(3L, buffer0.size());
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8Line();
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long long0 = 1839L;
      Pipe pipe0 = new Pipe(1839L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      pipe0.sourceClosed = false;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-57);
      buffer0.write(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffff99
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = buffer0.md5();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Charset charset0 = Charset.defaultCharset();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSink0.writeLongLe((-1009L));
      Charset.defaultCharset();
      realBufferedSink0.writeString("", charset0);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource3.rangeEquals(32L, byteString1);
      realBufferedSource3.indexOf((byte)102, 32L, 32L);
      try { 
        realBufferedSource1.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-547L));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.request(2L);
      long long0 = 704L;
      try { 
        realBufferedSource0.require(704L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = realBufferedSource0.readAll(buffer0);
      assertEquals(0L, long0);
      
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-547L));
      realBufferedSource0.read(byteArray0);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(78);
      charset0.decode(byteBuffer0);
      realBufferedSource1.readString((long) 0, charset0);
      int int0 = realBufferedSource0.readInt();
      assertEquals(1717986918, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeHexadecimalUnsignedLong((-547L));
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      long long0 = (-671L);
      realBufferedSource1.buffer.writeLongLe((-671L));
      // Undeclared exception!
      try { 
        realBufferedSource1.readByteArray((-3313L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3313
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = 3355L;
      realBufferedSource0.request(3355L);
      int int0 = 240;
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      realBufferedSource0.buffer.snapshot();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Buffer buffer1 = new Buffer();
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully(realBufferedSource1.buffer, (-547L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -547
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      buffer0.readUnsafe();
      realBufferedSource1.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Charset.defaultCharset();
      realBufferedSink0.writeLong((-1));
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSink0.writeLongLe((-1L));
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeString("thread interrupted", charset0);
      realBufferedSource0.indexOf((byte)51, 2L, 32L);
      // Undeclared exception!
      try { 
        realBufferedSource1.read((byte[]) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Pipe pipe0 = new Pipe(2147483647L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = ByteString.encodeUtf8("k7I|3fmpl~dZ<LI2_?");
      ByteString byteString1 = ByteString.decodeBase64("");
      byteString0.compareTo(byteString1);
      realBufferedSource0.indexOfElement(byteString0, 507L);
      buffer0.sha512();
      try { 
        realBufferedSource0.require(1220L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.read(byteArray0);
      ByteString byteString0 = ByteString.of(byteArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource1.indexOfElement(byteString0, (-796L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)104);
      realBufferedSource0.read(byteArray0);
      try { 
        realBufferedSource1.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-547L));
      realBufferedSource0.read(byteArray0);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      realBufferedSource1.readByteArray((long) 0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1225L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      pipe_PipeSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer0, (-503L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -503
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Charset.defaultCharset();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Pipe pipe0 = new Pipe(2146L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      pipe_PipeSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.read(realBufferedSource0.buffer, 2146L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Pipe pipe0 = new Pipe(1544L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeShort(2324);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      pipe0.sinkClosed = false;
      realBufferedSource0.read(buffer1, 1544L);
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=2 content=0914\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Pipe pipe0 = new Pipe(2146L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(2146L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)35;
      byte byte0 = (byte)79;
      try { 
        realBufferedSource0.readUtf8LineStrict((long) (byte)36);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=3 content=383632\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSink0.writeLongLe((-1L));
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeString("thread interrupted", charset0);
      long long0 = realBufferedSource0.indexOf((byte)51, 2L, 32L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeHexadecimalUnsignedLong((-547L));
      byte[] byteArray0 = new byte[0];
      realBufferedSource0.read(byteArray0);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource1.readByteString();
      Charset.defaultCharset();
      realBufferedSource0.readUtf8Line();
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = buffer0.md5();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeLongLe((-1009L));
      Charset.defaultCharset();
      realBufferedSink0.writeString("", charset0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource2.rangeEquals(32L, byteString1);
      realBufferedSource2.indexOf((byte)102, 32L, 32L);
      try { 
        realBufferedSource1.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      ByteString byteString0 = ByteString.encodeUtf8("[text=");
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      hashingSource0.timeout();
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)57;
      realBufferedSource0.read(byteArray0);
      try { 
        realBufferedSource0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-547L));
      Buffer buffer2 = buffer1.writeByte((byte)39);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.skip((-1152921504606846976L));
      Buffer buffer3 = new Buffer();
      buffer3.writeHexadecimalUnsignedLong((-2445L));
      Charset.defaultCharset();
      HashingSource hashingSource0 = HashingSource.md5(buffer2);
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(hashingSource0, inflater0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(inflaterSource0);
      // Undeclared exception!
      try { 
        realBufferedSource1.readByteArray((-547L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -547
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.request(3355L);
      buffer0.writeByte(240);
      try { 
        realBufferedSource0.skip(3355L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(1235L);
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf(byteString1);
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer1, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      long long0 = 8192L;
      try { 
        realBufferedSource0.request(8192L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.request(3355L);
      buffer0.writeByte(240);
      Pipe pipe0 = new Pipe(709L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xf0
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.buffer();
      pipe_PipeSource0.read(realBufferedSource0.buffer, 0L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(pipe_PipeSource0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      realBufferedSource2.readByteString();
      Charset charset0 = Charset.defaultCharset();
      String string0 = realBufferedSource1.readString(0L, charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = 2146L;
      Pipe pipe0 = new Pipe(2146L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      pipe_PipeSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)70, (long) (byte)70, 2146L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.md5();
      Buffer buffer1 = realBufferedSource0.buffer.writeHexadecimalUnsignedLong((-1985L));
      Inflater inflater0 = new Inflater();
      inflater0.end();
      Buffer buffer2 = realBufferedSource0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      // Undeclared exception!
      try { 
        realBufferedSource0.readAll(buffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0, 3644L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      try { 
        realBufferedSource0.readUtf8(228L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.toAsciiUppercase();
      Charset charset0 = Charset.defaultCharset();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.writeString("", charset0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      long long0 = (-2796L);
      // Undeclared exception!
      try { 
        realBufferedSource1.rangeEquals((-2796L), (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeHexadecimalUnsignedLong((-547L));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)39;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource1.indexOf(byteString0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      realBufferedSource1.inputStream();
      realBufferedSource1.close();
      realBufferedSource1.toString();
      // Undeclared exception!
      try { 
        realBufferedSource1.indexOf(byteString0, (long) (byte)34);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      pipe_PipeSource0.read(realBufferedSource0.buffer, 0L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      ByteString byteString0 = realBufferedSource1.readByteString();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      try { 
        realBufferedSource0.readByteString(1743L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Pipe pipe0 = new Pipe(2146L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeHexadecimalUnsignedLong((-2539L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte byte0 = (byte)36;
      byte byte1 = (byte)0;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      try { 
        realBufferedSource1.readUtf8LineStrict((long) (byte)0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=66666666666666666666666666363135\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      buffer0.writeHexadecimalUnsignedLong((-547L));
      realBufferedSource0.read(byteArray0);
      realBufferedSource0.readUtf8CodePoint();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = (byte)60;
      // Undeclared exception!
      try { 
        realBufferedSource0.read((Buffer) null, 56L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.timeout();
      long long0 = 100000000000L;
      // Undeclared exception!
      try { 
        realBufferedSource0.request((-4648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -4648
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Pipe pipe0 = new Pipe(4L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-5), (long) (byte)70, 8L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=70 toIndex=8
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer.sha512();
      Buffer buffer1 = new Buffer();
      try { 
        realBufferedSource0.readFully(buffer1, 10L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.close();
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        realBufferedSource1.select(options0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Pipe pipe0 = new Pipe(1430L);
      Pipe pipe1 = new Pipe(1430L);
      Buffer buffer0 = pipe1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Charset.defaultCharset();
      realBufferedSink0.writeLong((-1));
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSink0.writeLongLe((-1L));
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeString("thread interrupted", charset0);
      realBufferedSource0.indexOf((byte)51, 2L, 32L);
      int int0 = realBufferedSource1.readIntLe();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Pipe pipe0 = new Pipe(2146L);
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)97;
      byte byte0 = (byte)31;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)65;
      try { 
        realBufferedSource0.read(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.writeHexadecimalUnsignedLong(1074L);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte) (-40);
      byteArray0[8] = (byte)38;
      realBufferedSource0.read(byteArray0);
      try { 
        realBufferedSource0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      ByteString byteString0 = hashingSource1.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      ByteString byteString1 = realBufferedSource0.readByteString();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource1);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString1;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-84);
      ByteString byteString2 = new ByteString(byteArray0);
      byteStringArray0[1] = byteString2;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString1;
      byteStringArray0[7] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource1.select(options0);
      realBufferedSource0.closed = true;
      // Undeclared exception!
      try { 
        realBufferedSource2.readUtf8CodePoint();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      byte[] byteArray0 = realBufferedSource1.readByteArray();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1235L);
      Inflater inflater0 = new Inflater();
      inflater0.end();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=3 content=346433\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      pipe_PipeSource0.read(realBufferedSource0.buffer, 0L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)52;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      realBufferedSource2.indexOf(byteString0);
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      pipe_PipeSource0.read(realBufferedSource0.buffer, 0L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.readByteString();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)68;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource2.indexOf(byteString0);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(buffer0);
      realBufferedSource3.inputStream();
      realBufferedSource3.close();
      Timeout timeout0 = realBufferedSource2.timeout();
      assertEquals(0L, timeout0.timeoutNanos());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      pipe_PipeSource0.read(realBufferedSource0.buffer, 0L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.readByteString();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      realBufferedSource2.timeout();
      realBufferedSource2.skip(0L);
      InputStream inputStream0 = realBufferedSource2.inputStream();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString[] byteStringArray0 = new ByteString[1];
      ByteString.decodeBase64("y*9V!");
      byteStringArray0[0] = null;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong((-547L));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf(byteString0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement(byteString0, 3355L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      buffer0.writeHexadecimalUnsignedLong((-547L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.read(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      try { 
        realBufferedSource0.readString(9223372036854775807L, charset0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer1, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Charset charset0 = null;
      inflaterSource0.timeout();
      inflater0.end();
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8Line();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Inflater has been closed
         //
         verifyException("java.util.zip.Inflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort((-2146751966));
      buffer0.sha256();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByte();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      pipe_PipeSource0.read(realBufferedSource0.buffer, 0L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      ByteString byteString0 = realBufferedSource1.readByteString();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      // Undeclared exception!
      try { 
        realBufferedSource2.read(buffer0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.read(buffer0, 9223372036854775807L);
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString0 = ByteString.encodeUtf8("k7I|3fmpl~dZ<LI2_?");
      long long0 = (-428L);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement(byteString0, (-428L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.writeShortLe(44);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte) (-90);
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSource0.indexOf(byteString0);
      realBufferedSource0.inputStream();
      realBufferedSource0.close();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      GzipSource gzipSource0 = new GzipSource(pipe_PipeSource0);
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = 3506L;
      Pipe pipe0 = new Pipe(3506L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      pipe_PipeSource0.close();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      pipe_PipeSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource1.indexOf((byte)70, 9223372036854775807L, (-3864L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=9223372036854775807 toIndex=-3864
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.closed = true;
      realBufferedSource0.readAll(buffer0);
      realBufferedSource0.timeout();
      long long0 = 100000000000L;
      // Undeclared exception!
      try { 
        realBufferedSource0.request(100000000000L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSource0.request(3717L);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.writeByte(50);
      realBufferedSource0.skip((-1152921504606846976L));
      ByteString.of(byteArray0);
      Charset.defaultCharset();
      Buffer buffer2 = realBufferedSource0.buffer();
      assertFalse(buffer2.exhausted());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      realBufferedSource0.read(byteArray0);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0.buffer);
      ByteString byteString0 = ByteString.decodeBase64("69o");
      realBufferedSource1.rangeEquals((-490L), byteString0);
      try { 
        realBufferedSource0.readShortLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      long long0 = 100000000000000000L;
      try { 
        realBufferedSource0.indexOfElement(byteString0, 100000000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.buffer();
      pipe_PipeSource0.read(realBufferedSource0.buffer, 0L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.readByteString();
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-90);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-90);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource2.readUtf8();
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource2);
      long long0 = realBufferedSource0.indexOf((byte) (-90), (long) (byte)84);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.buffer();
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1235L);
      byte[] byteArray0 = new byte[17];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.read(byteArray0);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      realBufferedSource1.read(buffer0, 1235L);
      try { 
        realBufferedSource1.readByteArray((long) 3);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.writeShortLe(44);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte)40;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource1.indexOf(byteString0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = realBufferedSource0.select(options0);
      assertEquals((-1), int0);
      
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      long long0 = realBufferedSource0.readAll(realBufferedSource2.buffer);
      assertEquals(0L, long0);
      
      ByteString byteString0 = realBufferedSource1.readByteString();
      boolean boolean0 = realBufferedSource0.rangeEquals((-1398L), byteString0, (-31), (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      buffer0.writeHexadecimalUnsignedLong((-547L));
      realBufferedSource0.read(byteArray0);
      realBufferedSource0.read(byteArray0);
      realBufferedSource0.readUtf8CodePoint();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource2.readUtf8();
      try { 
        realBufferedSource2.readShortLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeByte(240);
      Pipe pipe0 = new Pipe(709L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xf0
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeHexadecimalUnsignedLong((-547L));
      byte[] byteArray0 = new byte[0];
      realBufferedSource0.read(byteArray0);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      
      realBufferedSource1.readByteString();
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource1.readString((long) 0, charset0);
      long long0 = realBufferedSource0.readHexadecimalUnsignedLong();
      assertEquals((-547L), long0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Pipe pipe0 = new Pipe(2147483647L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = ByteString.encodeUtf8("k7I|3fmpl~dZ<LI2_?");
      ByteString byteString1 = ByteString.decodeBase64("");
      byteString0.compareTo(byteString1);
      realBufferedSource0.indexOfElement(byteString0, 507L);
      byte byte0 = (byte)122;
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)122, (long) 1, (-2394L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=1 toIndex=-2394
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.request(3355L);
      Buffer buffer1 = buffer0.writeByte(240);
      realBufferedSource0.readByteString();
      Charset charset0 = Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      // Undeclared exception!
      try { 
        realBufferedSource2.readString((-1128L), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1128
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)95;
      ByteString byteString0 = ByteString.EMPTY;
      realBufferedSource0.indexOfElement(byteString0, 100000000000L);
      Charset charset0 = Charset.defaultCharset();
      String string0 = realBufferedSource0.readString(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.request(3355L);
      realBufferedSource0.buffer.writeByte(97);
      try { 
        realBufferedSource0.skip(3355L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer1, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      inflater0.end();
      // Undeclared exception!
      try { 
        realBufferedSource0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      buffer0.sha512();
      // Undeclared exception!
      try { 
        realBufferedSource0.require((-2057L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2057
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-37), (-591L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-591 toIndex=9223372036854775807
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8Line();
      try { 
        realBufferedSource0.readShortLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer1 = realBufferedSource1.buffer();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource1.readByteString();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource1);
      RealBufferedSource realBufferedSource4 = new RealBufferedSource(buffer0);
      realBufferedSource3.rangeEquals(0L, byteString0);
      // Undeclared exception!
      try { 
        realBufferedSource1.indexOf((byte)0, (-1571L), 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-1571 toIndex=1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      ByteString byteString0 = realBufferedSource1.readByteString();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource3.rangeEquals(1234L, byteString0);
      // Undeclared exception!
      try { 
        realBufferedSource2.indexOf((byte)120, 0L, (-1571L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=0 toIndex=-1571
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.closed = true;
      realBufferedSource0.readAll(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSource0.timeout();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) realBufferedSource0, inflater0);
      inflaterSource0.timeout();
      inflater0.end();
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8Line();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      ByteString byteString1 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      // Undeclared exception!
      try { 
        realBufferedSource2.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      pipe_PipeSource0.read(realBufferedSource0.buffer, 0L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      ByteString byteString0 = realBufferedSource1.readByteString();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource0);
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource3.select(options0);
      // Undeclared exception!
      try { 
        byteString0.substring((-2146937213), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      ByteString byteString0 = ByteString.encodeUtf8("[text=");
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      hashingSource0.timeout();
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)16;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource1.readAll((Sink) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.request(100000000L);
      long long0 = realBufferedSource0.indexOf((byte)4, 0L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong((-547L));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf(byteString0);
      realBufferedSource0.readFully(byteArray0);
      realBufferedSource0.readShortLe();
      short short0 = realBufferedSource0.readShort();
      assertEquals((short)26214, short0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      try { 
        realBufferedSource0.indexOf((byte)33);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeHexadecimalUnsignedLong((-547L));
      long long0 = realBufferedSource0.indexOf((byte)39);
      assertTrue(buffer0.exhausted());
      
      realBufferedSource0.readUtf8CodePoint();
      ByteString byteString0 = realBufferedSource0.readByteString();
      long long1 = realBufferedSource0.indexOfElement(byteString0);
      assertTrue(long1 == long0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.buffer();
      pipe_PipeSource0.read(realBufferedSource0.buffer, 0L);
      Buffer buffer0 = realBufferedSource0.buffer.writeHexadecimalUnsignedLong((-896L));
      realBufferedSource0.indexOf((byte) (-39));
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource1.readUtf8CodePoint();
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer1);
      realBufferedSource0.readByteString();
      try { 
        realBufferedSource2.readShortLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.toString();
      long long0 = 1438L;
      // Undeclared exception!
      try { 
        Charset.forName("+w5zA$?j8<j%");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // +w5zA$?j8<j%
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeHexadecimalUnsignedLong((-547L));
      realBufferedSource0.indexOf((byte)39);
      realBufferedSource0.readUtf8CodePoint();
      realBufferedSource0.readByteString();
      try { 
        realBufferedSource0.readShortLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      pipe_PipeSource0.read(realBufferedSource0.buffer, 0L);
      ByteString byteString0 = realBufferedSource0.readByteString();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      realBufferedSource1.inputStream();
      realBufferedSource1.readUtf8();
      // Undeclared exception!
      try { 
        realBufferedSource1.readByteString((-3864L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3864
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8();
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.close();
      // Undeclared exception!
      try { 
        realBufferedSource1.readByteArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1235L);
      buffer1.writeShort(1009);
      Inflater inflater0 = new Inflater();
      inflater0.end();
      inflater0.end();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readAll(buffer0);
      try { 
        realBufferedSource0.readUtf8LineStrict(5L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=5 content=34643303f1\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.md5();
      realBufferedSource0.skip((-562L));
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      GzipSource gzipSource0 = new GzipSource(pipe_PipeSource0);
      pipe0.sinkClosed = true;
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.readUtf8();
      long long0 = realBufferedSource0.read(realBufferedSink0.buffer, 3L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      pipe_PipeSource0.read(buffer0, 1743L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource1.readByteString();
      Charset charset0 = Charset.defaultCharset();
      try { 
        realBufferedSource0.readString(1743L, charset0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Pipe pipe0 = new Pipe(2146L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      pipe_PipeSource0.close();
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer0, 2146L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      pipe_PipeSource0.read(realBufferedSource0.buffer, 0L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      ByteString byteString0 = realBufferedSource1.readByteString();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      buffer0.writeLongLe((-1727L));
      byteStringArray0[2] = byteString0;
      try { 
        realBufferedSource0.readByteArray(1743L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long long0 = 3506L;
      Pipe pipe0 = new Pipe(3506L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      pipe_PipeSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      realBufferedSource0.buffer.writeHexadecimalUnsignedLong((-1115L));
      realBufferedSource0.read(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Charset.defaultCharset();
      try { 
        realBufferedSource0.readString(48L, charset0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.md5();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      realBufferedSink0.writeLongLe((-128L));
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeString("HoI(\"\"*V", charset0);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(buffer1);
      realBufferedSource3.rangeEquals(728L, byteString0);
      // Undeclared exception!
      try { 
        realBufferedSource1.indexOf((byte)0, (-699L), (-1009L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-699 toIndex=-1009
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long long0 = 2146L;
      Pipe pipe0 = new Pipe(2146L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      pipe_PipeSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)70, (-3929L), (long) (byte)70);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-3929 toIndex=70
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeHexadecimalUnsignedLong((-547L));
      realBufferedSource0.readLongLe();
      Buffer buffer1 = new Buffer();
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully(buffer0, (-547L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -547
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Timeout timeout0 = realBufferedSource0.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[1];
      realBufferedSource0.read(byteArray0);
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Pipe pipe0 = new Pipe(2147483647L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = ByteString.encodeUtf8("k7I|3fmpl~dZ<LI2_?");
      ByteString byteString1 = ByteString.decodeBase64("");
      byteString0.compareTo(byteString1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer();
      try { 
        realBufferedSource0.readFully(buffer1, (long) 1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      HashingSource hashingSource2 = HashingSource.md5(hashingSource1);
      hashingSource2.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource2);
      Inflater inflater0 = new Inflater();
      inflater0.end();
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource0.readString(charset0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-124);
      ByteString byteString0 = new ByteString(byteArray0);
      long long0 = realBufferedSource0.indexOf(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      pipe_PipeSource0.read(realBufferedSource0.buffer, 0L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.readByteString();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)68;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource2.indexOf(byteString0);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(buffer0);
      realBufferedSource3.inputStream();
      realBufferedSource3.close();
      // Undeclared exception!
      try { 
        realBufferedSource2.readFully(buffer0, (long) (byte) (-90));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -90
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)34);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.close();
      realBufferedSource0.toString();
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSource0);
      ByteString byteString0 = hashingSource0.hash();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Pipe pipe0 = new Pipe(2147483647L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = ByteString.encodeUtf8("k7I|3fmpl~dZ<LI2_?");
      ByteString byteString1 = ByteString.decodeBase64("");
      byteString0.compareTo(byteString1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer;
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString1;
      ByteString.decodeBase64("k7I|3fmpl~dZ<LI2_?");
      byteStringArray0[6] = null;
      byteStringArray0[7] = byteString1;
      byteStringArray0[8] = byteString0;
      Options.of(byteStringArray0);
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      ByteString byteString2 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      HashingSource hashingSource2 = HashingSource.md5(hashingSource1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource2);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.writeShortLe((-808));
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSink0.writeLongLe((-1L));
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeString("thread interrupted", charset0);
      realBufferedSource1.inputStream();
      int int0 = realBufferedSource0.readInt();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.request(3355L);
      int int0 = 240;
      buffer0.writeByte(240);
      try { 
        realBufferedSource0.skip(3355L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.read(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readString((long) (-1), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong((-547L));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)34);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.close();
      realBufferedSource0.toString();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0, (long) (byte)34);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Pipe pipe0 = new Pipe(2146L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(2146L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readUtf8CodePoint();
      realBufferedSource0.readShortLe();
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      String string0 = realBufferedSource0.readUtf8();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1071L);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)34;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf(byteString0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      realBufferedSource0.inputStream();
      realBufferedSource1.close();
      realBufferedSource1.toString();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      ByteString byteString1 = ByteString.encodeUtf8("buffer([size=0])");
      byteString1.indexOf(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource2.indexOf(byteString1, 391L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Pipe pipe0 = new Pipe(678L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeShortLe((-2146587368));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-19);
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      try { 
        realBufferedSource2.indexOf(byteString0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1235L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      try { 
        realBufferedSource1.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=3 content=346433\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      Charset.defaultCharset();
      Buffer buffer1 = realBufferedSource0.buffer();
      assertNotSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.require(55L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      long long0 = 1743L;
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      pipe_PipeSource0.read(realBufferedSource0.buffer, 0L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      byte byte0 = (byte)70;
      realBufferedSource0.indexOf((byte)70, 0L, (long) (byte)70);
      try { 
        realBufferedSource1.readByteString((long) (byte)70);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = realBufferedSource0.indexOf((byte)45);
      assertEquals((-1L), long0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.close();
      String string0 = realBufferedSource1.toString();
      assertEquals("buffer(buffer([size=0]))", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      ByteString[] byteStringArray0 = new ByteString[13];
      byteStringArray0[0] = byteString0;
      try { 
        realBufferedSource0.readIntLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long long0 = 2146L;
      Pipe pipe0 = new Pipe(1000000000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      pipe_PipeSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)71, 2146L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.close();
      // Undeclared exception!
      try { 
        realBufferedSource1.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(100000000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)95;
      ByteString byteString0 = ByteString.of(byteArray0);
      long long0 = realBufferedSource0.indexOfElement(byteString0, 100000000000L);
      assertEquals((-1L), long0);
      
      boolean boolean0 = realBufferedSource0.rangeEquals(843L, byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      pipe_PipeSource0.read(realBufferedSource0.buffer, 0L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.readByteString(0L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)68;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource2.indexOf(byteString0);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(buffer0);
      realBufferedSource3.inputStream();
      realBufferedSource3.close();
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource3));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteArray();
      realBufferedSource0.closed = true;
      realBufferedSource0.readAll(buffer0);
      realBufferedSource0.timeout();
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      realBufferedSource0.read(byteArray0);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0.buffer);
      // Undeclared exception!
      try { 
        realBufferedSource1.request((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.buffer();
      pipe_PipeSource0.read(realBufferedSource0.buffer, 0L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.readByteString();
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)3;
      realBufferedSource0.read(byteArray0);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      Charset.defaultCharset();
      try { 
        realBufferedSource1.readString(4554L, charset0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-547L));
      realBufferedSource0.read(byteArray0);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource1.readString((long) 0, charset0);
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Pipe pipe0 = new Pipe(1743L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      ByteString byteString0 = new ByteString((byte[]) null);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)39);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource3.close();
      realBufferedSource2.toString();
      // Undeclared exception!
      try { 
        realBufferedSource3.indexOf(byteString0, (-1L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Pipe pipe0 = new Pipe(2146L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeHexadecimalUnsignedLong((-2539L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte byte0 = (byte)0;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      try { 
        realBufferedSource1.readUtf8LineStrict((long) (byte)0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=66666666666666666666666666363135\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8(10000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = buffer0.md5();
      HashingSource hashingSource0 = HashingSource.hmacSha1(realBufferedSource0, byteString1);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(source0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      // Undeclared exception!
      try { 
        byteString1.substring((-2146937213), 430);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }
}
