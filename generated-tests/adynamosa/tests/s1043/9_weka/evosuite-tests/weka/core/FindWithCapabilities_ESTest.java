/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 23:50:50 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.util.Collection;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.CheckOptionHandler;
import weka.core.ClassCache;
import weka.core.ClassDiscovery;
import weka.core.FindWithCapabilities;
import weka.core.Instances;
import weka.core.MinkowskiDistance;
import weka.core.SingleIndex;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      String[] stringArray0 = new String[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      capabilities1.m_MissingClassValuesTest = true;
      capabilities1.m_Test = true;
      capabilities1.toSource("weka/core/Capabilities.props");
      capabilities1.toSource("weka/core/Capabilities.props", 1158);
      findWithCapabilities0.setCapabilities(capabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_Matches = null;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      System.setCurrentTimeMillis(1158);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.setCapabilities(capabilities0);
      assertFalse(capabilities0.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      Vector<String> vector0 = new Vector<String>();
      hashtable0.replace(">P(@t^", vector0);
      findWithCapabilities0.m_Misses = null;
      ClassDiscovery.m_Cache = hashtable0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getCapabilities();
      Vector<CheckOptionHandler> vector1 = new Vector<CheckOptionHandler>();
      vector0.removeAll(vector1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom((-127));
      findWithCapabilities0.disable(capabilities_Capability0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.getMisses();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.find();
      findWithCapabilities0.getRevision();
      assertEquals("weka/core/Capabilities.props", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("\"-");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.m_Filename = "\"-";
      findWithCapabilities0.m_Superclass = "\"-";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.m_Capabilities = capabilities0;
      capabilities0.getOtherCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities.main(stringArray0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      capabilities0.setMinimumNumberInstances(0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.m_Filename = "\"-";
      findWithCapabilities0.m_Superclass = "\"-";
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector1 = findWithCapabilities0.m_Misses;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      findWithCapabilities0.m_Filename = "&#x";
      Vector<String> vector0 = new Vector<String>(set0);
      findWithCapabilities0.m_Misses = vector0;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.setCapabilities(capabilities1);
      Vector<String> vector1 = findWithCapabilities0.getMisses();
      assertEquals(0, vector1.capacity());
      
      Capabilities capabilities2 = findWithCapabilities0.getCapabilities();
      Capabilities capabilities3 = findWithCapabilities0.getNotCapabilities();
      assertNotSame(capabilities3, capabilities2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex("-not-relational-class");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      capabilities0.enableAllAttributes();
      capabilities0.getClassCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.find();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.setClassIndex(",ke{UR^h,GJ:ZeL,$");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      capabilities0.m_MinimumNumberInstances = (-954);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      Random.setNextRandom(5);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      assertEquals((-954), capabilities1.getMinimumNumberInstances());
      
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.setClassIndex(",ke{UR^h,GJ:ZeL,f");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      capabilities0.m_MinimumNumberInstances = (-954);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      Random.setNextRandom(5);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NO_CLASS;
      boolean boolean0 = findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Iv!xvTf";
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities2.disable(capabilities_Capability1);
      try { 
        findWithCapabilities2.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.enableAll();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities1.listOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\tAlso prints the classname that didn't match the criteria.";
      stringArray0[1] = "-binary-class";
      String string0 = "-not-missing-att-values";
      stringArray0[2] = "-not-missing-att-values";
      stringArray0[3] = "\tMust handle unary attributes.";
      stringArray0[4] = "4*{]S[Q5F-S^v?";
      stringArray0[5] = "# Dae: ";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      boolean boolean0 = findWithCapabilities0.isEnabledNot((Capabilities.Capability) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("?");
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.disableAll();
      capabilities0.setMinimumNumberInstances((-1544));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "?";
      SingleIndex singleIndex0 = new SingleIndex();
      singleIndex0.toString();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.handles((Capabilities.Capability) null);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities2.isEnabledNot(capabilities_Capability0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      findWithCapabilities1.m_Capabilities = capabilities0;
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("\"-");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.m_Filename = "\"-";
      findWithCapabilities0.m_Superclass = "\"-";
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("\"-");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities1.disableNot(capabilities_Capability1);
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.m_MinimumNumberInstances = (-72365114);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.getRevision();
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      assertFalse(capabilities1.equals((Object)capabilities0));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setFilename("uXA&4C;r");
      findWithCapabilities2.getCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "-numeric-class";
      stringArray0[3] = "uXA&4C;r";
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.enableAll();
      capabilities0.toString();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.getOptions();
      assertEquals("weka/core/Capabilities.props", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.enableAll();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.getCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.m_Superclass = "{dTH~r2H#HRqC";
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = ">P(@t^";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.setOptions(stringArray1);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      TestInstances.arrayToList(stringArray0);
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      findWithCapabilities0.setNotCapabilities(capabilities1);
      findWithCapabilities0.handles(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Packages = null;
      findWithCapabilities0.setFilename("-not-relational-class");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-not-relational-class";
      stringArray0[1] = "-not-relational-class";
      stringArray0[2] = "-not-relational-class";
      stringArray0[3] = "-not-relational-class";
      stringArray0[4] = "-not-relational-class";
      stringArray0[5] = "-not-relational-class";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      SingleIndex singleIndex0 = findWithCapabilities1.m_ClassIndex;
      Capabilities capabilities0 = new Capabilities(findWithCapabilities1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-missing-att-values");
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities1.disable(capabilities_Capability0);
      singleIndex0.toString();
      findWithCapabilities1.setNotCapabilities(capabilities1);
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.handles(capabilities_Capability1);
      findWithCapabilities1.setCapabilities(capabilities0);
      findWithCapabilities0.setFilename("not-relational-class");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.find();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "not-nominal-atts";
      stringArray0[1] = "not-date-class";
      stringArray0[2] = "No index set";
      stringArray0[3] = "not-relational-class";
      stringArray0[4] = "'7lxuq1#t),";
      stringArray0[5] = "No index set";
      stringArray0[6] = "-missing-att-values";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities1.getOptions();
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      assertFalse(capabilities0.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disableNot((Capabilities.Capability) null);
      findWithCapabilities1.enableNot(capabilities_Capability0);
      assertEquals("", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      findWithCapabilities0.getOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      findWithCapabilities0.setFilename("\tMust handle binary attributes.");
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        TestInstances.forCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setFilename(">P(@t^");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-string-class");
      findWithCapabilities1.getFilename();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-string-class";
      stringArray0[1] = "-string-class";
      stringArray0[2] = "-string-class";
      stringArray0[3] = ">P(@t^";
      stringArray0[4] = ">P(@t^";
      stringArray0[5] = ">P(@t^";
      stringArray0[6] = "-string-class";
      stringArray0[7] = ">P(@t^";
      stringArray0[8] = ">P(@t^";
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.getOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">P(@t^");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      SingleIndex singleIndex0 = new SingleIndex();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(5, stringArray0.length);
      
      findWithCapabilities1.getHandler();
      Capabilities capabilities1 = new Capabilities((CapabilitiesHandler) null);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setCapabilities(capabilities0);
      String[] stringArray1 = findWithCapabilities1.getOptions();
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5.0.1");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("-not-numeric-class");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-not-numeric-class";
      findWithCapabilities0.getFilename();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-unary-atts");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("-unary-atts");
      long long0 = 885L;
      System.setCurrentTimeMillis(885L);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getOptions();
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      capabilities1.getRevision();
      findWithCapabilities0.setCapabilities(capabilities1);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",|PC)lRqH[enbNzD?5");
      findWithCapabilities0.m_Capabilities = null;
      findWithCapabilities0.getMatches();
      String string0 = "P?g`kh\\LZ!z5t\"i";
      findWithCapabilities0.setFilename("P?g`khLZ!z5t\"i");
      findWithCapabilities0.getCapabilities();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      System.setCurrentTimeMillis((-4327L));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-1";
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.m_Packages = vector0;
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      String string1 = "http://en.wikipedia.org/wiki/Chebyshev_distance";
      stringArray0[5] = "http://en.wikipedia.org/wiki/Chebyshev_distance";
      stringArray0[6] = ",|PC)lRqH[enbNzD?5";
      stringArray0[7] = "P?g`khLZ!z5t\"i";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SingleIndex singleIndex0 = new SingleIndex();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-not-nominal-class");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("http://en.wikipedia.org/wiki/Chebyshev_distance");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-not-nominal-class";
      stringArray0[1] = "http://en.wikipedia.org/wiki/Chebyshev_distance";
      stringArray0[2] = "http://en.wikipedia.org/wiki/Chebyshev_distance";
      stringArray0[3] = "-not-nominal-class";
      stringArray0[4] = "http://en.wikipedia.org/wiki/Chebyshev_distance";
      stringArray0[5] = "http://en.wikipedia.org/wiki/Chebyshev_distance";
      stringArray0[6] = "-not-nominal-class";
      stringArray0[7] = "http://en.wikipedia.org/wiki/Chebyshev_distance";
      stringArray0[8] = "-not-nominal-class";
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_ClassIndex = null;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities1);
      String string0 = "+f,j";
      capabilities0.createMessage("+f,j");
      capabilities0.capabilities();
      capabilities0.getClassCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K<!}/%13:");
      findWithCapabilities0.disable(capabilities_Capability0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Resetting options...");
      findWithCapabilities0.getNotCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "+f,j";
      stringArray0[1] = "Resetting options...";
      stringArray0[2] = "-not-nominal-atts";
      stringArray0[3] = "Resetting options...";
      stringArray0[4] = "Resetting options...";
      stringArray0[5] = "weka/core/Capabilities.props";
      stringArray0[6] = "VM";
      stringArray0[7] = "K<!}/%13:";
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jph[YP~(G7q");
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      SingleIndex singleIndex0 = new SingleIndex();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities1.getOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "$Revision: 8034 $";
      findWithCapabilities0.listOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.getOtherCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability3);
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability4);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setOptions(stringArray0);
      FindWithCapabilities.main(stringArray1);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Matches = vector0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      findWithCapabilities1.setClassIndex("weka/core/Capabilities.props");
      capabilities0.m_InstancesTest = true;
      findWithCapabilities0.m_Capabilities = capabilities0;
      vector0.iterator();
      findWithCapabilities0.handles(capabilities_Capability1);
      findWithCapabilities0.getFilename();
      vector0.add("superclass");
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      System.setCurrentTimeMillis(0L);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setClassIndex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      findWithCapabilities0.m_Misses = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.getAttributeCapabilities();
      findWithCapabilities0.getCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      boolean boolean0 = findWithCapabilities0.isEnabled((Capabilities.Capability) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.enableAll();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.setClassIndex("\"-");
      findWithCapabilities0.setFilename("[OS;");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      capabilities0.enableAllAttributes();
      findWithCapabilities1.getCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.setFilename("[OS;");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities3.disable((Capabilities.Capability) null);
      findWithCapabilities3.disableNot(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities3.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.getOtherCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.handles(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability3);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getCapabilities();
      capabilities0.setMinimumNumberInstances(87);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      FindWithCapabilities.main((String[]) null);
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Superclass = ">P(@t^";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setOptions(stringArray1);
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Iv!xvTf";
      stringArray0[1] = "$(p%~k8?u";
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.enableNot((Capabilities.Capability) null);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      System.setCurrentTimeMillis(0L);
      String string0 = findWithCapabilities0.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{o+S`B9";
      stringArray0[1] = "-numeric-atts";
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "$Revision: 8034 $";
      findWithCapabilities0.listOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.getOtherCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability3);
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability4);
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      capabilities1.setMinimumNumberInstances(0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("-only-multiinstance");
      findWithCapabilities0.m_ClassIndex = null;
      findWithCapabilities0.getClassIndex();
      findWithCapabilities0.getNotCapabilities();
      assertEquals("-only-multiinstance", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getNotCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "-only-multiinstance";
      stringArray0[2] = "-string-atts";
      stringArray0[3] = "#@K7n6aslG<z7;";
      stringArray0[4] = "-only-multiinstance";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[5] = "weka/core/Capabilities.props";
      stringArray0[6] = "-string-atts";
      stringArray0[7] = "-only-multiinstance";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities3.disable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      try { 
        findWithCapabilities4.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Superclass = ">P(@t^";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|Y<RdCb=");
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      SingleIndex singleIndex0 = new SingleIndex();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.m_Misses;
      singleIndex0.setSingleIndex("weka/core/Capabilities.props");
      capabilities0.disableAllClasses();
      findWithCapabilities1.setCapabilities(capabilities0);
      findWithCapabilities1.setOptions(stringArray0);
      assertEquals(4, stringArray0.length);
      
      String string0 = findWithCapabilities1.getRevision();
      assertEquals("8034", string0);
      
      findWithCapabilities0.find();
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Iv!xvTf";
      stringArray0[1] = "$(p%~k8?u";
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability2);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      findWithCapabilities0.setClassIndex("\"-");
      findWithCapabilities0.setFilename("o8");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("4");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities3.enable(capabilities_Capability0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities2.setFilename("BaJfC");
      Capabilities capabilities0 = new Capabilities(findWithCapabilities5);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getRelationalClassFormat();
      Capabilities capabilities1 = findWithCapabilities1.getNotCapabilities();
      findWithCapabilities5.setNotCapabilities(capabilities1);
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      findWithCapabilities7.handles(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities9 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.disableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities10 = new FindWithCapabilities();
      findWithCapabilities3.getOptions();
      Vector<String> vector0 = findWithCapabilities7.getMisses();
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.setClassIndex("-1");
      findWithCapabilities0.setFilename("E1mX~P^af[^3e");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      boolean boolean0 = findWithCapabilities1.m_GenericPropertiesCreator;
      // Undeclared exception!
      try { 
        findWithCapabilities1.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      String string0 = findWithCapabilities0.m_Superclass;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)18;
      byteArray0[5] = (byte)18;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@;.g[Pm*N)peKoy";
      stringArray0[1] = "-not-date-atts";
      stringArray0[2] = "@;.g[Pm*N)peKoy";
      stringArray0[3] = "\tMust handle numeric attributes.";
      stringArray0[4] = "num-instances";
      stringArray0[5] = "num-instances";
      stringArray0[6] = "@;.g[Pm*N)peKoy";
      stringArray0[7] = "@;.g[Pm*N)peKoy";
      stringArray0[8] = "@;.g[Pm*N)peKoy";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities2.getOptions();
      String[] stringArray1 = new String[8];
      stringArray1[0] = "num-instances";
      stringArray1[1] = "\tMust handle numeric attributes.";
      stringArray1[2] = "@;.g[Pm*N)peKoy";
      stringArray1[3] = " ";
      stringArray1[4] = "@;.g[Pm*N)peKoy";
      stringArray1[5] = "-not-date-atts";
      stringArray1[6] = "-not-date-atts";
      stringArray1[7] = "\tMust handle numeric attributes.";
      try { 
        findWithCapabilities2.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities1.m_Capabilities = capabilities0;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-not-relational-class";
      stringArray0[1] = "u-5m";
      stringArray0[2] = "KR6@";
      stringArray0[3] = "}m|v>uTYAj<>h~.ur5D";
      stringArray0[4] = " ";
      stringArray0[5] = "num-instances";
      stringArray0[6] = "@;.g[Pm*N)peKoy";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.find();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "S";
      findWithCapabilities0.setClassIndex("h>j`>+\"");
      singleIndex0.m_IndexString = "S";
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Misses = vector0;
      vector0.add("S");
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      String[] stringArray0 = new String[4];
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      ClassDiscovery.m_Cache = hashtable0;
      stringArray0[0] = "'9FO_3";
      stringArray0[1] = ":TDVKNQH";
      stringArray0[2] = "-nominal-atts";
      stringArray0[3] = "kF";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "`{YF5p";
      stringArray0[1] = "$}";
      stringArray0[2] = "missing-att-values";
      stringArray0[3] = "]6s#3%=/rqJi";
      stringArray0[4] = "6";
      stringArray0[5] = "-not-missing-class-values";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "EAQ$,Q1b";
      stringArray0[1] = "Q7";
      stringArray0[2] = "";
      stringArray0[3] = "-not-date->lass";
      stringArray0[4] = "Q7";
      stringArray0[5] = "-only-multi-instance";
      stringArray0[6] = "P?WCWx/|eb+W";
      stringArray0[7] = "-not-string-class";
      stringArray0[8] = "A";
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setCapabilities(capabilities0);
      assertEquals(1, capabilities0.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      findWithCapabilities0.m_Filename = "{Ek 7(}|+[ :g(ARzf";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.m_Filename = "g\"pZoX3";
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
      
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.enable(capabilities_Capability1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Indices from stable sort (doubles): ";
      stringArray0[1] = "8034";
      stringArray0[2] = "g\"pZoX3";
      stringArray0[3] = "g\"pZoX3";
      stringArray0[4] = "8034";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setClassIndex(">a>y");
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.m_Misses = vector0;
      FindWithCapabilities.main((String[]) null);
      vector0.add("not-missing-att-values");
      Random.setNextRandom(2124);
      findWithCapabilities0.enableNot(capabilities_Capability1);
      vector0.addAll((Collection<? extends String>) findWithCapabilities0.m_Misses);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      Vector<MinkowskiDistance> vector1 = new Vector<MinkowskiDistance>();
      vector0.removeAll(vector1);
      findWithCapabilities0.getCapabilities();
      System.setCurrentTimeMillis(2124);
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      assertNotSame(capabilities1, capabilities0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "l8FT ^ln$=";
      String string0 = "f";
      stringArray0[1] = "f";
      String string1 = "Comparing with null object";
      stringArray0[2] = "Comparing with null object";
      String string2 = "-unary-atts";
      stringArray0[3] = "-unary-atts";
      String string3 = "only-multiinstance";
      stringArray0[4] = "only-multiinstance";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.setClassIndex("-not-date-class");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-not-date-class";
      stringArray0[1] = "-not-date-class";
      stringArray0[2] = "-not-date-class";
      stringArray0[3] = "-not-date-class";
      stringArray0[4] = "-not-date-class";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.setFilename("em+");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability2);
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Misses = vector0;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      findWithCapabilities0.setClassIndex("em+");
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getRevision();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.find();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex(" ");
      findWithCapabilities1.setFilename(">H");
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities1.getRevision();
      boolean boolean0 = findWithCapabilities1.isEnabledNot(capabilities_Capability0);
      assertEquals(">H", findWithCapabilities1.getFilename());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      capabilities0.enableAllClassDependencies();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      capabilities0.disableAllAttributeDependencies();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities capabilities2 = findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.setNotCapabilities(capabilities1);
      assertFalse(capabilities1.equals((Object)capabilities2));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("L-");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getMatches();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(12, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Superclass = ">P(@t^";
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("-only-multiinstance");
      findWithCapabilities0.setFilename("&\t%HN,W{");
      assertEquals("&\t%HN,W{", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      boolean boolean0 = findWithCapabilities0.handles(capabilities_Capability1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setFilename("-only-multiinstance");
      TestInstances testInstances0 = new TestInstances();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances2 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances2.m_Handler;
      Instances instances0 = testInstances1.generate("4EoV&'3J=zu?/");
      Capabilities.forInstances(instances0, false);
      capabilities0.enableAllClasses();
      Capabilities capabilities2 = capabilities0.getClassCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities2);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getOptions();
      assertEquals("-only-multiinstance", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-not-binary-class";
      stringArray0[1] = "woAKxpR4";
      stringArray0[2] = "Cannot handle missing class values!";
      stringArray0[3] = "f/U{AQ$BQPBZ)";
      stringArray0[4] = "woAKxpR4";
      try { 
        findWithCapabilities4.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "h";
      stringArray0[1] = "Num Instances:  ";
      stringArray0[2] = "-W";
      stringArray0[3] = "\n<p/>\n";
      stringArray0[4] = "not-unary-class";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.setClassIndex("-only-multiinstance");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8034";
      stringArray0[1] = "-only-multiinstance";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "\tSuppresses the '*' in the Javadoc.";
      stringArray0[4] = "Tkr@^^L)vol";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.enableAllClassDependencies();
      findWithCapabilities0.setCapabilities(capabilities0);
      String[] stringArray0 = new String[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[0] = "'#R%U*Z;Hnz";
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.setClassIndex("\tSuppresses the '*' in the Javadoc.");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      assertSame(capabilities1, capabilities0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = findWithCapabilities0.m_Filename;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getOptions();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities1);
      findWithCapabilities0.setCapabilities(capabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      TestInstances testInstances0 = new TestInstances();
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities2.disable(capabilities_Capability0);
      assertFalse(capabilities_Capability0.equals((Object)capabilities_Capability1));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities1.getOptions();
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      assertEquals(1, capabilities0.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      TestInstances testInstances0 = new TestInstances();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities2.getCapabilities();
      capabilities0.getAttributeCapabilities();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      assertFalse(findWithCapabilities1.equals((Object)findWithCapabilities2));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      long long0 = 0L;
      findWithCapabilities0.m_Filename = ")WrlIo+O";
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getCapabilities();
      capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.m_RelationalClassFormat;
      Instances instances1 = null;
      try {
        instances1 = new Instances((Instances) null, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.RELATIONAL_CLASS;
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.getClassCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities2.handles(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.enable(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-nominal-class";
      stringArray0[1] = "-not-unary-atts";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability0);
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)59;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      findWithCapabilities1.getCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities1.setClassIndex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex(")w");
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      int int0 = 87;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setFilename(",vL7Hs");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      FindWithCapabilities.main((String[]) null);
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getFilename();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities2);
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      Capabilities capabilities2 = capabilities1.getAttributeCapabilities();
      findWithCapabilities0.setCapabilities(capabilities2);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.isEnabledNot(capabilities_Capability1);
      findWithCapabilities1.isEnabled(capabilities_Capability1);
      Capabilities capabilities3 = new Capabilities(findWithCapabilities3);
      findWithCapabilities2.setCapabilities(capabilities3);
      assertEquals(1, capabilities3.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setFilename(",vLk7Hs");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability2);
      findWithCapabilities0.getRevision();
      assertEquals(",vLk7Hs", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.enable((Capabilities.Capability) null);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.disableAllClassDependencies();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = ", ";
      stringArray0[2] = "-seed <num>";
      stringArray0[3] = "-not-stringU-atts";
      stringArray0[4] = "])r3@(46H{hr:/";
      stringArray0[5] = "kR";
      findWithCapabilities0.m_Superclass = "-packages";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      stringArray0[6] = "";
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability1);
      stringArray0[7] = "'mv.|;<}om";
      stringArray0[8] = "\tAlso prints the classname that didn't match the criteria.";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.disableAllClassDependencies();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      try { 
        findWithCapabilities0.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.getHandler();
      capabilities0.getClassCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "6  ]`_Z=uh1";
      stringArray0[1] = "\">[s}]8<A-twbH,";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "\tFull name of the OptionHandler analysed.\n\teg: weka.classifiers.rules.ZeroR\n\t(default weka.classifiers.rules.ZeroR)";
      stringArray0[4] = "-no-class";
      stringArray0[5] = "6  ]`_Z=uh1";
      stringArray0[6] = "-binary-atts";
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.getHandler();
      capabilities0.getClassCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = new String[0];
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("Kh.,pTV$D@4hd");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "Kh.,pTV$D@4hd";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Kh.,pTV$D@4hd";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      String string0 = findWithCapabilities0.getFilename();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
      
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.getHandler();
      findWithCapabilities0.m_Handler = null;
      capabilities0.getClassCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-no-class";
      stringArray0[4] = "6  ]`_Z=uh1";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "8034";
      stringArray0[4] = "8034";
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      boolean boolean0 = findWithCapabilities0.handles(capabilities_Capability1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "eik9";
      stringArray0[1] = "-1";
      stringArray0[2] = ",t\u00049f%l[.";
      stringArray0[3] = "not-string-atts";
      stringArray0[4] = "test_set";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.handles(capabilities_Capability0);
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("Kh.,pTV$D@4hd");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "Kh.,pTV$D@4hd";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Kh.,pTV$D@4hd";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "i[3%|O(W\"";
      String string0 = "g$(p%~8k8?u";
      stringArray0[1] = "g$(p%~8k8?u";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "i)3.(46H{hr:/";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities capabilities1 = new Capabilities(findWithCapabilities0);
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Capabilities;
      capabilities1.m_Capabilities = hashSet0;
      findWithCapabilities0.setCapabilities(capabilities1);
      Vector<String> vector1 = findWithCapabilities0.getMisses();
      findWithCapabilities0.enable(capabilities_Capability0);
      MockException mockException0 = new MockException();
      MockThrowable mockThrowable0 = new MockThrowable(mockException0);
      MockFile mockFile0 = new MockFile("weka/core/Capabilities.props", "Ranges not yet set.");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      hashtable0.put("dIC|AP'qG", vector0);
      assertNotSame(vector0, vector1);
      
      ClassDiscovery.m_Cache = hashtable0;
      mockException0.printStackTrace((PrintWriter) mockPrintWriter0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("weka/core/Capabilities.props", "", "NUMERIC_ATTRIBUTES", 0);
      mockThrowable0.setOriginForDelegate(stackTraceElement0);
      MockException mockException1 = new MockException(mockThrowable0);
      capabilities0.m_FailReason = (Exception) mockException1;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      assertEquals(6, stringArray0.length);
      
      findWithCapabilities0.listOptions();
      Capabilities capabilities2 = findWithCapabilities0.getCapabilities();
      assertNotSame(capabilities2, capabilities0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "measureStdDev_points_visited";
      stringArray0[2] = "";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      ClassDiscovery.m_ClassCache = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("measureStdDev_points_visited");
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.find();
      hashtable0.put("weka.core.CheckScheme", vector0);
      ClassDiscovery.m_Cache = hashtable0;
      String string0 = findWithCapabilities0.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = ", ";
      stringArray0[2] = "-seed <num>";
      stringArray0[3] = "-not-string-atts";
      stringArray0[4] = "i)3.(46H{hr:/";
      stringArray0[5] = "kR";
      stringArray0[6] = "";
      stringArray0[7] = "'mv.|;<}om";
      stringArray0[8] = "\tAlso prints the classname that didn't match the criteria.";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      findWithCapabilities0.m_Filename = " ";
      Instances instances0 = testInstances0.generate("=HR\"{t6YC<");
      Capabilities capabilities0 = Capabilities.forInstances(instances0, true);
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      testInstances1.getHandler();
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.find();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      assertFalse(capabilities1.equals((Object)capabilities0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      stringArray0[4] = "8034";
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.getHandler();
      capabilities0.m_Owner = null;
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability2);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("");
      findWithCapabilities0.setFilename("");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.setClassIndex("$uK_=;m:5\"/%6'NN");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.enableAllAttributeDependencies();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      capabilities1.disableAll();
      capabilities1.toSource("weka/core/Capabilities.props");
      findWithCapabilities0.setCapabilities(capabilities1);
      Capabilities capabilities2 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setCapabilities(capabilities2);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.getNotCapabilities();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities1.getOptions();
      findWithCapabilities1.disableNot(capabilities_Capability0);
      findWithCapabilities1.setClassIndex("weka/core/Capabilities.props");
      assertEquals("", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("");
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      String[] stringArray0 = new String[2];
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      stringArray0[0] = "";
      stringArray0[1] = "";
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setFilename("7KWB:HP(O");
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "-S";
      stringArray0[2] = "-W <classname>";
      stringArray0[3] = "-relational-atts";
      stringArray0[4] = "VBMbw9^ER-PWPpt";
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      int[] intArray0 = new int[6];
      intArray0[0] = (-2292);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1490;
      intArray0[5] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-533.5773657734495), intArray0, 0);
      binarySparseInstance0.dataset();
      try { 
        Capabilities.forInstances((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      boolean boolean0 = findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.getNotCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      capabilities0.enableAllClassDependencies();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      boolean boolean1 = findWithCapabilities0.isEnabled(capabilities_Capability1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.getHandler();
      findWithCapabilities0.m_Handler = null;
      capabilities0.getClassCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-no-class";
      stringArray0[1] = "6  ]`_Z=uh1";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "8034";
      stringArray0[4] = "8034";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      boolean boolean0 = false;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1223);
      binarySparseInstance0.dataset();
      try { 
        capabilities0.testWithFail((Instances) null, 1223, 99);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.core.FindWithCapabilities: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      SingleIndex.indexToString(0);
      singleIndex0.m_Upper = 100;
      singleIndex0.m_SelectedIndex = 0;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".setMinimumNumberInstances(";
      FindWithCapabilities.main(stringArray0);
      stringArray0[1] = "";
      stringArray0[2] = "V/R`y6SDg)1F";
      stringArray0[3] = "";
      SingleIndex.main(stringArray0);
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.m_Matches.removeAllElements();
      vector0.add("");
      vector0.addAll((Collection<? extends String>) findWithCapabilities0.m_Matches);
      findWithCapabilities0.getHandler();
      vector0.add("G^*G");
      findWithCapabilities0.getOptions();
      int int0 = 1;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setNotCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      assertEquals(1, capabilities0.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disable(capabilities_Capability0);
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      Instances instances0 = null;
      try { 
        Capabilities.forInstances((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities1);
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      capabilities1.setMinimumNumberInstances(0);
      capabilities0.toString();
      findWithCapabilities0.m_Capabilities = capabilities1;
      String string0 = null;
      findWithCapabilities1.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      String string0 = "2NzS3W0.X([N(o}Au!";
      findWithCapabilities0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.listOptions();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }
}
