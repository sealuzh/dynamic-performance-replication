/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:53:06 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParserTokenManager_ESTest extends JVCParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = null;
      try {
        jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null, 35);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 35. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null, 0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = null;
      try {
        jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null, (-2164));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2164. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null, 0);
      jVCParserTokenManager0.ReInit((SimpleCharStream) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 24, 2987);
      simpleCharStream0.backup(2987);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo((-12));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -12. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-76);
      byteArray0[3] = (byte) (-124);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)0, 2194);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleCharStream0.readChar();
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(16, token0.kind);
      assertEquals(2195, token0.beginColumn);
      assertEquals(2195, token0.endColumn);
      assertEquals("\u0000", token0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2194);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 2194, 2194);
      simpleCharStream0.backup(16);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.line = 4079;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      simpleCharStream0.readChar();
      jVCParserTokenManager0.ReInit(simpleCharStream0, 2);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.SwitchTo(2);
      assertEquals(4081, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(pushbackReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      jVCParserTokenManager0.setDebugStream((PrintStream) null);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Error: Ignoring invalid lexical state : ");
      assertFalse(boolean0);
      
      boolean boolean1 = pipedInputStream0.markSupported();
      assertEquals(0, pipedInputStream0.available());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = SimpleCharStream.staticFlag;
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 2194, 2194);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.backup(16);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(4079, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      boolean boolean5 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean6 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6);
      
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      assertFalse(fileDescriptor1.valid());
      assertNotNull(fileDescriptor1);
      assertFalse(fileDescriptor1.equals((Object)fileDescriptor0));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 4);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertNotNull(jVCParserTokenManager0);
      assertEquals(4079, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("\u0000", token0.toString());
      assertNotNull(token0);
      assertEquals(4080, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(16, token0.kind);
      
      boolean boolean7 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 2194, 2992);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      simpleCharStream0.backup(5);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4090, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      assertEquals(4090, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager0.jjFillToken();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals("", token0.toString());
      assertNotNull(token0);
      assertEquals(4090, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertEquals(4090, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4090, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token2.toString());
      assertNotNull(token2);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4091, simpleCharStream0.bufpos);
      assertEquals(0, token2.beginLine);
      assertEquals(16, token2.kind);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2171);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 2171, 2171);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      simpleCharStream0.backup(16);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(4079, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean3 = simpleCharStream0.prevCharIsCR;
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      assertFalse(fileDescriptor1.valid());
      assertNotNull(fileDescriptor1);
      assertFalse(fileDescriptor1.equals((Object)fileDescriptor0));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 4);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertNotNull(jVCParserTokenManager0);
      assertEquals(4079, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      jVCParserTokenManager0.curLexState = 2171;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("", token0.toString());
      assertNotNull(token0);
      assertEquals(4080, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      
      try { 
        pipedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2194);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = SimpleCharStream.staticFlag;
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 2194, 2194);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.backup(14);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(4081, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertNotNull(jVCParserTokenManager0);
      assertEquals(4081, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      boolean boolean1 = SimpleCharStream.staticFlag;
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      Token token0 = jVCParserTokenManager0.jjFillToken();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("", token0.toString());
      assertNotNull(token0);
      assertEquals(4081, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertNotNull(jVCParserTokenManager1);
      assertEquals(4081, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertNotNull(simpleCharStream1);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("\u0000", token1.toString());
      assertNotNull(token1);
      assertEquals(4082, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(16, token1.kind);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token1, token0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)116;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)15, (byte)116}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)15, 2194);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)15, (byte)116}, byteArray0);
      
      simpleCharStream0.backup((byte) (-1));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)15, (byte)116}, byteArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)15, (byte)116}, byteArray0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)15, (byte)116}, byteArray0);
      
      Token token0 = jVCParserTokenManager0.jjFillToken();
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)15, (byte)116}, byteArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals("\uFFFD", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(2194, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(2194, simpleCharStream0.getBeginColumn());
      assertEquals(2194, simpleCharStream0.getEndColumn());
      assertNotNull(token1);
      assertEquals(16, token1.kind);
      assertEquals(2194, token1.beginColumn);
      assertEquals(2194, token1.endColumn);
      assertEquals(15, token1.endLine);
      assertEquals(15, token1.beginLine);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)15, (byte)116}, byteArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(2194, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(2194, simpleCharStream0.getBeginColumn());
      assertEquals(2194, simpleCharStream0.getEndColumn());
      assertNotNull(mockPrintStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)15, (byte)116}, byteArray0);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(2194);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2194. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-1);
      byteArray0[3] = (byte) (-76);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)0, (byte) (-76)}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)0, (byte) (-76));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)0, (byte) (-76)}, byteArray0);
      
      simpleCharStream0.backup((byte) (-1));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)0, (byte) (-76)}, byteArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)0, (byte) (-76)}, byteArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-76), simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals((-76), simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-76), simpleCharStream0.getEndColumn());
      assertEquals("\uFFFD", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals((-76), token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals((-76), token0.beginColumn);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)0, (byte) (-76)}, byteArray0);
      
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-76), simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals((-76), simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-76), simpleCharStream0.getEndColumn());
      assertEquals("\uFFFD", token1.toString());
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals((-76), token1.endColumn);
      assertEquals(16, token1.kind);
      assertEquals((-76), token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)0, (byte) (-76)}, byteArray0);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, (int) (byte) (-76));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -76. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-124);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)15, 2194);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      simpleCharStream0.backup((byte) (-1));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2194, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(2194, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      assertEquals('\uFFFD', char0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2194, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(2194, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals("\u000F", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2195, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(2195, simpleCharStream0.getEndColumn());
      assertEquals(2195, simpleCharStream0.getBeginColumn());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getLine());
      assertNotNull(token0);
      assertEquals(2195, token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(15, token0.beginLine);
      assertEquals(2195, token0.beginColumn);
      assertEquals(15, token0.endLine);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals("\uFFFD", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(2196, simpleCharStream0.getColumn());
      assertEquals(2196, simpleCharStream0.getEndColumn());
      assertEquals(2196, simpleCharStream0.getBeginColumn());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getLine());
      assertNotNull(token1);
      assertEquals(16, token1.kind);
      assertEquals(2196, token1.endColumn);
      assertEquals(15, token1.endLine);
      assertEquals(15, token1.beginLine);
      assertEquals(2196, token1.beginColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(2196, simpleCharStream0.getColumn());
      assertEquals(2196, simpleCharStream0.getEndColumn());
      assertEquals(2196, simpleCharStream0.getBeginColumn());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getLine());
      assertNotNull(mockPrintStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      PrintStream printStream0 = mockPrintStream0.append('\uFFFD');
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(2196, simpleCharStream0.getColumn());
      assertEquals(2196, simpleCharStream0.getEndColumn());
      assertEquals(2196, simpleCharStream0.getBeginColumn());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getLine());
      assertNotNull(printStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      boolean boolean4 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)122;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)9, (byte)122}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)9, 2194);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)9, (byte)122}, byteArray0);
      
      simpleCharStream0.backup((byte) (-1));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)9, (byte)122}, byteArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)9, (byte)122}, byteArray0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)9, (byte)122}, byteArray0);
      assertEquals(180, int0);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(2200, simpleCharStream0.getColumn());
      assertEquals(9, simpleCharStream0.getEndLine());
      assertEquals(2200, simpleCharStream0.getEndColumn());
      assertEquals(9, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)9, (byte)122}, byteArray0);
      assertEquals('\t', char0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(2200, simpleCharStream0.getColumn());
      assertEquals(9, simpleCharStream0.getEndLine());
      assertEquals(2200, simpleCharStream0.getEndColumn());
      assertEquals(9, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)9, (byte)122}, byteArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2201, simpleCharStream0.getBeginColumn());
      assertEquals(2201, simpleCharStream0.getEndColumn());
      assertEquals(2201, simpleCharStream0.getColumn());
      assertEquals(9, simpleCharStream0.getEndLine());
      assertEquals(9, simpleCharStream0.getLine());
      assertEquals(9, simpleCharStream0.getBeginLine());
      assertEquals("z", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(9, token0.beginLine);
      assertEquals(2201, token0.beginColumn);
      assertEquals(9, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(2201, token0.endColumn);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)9, (byte)122}, byteArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals("", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2201, simpleCharStream0.getBeginColumn());
      assertEquals(2201, simpleCharStream0.getEndColumn());
      assertEquals(2201, simpleCharStream0.getColumn());
      assertEquals(9, simpleCharStream0.getEndLine());
      assertEquals(9, simpleCharStream0.getLine());
      assertEquals(9, simpleCharStream0.getBeginLine());
      assertNotNull(token1);
      assertEquals(0, token1.kind);
      assertEquals(9, token1.endLine);
      assertEquals(9, token1.beginLine);
      assertEquals(2201, token1.beginColumn);
      assertEquals(2201, token1.endColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)9, (byte)122}, byteArray0);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals("", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2201, simpleCharStream0.getBeginColumn());
      assertEquals(2201, simpleCharStream0.getEndColumn());
      assertEquals(2201, simpleCharStream0.getColumn());
      assertEquals(9, simpleCharStream0.getEndLine());
      assertEquals(9, simpleCharStream0.getLine());
      assertEquals(9, simpleCharStream0.getBeginLine());
      assertNotNull(token2);
      assertEquals(0, token2.kind);
      assertEquals(9, token2.endLine);
      assertEquals(2201, token2.beginColumn);
      assertEquals(9, token2.beginLine);
      assertEquals(2201, token2.endColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte)9, (byte)122}, byteArray0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (byte)122);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-124);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-124), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)0, 2194);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-124), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      simpleCharStream0.backup((byte)0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-124), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertNotNull(jVCParserTokenManager0);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-124), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      StringReader stringReader0 = new StringReader(". State unchanged.");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, (byte)0, (byte)0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertNotNull(simpleCharStream1);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertNotNull(jVCParserTokenManager1);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-124), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      simpleCharStream0.ReInit((Reader) stringReader0, (int) (byte) (-76), (int) (byte)0, 3547);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-124), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals((-76), simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-76), simpleCharStream0.getLine());
      assertEquals((-76), simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(".", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-76), token0.beginLine);
      assertEquals((-76), token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-124), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(" ", token1.toString());
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals((-76), simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals((-76), simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals((-76), simpleCharStream0.getBeginLine());
      assertNotNull(token1);
      assertEquals((-76), token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.endColumn);
      assertEquals((-76), token1.endLine);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertNotSame(token1, token0);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-124), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager1.debugStream);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals((-76), simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals((-76), simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals((-76), simpleCharStream0.getBeginLine());
      assertNotNull(mockPrintStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-124), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(jVCParserTokenManager0.debugStream);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals((-76), simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals((-76), simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals((-76), simpleCharStream0.getBeginLine());
      assertNotNull(mockPrintStream1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-124), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      PrintStream printStream0 = mockPrintStream1.append('d');
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals((-76), simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals((-76), simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals((-76), simpleCharStream0.getBeginLine());
      assertNotNull(printStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(printStream0.equals((Object)mockPrintStream0));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertSame(mockPrintStream1, printStream0);
      assertSame(printStream0, mockPrintStream1);
      assertNotSame(printStream0, mockPrintStream0);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-124), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertEquals("S", token2.toString());
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals((-76), simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals((-76), simpleCharStream0.getLine());
      assertEquals((-76), simpleCharStream0.getBeginLine());
      assertNotNull(token2);
      assertEquals(2, token2.beginColumn);
      assertEquals(16, token2.kind);
      assertEquals(2, token2.endColumn);
      assertEquals((-76), token2.beginLine);
      assertEquals((-76), token2.endLine);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-124), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean4 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-124);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)15, 2194);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean3 = simpleCharStream0.prevCharIsLF;
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      assertFalse(boolean3);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(2194, simpleCharStream0.getEndColumn());
      assertEquals(2194, simpleCharStream0.getBeginColumn());
      assertEquals(2194, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      assertEquals('\uFFFD', char0);
      
      simpleCharStream0.prevCharIsCR = false;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(2194, simpleCharStream0.getEndColumn());
      assertEquals(2194, simpleCharStream0.getBeginColumn());
      assertEquals(2194, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 3);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(2194, simpleCharStream0.getEndColumn());
      assertEquals(2194, simpleCharStream0.getBeginColumn());
      assertEquals(2194, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals("\uFFFD", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(2195, simpleCharStream0.getEndColumn());
      assertEquals(2195, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(2195, simpleCharStream0.getBeginColumn());
      assertNotNull(token0);
      assertEquals(2195, token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(2195, token0.beginColumn);
      assertEquals(15, token0.beginLine);
      assertEquals(15, token0.endLine);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals("\u000F", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(2196, simpleCharStream0.getEndColumn());
      assertEquals(2196, simpleCharStream0.getBeginColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(2196, simpleCharStream0.getColumn());
      assertNotNull(token1);
      assertEquals(2196, token1.beginColumn);
      assertEquals(15, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(15, token1.beginLine);
      assertEquals(2196, token1.endColumn);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("\uFFFD", "\uFFFD");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \uFFFD
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-124);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)15, 2194);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      simpleCharStream0.backup((byte) (-1));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertNotNull(jVCParserTokenManager0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2194, simpleCharStream0.getEndColumn());
      assertEquals(2194, simpleCharStream0.getBeginColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(2194, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals("\uFFFD", token0.toString());
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(15, token0.beginLine);
      assertEquals(2194, token0.endColumn);
      assertEquals(2194, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(15, token0.endLine);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2195, simpleCharStream0.getEndColumn());
      assertEquals(2194, simpleCharStream0.getBeginColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(2195, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      assertEquals('\u000F', char0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 2);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2195, simpleCharStream0.getEndColumn());
      assertEquals(2194, simpleCharStream0.getBeginColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(2195, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals("\uFFFD", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(2196, simpleCharStream0.getEndColumn());
      assertEquals(2196, simpleCharStream0.getBeginColumn());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(2196, simpleCharStream0.getColumn());
      assertNotNull(token1);
      assertEquals(15, token1.beginLine);
      assertEquals(2196, token1.endColumn);
      assertEquals(2196, token1.beginColumn);
      assertEquals(15, token1.endLine);
      assertEquals(16, token1.kind);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      simpleCharStream0.UpdateLineColumn('c');
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2197, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(2197, simpleCharStream0.getBeginColumn());
      assertEquals(2197, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals("", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2197, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(2197, simpleCharStream0.getBeginColumn());
      assertEquals(2197, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertNotNull(token2);
      assertEquals(2197, token2.endColumn);
      assertEquals(2197, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(15, token2.beginLine);
      assertEquals(15, token2.endLine);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertEquals("", token3.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2197, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(2197, simpleCharStream0.getBeginColumn());
      assertEquals(2197, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertNotNull(token3);
      assertEquals(15, token3.endLine);
      assertEquals(2197, token3.endColumn);
      assertEquals(0, token3.kind);
      assertEquals(2197, token3.beginColumn);
      assertEquals(15, token3.beginLine);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte) (-124)}, byteArray0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 30);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte) (-76), (byte) (-1)}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 2, 1234);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte) (-76), (byte) (-1)}, byteArray0);
      
      simpleCharStream0.backup((byte) (-1));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte) (-76), (byte) (-1)}, byteArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertNotNull(jVCParserTokenManager0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte) (-76), (byte) (-1)}, byteArray0);
      
      boolean boolean1 = SimpleCharStream.staticFlag;
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      jVCParserTokenManager0.SwitchTo(4);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte) (-76), (byte) (-1)}, byteArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1234, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getBeginLine());
      assertEquals(1234, simpleCharStream0.getColumn());
      assertEquals(1234, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getLine());
      assertEquals("\uFFFD", token0.toString());
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token0.endLine);
      assertEquals(2, token0.beginLine);
      assertEquals(1234, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(1234, token0.endColumn);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte) (-76), (byte) (-1)}, byteArray0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1234, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getBeginLine());
      assertEquals(1234, simpleCharStream0.getColumn());
      assertEquals(1234, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getLine());
      assertNotNull(jVCParserTokenManager1);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte) (-76), (byte) (-1)}, byteArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1235, simpleCharStream0.getBeginColumn());
      assertEquals(1235, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getBeginLine());
      assertEquals(1235, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getLine());
      assertEquals("\uFFFD", token1.toString());
      assertNotNull(token1);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token1.beginLine);
      assertEquals(2, token1.endLine);
      assertEquals(1235, token1.endColumn);
      assertEquals(16, token1.kind);
      assertEquals(1235, token1.beginColumn);
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte) (-76), (byte) (-1)}, byteArray0);
      
      jVCParserTokenManager0.setDebugStream(jVCParserTokenManager1.debugStream);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1235, simpleCharStream0.getBeginColumn());
      assertEquals(1235, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getBeginLine());
      assertEquals(1235, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-1), (byte) (-76), (byte) (-1)}, byteArray0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 30);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        pipedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = SimpleCharStream.staticFlag;
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte)127}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)15, 2194);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte)127}, byteArray0);
      
      simpleCharStream0.backup((byte) (-1));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte)127}, byteArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertNotNull(jVCParserTokenManager0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte)127}, byteArray0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2194, simpleCharStream0.getBeginColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(2194, simpleCharStream0.getColumn());
      assertEquals(2194, simpleCharStream0.getEndColumn());
      assertEquals("\uFFFD", token0.toString());
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2194, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(15, token0.endLine);
      assertEquals(15, token0.beginLine);
      assertEquals(2194, token0.endColumn);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte)127}, byteArray0);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2194, simpleCharStream0.getBeginColumn());
      assertEquals(2195, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(2195, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte)127}, byteArray0);
      assertEquals('\u000F', char0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 2);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2194, simpleCharStream0.getBeginColumn());
      assertEquals(2195, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(2195, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte)127}, byteArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals("", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2196, simpleCharStream0.getBeginColumn());
      assertEquals(2196, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(2196, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertNotNull(token1);
      assertEquals(15, token1.endLine);
      assertEquals(2196, token1.beginColumn);
      assertEquals(15, token1.beginLine);
      assertEquals(2196, token1.endColumn);
      assertEquals(16, token1.kind);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte)127}, byteArray0);
      
      Token token2 = jVCParserTokenManager0.jjFillToken();
      assertEquals("", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2196, simpleCharStream0.getBeginColumn());
      assertEquals(2196, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(2196, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertNotNull(token2);
      assertEquals(2196, token2.beginColumn);
      assertEquals(2196, token2.endColumn);
      assertEquals(15, token2.beginLine);
      assertEquals(15, token2.endLine);
      assertEquals(16, token2.kind);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte)127}, byteArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      simpleCharStream0.UpdateLineColumn('c');
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2197, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(2197, simpleCharStream0.getBeginColumn());
      assertEquals(2197, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte)127}, byteArray0);
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertEquals("", token3.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2197, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(2197, simpleCharStream0.getBeginColumn());
      assertEquals(2197, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertNotNull(token3);
      assertEquals(15, token3.beginLine);
      assertEquals(15, token3.endLine);
      assertEquals(2197, token3.endColumn);
      assertEquals(2197, token3.beginColumn);
      assertEquals(0, token3.kind);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte)127}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte)127}, byteArray0);
      
      Token token4 = jVCParserTokenManager0.getNextToken();
      assertEquals("", token4.toString());
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(2197, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(2197, simpleCharStream0.getBeginColumn());
      assertEquals(2197, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertNotNull(token4);
      assertEquals(2197, token4.endColumn);
      assertEquals(2197, token4.beginColumn);
      assertEquals(15, token4.beginLine);
      assertEquals(0, token4.kind);
      assertEquals(15, token4.endLine);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte)127}, byteArray0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(2197, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(2197, simpleCharStream0.getBeginColumn());
      assertEquals(2197, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte)127}, byteArray0);
      
      Token token5 = jVCParserTokenManager0.getNextToken();
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(2197, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(2197, simpleCharStream0.getBeginColumn());
      assertEquals(2197, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals("", token5.toString());
      assertNotNull(token5);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(15, token5.endLine);
      assertEquals(2197, token5.beginColumn);
      assertEquals(15, token5.beginLine);
      assertEquals(0, token5.kind);
      assertEquals(2197, token5.endColumn);
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token4));
      assertNotSame(token5, token2);
      assertNotSame(token5, token0);
      assertNotSame(token5, token1);
      assertNotSame(token5, token3);
      assertNotSame(token5, token4);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte)127}, byteArray0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(2197, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(2197, simpleCharStream0.getBeginColumn());
      assertEquals(2197, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte)127}, byteArray0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(2197, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(2197, simpleCharStream0.getBeginColumn());
      assertEquals(2197, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte)127}, byteArray0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(2197, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(2197, simpleCharStream0.getBeginColumn());
      assertEquals(2197, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte)127}, byteArray0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(2197, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(2197, simpleCharStream0.getBeginColumn());
      assertEquals(2197, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15, (byte)127}, byteArray0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("<J]|Oj=w@u:xV{P", "\uFFFD");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \uFFFD
         //
         verifyException("java.io.PrintStream", e);
      }
  }
}
