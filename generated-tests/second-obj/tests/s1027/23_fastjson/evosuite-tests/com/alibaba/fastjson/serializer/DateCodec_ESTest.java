/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:41:56 GMT 2018
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.serializer.DateCodec;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.CharArrayWriter;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.util.GregorianCalendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateCodec_ESTest extends DateCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Class<Float> class0 = Float.TYPE;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Method method0 = dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) mockMinguoDate0, (Object) "");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("p");
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Short> class0 = Short.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) class0, (Object) dateCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse error
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      SerializeWriter serializeWriter1 = serializeWriter0.append('k');
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter1, serializeConfig0);
      MockDate mockDate0 = new MockDate((-6835437086156813536L));
      Object object0 = new Object();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      dateCodec0.write(jSONSerializer0, mockDate0, mockJapaneseDate0, (Type) null, 102);
      assertEquals(21, serializeWriter1.size());
      assertEquals(21, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DateCodec dateCodec0 = new DateCodec();
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
      
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Byte byte0 = new Byte((byte)10);
      Class<Float> class0 = Float.TYPE;
      dateCodec0.write(jSONSerializer0, byte0, jSONSerializer0, class0, (byte)10);
      assertEquals(2, dateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      Class<Double> class0 = Double.TYPE;
      dateCodec0.write(jSONSerializer0, (Object) null, (Object) null, class0, (-469883056));
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("p");
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Short> class0 = Short.TYPE;
      Method method0 = dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) class0, (Object) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Class<Float> class0 = Float.TYPE;
      Double double0 = new Double(0);
      MockDate mockDate0 = new MockDate(0, 2, 0, 0, 93, 0);
      Object object0 = dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) double0, (Object) mockDate0);
      assertEquals("Wed Feb 28 01:33:00 GMT 1900", object0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("K=)m`CavBc");
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Short> class0 = Short.TYPE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) class0, (Object) "K=)m`CavBc");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"K=)m`CavBc\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      int int0 = Double.BYTES;
      Class<Short> class0 = Short.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("08eQI0.o+/diFON[fp<");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "08eQI0.o+/diFON[fp<";
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) dateCodec0, (Object) "08eQI0.o+/diFON[fp<");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"08eQI0.o+/diFON[fp<\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      int int0 = Opcodes.IOR;
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      Double double0 = new Double(128);
      Class<SerializerFeature> class0 = SerializerFeature.class;
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(128, 128, 128);
      // Undeclared exception!
      try { 
        dateCodec0.write(jSONSerializer0, double0, mockGregorianCalendar0, class0, 128);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.util.Date
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("K=)m`CavBc");
      DateCodec dateCodec0 = new DateCodec();
      JSON.DEFFAULT_DATE_FORMAT = "K=)m`CavBc";
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Double double0 = new Double(1);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) double0, (Object) "K=)m`CavBc");
      Type type0 = parseContext0.type;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializeWriter serializeWriter0 = new SerializeWriter(charArrayWriter0, 11, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      serializeWriter0.writeNull(serializerFeature2);
      dateCodec0.write(jSONSerializer0, double0, mockThaiBuddhistDate0, (Type) null, 494);
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullStringAsEmpty;
      assertFalse(serializerFeature3.equals((Object)serializerFeature2));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      JSON.DEFFAULT_DATE_FORMAT = "K=)m`CavBc";
      JSON.DEFFAULT_DATE_FORMAT = "K=)m`CavBc";
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializeWriter serializeWriter0 = new SerializeWriter();
      DateCodec dateCodec1 = DateCodec.instance;
      Class<Short> class0 = Short.TYPE;
      int int0 = Opcodes.INSTANCEOF;
      DateCodec dateCodec2 = DateCodec.instance;
      JSONScanner jSONScanner0 = new JSONScanner("K=)m`CavBc");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      dateCodec2.cast(defaultJSONParser0, (Type) class0, (Object) mockJapaneseDate0, (Object) "0000-00-00T00:00:00");
      Short short0 = new Short((short)4880);
      assertEquals((short)4880, (short)short0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("8)YB");
      DateCodec dateCodec0 = new DateCodec();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Double double0 = new Double(1);
      defaultJSONParser0.setContext((Object) double0, (Object) "yyyy-MM-dd HH:mm:ss");
      mockThaiBuddhistDate0.getMockedClassName();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(charArrayWriter0, (-62), serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      defaultJSONParser0.getFieldTypeResolver();
      JSONSerializer.write(serializeWriter0, (Object) dateCodec0);
      dateCodec0.write(jSONSerializer0, double0, mockThaiBuddhistDate0, (Type) null, 1);
      int int0 = GregorianCalendar.BC;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) jSONSerializer0, (Object) "8)YB");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8)YB\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(I)Ljava/ang/Object;");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Short> class0 = Short.TYPE;
      boolean boolean0 = ParserConfig.AUTO_SUPPORT;
      // Undeclared exception!
      try { 
        dateCodec0.instance.cast(defaultJSONParser0, (Type) class0, (Object) serializeConfig0, (Object) "/Date(/Dat)((Z)U");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/Date(/Dat)((Z)U\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("K=)`C[avB");
      DateCodec dateCodec0 = new DateCodec();
      Double double0 = new Double(0);
      defaultJSONParser0.setContext((Object) double0, (Object) "yyyy-MM-dd HH:mm:ss");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      charArrayWriter0.write("7SqEU7rvC6j");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseISO8601DateFormat;
      FileSystemHandling.shouldAllThrowIOExceptions();
      serializerFeatureArray0[2] = serializerFeature1;
      SerializeWriter serializeWriter0 = new SerializeWriter(charArrayWriter0, 0, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      jSONSerializer0.out.writeNull(serializerFeature1);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      boolean boolean0 = serializeWriter0.writeEnumUsingToString;
      Double double1 = new Double(0);
      dateCodec0.write(jSONSerializer0, double1, serializerFeature1, (Type) null, (-372));
      dateCodec0.getFastMatchToken();
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) serializerFeature0, (Object) "7SqEU7rvC6j");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7SqEU7rvC6j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("([C)Ljava/lang/String;");
      SerializeConfig serializeConfig0 = new SerializeConfig(2);
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        dateCodec0.instance.cast(defaultJSONParser0, (Type) class0, (Object) serializeConfig0, (Object) "([C)Ljava/lang/String;");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"([C)Ljava/lang/String;\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "*wCI716.` /BU[";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*wCI716.` /BU[");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("*wCI716.` /BU[");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      int int0 = (-62);
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(charArrayWriter0, 255, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      defaultJSONParser0.getFieldTypeResolver();
      MockDate mockDate0 = new MockDate(255, (-1361), (-1873799277), 2, (-1361));
      // Undeclared exception!
      try { 
        JSONSerializer.write(jSONSerializer0.out, (Object) mockDate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }
}
