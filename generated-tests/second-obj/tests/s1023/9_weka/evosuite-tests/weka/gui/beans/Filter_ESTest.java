/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:46:55 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Component;
import java.awt.HeadlessException;
import java.awt.TextField;
import java.awt.event.InputMethodListener;
import java.awt.event.MouseWheelListener;
import java.beans.EventSetDescriptor;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.SortedSet;
import java.util.Stack;
import java.util.Vector;
import javax.swing.DebugGraphics;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.CheckOptionHandler;
import weka.core.FindWithCapabilities;
import weka.core.Instances;
import weka.core.OptionHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.attribute.Discretize;
import weka.filters.supervised.attribute.NominalToBinary;
import weka.filters.supervised.instance.Resample;
import weka.filters.supervised.instance.SpreadSubsample;
import weka.filters.supervised.instance.StratifiedRemoveFolds;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.WekaTaskMonitor;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.ClassifierPerformanceEvaluator;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CostBenefitAnalysis;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataVisualizer;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.GraphViewer;
import weka.gui.beans.ImageSaver;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.KnowledgeFlowApp;
import weka.gui.beans.Loader;
import weka.gui.beans.MetaBean;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetMaker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.getConnectedFormat();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      Sorter sorter0 = new Sorter();
      filter0.addTestSetListener(sorter0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      filter0.removeTrainingSetListener(saver0);
      filter0.disconnectionNotification("@relation", saver0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassAssigner classAssigner0 = new ClassAssigner();
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      String string0 = DefaultEditorKit.deletePrevWordAction;
      filter0.removeTrainingSetListener(scatterPlotMatrix0);
      boolean boolean0 = filter0.eventGeneratable("delete-previous-word");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      
      Sorter sorter0 = new Sorter();
      filter0.addTestSetListener(sorter0);
      filter0.addDataSourceListener(sorter0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      predictionAppender0.getContainerListeners();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.acceptInstance((InstanceEvent) null);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter0.removeInstanceListener(substringLabeler0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter filter0 = new Filter();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.removeDataSourceListener(trainTestSplitMaker0);
      filter0.removeTrainingSetListener(trainTestSplitMaker0);
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.setDoubleBuffered(true);
      classAssigner0.getStructure("Yb6u<?_RYDBs&v0LS");
      TestSetEvent testSetEvent0 = new TestSetEvent(trainTestSplitMaker0, (Instances) null, 379, 379);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.eventGeneratable("configuration");
      Appender appender0 = new Appender();
      appender0.getLocale();
      appender0.getToolTipText();
      filter0.addDataSourceListener(appender0);
      // Undeclared exception!
      try { 
        filter0.connectionNotification("configuration", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setWrappedAlgorithm(add0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.transferFocusDownCycle();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      filter0.doLayout();
      BeanVisual beanVisual0 = crossValidationFoldMaker0.getVisual();
      filter0.setVisual(beanVisual0);
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      costBenefitAnalysis0.setBounds(0, 989, 807, 1);
      filter0.connectionNotification("weka/gui/beans/icons/", costBenefitAnalysis0);
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      GraphViewer graphViewer0 = new GraphViewer();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      Instances instances0 = attributeSummarizer0.m_visualizeDataSet;
      InstanceEvent instanceEvent1 = new InstanceEvent(graphViewer0, (Instances) null);
      filter0.acceptInstance(instanceEvent1);
      assertEquals("CrossValidationFoldMaker", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      Clusterer clusterer0 = new Clusterer();
      filter0.addTrainingSetListener(clusterer0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.performRequest("Resulttable");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Resulttable not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.transferFocus();
      filter0.getInputMethodListeners();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      filter0.acceptInstance(instanceEvent0);
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.addInstanceListener(substringReplacer0);
      Sorter sorter0 = new Sorter();
      Sorter sorter1 = new Sorter();
      Filter filter1 = (Filter)sorter1.add((Component) filter0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("+'G", arrayList0, 0);
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      DataSetEvent dataSetEvent0 = new DataSetEvent(checkOptionHandler0, instances0);
      filter0.isOpaque();
      filter0.acceptDataSet(dataSetEvent0);
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      // Undeclared exception!
      try { 
        filter1.setWrappedAlgorithm(checkOptionHandler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.core.CheckOptionHandler : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getVisual();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      trainTestSplitMaker0.requestFocus();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.reset();
      textDirectoryLoader0.getRevision();
      filter0.setCustomName("8034");
      Resample resample0 = new Resample();
      resample0.setBiasToUniformClass(0.0);
      filter0.connectionNotification("}Uj0jy^y16Z8$", instances0);
      filter0.stop();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(optionHandlerJavadoc0, instances0, 1, 2);
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.getCustomName();
      assertEquals("8034", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      BeanVisual beanVisual0 = classValuePicker0.m_visual;
      substringLabeler0.setVisual(beanVisual0);
      beanVisual0.getInputMethodListeners();
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      substringLabeler0.addInputMethodListener((InputMethodListener) null);
      filter0.requestFocus(true);
      substringLabeler0.repaint((-326), 46, (-326), 46);
      filter0.removeDataSourceListener(substringLabeler0);
      filter0.getWrappedAlgorithm();
      filter0.addInstanceListener(substringLabeler0);
      filter0.connectionAllowed("j]+d(I{");
      filter0.setCustomName("weka/gui/beans/icons/");
      filter0.getVisual();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      System.setCurrentTimeMillis(3);
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      filter0.setFilter(nominalToBinary0);
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("NominalToBinary", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MockRandom mockRandom0 = new MockRandom();
      SystemInUtil.addInputLine("@relation");
      Instances instances1 = instances0.resampleWithWeights((Random) mockRandom0);
      filter0.getWrappedAlgorithm();
      filter0.getKeyListeners();
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      BeanVisual beanVisual0 = modelPerformanceChart0.m_visual;
      textDirectoryLoader0.setOutputFilename(false);
      filter0.enumerateRequests();
      GraphViewer graphViewer0 = new GraphViewer();
      graphViewer0.add("@data", (Component) modelPerformanceChart0);
      TestSetEvent testSetEvent0 = new TestSetEvent(graphViewer0, instances1, 0, 2);
      filter0.acceptTestSet(testSetEvent0);
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame((String) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.m_globalInfo = "Best resul-f f~r ";
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[3];
      discretize0.setAttributeIndicesArray(intArray0);
      filter0.setWrappedAlgorithm(discretize0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter0.getBaselineResizeBehavior();
      substringLabeler0.isPaintingTile();
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      boolean boolean0 = substringLabeler0.m_hasLabels;
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      Filter filter1 = new Filter();
      filter0.disconnectionNotification("@data", filter1);
      filter1.addTestSetListener(substringLabeler0);
      filter0.getWrappedAlgorithm();
      Filter filter2 = new Filter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter2.getWrappedAlgorithm();
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      BeanVisual beanVisual0 = modelPerformanceChart0.m_visual;
      beanVisual0.getUI();
      filter2.setVisual(beanVisual0);
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      DataSetEvent dataSetEvent0 = new DataSetEvent(integer0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter1.getWrappedAlgorithm();
      filter1.enumerateRequests();
      BeanVisual beanVisual1 = filter0.getVisual();
      filter0.setVisual(beanVisual1);
      assertEquals("Discretize", filter0.getCustomName());
      
      Discretize discretize1 = new Discretize();
      filter1.disconnectionNotification(".arff", discretize1);
      assertEquals("AllFilter", filter1.getCustomName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.reset();
      textDirectoryLoader0.getRevision();
      filter0.setCustomName("@data");
      Resample resample0 = new Resample();
      resample0.setBiasToUniformClass((-1303354649));
      filter0.connectionNotification("jq(d{", resample0);
      filter0.eventGeneratable("jq(d{");
      filter0.stop();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(instances0, instances0, (-79), (-3744));
      filter0.acceptTrainingSet(trainingSetEvent0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.getCustomName();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      substringLabeler0.addInputMethodListener((InputMethodListener) null);
      substringLabeler0.repaint((-326), 46, (-326), 46);
      Filter filter0 = new Filter();
      filter0.setFocusTraversalPolicyProvider(true);
      filter0.isBusy();
      filter0.removeTestSetListener(substringLabeler0);
      filter0.isBusy();
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      Associator associator0 = new Associator();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      crossValidationFoldMaker0.getStructure("configuration");
      DataSetEvent dataSetEvent0 = new DataSetEvent(associator0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.getWrappedAlgorithm();
      filter0.enumerateRequests();
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      filter0.setFilter(spreadSubsample0);
      filter0.removeDataSourceListener(associator0);
      filter0.connectionNotification(".arff", "configuration");
      filter0.useDefaultVisual();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      filter0.addInstanceListener(substringReplacer0);
      Sorter sorter0 = new Sorter();
      Sorter sorter1 = new Sorter();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      filter0.isOpaque();
      Resample resample0 = new Resample();
      filter0.connectionNotification("TpI?zKUZ^", sorter0);
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      filter0.eventGeneratable("TpI?zKUZ^");
      Appender appender0 = new Appender();
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      filter0.stop();
      filter0.eventGeneratable("Stop");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      filter0.repaint((-1303354626), (-1303354626), 1067, (-1303354626));
      filter0.removeTrainingSetListener(filter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Logger logger0 = trainingSetMaker0.m_logger;
      Appender appender1 = new Appender();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Associator associator0 = new Associator();
      filter0.connectionNotification("installed", associator0);
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      filter0.eventGeneratable("installed");
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      TestSetMaker testSetMaker1 = new TestSetMaker();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.remove(mouseWheelListener1, mouseWheelListener1);
      filter0.addMouseWheelListener(mouseWheelListener1);
      filter0.isBusy();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      wekaTaskMonitor0.getRootPane();
      weka.gui.LogPanel logPanel1 = new weka.gui.LogPanel(wekaTaskMonitor0, false);
      filter0.setLog(logPanel1);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent1 = flowByExpression0.m_ie;
      filter0.acceptInstance(instanceEvent1);
      TrainingSetEvent trainingSetEvent0 = null;
      try {
        trainingSetEvent0 = new TrainingSetEvent((Object) null, (Instances) null, 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isBusy();
      filter0.setCustomName("v@");
      filter0.addInstanceListener(filter0);
      Resample resample0 = new Resample();
      resample0.setBiasToUniformClass(0.0);
      TestInstances testInstances0 = new TestInstances();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      filter0.connectionNotification("jUqFf6z2X5`", classValuePicker0);
      filter0.getFilter();
      Sorter sorter0 = new Sorter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setWrappedAlgorithm(multiFilter0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.addTestSetListener(sorter0);
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      instanceEvent0.setStatus(746);
      filter0.acceptInstance(instanceEvent0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      Instances instances0 = substringLabeler0.m_outputStructure;
      InstanceEvent instanceEvent0 = new InstanceEvent(classValuePicker0, (Instances) null);
      filter0.removeDataSourceListener(substringLabeler0);
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      Appender appender0 = new Appender();
      SysErrLog sysErrLog0 = new SysErrLog();
      sysErrLog0.logMessage(".bsi");
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      filter0.setLog(sysErrLog0);
      appender0.setFocusTraversalKeysEnabled(true);
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      Discretize discretize0 = new Discretize();
      filter0.setWrappedAlgorithm(discretize0);
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.addTestSetListener(trainTestSplitMaker0);
      filter0.acceptInstance(instanceEvent0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      appender0.getContainerListeners();
      MetaBean metaBean0 = new MetaBean();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Instances instances1 = null;
      try {
        instances1 = new Instances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Filter filter0 = new Filter();
      filter0.isBusy();
      Resample resample0 = new Resample();
      Resample resample1 = new Resample();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      filter0.connectionNotification("jUqFf6z2X5`", classValuePicker0);
      Sorter sorter0 = new Sorter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setWrappedAlgorithm(multiFilter0);
      Appender appender0 = new Appender();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.removeInstanceListener(appender0);
      filter0.addTestSetListener(sorter0);
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.stop();
      filter0.removeTestSetListener(flowByExpression0);
      filter0.getFilter();
      org.evosuite.runtime.Random.setNextRandom(4683);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      classValuePicker0.getConnectedFormat();
      InstanceEvent instanceEvent0 = new InstanceEvent(classValuePicker0, (Instances) null);
      filter0.removeDataSourceListener(substringLabeler0);
      Appender appender0 = new Appender();
      appender0.setVerifyInputWhenFocusTarget(true);
      Resample resample0 = new Resample();
      Resample resample1 = new Resample();
      Resample resample2 = new Resample();
      resample2.setBiasToUniformClass((-61.9519502185));
      TestInstances testInstances0 = new TestInstances();
      ClassValuePicker classValuePicker1 = new ClassValuePicker();
      filter0.connectionNotification(".gif", resample0);
      filter0.getFilter();
      Sorter sorter0 = new Sorter();
      ClassValuePicker classValuePicker2 = new ClassValuePicker();
      filter0.connectionNotification(".gif", classValuePicker1);
      Filter filter1 = new Filter();
      filter1.getFilter();
      Sorter sorter1 = new Sorter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setWrappedAlgorithm(resample1);
      JComponent.isLightweightComponent(appender0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.addTestSetListener(filter1);
      InstanceEvent instanceEvent1 = flowByExpression0.m_ie;
      instanceEvent0.setStatus((-1334));
      filter0.acceptInstance(instanceEvent1);
      try { 
        JOptionPane.getFrameForComponent(substringLabeler0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isBusy();
      filter0.setCustomName("v@");
      filter0.addInstanceListener(filter0);
      Resample resample0 = new Resample();
      resample0.setBiasToUniformClass(0.0);
      TestInstances testInstances0 = new TestInstances();
      filter0.getFilter();
      Sorter sorter0 = new Sorter();
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Vector vector0 = new Stack<TextField>();
      Filter filter1 = new Filter();
      filter1.stop();
      PredictionAppender predictionAppender1 = new PredictionAppender();
      ImageSaver imageSaver0 = new ImageSaver();
      DataSetEvent dataSetEvent0 = new DataSetEvent(predictionAppender1, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter1.eventGeneratable("v@");
      filter0.addDataSourceListener(sorter0);
      filter0.setVisual((BeanVisual) null);
      filter0.performRequest("Stop");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      DebugGraphics debugGraphics1 = new DebugGraphics(debugGraphics0);
      filter0.paintAll(debugGraphics1);
      Resample resample0 = new Resample();
      Resample resample1 = new Resample();
      TestInstances testInstances0 = new TestInstances();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      filter0.connectionNotification(" ", classValuePicker0);
      weka.filters.Filter filter1 = filter0.getFilter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setWrappedAlgorithm(multiFilter0);
      Appender appender0 = new Appender();
      appender0.setAutoscrolls(true);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.removeInstanceListener(appender0);
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      Instances instances0 = testInstances0.generate();
      filter0.addTestSetListener(flowByExpression0);
      InstanceEvent instanceEvent1 = flowByExpression0.m_ie;
      instanceEvent1.setStatus(2);
      testInstances0.generate();
      filter0.addTestSetListener(flowByExpression0);
      InstanceEvent instanceEvent2 = flowByExpression0.m_ie;
      filter0.acceptInstance(instanceEvent1);
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      Resample resample2 = new Resample();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter1, instances0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      PredictionAppender predictionAppender1 = new PredictionAppender();
      ImageSaver imageSaver0 = new ImageSaver();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      MetaBean metaBean0 = new MetaBean();
      DataSetEvent dataSetEvent0 = new DataSetEvent(resample1, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      // Undeclared exception!
      try { 
        filter0.performRequest("e0$nx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // e0$nx not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Filter filter0 = new Filter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-A`X pPj5SdO?3p`k");
      Resample resample0 = new Resample();
      Resample resample1 = new Resample();
      TestInstances testInstances0 = new TestInstances();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      filter0.connectionNotification("jUqFf6z2X5`", classValuePicker0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-A`X pPj5SdO?3p`k");
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setWrappedAlgorithm(multiFilter0);
      Appender appender0 = new Appender();
      appender0.repaint((long) (-1));
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.removeInstanceListener(appender0);
      Instances instances0 = testInstances0.generate();
      filter0.addTestSetListener(flowByExpression0);
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      GraphViewer graphViewer0 = new GraphViewer();
      graphViewer0.add("jZFBvj]9", (Component) filter0);
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      Vector vector0 = crossValidationFoldMaker0.m_trainingListeners;
      instances0.retainAll(vector0);
      TestSetEvent testSetEvent0 = new TestSetEvent(flowByExpression0, instances0, 0, 583);
      filter0.acceptTestSet(testSetEvent0);
      filter0.eventGeneratable("-A`X pPj5SdO?3p`k");
      filter0.stop();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SortedSet<String> sortedSet0 = KnowledgeFlowApp.VISIBLE_PERSPECTIVES;
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MockFile mockFile0 = new MockFile(".arff", "@data");
      filter0.eventGeneratable(".arff");
      filter0.getFilter();
      Sorter sorter0 = new Sorter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Filter filter1 = new Filter();
      sorter0.getDebugGraphicsOptions();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, instances0);
      testSetEvent0.m_maxSetNumber = 0;
      filter0.stop();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      boolean boolean0 = predictionAppender0.m_appendProbabilities;
      filter0.addDataSourceListener(sorter0);
      filter0.connectionAllowed(".bsi");
      filter0.enumerateRequests();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      DataSetEvent dataSetEvent0 = new DataSetEvent(findWithCapabilities0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      filter1.globalInfo();
  }
}
