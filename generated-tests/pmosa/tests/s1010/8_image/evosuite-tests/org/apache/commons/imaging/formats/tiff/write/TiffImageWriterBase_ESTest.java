/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 18:23:01 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff.write;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import javax.swing.DebugGraphics;
import javax.swing.JLayeredPane;
import org.apache.commons.imaging.common.BinaryOutputStream;
import org.apache.commons.imaging.common.ImageBuilder;
import org.apache.commons.imaging.formats.tiff.constants.TiffDirectoryType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfoSShorts;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossless;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossy;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputDirectory;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputField;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSummary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffImageWriterBase_ESTest extends TiffImageWriterBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MockPrintStream mockPrintStream0 = new MockPrintStream("!|}W:u*o\")_uN");
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No directories.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addGPSDirectory();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing root directory.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addExifDirectory();
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing root directory.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addRootDirectory();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(tiffOutputSet0.byteOrder);
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      assertNotNull(tiffOutputSummary0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy((ByteOrder) null);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet((ByteOrder) null);
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.addGPSDirectory();
      TiffOutputSummary tiffOutputSummary0 = new TiffOutputSummary((ByteOrder) null, tiffOutputDirectory0, (Map<Integer, TiffOutputDirectory>) null);
      tiffOutputSet0.getOutputItems(tiffOutputSummary0);
      tiffOutputSet0.toString("org.apache.commons.imaging.ImagingException");
      PrintStream printStream0 = DebugGraphics.logStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(printStream0);
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(mockPrintStream0, (ByteOrder) null);
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy();
      tiffImageWriterLossy1.writeImageFileHeader(binaryOutputStream0, 1L);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      BinaryOutputStream binaryOutputStream1 = new BinaryOutputStream(byteArrayOutputStream0);
      binaryOutputStream0.flush();
      tiffImageWriterLossy0.writeImageFileHeader(binaryOutputStream0, 8L);
      // Undeclared exception!
      try { 
        tiffImageWriterLossy1.write(byteArrayOutputStream0, (TiffOutputSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.getOrCreateExifDirectory();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      TiffOutputSummary tiffOutputSummary1 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      assertFalse(tiffOutputSummary1.equals((Object)tiffOutputSummary0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet(byteOrder0);
      tiffOutputSet0.setGPSInDegrees(0.0, 0.0);
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      assertNotNull(tiffOutputSummary0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet((ByteOrder) null);
      tiffOutputSet0.addGPSDirectory();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getOrCreateRootDirectory();
      Hashtable<Integer, TiffOutputDirectory> hashtable0 = new Hashtable<Integer, TiffOutputDirectory>();
      TiffOutputSummary tiffOutputSummary0 = new TiffOutputSummary((ByteOrder) null, tiffOutputDirectory0, hashtable0);
      tiffOutputSet0.getOutputItems(tiffOutputSummary0);
      tiffOutputSet0.toString("org.apache.commons.imaging.ImagingException");
      tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy((ByteOrder) null);
      try { 
        tiffImageWriterLossy1.write(pipedOutputStream0, tiffOutputSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(byteOrder0);
      ByteOrder.nativeOrder();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getOrCreateGPSDirectory();
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.EXIF_DIRECTORY_INTEROP_IFD;
      TagInfoSShorts tagInfoSShorts0 = new TagInfoSShorts("Throwable: ", (-3), (-3), tiffDirectoryType0);
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-45);
      TiffOutputField tiffOutputField0 = new TiffOutputField(tagInfoSShorts0, fieldTypeFloat0, (-1), byteArray0);
      tiffOutputDirectory0.add(tiffOutputField0);
      TiffOutputSummary tiffOutputSummary0 = new TiffOutputSummary(byteOrder2, tiffOutputDirectory0, (Map<Integer, TiffOutputDirectory>) null);
      tiffOutputSet0.getOutputItems(tiffOutputSummary0);
      TiffOutputSet tiffOutputSet1 = new TiffOutputSet(byteOrder1);
      tiffOutputSet1.toString("yWBNqppyozkjb3rWJ#B");
      tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        tiffImageWriterLossy0.write(pipedOutputStream0, tiffOutputSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy((ByteOrder) null);
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy((ByteOrder) null);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet((ByteOrder) null);
      tiffOutputSet0.getRootDirectory();
      tiffOutputSet0.addRootDirectory();
      tiffImageWriterLossy1.validateDirectories(tiffOutputSet0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addInteroperabilityDirectory();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(tiffOutputSet0.byteOrder);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy();
      TiffOutputSummary tiffOutputSummary1 = tiffImageWriterLossy1.validateDirectories(tiffOutputSet0);
      assertFalse(tiffOutputSummary1.equals((Object)tiffOutputSummary0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy((ByteOrder) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(34661);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.writeImage((BufferedImage) null, byteArrayOutputStream0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      BufferedImage bufferedImage0 = new BufferedImage(7, 7, 7);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      hashMap0.put("COMPRESSION", integer0);
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, (OutputStream) null, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid compression parameter (Only CCITT 1D/Group 3/Group 4, LZW, Packbits and uncompressed supported).
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ImageBuilder imageBuilder0 = new ImageBuilder(1080, 89, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      PipedInputStream pipedInputStream0 = new PipedInputStream(285);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      // Undeclared exception!
      tiffImageWriterLossy0.writeImage(bufferedImage0, pipedOutputStream0, hashMap0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      BufferedImage bufferedImage0 = new BufferedImage(11, 11, 11);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      hashMap0.put("COM/RESSTON", integer0);
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, (OutputStream) null, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: COM/RESSTON
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byte byte0 = (byte)29;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ImageBuilder imageBuilder0 = new ImageBuilder((byte)29, (byte)29, false);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)7);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      // Undeclared exception!
      tiffImageWriterLossy0.writeImage(bufferedImage0, pipedOutputStream0, hashMap0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byte byte0 = (byte)29;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ImageBuilder imageBuilder0 = new ImageBuilder((byte)29, (byte)29, false);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)7);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      hashMap0.put("%EN.", graphics2D0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, pipedOutputStream0, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: %EN.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffOutputDirectory tiffOutputDirectory0 = new TiffOutputDirectory((-3093), byteOrder0);
      tiffOutputSet0.addDirectory(tiffOutputDirectory0);
      tiffOutputSet0.addGPSDirectory();
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown directory: -3093
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      BufferedImage bufferedImage0 = new BufferedImage(7, 7, 7);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("COMPRESSION", tiffImageWriterLossy0);
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, (OutputStream) null, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid compression parameter, must be numeric: org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossy@1
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      ImageBuilder imageBuilder0 = new ImageBuilder(11, 11, true);
      ImageBuilder imageBuilder1 = new ImageBuilder(11, 11, false);
      BufferedImage bufferedImage0 = imageBuilder1.getBufferedImage();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("COMPRESSION");
      tiffImageWriterLossy0.writeImage(bufferedImage0, mockFileOutputStream0, hashMap0);
      hashMap0.put("COMPRESSION", (Object) null);
      // Undeclared exception!
      tiffImageWriterLossy0.writeImage(bufferedImage0, (OutputStream) null, hashMap0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      ImageBuilder imageBuilder0 = new ImageBuilder(11, 11, true);
      ImageBuilder imageBuilder1 = new ImageBuilder(11, 11, false);
      BufferedImage bufferedImage0 = imageBuilder1.getBufferedImage();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      hashMap0.put("COMPRESSION", integer0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#tKk'-Z/gjk'd3;x");
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, mockFileOutputStream0, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid compression parameter (Only CCITT 1D/Group 3/Group 4, LZW, Packbits and uncompressed supported).
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      BufferedImage bufferedImage0 = new BufferedImage(7, 7, 7);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("PARAM_KEY_LZW_COMPRESSION_BLOCK_SIZE", tiffImageWriterLossy0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      hashMap0.put("COMPRESSION", integer0);
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, (OutputStream) null, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid compression block-size parameter: 400
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }
}
