/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:40:35 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.nio.ByteOrder;
import java.util.regex.Pattern;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(3, 3, fieldTypeLong0, (-523L), (-523L), byteArray0, byteOrder0, 3);
      // Undeclared exception!
      try { 
        tiffField0.dump();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(345, 345, fieldTypeRational0, 345, 1553L, (byte[]) null, byteOrder0, 345);
      int int0 = tiffField0.getDirectoryType();
      assertEquals(2760, tiffField0.getBytesLength());
      assertEquals(345, tiffField0.getTag());
      assertEquals(345, tiffField0.getSortHint());
      assertEquals(345, int0);
      assertEquals(1553, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-3190), 50, fieldTypeShort0, 50, 4L, byteArray0, byteOrder0, 50);
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [S cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(65535, 65535, fieldTypeShort0, (-1201L), 2471L, (byte[]) null, byteOrder0, (-1));
      int int0 = tiffField0.getSortHint();
      assertEquals(65535, tiffField0.getDirectoryType());
      assertEquals(2471, tiffField0.getOffset());
      assertEquals(65535, tiffField0.getTag());
      assertEquals((-1), int0);
      assertTrue(tiffField0.isLocalValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1396, 41485, fieldTypeAscii0, (-67L), 41485, (byte[]) null, byteOrder0, 41485);
      assertTrue(tiffField0.isLocalValue());
      
      tiffField0.getOversizeValueElement();
      assertEquals(41485, tiffField0.getOffset());
      assertEquals(1396, tiffField0.getTag());
      assertEquals(41485, tiffField0.getSortHint());
      assertEquals(41485, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(50714, 1, fieldTypeLong0, 50714, 2924L, byteArray0, byteOrder0, (byte)13);
      tiffField0.getIntArrayValue();
      assertEquals(50714, tiffField0.getTag());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(13, tiffField0.getSortHint());
      assertEquals(202856, tiffField0.getBytesLength());
      assertEquals(50714L, tiffField0.getCount());
      assertEquals(2924, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[229];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      Pattern.quote("");
      ByteOrder.nativeOrder();
      int int0 = Double.MAX_EXPONENT;
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      FieldType.getFieldType(1);
      TiffField tiffField0 = new TiffField((-1578), 1, fieldTypeRational0, 1023, (-193L), byteArray0, byteOrder0, 1);
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-3989);
      int int1 = (-403);
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(1142, 5, fieldTypeRational0, 5, (-3989), byteArray0, byteOrder0, (-403));
      tiffField0.getIntArrayValue();
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(5, (-3989));
      tiffField_OversizeValueElement0.getElementDescription();
      tiffField0.getFieldTypeName();
      tiffField0.getTagInfo();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      try { 
        fieldTypeRational0.writeData(mockJapaneseDate0, byteOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid data: org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@58f8ebf (org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(1328, 2987, fieldTypeAscii0, 255L, 1328, byteArray0, byteOrder0, 17);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(2987, (-737));
      String string0 = tiffField_OversizeValueElement0.getElementDescription(true);
      assertEquals(17, tiffField0.getSortHint());
      assertNull(string0);
      assertEquals(1328, tiffField0.getOffset());
      assertEquals(2987, tiffField0.getDirectoryType());
      assertEquals(1328, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(139, (byte)0, fieldTypeAscii0, (byte)0, (byte)0, byteArray0, byteOrder0, (byte)0);
      String string0 = tiffField0.getTagName();
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals("Unknown Tag (0x8b)", string0);
      assertEquals(0, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(2565, 2565, fieldTypeByte0, 2565, 2565, (byte[]) null, byteOrder0, 39);
      // Undeclared exception!
      try { 
        tiffField0.getOversizeValueElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(34675, 10, fieldTypeShort0, 34675, (-1217L), byteArray0, byteOrder0, (-3190));
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertEquals(34675L, tiffField0.getCount());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(69350, tiffField0.getBytesLength());
      assertEquals((-3190), tiffField0.getSortHint());
      assertEquals(10, tiffField0.getDirectoryType());
      assertEquals((-1217), tiffField0.getOffset());
      assertEquals(34675, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[178];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(1, 1448, fieldTypeLong0.FLOAT, 30191L, 1, byteArray0, byteOrder0, 1448);
      tiffField0.getValueDescription();
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = new FieldTypeByte(65535, "");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)19;
      TiffField tiffField0 = new TiffField(50934, 31, fieldTypeByte0, (byte)3, (byte)19, byteArray0, (ByteOrder) null, (-934));
      String string0 = tiffField0.getValueDescription();
      assertEquals((-934), tiffField0.getSortHint());
      assertEquals(19, tiffField0.getOffset());
      assertEquals("-123, 3, 19", string0);
      assertEquals(50934, tiffField0.getTag());
      assertNotNull(string0);
      assertEquals(31, tiffField0.getDirectoryType());
      assertEquals(3L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)1, (byte)1, fieldTypeByte0, (byte)1, (byte)1, byteArray0, byteOrder0, (-22));
      tiffField0.getDoubleArrayValue();
      FieldType.getFieldType((byte)1);
      tiffField0.getTagInfo();
      ByteOrder.nativeOrder();
      tiffField0.getDescriptionWithoutValue();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[0];
      TiffField tiffField0 = new TiffField(19, 19, fieldTypeByte0, 19, 859L, byteArray0, (ByteOrder) null, 19);
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@5ca790d5 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      ByteOrder.nativeOrder();
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)76;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(10, 33, fieldTypeLong0, 4L, 1L, byteArray0, byteOrder0, 2146841265);
      tiffField0.getDoubleArrayValue();
      assertEquals(10, tiffField0.getTag());
      assertEquals(33, tiffField0.getDirectoryType());
      assertEquals(2146841265, tiffField0.getSortHint());
      assertEquals(4L, tiffField0.getCount());
      assertEquals(16, tiffField0.getBytesLength());
      assertEquals(1, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      byte[] byteArray0 = new byte[10];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-2487), 782, fieldTypeLong0, 782, 782, byteArray0, byteOrder0, 782);
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [I@1d9426ae
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii((-1815), "");
      TiffField tiffField0 = new TiffField(1, 50, fieldTypeAscii0, 13, 1, byteArray0, byteOrder0, 50);
      String string0 = tiffField0.getValueDescription();
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getTag());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(13, tiffField0.getBytesLength());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[208];
      int int0 = Long.SIZE;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      ByteOrder.nativeOrder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TiffField tiffField0 = new TiffField(48352, 48352, fieldTypeLong0, 15, 64, byteArray0, byteOrder0, 48352);
      String string0 = tiffField0.getValueDescription();
      assertEquals(64, tiffField0.getOffset());
      assertEquals(48352, tiffField0.getSortHint());
      assertEquals(48352, tiffField0.getDirectoryType());
      assertEquals(48352, tiffField0.getTag());
      assertEquals(15L, tiffField0.getCount());
      assertEquals("0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort(1, "");
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)0;
      TiffField tiffField0 = new TiffField(600, 2466, fieldTypeShort0, (byte)1, (byte)1, byteArray0, byteOrder0, (-1802));
      tiffField0.getIntArrayValue();
      assertEquals(2466, tiffField0.getDirectoryType());
      assertEquals(2, tiffField0.getBytesLength());
      assertEquals(1, tiffField0.getOffset());
      assertEquals((-1802), tiffField0.getSortHint());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(600, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)38;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)47, (-32), fieldTypeShort0, (byte)47, (byte)47, byteArray0, byteOrder0, (byte) (-1));
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      int int0 = tiffField0.getTag();
      assertEquals((-1), tiffField0.getSortHint());
      assertEquals(47, tiffField0.getOffset());
      assertEquals(94, tiffField0.getBytesLength());
      assertEquals(47, int0);
      assertEquals((-32), tiffField0.getDirectoryType());
      assertEquals(47L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble((-2213), "AA#");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)5;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-1), 8, fieldTypeDouble0, 8, 8, byteArray0, byteOrder0, (byte)5);
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [D@66744c56 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[0];
      TiffField tiffField0 = new TiffField(19, 19, fieldTypeByte0, 19, 859L, byteArray0, (ByteOrder) null, 19);
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@72b46fc0 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(35, "UTF-16BE");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      byteArray0[2] = (byte)23;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(1374, 1374, fieldTypeRational0, 2226L, 2816L, byteArray0, byteOrder0, 65535);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(1374, tiffField0.getTag());
      assertEquals(0, int0);
      assertEquals(65535, tiffField0.getSortHint());
      assertEquals(1374, tiffField0.getDirectoryType());
      assertEquals(2816, tiffField0.getOffset());
      assertEquals(17808, tiffField0.getBytesLength());
      assertEquals(2226L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-82);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)92;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(2, 2, fieldTypeLong0, 1170L, 59L, byteArray0, byteOrder0, (byte) (-82));
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)20;
      byteArray0[0] = (byte) (-14);
      byteArray0[5] = (byte)97;
      TiffField tiffField0 = new TiffField(50718, 50718, fieldTypeByte0, (-2154L), 50718, byteArray0, (ByteOrder) null, (byte)1);
      String string0 = tiffField0.getTagName();
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(50718, tiffField0.getTag());
      assertEquals(50718, tiffField0.getOffset());
      assertEquals(50718, tiffField0.getDirectoryType());
      assertEquals("DefaultScale", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[214];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte) (-5), 10, fieldTypeDouble0, (byte)1, (byte) (-5), byteArray0, byteOrder0, 1448);
      String string0 = tiffField0.getValueDescription();
      assertEquals((-5), tiffField0.getOffset());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(1448, tiffField0.getSortHint());
      assertEquals((-5), tiffField0.getTag());
      assertEquals(8, tiffField0.getBytesLength());
      assertNotNull(string0);
      assertEquals(10, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(1374, "UTF-16BE");
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)23;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(1374, 1374, fieldTypeRational0, 2226L, 2816L, byteArray0, byteOrder0, 65535);
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort(948, "5a-p=|r)0");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-99);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(948, 1469, fieldTypeShort0, 948, 191L, byteArray0, byteOrder0, (byte)0);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(1469, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(948L, tiffField0.getCount());
      assertEquals(191, tiffField0.getOffset());
      assertEquals(1896, tiffField0.getBytesLength());
      assertEquals(948, tiffField0.getTag());
      assertEquals((-99), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort(288, "Expcted String value(");
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-115);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(42033, 42033, fieldTypeShort0, 100L, 100L, byteArray0, byteOrder0, 42033);
      tiffField0.getDoubleArrayValue();
      assertEquals(200, tiffField0.getBytesLength());
      assertEquals(42033, tiffField0.getSortHint());
      assertEquals(100L, tiffField0.getCount());
      assertEquals(42033, tiffField0.getTag());
      assertEquals(100, tiffField0.getOffset());
      assertEquals(42033, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[83];
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Float.BYTES;
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(95, 17, fieldTypeShort0.SBYTE, 1L, 1L, byteArray0, byteOrder0, 17);
      int int1 = tiffField0.getOffset();
      assertEquals(1, int1);
      
      boolean boolean0 = tiffField0.isLocalValue();
      assertEquals(1L, tiffField0.getCount());
      assertTrue(boolean0);
      
      tiffField0.getDoubleValue();
      tiffField0.getIntValueOrArraySum();
      assertEquals(17, tiffField0.getSortHint());
      assertEquals(17, tiffField0.getDirectoryType());
      assertEquals(95, tiffField0.getTag());
      assertEquals(1, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(40, (String) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)5;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-17);
      byteArray0[8] = (byte)12;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(40, 40, fieldTypeRational0, 5512L, 40, byteArray0, byteOrder0, (byte)66);
      int int0 = tiffField0.getOffset();
      assertEquals(40, int0);
      
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals(66, tiffField0.getSortHint());
      assertArrayEquals(new double[] {(-0.7062185792807845)}, doubleArray0, 0.01);
      assertEquals(40, tiffField0.getTag());
      assertEquals(40, tiffField0.getDirectoryType());
      assertEquals(44096, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      byte[] byteArray0 = new byte[10];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-2487), 782, fieldTypeLong0, 782, 782, byteArray0, byteOrder0, 782);
      tiffField0.getIntValueOrArraySum();
      tiffField0.getFieldTypeName();
      FieldTypeLong fieldTypeLong1 = FieldType.IFD;
      assertNotSame(fieldTypeLong1, fieldTypeLong0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(65572, 15, fieldTypeAscii0, (byte)1, 65572, byteArray0, byteOrder0, 65572);
      int int0 = tiffField0.getTag();
      assertEquals(65572, int0);
      
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      assertEquals(65572, tiffField0.getOffset());
      assertEquals(1, tiffField0.getBytesLength());
      assertEquals(15, tiffField0.getDirectoryType());
      assertEquals(65572, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat((-157), "");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)42;
      TiffField tiffField0 = new TiffField(50937, (-157), fieldTypeFloat0, 1511L, 50937, byteArray0, (ByteOrder) null, (byte)50);
      tiffField0.getDoubleArrayValue();
      assertEquals(50937, tiffField0.getTag());
      assertEquals(6044, tiffField0.getBytesLength());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(50937, tiffField0.getOffset());
      assertEquals((-157), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)44;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(616, 616, fieldTypeDouble0, 616, 0L, byteArray0, byteOrder0, (byte)44);
      tiffField0.getDoubleArrayValue();
      assertEquals(4928, tiffField0.getBytesLength());
      assertEquals(44, tiffField0.getSortHint());
      assertEquals(616, tiffField0.getTag());
      assertEquals(616, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      byte[] byteArray0 = new byte[370];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-37), (-37), fieldTypeLong0.DOUBLE, 274, 274, byteArray0, byteOrder0, (-104));
      tiffField0.getTagInfo();
      Pattern.quote("Unknown Tag");
      String string0 = tiffField0.getValueDescription();
      assertEquals((-104), tiffField0.getSortHint());
      assertEquals(274, tiffField0.getOffset());
      assertEquals((-37), tiffField0.getDirectoryType());
      assertEquals((-37), tiffField0.getTag());
      assertNotNull(string0);
      assertEquals("0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      ByteOrder.nativeOrder();
      Byte byte0 = new Byte((byte)9);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      TiffField tiffField0 = new TiffField(65535, (byte)9, fieldTypeAscii0, (byte)9, (byte)53, byteArray0, byteOrder0, 3918);
      int int0 = Pattern.CASE_INSENSITIVE;
      String string0 = tiffField0.getStringValue();
      assertNotNull(string0);
      assertEquals(53, tiffField0.getOffset());
      assertEquals(65535, tiffField0.getTag());
      assertEquals(9, tiffField0.getBytesLength());
      assertEquals(3918, tiffField0.getSortHint());
      assertEquals(9, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[72];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii((byte) (-8), "SzAZU416[Rz$a$");
      TiffField tiffField0 = new TiffField((byte) (-8), (byte) (-8), fieldTypeAscii0, 35200L, (byte) (-8), byteArray0, byteOrder0, (byte) (-8));
      tiffField0.toString();
      assertEquals((-8), tiffField0.getOffset());
      assertEquals(35200, tiffField0.getBytesLength());
      assertEquals((-8), tiffField0.getTag());
      assertEquals((-8), tiffField0.getSortHint());
      assertEquals((-8), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[407];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      TiffField tiffField0 = new TiffField((-104), (-104), fieldTypeByte0, 90, 1105L, byteArray0, byteOrder0, 90);
      String string0 = tiffField0.toString();
      assertEquals(1105, tiffField0.getOffset());
      assertEquals(90, tiffField0.getSortHint());
      assertEquals((-104), tiffField0.getDirectoryType());
      assertEquals("-104 (0xffffff98: Unknown Tag): 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0... (90) (90 Byte)", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      byte[] byteArray0 = new byte[112];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Long.SIZE;
      TiffField tiffField0 = new TiffField(64, 64, fieldTypeLong0.SHORT, 48320, 48320, byteArray0, byteOrder0, 64);
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      tiffField0.getValueDescription();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      try { 
        FieldType.getFieldType(1372);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Field type 1372 is unsupported
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[214];
      int int0 = Long.SIZE;
      ByteOrder.nativeOrder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder.nativeOrder();
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldType.getFieldType((byte)12);
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(15, (-420), fieldTypeLong0, (byte)94, 1L, byteArray0, byteOrder0, 39);
      String string0 = tiffField0.getValueDescription();
      assertEquals(1, tiffField0.getOffset());
      assertEquals(15, tiffField0.getTag());
      assertEquals((-420), tiffField0.getDirectoryType());
      assertNotNull(string0);
      assertEquals(39, tiffField0.getSortHint());
      assertEquals("0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0... (53)", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[214];
      int int0 = Pattern.CANON_EQ;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(48352, 877, fieldTypeLong0.FLOAT, 128, 128, byteArray0, byteOrder0, 128);
      tiffField0.getValueDescription();
      MockFile mockFile0 = new MockFile("v~>C", "v~>C");
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      byte[] byteArray0 = new byte[426];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-34), (-34), fieldTypeLong0.DOUBLE, 274, 274, byteArray0, byteOrder0, (-104));
      tiffField0.getValueDescription();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      try { 
        fieldTypeByte0.writeData(mockThaiBuddhistDate0, byteOrder1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid data: org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@321f1bd9 (org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte", e);
      }
  }
}
