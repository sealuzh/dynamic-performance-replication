/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 22:26:30 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import com.google.re2j.Simplify;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Simplify_ESTest extends Simplify_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.equals(regexp1);
      Regexp regexp2 = new Regexp(regexp0);
      Object object0 = new Object();
      regexp2.equals(object0);
      regexp1.reinit();
      Regexp[] regexpArray0 = new Regexp[5];
      regexp0.subs = regexpArray0;
      Regexp regexp3 = Simplify.simplify(regexp0);
      regexpArray0[0] = regexp3;
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp4 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp4;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp1;
      regexp1.subs = regexpArray0;
      Regexp regexp5 = Simplify.simplify(regexp2);
      regexp5.min = 0;
      regexp2.flags = (-1534);
      regexp5.toString();
      Simplify.simplify(regexp5);
      Simplify.simplify(regexp5);
      Regexp regexp6 = Simplify.simplify(regexp1);
      Simplify.simplify(regexp6);
      Simplify.simplify(regexp5);
      Simplify.simplify(regexp2);
      Regexp.Op regexp_Op2 = Regexp.Op.ALTERNATE;
      Regexp regexp7 = new Regexp(regexp_Op2);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 1821;
      regexp0.flags = 1821;
      regexp0.equals("x_");
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-2);
      Regexp[] regexpArray0 = new Regexp[5];
      regexp0.subs = regexpArray0;
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.ALTERNATE;
      regexp0.op = regexp_Op1;
      regexp0.op = regexp_Op0;
      regexp0.equals(regexp_Op0);
      regexp0.cap = 0;
      Regexp regexp1 = Simplify.simplify(regexp0);
      regexp0.flags = 0;
      regexp1.cap = 3;
      regexp1.cap = (-1695);
      int[] intArray0 = new int[0];
      regexp1.runes = intArray0;
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      regexp1.min = 0;
      regexpArray0[3] = regexp0;
      regexp1.subs = regexpArray0;
      Simplify.simplify(regexp1);
      regexp0.max = (-1695);
      Regexp[] regexpArray1 = new Regexp[3];
      regexpArray1[0] = regexp1;
      regexp0.min = (-1695);
      regexp1.cap = 230;
      regexpArray1[1] = regexp0;
      regexpArray1[2] = regexp0;
      regexp0.subs = regexpArray1;
      Simplify.simplify(regexp1);
      Simplify.simplify(regexp0);
      Simplify.simplify(regexp0);
      Regexp regexp2 = new Regexp(regexp0.op);
      Regexp regexp3 = new Regexp(regexp2);
      Regexp regexp4 = Simplify.simplify(regexp3);
      Regexp regexp5 = new Regexp(regexp3);
      assertFalse(regexp5.equals((Object)regexp4));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[1];
      regexp0.subs = regexpArray0;
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.equals(regexp_Op0);
      regexp0.cap = 43;
      Regexp regexp1 = Simplify.simplify(regexp0);
      regexp0.flags = 0;
      regexp1.cap = 3;
      regexp1.cap = 3579;
      int[] intArray0 = new int[0];
      regexp1.runes = intArray0;
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      regexp1.subs = regexpArray0;
      Simplify.simplify(regexp1);
      regexp0.max = 3579;
      regexp0.flags = 65455;
      Regexp[] regexpArray1 = new Regexp[3];
      regexpArray1[0] = regexp1;
      regexp1.cap = 0;
      regexpArray1[1] = regexp0;
      regexpArray1[2] = regexp0;
      regexp1.name = "";
      regexp0.subs = regexpArray1;
      Simplify.simplify(regexp0);
      Simplify.simplify(regexpArray0[1]);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.flags = 2;
      regexp1.cap = 2;
      regexp0.max = 2;
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp2 = Simplify.simplify(regexp0);
      Regexp regexp3 = Simplify.simplify(regexp2);
      assertSame(regexp3, regexp2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.ALTERNATE;
      regexp0.op = regexp_Op1;
      regexp0.op = regexp_Op0;
      regexp0.equals(regexp_Op0);
      Regexp regexp1 = Simplify.simplify(regexp0);
      regexp0.op.isPseudo();
      regexp0.flags = 0;
      regexp1.cap = 3;
      int[] intArray0 = new int[4];
      regexp1.runes = intArray0;
      Regexp regexp2 = new Regexp(regexp1);
      regexp0.max = 3;
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp1;
      regexpArray0[2] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp3 = Simplify.simplify(regexp1);
      Regexp regexp4 = Simplify.simplify(regexp0);
      regexp3.op = regexp0.op;
      Regexp regexp5 = new Regexp(regexp4);
      Simplify.simplify(regexp0);
      Regexp regexp6 = Simplify.simplify(regexp4);
      Simplify.simplify(regexp3);
      Regexp regexp7 = Simplify.simplify(regexp0);
      assertTrue(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp5));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = Simplify.simplify(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      regexp1.op = regexp_Op1;
      regexp1.cap = 62;
      regexp0.min = 62;
      regexp0.max = 62;
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[1] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp2 = Simplify.simplify(regexp0);
      assertNotSame(regexp0, regexp2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 47;
      regexp0.max = 0;
      Regexp[] regexpArray0 = new Regexp[10];
      regexp0.subs = regexpArray0;
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = Simplify.simplify(regexp0);
      Regexp[] regexpArray0 = new Regexp[10];
      regexpArray0[0] = regexp1;
      regexp0.min = 7;
      regexp0.subs = regexpArray0;
      regexp0.max = 11;
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp regexp3 = Simplify.simplify(regexp0);
      assertFalse(regexp3.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-2);
      regexp0.min = 1;
      Regexp[] regexpArray0 = new Regexp[5];
      regexp0.subs = regexpArray0;
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertNotSame(regexp0, regexp1);
  }
}
