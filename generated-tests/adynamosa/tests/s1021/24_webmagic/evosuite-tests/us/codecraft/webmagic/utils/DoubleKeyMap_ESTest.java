/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 09:32:17 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>();
      Integer integer0 = new Integer(636);
      doubleKeyMap0.put((Object) integer0, (Integer) null, (Integer) null);
      Integer integer1 = doubleKeyMap0.remove((Object) integer0, (Integer) null);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>();
      Integer integer0 = new Integer(636);
      Integer integer1 = new Integer(636);
      doubleKeyMap0.put((Object) integer0, integer1, integer1);
      Integer integer2 = doubleKeyMap0.remove((Object) integer1, integer0);
      assertTrue(integer2.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(3907);
      Integer integer1 = new Integer(3907);
      DoubleKeyMap<Integer, Integer, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<Object, Integer>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      doubleKeyMap0.put(integer0, integer0, hashMap0);
      HashMap<Object, Integer> hashMap1 = doubleKeyMap0.get(integer1, integer0);
      assertSame(hashMap1, hashMap0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<HashMap<Integer, Object>, String> hashMap0 = new HashMap<HashMap<Integer, Object>, String>();
      DoubleKeyMap<String, Integer, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, Integer, HashMap<Object, String>>();
      Map<String, Map<Object, Map<HashMap<Integer, Object>, String>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Object, Map<HashMap<Integer, Object>, String>> doubleKeyMap1 = new DoubleKeyMap<String, Object, Map<HashMap<Integer, Object>, String>>(map0);
      doubleKeyMap1.put("", (Object) "", (Map<HashMap<Integer, Object>, String>) hashMap0);
      Map<Object, Map<HashMap<Integer, Object>, String>> map1 = doubleKeyMap1.remove("");
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(624);
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap0.put(integer0, hashMap1);
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>(hashMap0);
      Map<Object, String> map0 = doubleKeyMap0.get(integer0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>();
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>(hashMap0);
      Integer integer0 = new Integer(1298);
      doubleKeyMap0.put(integer0, (Object) integer0, "({");
      Map<Object, String> map0 = doubleKeyMap0.get(integer0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<Map<HashMap<Integer, Object>, String>, Map<Object, Integer>> hashMap0 = new HashMap<Map<HashMap<Integer, Object>, String>, Map<Object, Integer>>();
      DoubleKeyMap<Map<HashMap<Integer, Object>, String>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Integer, Object>, String>, Object, Integer>(hashMap0, class0);
      Object object0 = new Object();
      Integer integer0 = doubleKeyMap0.remove((Map<HashMap<Integer, Object>, String>) null, object0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>();
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>(hashMap0);
      Integer integer0 = new Integer(1298);
      DoubleKeyMap<Object, HashMap<Object, Object>, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, Object>, Integer>();
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Object>(map0);
      Object object0 = doubleKeyMap2.remove((Object) doubleKeyMap0, (Object) integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(hashMap0);
      Map<Object, Object> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Map<String, Map<HashMap<Integer, Object>, String>>> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Map<String, Map<HashMap<Integer, Object>, String>>>();
      Object object0 = new Object();
      Map<Integer, Map<String, Map<HashMap<Integer, Object>, String>>> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<String, Integer, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, Integer, HashMap<Object, Integer>>();
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(hashMap0);
      Object object0 = doubleKeyMap1.put((Object) "", (Object) hashMap0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(636);
      DoubleKeyMap<Integer, Integer, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<Object, Integer>>();
      HashMap<Object, Map<Integer, String>> hashMap0 = new HashMap<Object, Map<Integer, String>>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>(hashMap0);
      String string0 = doubleKeyMap1.put((Object) doubleKeyMap0, integer0, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>(class0);
      Integer integer0 = doubleKeyMap1.get((Object) null, (Object) doubleKeyMap0);
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<String, Object, Integer>(hashMap0);
      Integer integer1 = doubleKeyMap2.put("us.codecraft.webmagic.utils.DoubleKeyMap", (Object) doubleKeyMap0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>();
      HashMap<Object, Map<String, HashMap<String, String>>> hashMap0 = new HashMap<Object, Map<String, HashMap<String, String>>>();
      DoubleKeyMap<Object, String, HashMap<String, String>> doubleKeyMap1 = new DoubleKeyMap<Object, String, HashMap<String, String>>(hashMap0);
      HashMap<String, String> hashMap1 = doubleKeyMap1.get((Object) doubleKeyMap0, "us.codecraft.webmagic.utils.DoubleKeyMap");
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Integer, Map<Object, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, Object>, String>();
      Map<Map<Object, Object>, String> map0 = doubleKeyMap0.get((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<String, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, String>, Object>();
      Map<Object, Map<String, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(map0, class0);
      Map<String, String> map1 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>();
      Integer integer0 = new Integer(636);
      doubleKeyMap0.put((Object) integer0, integer0, integer0);
      Integer integer1 = doubleKeyMap0.remove((Object) integer0, (Integer) null);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>();
      Integer integer0 = new Integer(636);
      doubleKeyMap0.put((Object) integer0, integer0, integer0);
      Integer integer1 = doubleKeyMap0.put((Object) integer0, (Integer) null, (Integer) null);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Map<Integer, HashMap<Object, Integer>>> hashMap0 = new HashMap<Integer, Map<Integer, HashMap<Object, Integer>>>();
      DoubleKeyMap<Integer, Integer, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<Object, Integer>>(hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      doubleKeyMap0.put((Integer) null, (Integer) null, hashMap1);
      doubleKeyMap0.get((Integer) null, (Integer) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<HashMap<Integer, Object>, String>, Integer, Map<Integer, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Integer, Object>, String>, Integer, Map<Integer, String>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
