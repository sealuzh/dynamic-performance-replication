/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:09:26 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.RenderingHints;
import java.io.File;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.DateTimeException;
import java.time.DayOfWeek;
import java.time.Instant;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.time.chrono.MinguoDate;
import java.time.format.TextStyle;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;
import java.util.Currency;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.SortedMap;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.UUID;
import java.util.Vector;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.unwrapOptional(type0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<?> class1 = TypeUtils.loadClass("fastjson.parser.autoTypeAccept", classLoader0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[12];
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      Locale locale0 = Locale.JAPAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ParserConfig.DENY_PROPERTY;
      HashMap<NoSuchFieldException, DateFormatSymbols> hashMap0 = new HashMap<NoSuchFieldException, DateFormatSymbols>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Method> class0 = Method.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class1, map0);
      LinkedHashSet<JSONPDeserializer> linkedHashSet0 = new LinkedHashSet<JSONPDeserializer>();
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      JavaBeanDeserializer javaBeanDeserializer0 = null;
      try {
        javaBeanDeserializer0 = new JavaBeanDeserializer((ParserConfig) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<String> class0 = String.class;
      Map<String, String> map0 = null;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(serializeBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.serializer.SerializeBeanInfo@3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TypeUtils.toLocale("#d_x<Y@");
      TypeUtils.fnv1a_64_lower("k7m%4|4dwn62");
      Class<OptionalCodec> class0 = OptionalCodec.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, hashtable0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<NumberFormatException> class0 = NumberFormatException.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      boolean boolean0 = TypeUtils.isProxy(class0);
      boolean boolean1 = TypeUtils.isGenericParamType(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TypeUtils.getCollectionItemClass((Type) null);
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.isProxy(class0);
      TypeUtils.decapitalize("o");
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class1, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance_timestamp;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<MockDate> class0 = MockDate.class;
      TypeUtils.isProxy(class0);
      ParserConfig.getGlobalInstance();
      Class<Character> class1 = Character.TYPE;
      Object object0 = new Object();
      identityHashMap0.put("fastjson.parser.autoTypeSupport", "fastjson.parser.deny");
      InternalError internalError0 = new InternalError("fastjson.parser.autoTypeAccept", (Throwable) null);
      Class<Boolean> class2 = Boolean.TYPE;
      TypeUtils.getGenericParamType(class1);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class1, (Type) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      DataTruncation dataTruncation0 = new DataTruncation(57, true, true, 68, 50, (Throwable) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) dataTruncation0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<MockDate> class0 = MockDate.class;
      TypeUtils.isProxy(class0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Character> class1 = Character.TYPE;
      Object object0 = new Object();
      Class<TimeDeserializer> class2 = TimeDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      TypeUtils.toLocale("istoString");
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      Field field0 = null;
      FieldInfo fieldInfo0 = new FieldInfo("=", class0, class0, class1, (Field) null, 36, 36, 36);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class1, class2);
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "istoString", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.toLocale("java.util.concurrent.ConcurrentSkipListSet");
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Constructor<SQLInvalidAuthorizationSpecException>[] constructorArray0 = (Constructor<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      TypeUtils.isHibernateInitialized(propertyNamingStrategy0);
      Class<Short> class1 = Short.TYPE;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[1]);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, parameterizedTypeImpl0);
      parameterizedTypeImpl0.getTypeName();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      AtomicLong atomicLong0 = new AtomicLong((-1705L));
      parameterizedTypeImpl1.getTypeName();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@52d01e57
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TypeUtils.castToChar((Object) null);
      TypeUtils.castToChar((Object) null);
      TypeUtils.castToSqlDate((Object) null);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      JavaBeanInfo.getBuilderClass(class0, (JSONType) null);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) null;
      typeArray0[2] = (Type) null;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], typeArray0[5]);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], class0);
      parameterizedTypeImpl1.getTypeName();
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.autoTypeSupport", (String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTimeoutException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.text.StringCharacterIterator
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      Class<SQLException> class1 = SQLException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      TypeUtils.getCollectionItemType(class2);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      TypeUtils.getRawClass(class2);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      String string0 = null;
      String string1 = "long";
      ParserConfig parserConfig0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockThaiBuddhistDate0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"MockedClassName\":\"java.time.chrono.ThaiBuddhistDate\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      Class<?> class1 = TypeUtils.getCollectionItemClass(type0);
      TypeUtils typeUtils0 = new TypeUtils();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute("NULL_CAUSE_MESSAGE", biFunction0);
      hashMap0.put((String) null, "NULL_CAUSE_MESSAGE");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) hashMap0, propertyNamingStrategy0, true);
      Class<?> class2 = TypeUtils.getClass(type0);
      ClassLoader classLoader0 = null;
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Class<?> class3 = TypeUtils.getRawClass(class2);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class2;
      typeArray0[2] = (Type) class3;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = type0;
      typeArray0[6] = type0;
      Class<Character> class4 = Character.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], class4);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) hashMap0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<Object> class0 = Object.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      String string0 = "j";
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(instantiationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.lang.InstantiationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=r[OwM_c";
      stringArray0[1] = ",'tSTxj9b";
      stringArray0[3] = "Ljava.awt.Font";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.decapitalize("<^ts\"a-uU/y*_J");
      ParserConfig.getGlobalInstance();
      Class<Character> class1 = Character.TYPE;
      Object object0 = new Object();
      Class<BufferCapabilities> class2 = BufferCapabilities.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      TypeUtils.toLocale("<^ts\"a-uU/y*_J");
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class1;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      ConcurrentHashMap<JSONPDeserializer, NoSuchMethodException> concurrentHashMap0 = new ConcurrentHashMap<JSONPDeserializer, NoSuchMethodException>();
      Class<StackTraceElementDeserializer> class3 = StackTraceElementDeserializer.class;
      TypeUtils.buildBeanInfo(class3, (Map<String, String>) null, (PropertyNamingStrategy) null);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      Class<Locale> class4 = Locale.class;
      String[] stringArray1 = TypeUtils.getKoltinConstructorParameters(class4);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      Class<Double> class0 = Double.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
      Class<Byte> class1 = Byte.TYPE;
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      assertFalse(class2.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<OutOfMemoryError> class0 = OutOfMemoryError.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      StackOverflowError stackOverflowError0 = new StackOverflowError((String) null);
      TypeUtils.castToFloat((Object) null);
      TypeUtils.isGenericParamType(class0);
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.getRawClass(class0);
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.getParserFeatures(class0);
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      ParameterizedTypeImpl parameterizedTypeImpl0 = TypeUtils.castToJavaBean((Object) null, class1);
      assertNull(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "getshortValue");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\":");
      TypeUtils.fnv1a_64_lower("LgetfillInStackTrace");
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PageAttributes pageAttributes0 = new PageAttributes();
      PageAttributes pageAttributes1 = new PageAttributes(pageAttributes0);
      ArrayList<JobAttributes> arrayList0 = new ArrayList<JobAttributes>();
      Class<BreakIterator> class0 = BreakIterator.class;
      TypeUtils.isPath(class0);
      TypeUtils.decapitalize("Z");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<FieldInfo> class0 = FieldInfo.class;
      TypeUtils.isKotlin(class0);
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.decapitalize("M<48/");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Character> class0 = Character.TYPE;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      Class<Character> class1 = Character.TYPE;
      TypeUtils.isNumber("oracle.sql.DATE");
      InstantiationError instantiationError0 = new InstantiationError();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) instantiationError0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.lang.InstantiationError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TypeUtils.isNumber("JW:0ec3uay@");
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("JW:0ec3uay@");
      mockIllegalStateException0.getStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(mockIllegalStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.lang.MockThrowable: JW:0ec3uay@
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      String[] stringArray0 = new String[5];
      String string0 = "=r[OwM_c";
      Class<ThrowableDeserializer> class1 = ThrowableDeserializer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, stringArray0);
      javaBeanSerializer0.getType();
      TypeUtils.getRawClass(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("=r[OwM_c");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("}f)rl;m?{nEKX%g");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean.valueOf("}f)rl;m?{nEKX%g");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("}f)rl;m?{nEKX%g", "double");
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
      String string0 = null;
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement((String) null, "org.evosuite.runtime.mock.OverrideMock", "Z_7l6VqUv^", 90);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils.toLocale("gettoPattern");
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getGenericParamType(class0);
      TypeUtils.castToString(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "java.lang.Class@0000000001", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.RuntimeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<Collator> class0 = Collator.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(noSuchMethodError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.NoSuchMethodError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      TypeUtils.castToTimestamp((Object) null);
      Class<Object> class0 = Object.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TypeUtils.loadClass("@2s5%r?*W}U8dfIG9");
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("", identityHashMap0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) timeDeserializer0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class0, map0);
      Class<Byte> class1 = Byte.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      VerifyError verifyError0 = new VerifyError("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) verifyError0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.VerifyError: fastjson.parser.deny
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      Class<Double> class0 = Double.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<MapDeserializer> class1 = MapDeserializer.class;
      TypeUtils.getSerializeFeatures(class1);
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(timeDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.deserializer.TimeDeserializer@3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TypeUtils.castToChar((Object) null);
      TypeUtils.castToChar((Object) null);
      TypeUtils.castToSqlDate((Object) null);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      JavaBeanInfo.getBuilderClass(class0, (JSONType) null);
      Class<NoSuchMethodException> class1 = NoSuchMethodException.class;
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      Collection collection0 = TypeUtils.createCollection(class2);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=r[OwM_c";
      stringArray0[1] = "=r[OwM_c";
      stringArray0[3] = "Ljava.awt.FAnt";
      stringArray0[4] = "Ljava.awt.FAnt";
      AtomicInteger atomicInteger0 = new AtomicInteger((-1726138035));
      Locale locale0 = Locale.JAPAN;
      TypeUtils.isNumber("(Ljava/lang/Class;");
      TypeUtils.toLocale("toGenericString");
      Class<Boolean> class0 = Boolean.class;
      TypeUtils.loadClass("Ljava.awt.FAnt");
      TypeUtils.getCollectionItemClass(class0);
      JSONObject jSONObject0 = new JSONObject();
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer(com.alibaba.fastjson.parser.ParserConfig,java.lang.Class<?>,java.lang.reflect.Type)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(1344L);
      TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap");
      Class<Method> class0 = Method.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("Lorg.springframework.util.LinkedMultiValueMap", true);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Lorg.springframework.util.LinkedMultiValueMap", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "getNaN", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("Ljava.awt.Color", linkedHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("int", class0, class0, class0, (Field) null, 51, (-823), (-823));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TypeUtils.castToDouble((Object) null);
      TypeUtils.isHibernateInitialized((Object) null);
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      LinkageError linkageError0 = new LinkageError();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("fastjson.parser.autoTypeAccept", linkageError0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Class<Boolean> class0 = Boolean.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      TypeUtils.loadClass("fastjson.parser.autoTypeAccept");
      ParserConfig parserConfig2 = new ParserConfig(false);
      long long0 = TypeUtils.fnv1a_64("fastjson.parser.deny");
      assertEquals(8807520128269719306L, long0);
      
      TypeUtils.unwrapOptional(class0);
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TypeUtils.loadClass(">bmkoV%DUB");
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) hashtable0, propertyNamingStrategy0, true);
      TypeUtils.loadClass(">bmkoV%DUB");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getGenericParamType((Type) null);
      DayOfWeek dayOfWeek0 = DayOfWeek.SUNDAY;
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      Locale locale0 = Locale.GERMAN;
      dayOfWeek0.getDisplayName(textStyle0, locale0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("width", "width");
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) hashtable0, propertyNamingStrategy1, false);
      TypeUtils.getClass(type0);
      Type type1 = TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.getCollectionItemClass(type1);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance_timestamp;
      Class<Dimension> class0 = Dimension.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>(1023);
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      hashMap0.compute("K^Qq X", biFunction0);
      hashMap0.put((String) null, (String) null);
      Class<Throwable> class1 = Throwable.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashMap0, propertyNamingStrategy0, false);
      TypeUtils.getClass((Type) class1);
      TypeUtils.getCollectionItemClass(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.Throwable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance_timestamp;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<MockDate> class0 = MockDate.class;
      TypeUtils.isProxy(class0);
      TypeUtils.decapitalize("$VALUES");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Character> class1 = Character.TYPE;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sqlDateDeserializer0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[B");
      Class<Locale> class0 = Locale.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>((SortedMap<String, ? extends String>) treeMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap1, propertyNamingStrategy0);
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("j");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(stringCharacterIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.text.StringCharacterIterator@6b
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("j");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(stringCharacterIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.text.StringCharacterIterator@6b
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Method> class0 = Method.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.decapitalize(",'tSTxj9b");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Character> class1 = Character.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : char
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      TypeUtils.getGenericParamType(class0);
      Class<Field> class1 = Field.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class1, weakHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.unwrapOptional(type0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException("fastjson.parser.autoTypeSupport");
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) noSuchMethodException0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TypeUtils.toLocale("#d_x<Y@");
      TypeUtils.fnv1a_64_lower("#d_x<Y@");
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TypeUtils.castToBoolean((Object) null);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<DataTruncation> class0 = DataTruncation.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.sql.DataTruncation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Method> class0 = Method.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.unwrapOptional(class0);
      BreakIterator.getWordInstance();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashtable0.clone();
      BreakIterator.getCharacterInstance();
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance();
      hashtable0.put("gettoLowerCase", breakIterator0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      ParserConfig parserConfig1 = ParserConfig.global;
      TypeUtils.castToJavaBean((Map<String, Object>) hashtable0, class1, parserConfig1);
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = Locale.ENGLISH;
      Locale locale2 = Locale.ROOT;
      locale0.getDisplayName(locale2);
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : PascalCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      LinkageError linkageError0 = new LinkageError();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("]4J;FfLX>AF;d", "-9223372036854775808");
      identityHashMap0.put("PATTERN_HOUR_OF_DAY1", "fastjson.parser.autoTypeAccept");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Class<Point> class0 = Point.class;
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("org.springframework.security.web.savedrequest.DefaultSavedRequest");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.deny", "PATTERN_HOUR_OF_DAY1", (byte)92, linkageError0);
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "-9223372036854775808", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Character> class0 = Character.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLNonTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      classLoader0.setDefaultAssertionStatus(true);
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("BHj~)Q'Jwy", classLoader0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("\"/e]]P)aDw", "\"/e]]P)aDw");
      Class<BitSet> class0 = BitSet.class;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TypeUtils.castToDate((Object) null);
      TypeUtils.isNumber("}@");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-12);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Character> class2 = Character.TYPE;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.cast((Object) null, (Type) class1, parserConfig0);
      Class<JobAttributes> class3 = JobAttributes.class;
      TypeUtils.getKoltinConstructorParameters(class3);
      TypeUtils.toLocale("fastjson.parser.deny");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Method> class0 = Method.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      Map<String, String> map0 = new TreeMap<String, String>();
      TypeUtils.getCollectionItemClass(class1);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.put("javax.servlet.http.Cookie", "javax.servlet.http.Cookie");
      Class<Byte> class2 = Byte.class;
      TypeUtils.getClass((Type) class0);
      Class<MockJapaneseDate> class3 = MockJapaneseDate.class;
      TypeUtils.getKoltinConstructorParameters(class3);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      mockSimpleDateFormat0.getNumberFormat();
      TypeUtils.castToBytes("javax.servlet.http.Cookie");
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.put("toS", (Object) class2);
      jSONObject0.put("3qF]q(*}~T'4", (Object) class3);
      jSONObject0.getJSONObject("3qF]q(*}~T'4");
      String string0 = "org.apache.ibatis.javassist.util.proxy.ProxyObject";
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.ibatis.javassist.util.proxy.ProxyObject\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=r[OwM_c";
      stringArray0[3] = "Ljava.awt.Font";
      stringArray0[4] = "java.util.concurrent.atomic.DoubleAdder";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      Class<?> class1 = javaBeanSerializer0.getType();
      AtomicLong atomicLong0 = new AtomicLong((-1118L));
      Class<PropertyNamingStrategy> class2 = PropertyNamingStrategy.class;
      JavaBeanSerializer javaBeanSerializer1 = new JavaBeanSerializer(class2);
      javaBeanSerializer0.getSize(class1);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      Throwable throwable0 = null;
      SQLWarning sQLWarning0 = new SQLWarning(",'tSTxj9b", (String) null, 0, (Throwable) null);
      Class<Object> class3 = Object.class;
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("/!I-\"?r\"m4bb");
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) noSuchMethodError0, class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TypeUtils.decapitalize(",'tSTxj9b");
      ParserConfig parserConfig0 = ParserConfig.global;
      byte[] byteArray0 = new byte[7];
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<Field> class0 = Field.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = ParserConfig.DENY_PROPERTY;
      // Undeclared exception!
      try { 
        MockLocalTime.of((int) (byte)23, 51, 97);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for SecondOfMinute (valid values 0 - 59): 97
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f%x6G6M-)v)%");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread("toString");
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("getfillInStackTrace", classLoader0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNull(class0);
      
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("?");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : ?
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Class class2 = (Class)TypeUtils.unwrapOptional(class1);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertEquals("int", class2.toString());
      assertNotNull(class2);
      
      Class class3 = (Class)TypeUtils.unwrapOptional(class1);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertEquals("int", class3.toString());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertTrue(class3.isPrimitive());
      assertSame(class3, class2);
      assertNotNull(class3);
      
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertFalse(boolean0);
      
      Class<SQLFeatureNotSupportedException> class4 = SQLFeatureNotSupportedException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) class0, class4, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      Insets insets0 = new Insets((-108916131), (-108916131), (-108916131), 1204);
      assertEquals((-108916131), insets0.left);
      assertEquals((-108916131), insets0.bottom);
      assertEquals((-108916131), insets0.top);
      assertEquals(1204, insets0.right);
      assertNotNull(insets0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(insets0);
      assertEquals((-108916131), insets0.left);
      assertEquals((-108916131), insets0.bottom);
      assertEquals((-108916131), insets0.top);
      assertEquals(1204, insets0.right);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LinkedHashSet<JSONPDeserializer> linkedHashSet0 = new LinkedHashSet<JSONPDeserializer>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      assertNotNull(jSONPDeserializer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.text.SimpleDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertNull(class1);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Class<?>) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(type0);
      assertFalse(boolean0);
      
      TypeUtils.clearClassMapping();
      Class<?> class2 = TypeUtils.getCollectionItemClass(type0);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = "org.springframework.remoting.support.RemoteInvocation";
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("org.springframework.remoting.support.RemoteInvocation").when(biFunction0).apply(anyString() , anyString());
      String string1 = hashMap0.compute("org.springframework.remoting.support.RemoteInvocation", biFunction0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string1);
      
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) genericArrayType0;
      typeArray0[2] = (Type) genericArrayType0;
      Class<Integer> class3 = Integer.TYPE;
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertEquals(1041, class3.getModifiers());
      assertEquals("int", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertNotNull(class3);
      
      typeArray0[3] = (Type) class3;
      typeArray0[4] = (Type) genericArrayType0;
      typeArray0[5] = (Type) class2;
      typeArray0[6] = type0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, type0, class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertNotNull(parameterizedTypeImpl0);
      
      String string2 = parameterizedTypeImpl0.getTypeName();
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeSupport", (Throwable) null);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: fastjson.parser.autoTypeSupport", sQLFeatureNotSupportedException0.toString());
      assertEquals("fastjson.parser.autoTypeSupport", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLFeatureNotSupportedException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      Class<SQLException> class1 = SQLException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.sql.SQLException", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      
      Class class3 = (Class)TypeUtils.getCollectionItemType(class2);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.sql.SQLException", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isAnnotation());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertNotNull(class3);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      Class<?> class4 = TypeUtils.getRawClass(class2);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.sql.SQLException", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class4.getModifiers());
      assertEquals("class java.sql.SQLException", class4.toString());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isAnnotation());
      assertSame(class2, class4);
      assertSame(class4, class2);
      assertNotNull(class4);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<LinkageError> class5 = LinkageError.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      String string0 = identityHashMap0.put((String) null, "long");
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      assertNull(string0);
      
      String string1 = identityHashMap0.put((String) null, "I7bZT(\"y");
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      assertNotNull(string1);
      assertEquals("long", string1);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(any() , anyString());
      String string2 = weakHashMap0.compute("Ljava.util.concurrent.ConcurrentSkipListMap", biFunction0);
      assertNull(string2);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class5, (Map<String, String>) weakHashMap0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(throwableDeserializer0);
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("className");
      assertEquals("java.lang.IllegalMonitorStateException: className", illegalMonitorStateException0.toString());
      assertEquals("className", illegalMonitorStateException0.getMessage());
      assertNotNull(illegalMonitorStateException0);
      
      parserConfig0.setAutoTypeSupport(true);
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      assertNotNull(noSuchMethodError0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(noSuchMethodError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.NoSuchMethodError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("[byte");
      assertTrue(class0.isArray());
      assertEquals("class [B", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class [B
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Method method0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class0 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Class<?> class0 = TypeUtils.loadClass(">bmkoV%DUB");
      assertNull(class0);
      
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
      
      DayOfWeek dayOfWeek0 = DayOfWeek.SUNDAY;
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = dayOfWeek0.getDisplayName(textStyle0, locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(string0);
      assertEquals("So", string0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string1 = hashMap0.put("width", "width");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string1);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertNotNull(class2);
      
      Collection collection0 = TypeUtils.createCollection(class2);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = TypeUtils.decapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Class<Exception> class1 = Exception.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<Character> class2 = Character.TYPE;
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertEquals("char", class2.toString());
      assertNotNull(class2);
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) identityHashMap0, (PropertyNamingStrategy) null, true);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertEquals("char", class2.toString());
      assertNotNull(serializeBeanInfo0);
      
      PageAttributes pageAttributes0 = new PageAttributes();
      assertNotNull(pageAttributes0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.lang.Exception
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Method> class0 = Method.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.replaceAll(biFunction0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      String string0 = hashtable0.remove((Object) "isgetCurrency");
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashtable0, propertyNamingStrategy0, false);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(serializeBeanInfo0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("lCH*Z[b'");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("lch*z[b'", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("lch*z[b'", locale0.toString());
      assertNotNull(locale0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      parserConfig0.setDefaultClassLoader(aSMDeserializerFactory0.classLoader);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertNotNull(javaBeanInfo0);
      
      Class<BitSet> class1 = BitSet.class;
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class1, (JSONType) null);
      assertNull(class2);
      
      ObjectDeserializer objectDeserializer0 = aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertNotNull(objectDeserializer0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class3 = TypeUtils.loadClass("lCH*Z[b'", (ClassLoader) aSMClassLoader0);
      assertNull(class3);
      
      TypeUtils.clearClassMapping();
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
      
      Constructor<Boolean>[] constructorArray0 = (Constructor<Boolean>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
      
      boolean boolean1 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null, (Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn(type0).when(genericArrayType1).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType1);
      assertNotNull(type1);
      assertFalse(type1.equals((Object)type0));
      
      TypeUtils.clearClassMapping();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class2 = TypeUtils.loadClass("zK 2O", classLoader1);
      assertNull(class2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Insets insets0 = new Insets((-108916141), (-108916141), (-108916141), 1204);
      assertEquals((-108916141), insets0.bottom);
      assertEquals((-108916141), insets0.left);
      assertEquals((-108916141), insets0.top);
      assertEquals(1204, insets0.right);
      assertNotNull(insets0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(insets0);
      assertEquals((-108916141), insets0.bottom);
      assertEquals((-108916141), insets0.left);
      assertEquals((-108916141), insets0.top);
      assertEquals(1204, insets0.right);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LinkedHashSet<JSONPDeserializer> linkedHashSet0 = new LinkedHashSet<JSONPDeserializer>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      assertNotNull(jSONPDeserializer0);
      
      String string0 = "java.util.HashMap";
      StackTraceElement stackTraceElement0 = new StackTraceElement("vYtH4JZ!\"o5aoA<", "vYtH4JZ!\"o5aoA<", "java.util.HashMap", 659);
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("java.util.HashMap", stackTraceElement0.getFileName());
      assertEquals("vYtH4JZ!\"o5aoA<", stackTraceElement0.getClassName());
      assertEquals("vYtH4JZ!\"o5aoA<.vYtH4JZ!\"o5aoA<(java.util.HashMap:659)", stackTraceElement0.toString());
      assertEquals("vYtH4JZ!\"o5aoA<", stackTraceElement0.getMethodName());
      assertEquals(659, stackTraceElement0.getLineNumber());
      assertNotNull(stackTraceElement0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertNotNull(mockSimpleDateFormat0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)mockSimpleDateFormat0.getNumberFormat();
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("###0", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals("###0", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertNotNull(decimalFormat0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = TypeUtils.decapitalize("M<48/");
      assertNotNull(string0);
      assertEquals("m<48/", string0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<Character> class0 = Character.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.loadClass("fastjson.parser.autoTypeSupport", (ClassLoader) null);
      assertNull(class1);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("M<48/", "fastjson.parser.autoTypeSupport", "fastjson.parser.deny", (byte)24);
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("fastjson.parser.deny", stackTraceElement0.getFileName());
      assertEquals("M<48/.fastjson.parser.autoTypeSupport(fastjson.parser.deny:24)", stackTraceElement0.toString());
      assertEquals(24, stackTraceElement0.getLineNumber());
      assertEquals("M<48/", stackTraceElement0.getClassName());
      assertEquals("fastjson.parser.autoTypeSupport", stackTraceElement0.getMethodName());
      assertNotNull(stackTraceElement0);
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
      assertNotNull(numberFormatException0);
      
      String string1 = numberFormatException0.getLocalizedMessage();
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
      assertNull(string1);
      
      String string2 = numberFormatException0.getLocalizedMessage();
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
      assertNull(string2);
      
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNotNull(noSuchMethodException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("Ph");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)79;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-34), (byte) (-57), (byte) (-57), (byte) (-116), (byte)20, (byte)79}, byteArray0);
      
      System.setCurrentTimeMillis(0L);
      Type[] typeArray0 = new Type[1];
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.sql.SQLRecoverableException", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Object object0 = null;
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
      
      Class<Short> class2 = Short.TYPE;
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("short", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertNotNull(class2);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class2);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("short", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertNotNull(parameterizedTypeImpl0);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class1, parameterizedTypeImpl0);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.sql.SQLRecoverableException", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("short", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertNotNull(parameterizedTypeImpl1);
      assertFalse(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      
      String string0 = parameterizedTypeImpl1.getTypeName();
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.sql.SQLRecoverableException", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("short", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertNotSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertNotSame(parameterizedTypeImpl0, parameterizedTypeImpl1);
      assertNotNull(string0);
      assertFalse(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertFalse(parameterizedTypeImpl0.equals((Object)parameterizedTypeImpl1));
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      AtomicLong atomicLong0 = new AtomicLong((byte) (-57));
      assertEquals((byte) (-57), atomicLong0.byteValue());
      assertEquals((-57L), atomicLong0.longValue());
      assertEquals("-57", atomicLong0.toString());
      assertEquals((-57.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((-57), atomicLong0.intValue());
      assertEquals((short) (-57), atomicLong0.shortValue());
      assertEquals((-57.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-57L), atomicLong0.get());
      assertNotNull(atomicLong0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) atomicLong0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@74bd
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = TypeUtils.decapitalize(",'tSTxj9b");
      assertNotNull(string0);
      assertEquals(",'tSTxj9b", string0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = (-2013265918);
      int[] intArray0 = new int[2];
      intArray0[0] = (-2013265918);
      intArray0[1] = (-2013265918);
      MockException mockException0 = new MockException((String) null);
      assertNotNull(mockException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, mockException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: org.evosuite.runtime.mock.java.lang.MockThrowable", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-2013265918), (-2013265918)}, intArray0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(",'tSTxj9b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : ,'tSTxj9b
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = classLoader0.getParent();
      assertSame(classLoader0, classLoader1);
      assertNotNull(classLoader2);
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 3301;
      intArray0[1] = 2264;
      intArray0[2] = 3301;
      intArray0[3] = 2264;
      intArray0[4] = 2264;
      intArray0[5] = (-305);
      intArray0[6] = 2264;
      intArray0[7] = 1890;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, (Throwable) null);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {3301, 2264, 3301, 2264, 2264, (-305), 2264, 1890}, intArray0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("s[%{~4NW", "s[%{~4NW", 2264, (Throwable) null);
      assertEquals("java.sql.SQLTimeoutException: s[%{~4NW", sQLTimeoutException0.toString());
      assertEquals("s[%{~4NW", sQLTimeoutException0.getSQLState());
      assertEquals(2264, sQLTimeoutException0.getErrorCode());
      assertEquals("s[%{~4NW", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLTimeoutException: s[%{~4NW
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=r[OwM_c";
      stringArray0[1] = ",'tSTxj9b";
      String string0 = "Ljava.awt.Font";
      stringArray0[3] = "Ljava.awt.Font";
      stringArray0[4] = "java.util.concurrent.atomic.DoubleAdder";
      AtomicInteger atomicInteger0 = new AtomicInteger((-1726138097));
      assertEquals((-1726138097), atomicInteger0.intValue());
      assertEquals((-1726138097L), atomicInteger0.longValue());
      assertEquals((byte)15, atomicInteger0.byteValue());
      assertEquals("-1726138097", atomicInteger0.toString());
      assertEquals((-1726138097), atomicInteger0.get());
      assertEquals((short)14607, atomicInteger0.shortValue());
      assertEquals((-1.726138097E9), atomicInteger0.doubleValue(), 0.01);
      assertEquals((-1.72613811E9F), atomicInteger0.floatValue(), 0.01F);
      assertNotNull(atomicInteger0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(atomicInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : -1726138097
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      String string0 = ParserConfig.DENY_PROPERTY;
      assertNotNull(string0);
      assertEquals("fastjson.parser.deny", string0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("fastjson.parser.deny");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fastjson.parser.deny\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Method> class0 = Method.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      String string0 = TypeUtils.castToString(class1);
      assertNotNull(string0);
      
      Class<?> class2 = TypeUtils.getClassFromMapping("fied_ser");
      assertNull(class2);
      
      String string1 = TypeUtils.castToString("fied_ser");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      TypeUtils.clearClassMapping();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class3 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertNull(class3);
      
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      java.util.Date date0 = TypeUtils.castToDate("");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Method> class0 = Method.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      Class<Float> class1 = Float.class;
      List<FieldInfo> list0 = new Vector<FieldInfo>();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      SQLClientInfoException sQLClientInfoException0 = TypeUtils.cast((Object) null, (Type) class1, parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNull(sQLClientInfoException0);
      
      Class<StackTraceElementDeserializer> class2 = StackTraceElementDeserializer.class;
      String[] stringArray1 = TypeUtils.getKoltinConstructorParameters(class2);
      assertNull(stringArray1);
      
      Locale locale0 = TypeUtils.toLocale("fastjson.parser.autoTypeAccept");
      assertEquals("", locale0.getISO3Country());
      assertEquals("fastjson.parser.autotypeaccept", locale0.toString());
      assertEquals("fastjson.parser.autotypeaccept", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("y#;QM\"\"({I.xip;");
      assertEquals(7223649339469827636L, long0);
      
      AtomicLong atomicLong0 = new AtomicLong((-811277319855450459L));
      assertEquals((-8.112773198554505E17), atomicLong0.doubleValue(), 0.01);
      assertEquals((-8.1127733E17F), atomicLong0.floatValue(), 0.01F);
      assertEquals("-811277319855450459", atomicLong0.toString());
      assertEquals((byte) (-91), atomicLong0.byteValue());
      assertEquals((-811277319855450459L), atomicLong0.longValue());
      assertEquals((short)22181, atomicLong0.shortValue());
      assertEquals((-811277319855450459L), atomicLong0.get());
      assertEquals(1873761957, atomicLong0.intValue());
      assertNotNull(atomicLong0);
      
      Boolean boolean0 = TypeUtils.castToBoolean(atomicLong0);
      assertEquals((-8.112773198554505E17), atomicLong0.doubleValue(), 0.01);
      assertEquals((-8.1127733E17F), atomicLong0.floatValue(), 0.01F);
      assertEquals("-811277319855450459", atomicLong0.toString());
      assertEquals((byte) (-91), atomicLong0.byteValue());
      assertEquals((-811277319855450459L), atomicLong0.longValue());
      assertEquals((short)22181, atomicLong0.shortValue());
      assertEquals((-811277319855450459L), atomicLong0.get());
      assertEquals(1873761957, atomicLong0.intValue());
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      long long1 = atomicLong0.getAndIncrement();
      assertEquals((-8.112773198554505E17), atomicLong0.doubleValue(), 0.01);
      assertEquals((-8.1127733E17F), atomicLong0.floatValue(), 0.01F);
      assertEquals((-811277319855450458L), atomicLong0.get());
      assertEquals("-811277319855450458", atomicLong0.toString());
      assertEquals((-811277319855450458L), atomicLong0.longValue());
      assertEquals((byte) (-90), atomicLong0.byteValue());
      assertEquals(1873761958, atomicLong0.intValue());
      assertEquals((short)22182, atomicLong0.shortValue());
      assertEquals((-811277319855450459L), long1);
      assertFalse(long1 == long0);
      
      String string0 = ParserConfig.DENY_PROPERTY;
      assertNotNull(string0);
      assertEquals("fastjson.parser.deny", string0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(boolean0);
      assertEquals((-8.112773198554505E17), atomicLong0.doubleValue(), 0.01);
      assertEquals((-8.1127733E17F), atomicLong0.floatValue(), 0.01F);
      assertEquals((-811277319855450458L), atomicLong0.get());
      assertEquals("-811277319855450458", atomicLong0.toString());
      assertEquals((-811277319855450458L), atomicLong0.longValue());
      assertEquals((byte) (-90), atomicLong0.byteValue());
      assertEquals(1873761958, atomicLong0.intValue());
      assertEquals((short)22182, atomicLong0.shortValue());
      assertTrue(boolean1);
      
      AtomicLong atomicLong1 = new AtomicLong(1545L);
      assertEquals((short)1545, atomicLong1.shortValue());
      assertEquals(1545, atomicLong1.intValue());
      assertEquals(1545.0, atomicLong1.doubleValue(), 0.01);
      assertEquals((byte)9, atomicLong1.byteValue());
      assertEquals(1545.0F, atomicLong1.floatValue(), 0.01F);
      assertEquals(1545L, atomicLong1.longValue());
      assertEquals(1545L, atomicLong1.get());
      assertEquals("1545", atomicLong1.toString());
      assertNotNull(atomicLong1);
      assertFalse(atomicLong1.equals((Object)atomicLong0));
      
      java.util.Date date0 = TypeUtils.castToDate(atomicLong1);
      assertEquals((short)1545, atomicLong1.shortValue());
      assertEquals(1545, atomicLong1.intValue());
      assertEquals(1545.0, atomicLong1.doubleValue(), 0.01);
      assertEquals((byte)9, atomicLong1.byteValue());
      assertEquals(1545.0F, atomicLong1.floatValue(), 0.01F);
      assertEquals(1545L, atomicLong1.longValue());
      assertEquals(1545L, atomicLong1.get());
      assertEquals("1545", atomicLong1.toString());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", date0.toString());
      assertNotSame(atomicLong1, atomicLong0);
      assertNotNull(date0);
      assertFalse(atomicLong1.equals((Object)atomicLong0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertNotNull(string0);
      assertEquals("fastjson.parser.autoTypeSupport", string0);
      
      boolean boolean1 = TypeUtils.isNumber(",C>uh");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Character> class0 = Character.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertNotNull(class0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      parserConfig0.addDeny(",C>uh");
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Method> class0 = Method.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<RuleBasedCollator> class2 = RuleBasedCollator.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class2, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<TimeUnit> class3 = TimeUnit.class;
      String string0 = "Q Z5%wQJfo uZh9;C";
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("Q Z5%wQJfo uZh9;C", class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. Q Z5%wQJfo uZh9;C
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=r[OwM_c";
      stringArray0[1] = "=r[OwM_c";
      String string0 = "Ljava.awt.FAnt";
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      String string1 = linkedHashMap0.compute("java.beans.Transient", biFunction0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNull(string1);
      
      Set<String> set0 = linkedHashMap0.keySet();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string2 = linkedHashMap0.put("java.beans.Transient", "&!3~UU$j");
      assertEquals(1, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      assertNull(string2);
      
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.replaceAll(biFunction0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      String string0 = linkedHashMap0.put("5{EoZ", (String) null);
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(1, linkedHashMap0.size());
      assertNull(string0);
      
      Class<MapDeserializer> class1 = MapDeserializer.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashtable0, (PropertyNamingStrategy) null, false);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(serializeBeanInfo0);
      
      PageAttributes pageAttributes0 = new PageAttributes();
      assertNotNull(pageAttributes0);
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)79;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-34), (byte) (-57), (byte) (-57), (byte) (-116), (byte)20, (byte)79}, byteArray0);
      
      System.setCurrentTimeMillis(0L);
      Type[] typeArray0 = new Type[1];
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertEquals("class java.sql.SQLRecoverableException", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertNotNull(class1);
      
      Object object0 = null;
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
      
      Class<Short> class2 = Short.TYPE;
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("short", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("short", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotNull(parameterizedTypeImpl0);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class1, parameterizedTypeImpl0);
      assertEquals("class java.sql.SQLRecoverableException", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("short", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotNull(parameterizedTypeImpl1);
      assertFalse(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      
      String string0 = parameterizedTypeImpl1.getTypeName();
      assertEquals("class java.sql.SQLRecoverableException", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("short", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertNotSame(parameterizedTypeImpl0, parameterizedTypeImpl1);
      assertNotNull(string0);
      assertFalse(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertFalse(parameterizedTypeImpl0.equals((Object)parameterizedTypeImpl1));
      
      AtomicLong atomicLong0 = new AtomicLong((byte) (-57));
      assertEquals("-57", atomicLong0.toString());
      assertEquals((-57L), atomicLong0.longValue());
      assertEquals((short) (-57), atomicLong0.shortValue());
      assertEquals((byte) (-57), atomicLong0.byteValue());
      assertEquals((-57.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-57.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((-57), atomicLong0.intValue());
      assertEquals((-57L), atomicLong0.get());
      assertNotNull(atomicLong0);
      
      String string1 = parameterizedTypeImpl0.getTypeName();
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("short", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotSame(parameterizedTypeImpl0, parameterizedTypeImpl1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(parameterizedTypeImpl0.equals((Object)parameterizedTypeImpl1));
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class1.toString());
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class1.toString());
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=r[OwM_c";
      stringArray0[1] = ",'tSTxj9b";
      stringArray0[3] = "Ljava.awt.Font";
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = TypeUtils.decapitalize("<^ts\"a-uU/y*_J");
      assertNotNull(string0);
      assertEquals("<^ts\"a-uU/y*_J", string0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Class<Character> class0 = Character.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Class<BufferCapabilities> class1 = BufferCapabilities.class;
      String[] stringArray1 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray1);
      
      Locale locale0 = TypeUtils.toLocale("<^ts\"a-uU/y*_J");
      assertEquals("<^ts\"a-uu/y*", locale0.getLanguage());
      assertEquals("<^ts\"a-uu/y*_J", locale0.toString());
      assertEquals("J", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig1 = new ParserConfig(false);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      
      ConcurrentHashMap<JSONPDeserializer, NoSuchMethodException> concurrentHashMap0 = new ConcurrentHashMap<JSONPDeserializer, NoSuchMethodException>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      Class<StackTraceElementDeserializer> class2 = StackTraceElementDeserializer.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class2, (Map<String, String>) null, (PropertyNamingStrategy) null);
      assertNotNull(serializeBeanInfo0);
      
      Class<Currency> class3 = Currency.class;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo(class3, (Map<String, String>) null, (PropertyNamingStrategy) null, true);
      assertNotSame(serializeBeanInfo1, serializeBeanInfo0);
      assertNotNull(serializeBeanInfo1);
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Point point0 = new Point(37, 37);
      assertEquals(37.0, point0.getY(), 0.01);
      assertEquals(37.0, point0.getX(), 0.01);
      assertEquals(37, point0.x);
      assertEquals(37, point0.y);
      assertNotNull(point0);
      
      Point point1 = new Point(point0);
      assertEquals(37.0, point0.getY(), 0.01);
      assertEquals(37.0, point0.getX(), 0.01);
      assertEquals(37.0, point1.getY(), 0.01);
      assertEquals(37.0, point1.getX(), 0.01);
      assertEquals(37, point0.x);
      assertEquals(37, point0.y);
      assertEquals(37, point1.y);
      assertEquals(37, point1.x);
      assertNotNull(point1);
      assertTrue(point1.equals((Object)point0));
      
      point0.setLocation(point1);
      assertEquals(37.0, point0.getY(), 0.01);
      assertEquals(37.0, point0.getX(), 0.01);
      assertEquals(37.0, point1.getY(), 0.01);
      assertEquals(37.0, point1.getX(), 0.01);
      assertEquals(37, point0.x);
      assertEquals(37, point0.y);
      assertEquals(37, point1.y);
      assertEquals(37, point1.x);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      
      point0.y = 58;
      assertEquals(37.0, point0.getX(), 0.01);
      assertEquals(58.0, point0.getY(), 0.01);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("G!EKh+/C'NL%'E W", "G!EKh+/C'NL%'E W", "G!EKh+/C'NL%'E W", (-1225));
      assertEquals((-1225), stackTraceElement0.getLineNumber());
      assertEquals("G!EKh+/C'NL%'E W", stackTraceElement0.getFileName());
      assertEquals("G!EKh+/C'NL%'E W", stackTraceElement0.getMethodName());
      assertEquals("G!EKh+/C'NL%'E W.G!EKh+/C'NL%'E W(G!EKh+/C'NL%'E W)", stackTraceElement0.toString());
      assertEquals("G!EKh+/C'NL%'E W", stackTraceElement0.getClassName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertNotNull(stackTraceElement0);
      
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "t[Nu}", "", (-1124));
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("t[Nu}", stackTraceElement1.getMethodName());
      assertEquals("", stackTraceElement1.getFileName());
      assertEquals("", stackTraceElement1.getClassName());
      assertEquals(".t[Nu}()", stackTraceElement1.toString());
      assertEquals((-1124), stackTraceElement1.getLineNumber());
      assertNotNull(stackTraceElement1);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      
      StackTraceElement stackTraceElement2 = new StackTraceElement("E", "E", "", 37);
      assertEquals("E", stackTraceElement2.getMethodName());
      assertEquals("E", stackTraceElement2.getClassName());
      assertEquals(37, stackTraceElement2.getLineNumber());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("", stackTraceElement2.getFileName());
      assertEquals("E.E(:37)", stackTraceElement2.toString());
      assertNotNull(stackTraceElement2);
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      
      StackTraceElement stackTraceElement3 = new StackTraceElement("1?%.RBc", "r[OwM_c", (String) null, 7);
      assertEquals("1?%.RBc", stackTraceElement3.getClassName());
      assertEquals(7, stackTraceElement3.getLineNumber());
      assertNull(stackTraceElement3.getFileName());
      assertEquals("r[OwM_c", stackTraceElement3.getMethodName());
      assertFalse(stackTraceElement3.isNativeMethod());
      assertEquals("1?%.RBc.r[OwM_c(Unknown Source)", stackTraceElement3.toString());
      assertNotNull(stackTraceElement3);
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      
      StackTraceElement stackTraceElement4 = new StackTraceElement("istoLowerCase", "mTr@U};[|6T#", "illega str", 7);
      assertEquals("istoLowerCase.mTr@U};[|6T#(illega str:7)", stackTraceElement4.toString());
      assertEquals("mTr@U};[|6T#", stackTraceElement4.getMethodName());
      assertEquals("istoLowerCase", stackTraceElement4.getClassName());
      assertEquals("illega str", stackTraceElement4.getFileName());
      assertEquals(7, stackTraceElement4.getLineNumber());
      assertFalse(stackTraceElement4.isNativeMethod());
      assertNotNull(stackTraceElement4);
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement0));
      
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
      
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      Locale locale0 = TypeUtils.toLocale("");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = TypeUtils.decapitalize(",'tSTxj9b");
      assertNotNull(string0);
      assertEquals(",'tSTxj9b", string0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<Character> class0 = Character.TYPE;
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      boolean boolean1 = TypeUtils.isNumber("_bg7LS+<q4{wC+h?QJB");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(20, ",'tSTxj9b");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(20, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,'tSTxj9b,offset=20,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(",'tSTxj9b", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Hashtable<Double, SimpleTimeZone> hashtable0 = new Hashtable<Double, SimpleTimeZone>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      SimpleTimeZone simpleTimeZone1 = hashtable0.put(double0, simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(20, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,'tSTxj9b,offset=20,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(",'tSTxj9b", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertNull(simpleTimeZone1);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      String[] stringArray0 = new String[5];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = TypeUtils.decapitalize(",'tSTxj9b");
      assertNotNull(string0);
      assertEquals(",'tSTxj9b", string0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(",'tSTxj9b");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",'tSTxj9b\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=r[OwM_c";
      stringArray0[1] = "=r[OwM_c";
      stringArray0[3] = "Ljava.awt.FAnt";
      stringArray0[4] = "Ljava.awt.FAnt";
      AtomicInteger atomicInteger0 = new AtomicInteger((-1726138035));
      assertEquals((-1.72613798E9F), atomicInteger0.floatValue(), 0.01F);
      assertEquals((-1726138035), atomicInteger0.intValue());
      assertEquals("-1726138035", atomicInteger0.toString());
      assertEquals((byte)77, atomicInteger0.byteValue());
      assertEquals((-1726138035), atomicInteger0.get());
      assertEquals((-1.726138035E9), atomicInteger0.doubleValue(), 0.01);
      assertEquals((short)14669, atomicInteger0.shortValue());
      assertEquals((-1726138035L), atomicInteger0.longValue());
      assertNotNull(atomicInteger0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("'cMGOeg`Vow P-jY");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("Ljava.awt.FAnt");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ljava.awt.FAnt\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_x)Fmyn}";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      assertNotNull(javaBeanSerializer0);
      
      Class<?> class1 = javaBeanSerializer0.getType();
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertEquals("class java.text.SimpleDateFormat", class1.toString());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getRawClass(class0);
      assertEquals("class java.text.SimpleDateFormat", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertSame(class2, class1);
      assertNotNull(class2);
      
      Short short0 = new Short((short)4701);
      assertNotNull(short0);
      assertEquals((short)4701, (short)short0);
      
      Float float0 = TypeUtils.castToFloat(short0);
      assertNotNull(float0);
      assertEquals(4701.0F, (float)float0, 0.01F);
      
      Class<?> class3 = TypeUtils.getRawClass(class0);
      assertEquals("class java.text.SimpleDateFormat", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertSame(class3, class1);
      assertSame(class3, class2);
      assertNotNull(class3);
      
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertEquals("class java.text.SimpleDateFormat", class1.toString());
      assertFalse(class1.isArray());
      assertNotNull(parameterizedTypeImpl0);
      
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      assertNotNull(jdk8DateCodec0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class3, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<Character> class1 = Character.TYPE;
      assertEquals("char", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setPackageAssertionStatus("password", true);
      classLoader0.setPackageAssertionStatus("Nd'3(Y *<", true);
      Class<?> class0 = TypeUtils.loadClass("Nd'3(Y *<", classLoader0, true);
      assertNull(class0);
      
      Double double0 = new Double(1806.5);
      assertNotNull(double0);
      assertEquals(1806.5, (double)double0, 0.01);
      
      double double1 = Double.max(0.0, 1806.5);
      assertEquals(1806.5, double1, 0.01);
      
      double double2 = Double.sum(1806.5, Double.NaN);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      Long long0 = TypeUtils.castToLong(double0);
      assertNotNull(long0);
      assertEquals(1806L, (long)long0);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      
      Short short0 = new Short((short)50);
      assertNotNull(short0);
      assertEquals((short)50, (short)short0);
      
      Class<BreakIterator> class1 = BreakIterator.class;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer((Type) null);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(objectDeserializer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) short0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.BreakIterator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[2] = "r[OwM_c";
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance();
      assertNotNull(breakIterator0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("FastMatchToken");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"FastMatchToken\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertNotNull(string0);
      assertEquals("fastjson.parser.autoTypeSupport", string0);
      
      boolean boolean1 = TypeUtils.isNumber("com.alibaba.fastjson.serializer.CharacterCodec");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Character> class0 = Character.TYPE;
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("char", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertNotNull(class0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      parserConfig0.addDeny(",C>uh");
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) properties0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. char
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Method> class0 = Method.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      BreakIterator breakIterator0 = BreakIterator.getWordInstance();
      assertNotNull(breakIterator0);
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
      
      Class<InstantiationException> class1 = InstantiationException.class;
      boolean boolean0 = TypeUtils.isKotlin(class1);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("FastMatchToken");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : FastMatchToken
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[5];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = TypeUtils.decapitalize(",'tSTxj9b");
      assertNotNull(string0);
      assertEquals(",'tSTxj9b", string0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<Character> class0 = Character.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      boolean boolean1 = TypeUtils.isNumber("is");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "fastjson.parser.deny", (Type) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = TypeUtils.decapitalize("_x)Fmyn}");
      assertNotNull(string0);
      assertEquals("_x)Fmyn}", string0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(",'tSTxj9b");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Class<JobAttributes> class0 = JobAttributes.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      assertNotNull(javaBeanSerializer0);
      
      Class<?> class1 = javaBeanSerializer0.getType();
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.awt.JobAttributes", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(stringArray0[0]);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<?> class2 = TypeUtils.getRawClass(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.awt.JobAttributes", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.awt.JobAttributes", class2.toString());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertSame(class1, class2);
      assertSame(class2, class1);
      assertNotNull(class2);
      
      Float float0 = TypeUtils.castToFloat(stringArray0[0]);
      assertNull(float0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)29;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class class3 = (Class)TypeUtils.unwrapOptional(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.awt.JobAttributes", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isPrimitive());
      assertEquals(17, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("class java.awt.JobAttributes", class3.toString());
      assertSame(class1, class2);
      assertNotNull(class3);
      
      Class<ChronoLocalDate> class4 = ChronoLocalDate.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      Hashtable<String, String> hashtable1 = new Hashtable<String, String>(concurrentHashMap0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      assertNotNull(hashtable1);
      assertTrue(hashtable1.equals((Object)hashtable0));
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class4, (Map<String, String>) hashtable1, propertyNamingStrategy0, false);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      assertNotSame(hashtable0, hashtable1);
      assertNotSame(hashtable1, hashtable0);
      assertNotNull(serializeBeanInfo0);
      assertTrue(hashtable0.equals((Object)hashtable1));
      assertTrue(hashtable1.equals((Object)hashtable0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=r[OwM_c";
      stringArray0[1] = "=r[OwM_c";
      stringArray0[3] = "Ljava.awt.FAnt";
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = TypeUtils.decapitalize("=r[OwM_c");
      assertNotNull(string0);
      assertEquals("=r[OwM_c", string0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      Class<Character> class0 = Character.TYPE;
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "=r[OwM_c", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : =r[OwM_c
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-81402810), (-81402810), (-81402810), (-81402810), 102);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-81402810,MONTH=-81402810,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-81402810,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-81402810,HOUR_OF_DAY=-81402810,MINUTE=102,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-81402810,MONTH=-81402810,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-81402810,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-81402810,HOUR_OF_DAY=-81402810,MINUTE=102,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("1970-01-01 00:00:00.0", timestamp0.toString());
      assertEquals(0, timestamp0.getNanos());
      assertNotNull(timestamp0);
      
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      Class<Short> class0 = Short.TYPE;
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = null;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      Class<Character> class1 = Character.TYPE;
      assertEquals("char", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, class1);
      assertEquals("char", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(parameterizedTypeImpl0);
      
      String string0 = parameterizedTypeImpl0.getTypeName();
      assertEquals("char", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(string0);
      
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      assertNotNull(jSONPDeserializer0);
      
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
      assertNotNull(stackTraceElementDeserializer0);
      
      StackTraceElementDeserializer stackTraceElementDeserializer1 = TypeUtils.cast((Object) stackTraceElementDeserializer0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
      assertEquals("char", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
      assertNull(stackTraceElementDeserializer1);
      
      TreeSet<SQLWarning> treeSet0 = new TreeSet<SQLWarning>();
      assertNotNull(treeSet0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      InstantiationException instantiationException0 = new InstantiationException();
      assertEquals("java.lang.InstantiationException", instantiationException0.toString());
      assertNull(instantiationException0.getMessage());
      assertNotNull(instantiationException0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(outOfMemoryError0.getMessage());
      assertNotNull(outOfMemoryError0);
      
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
      
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<JSONPDeserializer> class2 = JSONPDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) concurrentHashMap0, true, propertyNamingStrategy0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(list0);
      
      Class<?> class3 = TypeUtils.loadClass("2$NWyf|\"/T4z8R9");
      assertNull(class3);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Point point0 = new Point(37, 37);
      assertEquals(37.0, point0.getY(), 0.01);
      assertEquals(37.0, point0.getX(), 0.01);
      assertEquals(37, point0.y);
      assertEquals(37, point0.x);
      assertNotNull(point0);
      
      Point point1 = new Point(point0);
      assertEquals(37.0, point0.getY(), 0.01);
      assertEquals(37.0, point0.getX(), 0.01);
      assertEquals(37.0, point1.getY(), 0.01);
      assertEquals(37.0, point1.getX(), 0.01);
      assertEquals(37, point0.y);
      assertEquals(37, point0.x);
      assertEquals(37, point1.x);
      assertEquals(37, point1.y);
      assertNotNull(point1);
      assertTrue(point1.equals((Object)point0));
      
      point0.setLocation(point1);
      assertEquals(37.0, point0.getY(), 0.01);
      assertEquals(37.0, point0.getX(), 0.01);
      assertEquals(37.0, point1.getY(), 0.01);
      assertEquals(37.0, point1.getX(), 0.01);
      assertEquals(37, point0.y);
      assertEquals(37, point0.x);
      assertEquals(37, point1.x);
      assertEquals(37, point1.y);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(point0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
      
      boolean boolean0 = TypeUtils.isNumber("ge7NaN");
      assertFalse(boolean0);
      
      AtomicInteger atomicInteger0 = new AtomicInteger(28);
      assertEquals((byte)28, atomicInteger0.byteValue());
      assertEquals("28", atomicInteger0.toString());
      assertEquals(28, atomicInteger0.get());
      assertEquals((short)28, atomicInteger0.shortValue());
      assertEquals(28.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(28.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(28, atomicInteger0.intValue());
      assertEquals(28L, atomicInteger0.longValue());
      assertNotNull(atomicInteger0);
      
      Boolean boolean1 = new Boolean("ge7NaN");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
      
      String string0 = TypeUtils.castToString("ge7NaN");
      assertNotNull(string0);
      
      long long0 = TypeUtils.fnv1a_64_lower("java.lang.String@0000000001");
      assertEquals((-1120824792914070469L), long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      Class<SQLException> class1 = SQLException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.sql.SQLException", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertNotNull(class2);
      
      Class class3 = (Class)TypeUtils.getCollectionItemType(class2);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.sql.SQLException", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isArray());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1, class3.getModifiers());
      assertNotNull(class3);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Class<?> class4 = TypeUtils.getRawClass(class2);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.sql.SQLException", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isInterface());
      assertFalse(class4.isEnum());
      assertEquals("class java.sql.SQLException", class4.toString());
      assertFalse(class4.isSynthetic());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isArray());
      assertFalse(class4.isAnnotation());
      assertSame(class2, class4);
      assertSame(class4, class2);
      assertNotNull(class4);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      String string0 = "long";
      InstantiationException instantiationException0 = new InstantiationException("long");
      assertEquals("long", instantiationException0.getMessage());
      assertEquals("java.lang.InstantiationException: long", instantiationException0.toString());
      assertNotNull(instantiationException0);
      
      SecurityException securityException0 = new SecurityException(instantiationException0);
      assertEquals("long", instantiationException0.getMessage());
      assertEquals("java.lang.InstantiationException: long", instantiationException0.toString());
      assertEquals("java.lang.SecurityException: java.lang.InstantiationException: long", securityException0.toString());
      assertEquals("java.lang.InstantiationException: long", securityException0.getMessage());
      assertNotNull(securityException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, securityException0);
      assertEquals("long", instantiationException0.getMessage());
      assertEquals("java.lang.InstantiationException: long", instantiationException0.toString());
      assertEquals("java.lang.SecurityException: java.lang.InstantiationException: long", securityException0.toString());
      assertEquals("java.lang.InstantiationException: long", securityException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("UTC", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Class<Boolean> class5 = Boolean.class;
      Class<Boolean> class6 = Boolean.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) zoneOffset0, class6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : Z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "03r,[;@}]3x;R:Ll";
      Class<?> class0 = TypeUtils.getClassFromMapping("03r,[;@}]3x;R:Ll");
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("03r,[;@}]3x;R:Ll");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : 03r,[;@}]3x;R:Ll
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "=r[OwM_c";
      stringArray0[0] = "=r[OwM_c";
      stringArray0[1] = ",'tSTxj9b";
      stringArray0[2] = "_x)Fmyn}";
      stringArray0[3] = "Ljava.awt.Font";
      Type type0 = null;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type1);
      
      MockThread mockThread0 = new MockThread(",'tSTxj9b");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class0 = TypeUtils.loadClass("'xSV", classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNull(class0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      Type type2 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type2);
      
      Class<Short> class1 = Short.TYPE;
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertNotNull(class1);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(boolean0);
      
      Class<Character> class2 = Character.TYPE;
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals("char", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      boolean boolean1 = TypeUtils.isNumber("1");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ParserConfig parserConfig0 = null;
      TreeSet<NullPointerException> treeSet0 = new TreeSet<NullPointerException>();
      assertNotNull(treeSet0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) treeSet0, (Type) class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "e}jasurx\\*m37\\";
      NumberFormatException numberFormatException0 = new NumberFormatException("e}jasurx*m37");
      assertEquals("java.lang.NumberFormatException: e}jasurx*m37", numberFormatException0.toString());
      assertEquals("e}jasurx*m37", numberFormatException0.getMessage());
      assertNotNull(numberFormatException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("e}jasurx*m37", "UrBF", "NOT_IN", (-1548));
      assertEquals("UrBF", stackTraceElement0.getMethodName());
      assertEquals((-1548), stackTraceElement0.getLineNumber());
      assertEquals("NOT_IN", stackTraceElement0.getFileName());
      assertEquals("e}jasurx*m37", stackTraceElement0.getClassName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("e}jasurx*m37.UrBF(NOT_IN)", stackTraceElement0.toString());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("vGMuc", "L", (String) null, (-893));
      assertNull(stackTraceElement1.getFileName());
      assertEquals("vGMuc.L(Unknown Source)", stackTraceElement1.toString());
      assertEquals((-893), stackTraceElement1.getLineNumber());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("L", stackTraceElement1.getMethodName());
      assertEquals("vGMuc", stackTraceElement1.getClassName());
      assertNotNull(stackTraceElement1);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("e}jasurx*m37", "org.evosuite.runtime.mock.OverrideMock", "dtt*vT-6a3(B", 1661);
      assertEquals("e}jasurx*m37", stackTraceElement2.getClassName());
      assertEquals("e}jasurx*m37.org.evosuite.runtime.mock.OverrideMock(dtt*vT-6a3(B:1661)", stackTraceElement2.toString());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("org.evosuite.runtime.mock.OverrideMock", stackTraceElement2.getMethodName());
      assertEquals("dtt*vT-6a3(B", stackTraceElement2.getFileName());
      assertEquals(1661, stackTraceElement2.getLineNumber());
      assertNotNull(stackTraceElement2);
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      
      stackTraceElementArray0[2] = stackTraceElement2;
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("dtt*vT-6a3(B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : dtt*vT-6a3(B
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("vGMuc", "L", (String) null, (-893));
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("L", stackTraceElement0.getMethodName());
      assertNull(stackTraceElement0.getFileName());
      assertEquals("vGMuc.L(Unknown Source)", stackTraceElement0.toString());
      assertEquals("vGMuc", stackTraceElement0.getClassName());
      assertEquals((-893), stackTraceElement0.getLineNumber());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[1] = stackTraceElement0;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      String string0 = linkedHashMap0.put((String) null, "dtt*vT-6a3(B");
      assertEquals(1, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      assertNull(string0);
      
      String string1 = linkedHashMap0.put("org.evosuite.runtime.mock.OverrideMock", "L");
      assertEquals(2, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      assertNull(string1);
      
      String string2 = linkedHashMap0.put("vGMuc", "org.evosuite.runtime.mock.OverrideMock");
      assertEquals(3, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      assertNull(string2);
      
      MockThread mockThread0 = new MockThread("org.springframework.security.web.authentication.WebAuthenticationDetails");
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ClassLoader classLoader2 = classLoader0.getParent();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertSame(classLoader2, classLoader1);
      assertNotNull(classLoader2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      
      classLoader2.clearAssertionStatus();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertSame(classLoader2, classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      
      classLoader0.setDefaultAssertionStatus(true);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      ClassLoader classLoader3 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader3, classLoader2);
      assertSame(classLoader3, classLoader1);
      assertNotNull(classLoader3);
      assertFalse(classLoader3.equals((Object)classLoader0));
      
      Class<?> class0 = TypeUtils.loadClass("org.evosuite.runtime.mock.OverrideMock", classLoader2);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals("interface org.evosuite.runtime.mock.OverrideMock", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(1537, class0.getModifiers());
      assertSame(classLoader2, classLoader3);
      assertSame(classLoader2, classLoader1);
      assertNotNull(class0);
      assertFalse(classLoader0.equals((Object)classLoader3));
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
      
      System.setCurrentTimeMillis((-4L));
      SQLException sQLException0 = new SQLException();
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "is", sQLException0);
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals("is", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.sql.SQLDataException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=r[OwM_c";
      stringArray0[1] = ",'tSTxj9b";
      stringArray0[3] = "Ljava.awt.Font";
      stringArray0[4] = "java.util.concurrent.atomic.DoubleAdder";
      MockDate mockDate0 = new MockDate(18, 18, (-330237097));
      assertEquals("Sat Aug 07 00:00:00 GMT 902222", mockDate0.toString());
      assertNotNull(mockDate0);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNull(illegalThreadStateException0.getMessage());
      assertNotNull(illegalThreadStateException0);
      
      JSONObject jSONObject0 = new JSONObject(18, false);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONObject0);
      
      TreeMap<String, MockHijrahDate> treeMap0 = new TreeMap<String, MockHijrahDate>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(treeMap0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(0, treeMap0.size());
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      Date date0 = jSONObject1.getSqlDate("methodName");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(0, treeMap0.size());
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNull(date0);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
      
      Class<Insets> class0 = Insets.class;
      EnumDeserializer enumDeserializer0 = null;
      try {
        enumDeserializer0 = new EnumDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "r[wM_c";
      stringArray0[2] = ",'tSTxj9b";
      AtomicInteger atomicInteger0 = new AtomicInteger(115);
      assertEquals(115.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals((byte)115, atomicInteger0.byteValue());
      assertEquals(115.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(115L, atomicInteger0.longValue());
      assertEquals(115, atomicInteger0.intValue());
      assertEquals((short)115, atomicInteger0.shortValue());
      assertEquals("115", atomicInteger0.toString());
      assertEquals(115, atomicInteger0.get());
      assertNotNull(atomicInteger0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("I", "I", (String) null, (-893));
      assertEquals("I", stackTraceElement0.getClassName());
      assertEquals("I", stackTraceElement0.getMethodName());
      assertNull(stackTraceElement0.getFileName());
      assertEquals("I.I(Unknown Source)", stackTraceElement0.toString());
      assertEquals((-893), stackTraceElement0.getLineNumber());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertNotNull(stackTraceElement0);
      
      StackTraceElement stackTraceElement1 = new StackTraceElement("yyyy\u5E74M\u6708d\u65E5 HH:mm:ss", "*#LUrpn7_[@{[", "getCause", (-2693));
      assertEquals("getCause", stackTraceElement1.getFileName());
      assertEquals((-2693), stackTraceElement1.getLineNumber());
      assertEquals("*#LUrpn7_[@{[", stackTraceElement1.getMethodName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("yyyy\u5E74M\u6708d\u65E5 HH:mm:ss.*#LUrpn7_[@{[(getCause)", stackTraceElement1.toString());
      assertEquals("yyyy\u5E74M\u6708d\u65E5 HH:mm:ss", stackTraceElement1.getClassName());
      assertNotNull(stackTraceElement1);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNotNull(numberFormatException0);
      
      String string0 = numberFormatException0.getLocalizedMessage();
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(string0);
      
      String string1 = numberFormatException0.getLocalizedMessage();
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("*#LUrpn7_[@{[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : *#LUrpn7_[@{[
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NumberFormatException numberFormatException0 = new NumberFormatException("e}jasurx*m37");
      assertEquals("java.lang.NumberFormatException: e}jasurx*m37", numberFormatException0.toString());
      assertEquals("e}jasurx*m37", numberFormatException0.getMessage());
      assertNotNull(numberFormatException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("e}jasurx*m37", "UrBF", "NOT_IN", (-1548));
      assertEquals((-1548), stackTraceElement0.getLineNumber());
      assertEquals("NOT_IN", stackTraceElement0.getFileName());
      assertEquals("e}jasurx*m37.UrBF(NOT_IN)", stackTraceElement0.toString());
      assertEquals("e}jasurx*m37", stackTraceElement0.getClassName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("UrBF", stackTraceElement0.getMethodName());
      assertNotNull(stackTraceElement0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      LinkedHashMap<NegativeArraySizeException, MockThaiBuddhistDate> linkedHashMap0 = new LinkedHashMap<NegativeArraySizeException, MockThaiBuddhistDate>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
      
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "vGMuc", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : vGMuc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Hashtable<String, Field> hashtable1 = new Hashtable<String, Field>();
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNotNull(hashtable1);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) hashtable1, true, propertyNamingStrategy0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      Class<Short> class1 = Short.TYPE;
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("short", class1.toString());
      assertNotNull(class1);
      
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, typeArray0[0]);
      assertNotNull(parameterizedTypeImpl0);
      
      String string0 = parameterizedTypeImpl0.getTypeName();
      assertNotNull(string0);
      
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      assertNotNull(jSONPDeserializer0);
      
      StackTraceElementDeserializer stackTraceElementDeserializer0 = TypeUtils.cast((Object) jSONPDeserializer0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      assertNull(stackTraceElementDeserializer0);
      
      TreeSet<SQLWarning> treeSet0 = new TreeSet<SQLWarning>();
      assertNotNull(treeSet0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      InstantiationException instantiationException0 = new InstantiationException();
      assertNull(instantiationException0.getMessage());
      assertEquals("java.lang.InstantiationException", instantiationException0.toString());
      assertNotNull(instantiationException0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNotNull(outOfMemoryError0);
      
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
      
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2200, 1808, 1808, 1808, 1808, 2200);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2200,MONTH=1808,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1808,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1808,HOUR_OF_DAY=1808,MINUTE=1808,SECOND=2200,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockGregorianCalendar0, (Type) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      TypeUtils.clearClassMapping();
      Class<?> class1 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      assertNotNull(string0);
      assertEquals("fastjson.parser.autoTypeAccept", string0);
      
      java.util.IdentityHashMap<SQLTransactionRollbackException, NumberFormat> identityHashMap0 = new java.util.IdentityHashMap<SQLTransactionRollbackException, NumberFormat>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "r[wM_c";
      stringArray0[2] = ",'tSTxj9b";
      AtomicInteger atomicInteger0 = new AtomicInteger(115);
      assertEquals(115.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(115L, atomicInteger0.longValue());
      assertEquals((short)115, atomicInteger0.shortValue());
      assertEquals(115, atomicInteger0.intValue());
      assertEquals((byte)115, atomicInteger0.byteValue());
      assertEquals(115.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("115", atomicInteger0.toString());
      assertEquals(115, atomicInteger0.get());
      assertNotNull(atomicInteger0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("I", "I", (String) null, (-893));
      assertEquals("I.I(Unknown Source)", stackTraceElement0.toString());
      assertNull(stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("I", stackTraceElement0.getClassName());
      assertEquals("I", stackTraceElement0.getMethodName());
      assertEquals((-893), stackTraceElement0.getLineNumber());
      assertNotNull(stackTraceElement0);
      
      Class<MapDeserializer> class0 = MapDeserializer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      assertNotNull(javaBeanSerializer0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      MockDate mockDate0 = new MockDate(4, 4, (-139525499), 1727, (-893), (-893));
      assertEquals("Fri Jul 11 07:52:07 GMT 380097", mockDate0.toString());
      assertNotNull(mockDate0);
      
      java.util.Date date0 = TypeUtils.castToDate(mockDate0);
      assertEquals("Fri Jul 11 07:52:07 GMT 380097", mockDate0.toString());
      assertEquals("Fri Jul 11 07:52:07 GMT 380097", date0.toString());
      assertSame(mockDate0, date0);
      assertSame(date0, mockDate0);
      assertNotNull(date0);
      
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      Class<Boolean> class1 = Boolean.TYPE;
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0, false);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(serializeBeanInfo0);
      
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      assertNotNull(jdk8DateCodec0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(jdk8DateCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec@4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=r[OwM_c";
      stringArray0[1] = ",'tSTxj9b";
      stringArray0[3] = "Ljava.awt.Font";
      AtomicInteger atomicInteger0 = new AtomicInteger((-1726138035));
      assertEquals((-1.72613798E9F), atomicInteger0.floatValue(), 0.01F);
      assertEquals((-1.726138035E9), atomicInteger0.doubleValue(), 0.01);
      assertEquals((-1726138035L), atomicInteger0.longValue());
      assertEquals((byte)77, atomicInteger0.byteValue());
      assertEquals((-1726138035), atomicInteger0.get());
      assertEquals((short)14669, atomicInteger0.shortValue());
      assertEquals("-1726138035", atomicInteger0.toString());
      assertEquals((-1726138035), atomicInteger0.intValue());
      assertNotNull(atomicInteger0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = "(Ljava/lang/Class;";
      boolean boolean0 = TypeUtils.isNumber("Ljava.awt.Font");
      assertFalse(boolean0);
      
      Locale locale1 = TypeUtils.toLocale("=r[OwM_c");
      assertEquals("=r[owm", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("C", locale1.getCountry());
      assertEquals("=r[owm_C", locale1.toString());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      Class<?> class1 = TypeUtils.loadClass("=r[OwM_c");
      assertNull(class1);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONObject0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<JavaBeanDeserializer> class3 = JavaBeanDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class3, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(type0);
      assertFalse(boolean0);
      
      TypeUtils.clearClassMapping();
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : int
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "r[wM_c";
      stringArray0[2] = ",'tSTxj9b";
      stringArray0[2] = "_x)Fmyn}";
      Boolean boolean0 = Boolean.valueOf("java.util.concurrent.atomic.DoubleAdder");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      String string0 = linkedHashMap0.put("P#VY}C", "P#VY}C");
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(1, linkedHashMap0.size());
      assertNull(string0);
      
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(1, linkedHashMap0.size());
      assertNotNull(serializeBeanInfo0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("16$\"0", "Z_7l6VqUv^", (String) null, 90);
      assertFalse(stackTraceElement0.isNativeMethod());
      assertNull(stackTraceElement0.getFileName());
      assertEquals("16$\"0.Z_7l6VqUv^(Unknown Source)", stackTraceElement0.toString());
      assertEquals("16$\"0", stackTraceElement0.getClassName());
      assertEquals("Z_7l6VqUv^", stackTraceElement0.getMethodName());
      assertEquals(90, stackTraceElement0.getLineNumber());
      assertNotNull(stackTraceElement0);
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNotNull(numberFormatException0);
      
      NumberFormatException numberFormatException1 = new NumberFormatException("time");
      assertEquals("java.lang.NumberFormatException: time", numberFormatException1.toString());
      assertEquals("time", numberFormatException1.getMessage());
      assertNotNull(numberFormatException1);
      assertFalse(numberFormatException1.equals((Object)numberFormatException0));
      
      NumberFormatException numberFormatException2 = new NumberFormatException("NULL");
      assertEquals("java.lang.NumberFormatException: NULL", numberFormatException2.toString());
      assertEquals("NULL", numberFormatException2.getMessage());
      assertNotNull(numberFormatException2);
      assertFalse(numberFormatException2.equals((Object)numberFormatException1));
      assertFalse(numberFormatException2.equals((Object)numberFormatException0));
      
      String string1 = numberFormatException2.getLocalizedMessage();
      assertEquals("java.lang.NumberFormatException: NULL", numberFormatException2.toString());
      assertEquals("NULL", numberFormatException2.getMessage());
      assertNotSame(numberFormatException2, numberFormatException1);
      assertNotSame(numberFormatException2, numberFormatException0);
      assertNotNull(string1);
      assertEquals("NULL", string1);
      assertFalse(numberFormatException2.equals((Object)numberFormatException1));
      assertFalse(numberFormatException2.equals((Object)numberFormatException0));
      
      String string2 = numberFormatException1.getLocalizedMessage();
      assertEquals("java.lang.NumberFormatException: time", numberFormatException1.toString());
      assertEquals("time", numberFormatException1.getMessage());
      assertNotSame(numberFormatException1, numberFormatException2);
      assertNotSame(numberFormatException1, numberFormatException0);
      assertNotNull(string2);
      assertEquals("time", string2);
      assertFalse(numberFormatException1.equals((Object)numberFormatException2));
      assertFalse(numberFormatException1.equals((Object)numberFormatException0));
      assertFalse(string2.equals((Object)string1));
      
      Timestamp timestamp0 = new Timestamp(90);
      assertEquals("1970-01-01 00:00:00.09", timestamp0.toString());
      assertEquals(90000000, timestamp0.getNanos());
      assertNotNull(timestamp0);
      
      Date date0 = TypeUtils.castToSqlDate(timestamp0);
      assertEquals("1970-01-01 00:00:00.09", timestamp0.toString());
      assertEquals(90000000, timestamp0.getNanos());
      assertNotNull(date0);
      
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      boolean boolean1 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      Class<SQLException> class1 = SQLException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertEquals("class java.sql.SQLException", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertNotNull(class2);
      
      Class class3 = (Class)TypeUtils.getCollectionItemType(class2);
      assertEquals("class java.sql.SQLException", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class3.isArray());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isEnum());
      assertFalse(class3.isAnnotation());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isInterface());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      assertNotNull(class3);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Class<?> class4 = TypeUtils.getRawClass(class2);
      assertEquals("class java.sql.SQLException", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isPrimitive());
      assertEquals("class java.sql.SQLException", class4.toString());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertSame(class2, class4);
      assertSame(class4, class2);
      assertNotNull(class4);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      String string0 = identityHashMap0.put((String) null, "long");
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      assertNull(string0);
      
      String string1 = identityHashMap0.put((String) null, "I7bZT(\"y");
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      assertNotNull(string1);
      assertEquals("long", string1);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      PageAttributes pageAttributes0 = new PageAttributes();
      assertNotNull(pageAttributes0);
      
      PageAttributes pageAttributes1 = new PageAttributes(pageAttributes0);
      assertNotNull(pageAttributes1);
      assertTrue(pageAttributes1.equals((Object)pageAttributes0));
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      Time time0 = new Time((-648L));
      assertEquals("23:59:59", time0.toString());
      assertNotNull(time0);
      
      Time time1 = TypeUtils.castToSqlTime(time0);
      assertEquals("23:59:59", time0.toString());
      assertEquals("23:59:59", time1.toString());
      assertSame(time0, time1);
      assertSame(time1, time0);
      assertNotNull(time1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("byte", class0.toString());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("byte", class0.toString());
      assertFalse(class1.isInterface());
      assertEquals("byte", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("byte", class0.toString());
      assertNull(stringArray0);
      
      System.setCurrentTimeMillis(1344L);
      Class<?> class2 = TypeUtils.loadClass("");
      assertNull(class2);
      
      Class<Method> class3 = Method.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      classLoader0.setPackageAssertionStatus("j", false);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertNotNull(decimalFormat0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) decimalFormat0, class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(boolean0);
      
      TypeUtils.clearClassMapping();
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertNotNull(string0);
      assertEquals("fastjson.parser.autoTypeSupport", string0);
      
      boolean boolean1 = true;
      Class<?> class2 = TypeUtils.getClass((Type) class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("int", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertNotSame(class2, class1);
      assertNotNull(class2);
      assertFalse(class2.equals((Object)class1));
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("!r$ P'ch");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertNotNull(class0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertEquals("byte", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertNull(stringArray0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      int int0 = TypeUtils.getParserFeatures(class1);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertEquals("byte", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(0, int0);
      
      Class<ParameterizedTypeImpl> class2 = ParameterizedTypeImpl.class;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Double double0 = TypeUtils.castToDouble(long0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Class<Double> class3 = Double.TYPE;
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertEquals("double", class3.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertNotNull(class3);
      
      Class<?> class4 = TypeUtils.getCollectionItemClass(class2);
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertEquals(1, class4.getModifiers());
      assertEquals("class java.lang.Object", class4.toString());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isAnnotation());
      assertNotSame(class4, class1);
      assertNotNull(class4);
      assertFalse(class4.equals((Object)class1));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = File.pathSeparator;
      assertNotNull(string0);
      assertEquals(":", string0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)119;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)10615, bigInteger0.shortValue());
      assertEquals((byte)119, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte)41, (byte)119}, byteArray0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -7067273
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=r[OwM_c";
      stringArray0[1] = "=r[OwM_c";
      stringArray0[3] = "Ljava.awt.FAnt";
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertNotNull(decimalFormat0);
      
      Object object0 = properties0.put(decimalFormat0, byteArray0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertNull(object0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertEquals("class java.sql.SQLNonTransientConnectionException", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      assertEquals(2, timeDeserializer0.getFastMatchToken());
      assertNotNull(timeDeserializer0);
      
      parserConfig0.putDeserializer(class1, timeDeserializer0);
      assertEquals(2, timeDeserializer0.getFastMatchToken());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("class java.sql.SQLNonTransientConnectionException", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      String string0 = TypeUtils.decapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Locale locale0 = TypeUtils.toLocale("fastjson.parser.autoTypeAccept");
      assertEquals("", locale0.getVariant());
      assertEquals("fastjson.parser.autotypeaccept", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("fastjson.parser.autotypeaccept", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      NumberFormatException numberFormatException0 = new NumberFormatException("-lQXf.t7IP*%Zfh^h");
      assertEquals("-lQXf.t7IP*%Zfh^h", numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException: -lQXf.t7IP*%Zfh^h", numberFormatException0.toString());
      assertNotNull(numberFormatException0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("}f)rl;m?{nEKX%g");
      assertEquals(3885100755383555380L, long0);
      
      AtomicLong atomicLong0 = new AtomicLong(3885100755383555380L);
      assertEquals(3.8851007553835556E18, atomicLong0.doubleValue(), 0.01);
      assertEquals((short)5428, atomicLong0.shortValue());
      assertEquals((-1992485580), atomicLong0.intValue());
      assertEquals(3.8851007E18F, atomicLong0.floatValue(), 0.01F);
      assertEquals((byte)52, atomicLong0.byteValue());
      assertEquals("3885100755383555380", atomicLong0.toString());
      assertEquals(3885100755383555380L, atomicLong0.longValue());
      assertEquals(3885100755383555380L, atomicLong0.get());
      assertNotNull(atomicLong0);
      
      long long1 = atomicLong0.addAndGet(3885100755383555380L);
      assertEquals("7770201510767110760", atomicLong0.toString());
      assertEquals((short)10856, atomicLong0.shortValue());
      assertEquals(7770201510767110760L, atomicLong0.longValue());
      assertEquals(7770201510767110760L, atomicLong0.get());
      assertEquals(7.7702015107671112E18, atomicLong0.doubleValue(), 0.01);
      assertEquals(7.7702014E18F, atomicLong0.floatValue(), 0.01F);
      assertEquals((byte)104, atomicLong0.byteValue());
      assertEquals(309996136, atomicLong0.intValue());
      assertEquals(7770201510767110760L, long1);
      assertFalse(long1 == long0);
      
      Boolean boolean0 = TypeUtils.castToBoolean(atomicLong0);
      assertEquals("7770201510767110760", atomicLong0.toString());
      assertEquals((short)10856, atomicLong0.shortValue());
      assertEquals(7770201510767110760L, atomicLong0.longValue());
      assertEquals(7770201510767110760L, atomicLong0.get());
      assertEquals(7.7702015107671112E18, atomicLong0.doubleValue(), 0.01);
      assertEquals(7.7702014E18F, atomicLong0.floatValue(), 0.01F);
      assertEquals((byte)104, atomicLong0.byteValue());
      assertEquals(309996136, atomicLong0.intValue());
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.valueOf("}f)rl;m?{nEKX%g");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      
      AtomicInteger atomicInteger0 = new AtomicInteger((-1726138035));
      assertEquals((-1726138035L), atomicInteger0.longValue());
      assertEquals((short)14669, atomicInteger0.shortValue());
      assertEquals((byte)77, atomicInteger0.byteValue());
      assertEquals((-1.72613798E9F), atomicInteger0.floatValue(), 0.01F);
      assertEquals((-1.726138035E9), atomicInteger0.doubleValue(), 0.01);
      assertEquals("-1726138035", atomicInteger0.toString());
      assertEquals((-1726138035), atomicInteger0.intValue());
      assertEquals((-1726138035), atomicInteger0.get());
      assertNotNull(atomicInteger0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      boolean boolean3 = TypeUtils.isNumber("istoString");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      
      Locale locale1 = new Locale("istoString", "}f)rl;m?{nEKX%g", "istoString");
      assertEquals("}F)RL;M?{NEKX%G", locale1.getCountry());
      assertEquals("istoString", locale1.getVariant());
      assertEquals("istostring", locale1.getLanguage());
      assertEquals("istostring_}F)RL;M?{NEKX%G_istoString", locale1.toString());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = TypeUtils.loadClass("}f)rl;m?{nEKX%g");
      assertNull(class1);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotNull(jSONObject0);
      
      Class<Boolean> class3 = Boolean.TYPE;
      assertEquals("boolean", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      assertNotSame(class3, class0);
      assertNotNull(class3);
      assertFalse(class3.equals((Object)class0));
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class3, class3);
      assertEquals("boolean", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class3.equals((Object)class0));
      
      String string0 = parameterizedTypeImpl0.getTypeName();
      assertEquals("boolean", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      assertNotSame(class3, class0);
      assertNotNull(string0);
      assertFalse(class3.equals((Object)class0));
      
      boolean boolean4 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertSame(parserConfig1, parserConfig0);
      assertNotNull(parserConfig1);
      
      MessageFormat messageFormat0 = new MessageFormat("Y", locale1);
      assertEquals("}F)RL;M?{NEKX%G", locale1.getCountry());
      assertEquals("istoString", locale1.getVariant());
      assertEquals("istostring", locale1.getLanguage());
      assertEquals("istostring_}F)RL;M?{NEKX%G_istoString", locale1.toString());
      assertNotNull(messageFormat0);
      assertFalse(locale1.equals((Object)locale0));
      
      // Undeclared exception!
      try { 
        TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Method> class0 = Method.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      String string0 = File.separator;
      assertNotNull(string0);
      assertEquals("/", string0);
      
      MockThread mockThread0 = new MockThread("/[8yP)?n6S1$^");
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader1.clearAssertionStatus();
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ClassLoader classLoader2 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      assertFalse(classLoader2.equals((Object)classLoader1));
      
      classLoader2.clearAssertionStatus();
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertSame(classLoader2, classLoader0);
      assertFalse(classLoader2.equals((Object)classLoader1));
      
      classLoader1.setDefaultAssertionStatus(true);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertSame(classLoader0, classLoader2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ClassLoader classLoader3 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader3, classLoader1);
      assertNotNull(classLoader3);
      assertFalse(classLoader3.equals((Object)classLoader0));
      assertFalse(classLoader3.equals((Object)classLoader2));
      
      Class<LinkageError> class1 = LinkageError.class;
      String[] stringArray1 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray1);
      
      Locale locale0 = TypeUtils.toLocale("PATTERN_DAY_OF_YEAR");
      assertEquals("pattern_DAY_OF", locale0.toString());
      assertEquals("OF", locale0.getVariant());
      assertEquals("DAY", locale0.getCountry());
      assertEquals("pattern", locale0.getLanguage());
      assertNotNull(locale0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      Class<Float> class2 = Float.class;
      boolean boolean0 = TypeUtils.isPath(class2);
      assertFalse(boolean0);
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("J=");
      assertEquals("J=", illegalMonitorStateException0.getMessage());
      assertEquals("java.lang.IllegalMonitorStateException: J=", illegalMonitorStateException0.toString());
      assertNotNull(illegalMonitorStateException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("/[8yP)?n6S1$^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : /[8yP)?n6S1$^
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertNotNull(parameterizedTypeImpl0);
      
      String string0 = parameterizedTypeImpl0.getTypeName();
      assertNotNull(string0);
      
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      assertNotNull(jSONPDeserializer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeArray0[2], (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=r[OwM_c";
      stringArray0[1] = ",'tSTxj9b";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NULL");
      assertFalse(boolean0);
      
      stringArray0[3] = "Ljava.awt.Font";
      Class<JSONPDeserializer> class1 = JSONPDeserializer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, stringArray0);
      assertNotNull(javaBeanSerializer0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*Vo");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<?> class2 = javaBeanSerializer0.getType();
      assertEquals(1, class2.getModifiers());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.JSONPDeserializer", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      AtomicLong atomicLong0 = new AtomicLong((-1158L));
      assertEquals((byte)122, atomicLong0.byteValue());
      assertEquals((short) (-1158), atomicLong0.shortValue());
      assertEquals((-1158.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((-1158), atomicLong0.intValue());
      assertEquals((-1158.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-1158L), atomicLong0.get());
      assertEquals("-1158", atomicLong0.toString());
      assertEquals((-1158L), atomicLong0.longValue());
      assertNotNull(atomicLong0);
      
      Class<?> class3 = TypeUtils.getRawClass(class0);
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertFalse(class3.isPrimitive());
      assertEquals(1, class3.getModifiers());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer", class3.toString());
      assertFalse(class3.isAnnotation());
      assertNotSame(class3, class2);
      assertNotNull(class3);
      assertFalse(class3.equals((Object)class2));
      
      Class<Object> class4 = Object.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Class<TimeDeserializer> class5 = TimeDeserializer.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class5, (Type) class0, (PropertyNamingStrategy) null);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertNotNull(javaBeanInfo0);
      
      ObjectDeserializer objectDeserializer0 = aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(objectDeserializer0);
      
      BigDecimal bigDecimal0 = new BigDecimal((double) (-1158L));
      assertEquals((byte)122, bigDecimal0.byteValue());
      assertEquals((short) (-1158), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) bigDecimal0, class4, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
