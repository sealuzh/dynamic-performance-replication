/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 14:11:26 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.math.BigInteger;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/");
      jSONScanner0.scanBoolean(' ');
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nu,l");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals(',', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("xggFXy");
      char[] charArray0 = new char[9];
      jSONScanner0.matchField(charArray0);
      charArray0[0] = 'o';
      charArray0[1] = '(';
      charArray0[2] = 'v';
      charArray0[3] = '[';
      charArray0[4] = '\\';
      charArray0[5] = '.';
      charArray0[6] = '+';
      charArray0[7] = 'Y';
      charArray0[8] = 't';
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanNumber();
      jSONScanner0.scanLong('_');
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("T.Re", (-2789));
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = 'Y';
      charArray0[2] = 'o';
      charArray0[3] = 'b';
      charArray0[4] = '`';
      charArray0[5] = '\"';
      JSONLexerBase.readString(charArray0, 0);
      jSONScanner0.close();
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S:-7");
      jSONScanner0.isBlankInput();
      jSONScanner0.nextToken();
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.skipWhitespace();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.^NCL:oSG&");
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.scanBoolean('1');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[1] = '*';
      charArray0[2] = 'A';
      charArray0[3] = '`';
      charArray0[4] = '&';
      charArray0[5] = 'S';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 5, 5);
      SymbolTable symbolTable0 = new SymbolTable(255);
      jSONReaderScanner0.scanSymbol(symbolTable0, 'A');
      jSONReaderScanner0.np = 255;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - `, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("flse");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fals");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(1735);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3CJXyS5&&ho16");
      char[] charArray0 = new char[6];
      charArray0[0] = '8';
      charArray0[1] = '{';
      charArray0[2] = '`';
      charArray0[3] = 'o';
      charArray0[4] = 'f';
      charArray0[5] = 'S';
      jSONScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "fODfS8!_e=}";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fODfS8!_e=}");
      jSONReaderScanner0.np = (-2819);
      boolean boolean0 = false;
      char char0 = 'A';
      jSONReaderScanner0.scanDouble('A');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.^NCL:oSG&");
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(1000);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals(':', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/J");
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = '7';
      charArray0[2] = 'P';
      charArray0[3] = 'w';
      charArray0[4] = '6';
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.skipWhitespace();
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      charArray0[1] = '9';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, '9');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/J-RU");
      jSONScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8KSOkCk`E");
      jSONScanner0.setToken(115);
      jSONScanner0.nextIdent();
      assertEquals('K', jSONScanner0.getCurrent());
      
      jSONScanner0.doubleValue();
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal.char");
      jSONScanner0.info();
      SymbolTable symbolTable0 = new SymbolTable(512);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'z');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 92, 92);
      jSONReaderScanner0.nextToken(14);
      assertEquals(20, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6'4");
      jSONScanner0.skipWhitespace();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanBoolean('1');
      jSONScanner0.putChar('1');
      jSONScanner0.scanInt('a');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("jitsc<mZ)4DT|pvGwg:", 54);
      SymbolTable symbolTable0 = new SymbolTable(54);
      char char0 = '*';
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '*');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.^NCL:oSG&");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = 'E';
      charArray0[2] = 'G';
      jSONScanner0.scanFieldInt(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(61);
      jSONScanner0.scanFieldStringArray((char[]) null, 61, symbolTable0);
      double double0 = jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("*O=7y*7~<[[I");
      jSONScanner0.tokenName();
      jSONScanner0.nextIdent();
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      jSONScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("jZ");
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      jSONScanner0.scanFieldFloatArray(charArray0);
      char[] charArray1 = new char[2];
      jSONScanner0.scanFieldInt(charArray1);
      jSONScanner0.scanInt('\\');
      JSONLexerBase.readString(charArray1, 1);
      int int0 = 1409;
      jSONScanner0.matchStat = 1409;
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Udg");
      JSONScanner jSONScanner1 = new JSONScanner("Set", 507);
      jSONScanner1.nextIdent();
      assertEquals('\u001A', jSONScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'm';
      charArray0[2] = '2';
      char char0 = 'T';
      charArray0[3] = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 497, 497);
      jSONReaderScanner0.sbuf = charArray0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      jSONScanner0.skipWhitespace();
      jSONScanner0.hasSpecial = true;
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.scanFloat('c');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = '2';
      charArray0[2] = '.';
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Udg");
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = jSONScanner0.getLocale();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", property ");
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'P';
      jSONScanner0.scanFieldInt(charArray0);
      charArray0[1] = 'X';
      charArray0[2] = '9';
      charArray0[3] = ')';
      charArray0[4] = 'c';
      charArray0[5] = '\"';
      charArray0[6] = 's';
      jSONScanner0.matchField2(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 512;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.serializerFeatures.MapSortField", 512);
      jSONReaderScanner0.isRef();
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = 'O';
      charArray0[2] = '<';
      charArray0[3] = '/';
      charArray0[4] = 'K';
      charArray0[5] = '2';
      charArray0[6] = 'A';
      charArray0[7] = ']';
      charArray0[8] = '[';
      jSONReaderScanner0.charArrayCompare(charArray0);
      char char0 = 'r';
      jSONReaderScanner0.scanBoolean('r');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.scanFalse();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(`4.kT)2N=01vh@q");
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = '3';
      charArray0[2] = 'D';
      charArray0[3] = 'X';
      jSONScanner0.scanFieldSymbol(charArray0);
      char[] charArray1 = new char[0];
      jSONScanner0.nextToken();
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray1, class0);
      assertEquals(10, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Ud");
      jSONScanner0.features = 114;
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Feature.AllowSingleQuotes is false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1j=Yp;K<h");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloatArray2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      charArray0[1] = '8';
      charArray0[2] = '9';
      charArray0[3] = '0';
      charArray0[4] = 'K';
      charArray0[5] = 'B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 101, 101);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-2520));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("rror parseF null");
      jSONScanner0.skipWhitespace();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.2GCL:zS6&");
      jSONScanner0.setToken(14);
      jSONScanner0.nextIdent();
      long long0 = jSONScanner0.longValue();
      assertEquals('G', jSONScanner0.getCurrent());
      assertEquals(18L, long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, (-2442));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextIdent();
      jSONScanner0.isEnabled(1351, 1351);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.serializer.SerializerFeature");
      jSONReaderScanner0.getFeatures();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - c, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("p", 4);
      jSONScanner0.scanISO8601DateIfMatch();
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      jSONScanner0.isEnabled(feature0);
      PipedWriter pipedWriter0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.longValue();
      char[] charArray0 = new char[8];
      charArray0[0] = 'O';
      charArray0[1] = '#';
      charArray0[2] = '(';
      charArray0[3] = '*';
      charArray0[4] = 'Y';
      charArray0[5] = '+';
      charArray0[6] = 'Z';
      jSONScanner0.scanFieldUUID(charArray0);
      charArray0[7] = 'b';
      jSONScanner0.nextIdent();
      jSONScanner0.isRef();
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "mf!VG/";
      int int0 = (-1);
      JSONScanner jSONScanner0 = new JSONScanner("mf!VG/", (-1));
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      int int1 = 1179;
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", 9999999);
      jSONScanner0.nextToken();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONScanner0.scanStringArray(set0, 'L');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("tzlm&A!&#U`F~7e*'");
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3CJXyS5&&ho16");
      jSONScanner0.scanDecimal('E');
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = 'r';
      charArray0[2] = 'V';
      charArray0[3] = 'P';
      charArray0[4] = '\"';
      charArray0[5] = 'a';
      charArray0[6] = 'V';
      charArray0[7] = 'w';
      charArray0[8] = '0';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanLong('B');
      jSONReaderScanner0.scanInt('d');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.2GCL:zS6$K&");
      jSONScanner0.setToken(0);
      jSONScanner0.nextIdent();
      long long0 = jSONScanner0.longValue();
      assertEquals('G', jSONScanner0.getCurrent());
      assertEquals(18L, long0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3CJXyS5&&ho16");
      jSONScanner0.hasSpecial = false;
      jSONScanner0.nextToken();
      assertEquals(2, jSONScanner0.token());
      
      boolean boolean0 = JSONLexerBase.isWhitespace(' ');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x<?Xz4%X;xe[kf");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9fPEmYY4H/<>i", 1729);
      jSONReaderScanner0.token = Integer.MIN_VALUE;
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.nextToken(1729);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5$\"=9jPr:s_");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/J-RU", 45380);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanInt('F');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, (-1), 45380);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/-RU");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('*', '*', 'g', 'g', 'i', 'i');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      jSONScanner0.putChar('A');
      char char0 = jSONScanner0.next();
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals('u', char0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("scan false error", 0);
      jSONReaderScanner0.nextToken(0);
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.close();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'M';
      charArray0[1] = '#';
      charArray0[2] = '`';
      charArray0[3] = 'h';
      charArray0[4] = '1';
      int int0 = 93;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 93);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 20, 20);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 760, 92);
      jSONReaderScanner1.isBlankInput();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0, (-58));
      jSONReaderScanner2.charArrayCompare(charArray0);
      jSONReaderScanner1.nextToken(12);
      assertEquals(20, jSONReaderScanner1.token());
      
      jSONReaderScanner2.scanFieldFloatArray(charArray0);
      assertEquals((-58), jSONReaderScanner2.getFeatures());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 92, 92);
      jSONReaderScanner0.scanUUID('_');
      jSONReaderScanner0.nextToken(14);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Ud");
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(&E{k$9!uj3PhR");
      JSONScanner jSONScanner1 = new JSONScanner("(&E{k$9!uj3PhR", (-1704));
      jSONScanner1.nextIdent();
      jSONScanner1.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONScanner1.nextTokenWithChar('C');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match C - &, info : pos 1, json : (&E{k$9!uj3PhR
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("k");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloatArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanType("=6&W[`d?*");
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = 'A';
      charArray0[2] = 's';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 1535);
      jSONScanner0.tokenName();
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.matchField2(charArray0);
      jSONReaderScanner0.eofPos = 0;
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'H');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(1535, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextIdent();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S");
      Locale locale0 = Locale.FRENCH;
      jSONScanner0.setLocale(locale0);
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~)66pvv7", 3894);
      Feature feature0 = Feature.CustomMapDeserializer;
      jSONScanner0.config(feature0, true);
      jSONScanner0.close();
      jSONScanner0.setLocale((Locale) null);
      assertEquals(4198198, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      charArray0[1] = '2';
      charArray0[2] = '9';
      charArray0[3] = '0';
      charArray0[4] = 'K';
      charArray0[5] = 'B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 101, 101);
      jSONReaderScanner0.nextToken((-2520));
      assertEquals('K', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("QsD");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[3];
      charArray0[0] = 'y';
      charArray0[1] = '0';
      charArray0[2] = 'P';
      jSONScanner0.scanFieldBoolean(charArray0);
      boolean boolean0 = jSONScanner0.isRef();
      assertEquals(1, jSONScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3CJXyS5&&ho16");
      jSONScanner0.scanFloat('`');
      jSONScanner0.nextIdent();
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0, 47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/J-RU");
      jSONScanner0.isBlankInput();
      jSONScanner0.isEnabled((-123008), 39);
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.nextIdent();
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+Z!m<.+1ztj8Xb");
      jSONScanner0.nextToken(9);
      assertEquals('Z', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Ud");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = 'r';
      charArray0[2] = 'y';
      charArray0[3] = 'l';
      charArray0[4] = '?';
      charArray0[5] = '7';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 19);
      jSONReaderScanner0.locale = null;
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.isEnabled(19, 18);
      jSONReaderScanner0.info();
      char[] charArray1 = new char[9];
      charArray1[0] = '1';
      charArray1[1] = 'r';
      charArray1[2] = '?';
      charArray1[3] = 'r';
      charArray1[4] = '1';
      charArray1[5] = 'r';
      charArray1[6] = 'l';
      charArray1[7] = '1';
      charArray1[8] = 'y';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray1, 18);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      jSONScanner0.nextIdent();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.scanIdent();
      jSONScanner0.nextToken(0);
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      assertEquals(7, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.^NCL:oSG&");
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanNumber();
      assertEquals(3, jSONScanner0.token());
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldUUID((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1*n-epr^");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 0);
      char[] charArray0 = new char[8];
      jSONReaderScanner0.scanInt('U');
      charArray0[0] = ':';
      charArray0[1] = '*';
      charArray0[2] = 'h';
      charArray0[3] = ',';
      charArray0[4] = '(';
      charArray0[5] = 'F';
      charArray0[6] = ' ';
      charArray0[7] = '9';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("xggFXy", 513);
      Feature feature0 = Feature.NonStringKeyAsString;
      jSONScanner0.np = 121;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/-RU");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.eofPos = (-928);
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = 'r';
      charArray0[2] = 'V';
      charArray0[3] = '\\';
      charArray0[4] = '\"';
      charArray0[5] = 'a';
      charArray0[6] = 'K';
      charArray0[7] = 'w';
      charArray0[8] = '0';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanLong('B');
      jSONReaderScanner0.scanInt('d');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextToken();
      assertTrue(jSONScanner0.isEOF());
      
      jSONScanner0.isEnabled(46);
      jSONScanner0.scanBoolean('2');
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";l6J-&5@8lJN80H");
      jSONScanner0.close();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) ";l6J-&5@8lJN80H";
      objectArray0[1] = (Object) jSONScanner0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      jSONScanner0.lexError((String) null, objectArray0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%R%");
      jSONScanner0.putChar('B');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("tzlm&A!&#U`F~7e*'");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.2GCL:zS6&");
      jSONScanner0.nextIdent();
      assertEquals(3, jSONScanner0.token());
      assertEquals('G', jSONScanner0.getCurrent());
      
      jSONScanner0.decimalValue(true);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39);
      jSONReaderScanner0.nextTokenWithChar('A');
      jSONReaderScanner0.sub_chars(39, 39);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.charAt(39);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = '1';
      charArray0[2] = 'V';
      charArray0[3] = 'V';
      charArray0[4] = '9';
      charArray0[5] = '\\';
      charArray0[6] = 'C';
      charArray0[7] = '7';
      charArray0[8] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal identifier : ", 760);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('1');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}pUO0:\"[pR~R,`n");
      jSONScanner0.nextIdent();
      assertEquals(13, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDouble('{');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = ':';
      charArray0[2] = '1';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 91);
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONReaderScanner0.scanStringArray(set0, 'y');
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - f, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/-RU");
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 92, 92);
      JSONScanner jSONScanner0 = new JSONScanner("TreeOSjt", 480);
      jSONScanner0.close();
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, '');
      jSONScanner0.charAt(1989);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" *lm&A!V#UFg7e*'");
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.pos();
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(&E{k$9!uj3PhR", (-3856));
      JSONScanner jSONScanner1 = new JSONScanner("illegal stat, textLength is zero", (-1704));
      jSONScanner1.nextIdent();
      jSONScanner1.skipWhitespace();
      assertEquals('s', jSONScanner1.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONScanner1.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = 'Z';
      charArray0[2] = 'X';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.nextToken(86);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(2);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'b');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - -, info : pos 1, json :  - 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Ud");
      jSONScanner0.skipWhitespace();
      SymbolTable symbolTable0 = new SymbolTable(1745);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1j=Ypu+,h");
      jSONScanner0.nextIdent();
      assertEquals('j', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("B");
      jSONScanner0.scanNumber();
      jSONScanner0.close();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";,^J", 4096);
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = 'N';
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("3(Xyie@h{^Z9rvt", 83);
      JSONScanner jSONScanner1 = new JSONScanner("3(Xyie@h{^Z9rvt");
      jSONScanner0.scanFieldSymbol(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3035);
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-1), (-3562));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3562
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" zlm&A!V#U`Fg7e*'");
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";:/jx");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.util.concurrent.atomic.LongAdder");
      jSONReaderScanner0.nextToken(0);
      jSONReaderScanner0.getTimeZone();
      System.setCurrentTimeMillis(0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("qY;i5/#7Wz", 1403);
      jSONScanner0.close();
      jSONScanner0.lexError("qY;i5/#7Wz", (Object[]) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'F';
      charArray0[1] = ';';
      charArray0[2] = '@';
      charArray0[3] = '|';
      charArray0[4] = 'D';
      charArray0[5] = '{';
      charArray0[6] = 'i';
      charArray0[7] = 'J';
      jSONScanner0.scanFieldString(charArray0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan false error", 120);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" *4{cN");
      jSONReaderScanner0.scanBoolean('z');
      int int0 = (-1186);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-986));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0");
      jSONScanner0.nextToken();
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getDisplayName();
      jSONScanner0.setLocale(locale0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.scanIdent();
      jSONScanner0.longValue();
      jSONScanner0.scanBoolean('_');
      jSONScanner0.nextToken(67);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", info : ");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[2];
      jSONScanner0.scanString(',');
      charArray0[0] = ',';
      charArray0[1] = 't';
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(16, jSONScanner0.token());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not \"match ");
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.nextIdent();
      jSONScanner0.scanDecimal('a');
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ebAt%U}),MW");
      jSONScanner0.locale = null;
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.scanDate('z');
      jSONScanner0.nextIdent();
      long long0 = jSONScanner0.longValue();
      assertEquals(58238L, long0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 92, 92);
      int int0 = 14;
      SymbolTable symbolTable0 = new SymbolTable(14);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '0');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" zlm&A!V#U`Fg7e*'");
      char[] charArray0 = new char[6];
      charArray0[0] = 's';
      charArray0[1] = 'm';
      charArray0[2] = 'S';
      charArray0[3] = 'l';
      charArray0[4] = '9';
      charArray0[5] = '^';
      SymbolTable symbolTable0 = new SymbolTable(59);
      jSONScanner0.scanFieldStringArray(charArray0, 654, symbolTable0);
      jSONScanner0.nextIdent();
      assertEquals('&', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONLexerBase.isWhitespace('.');
      JSONScanner jSONScanner0 = new JSONScanner("A%7YaQVR*5(0'?X%ou", 1964);
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('.', '.', '.', '(', '1', '.');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      charArray0[1] = 'O';
      charArray0[2] = '|';
      charArray0[3] = 'f';
      charArray0[4] = '5';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 22);
      Locale locale0 = Locale.KOREAN;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner.charArrayCompare(".", 2875, charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("M7Hs2%nnnJ5#d0,");
      jSONScanner0.scanType((String) null);
      jSONScanner0.indexOf('f', 76);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.^NCNL:oSG&");
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldDouble(charArray0);
      charArray0[0] = '/';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.isBlankInput();
      jSONScanner0.bytesValue();
      jSONScanner0.nextIdent();
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" *lm&A!V#UFg7e*'");
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = 'B';
      charArray0[2] = '?';
      charArray0[3] = ';';
      charArray0[4] = '[';
      charArray0[5] = '5';
      charArray0[6] = 'e';
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.nextIdent();
      jSONScanner0.scanString('S');
      assertEquals('l', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.mNCL:J]G+");
      // Undeclared exception!
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/J-RU", 45380);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanIdent();
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 45380, 45380);
      jSONReaderScanner1.nextToken(45380);
      jSONReaderScanner1.indexOf('D', 31);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      JSONScanner jSONScanner0 = new JSONScanner("eR\"EZl4&!@.??:N");
      jSONScanner0.bytesValue();
      jSONScanner0.scanNumber();
      assertEquals('R', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      char char0 = '#';
      charArray0[1] = '#';
      char char1 = 'y';
      charArray0[2] = 'y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 45);
      jSONReaderScanner0.bp = 0;
      jSONReaderScanner0.scanString('_');
      jSONReaderScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~)66pvv7", 3894);
      SymbolTable symbolTable0 = new SymbolTable(115);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : ~pos 0, json : ~)66pvv7
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{");
      jSONScanner0.nextToken();
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("N");
      jSONScanner0.nextToken(0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sY}dkTIbCYE(");
      jSONScanner0.scanBoolean('1');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",/LJ");
      jSONScanner0.tokenName();
      jSONScanner0.skipComment();
      jSONScanner0.nextIdent();
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("java.awt.Color");
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      char char0 = 'V';
      charArray0[1] = 'V';
      charArray0[2] = 'M';
      stringReader0.read(charArray0);
      charArray0[3] = '3';
      charArray0[4] = '\\';
      stringReader0.read(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.matchStat = 63;
      jSONReaderScanner0.getFeatures();
      jSONReaderScanner0.hasSpecial = true;
      HashSet<String> hashSet0 = new HashSet<String>();
      SymbolTable symbolTable0 = new SymbolTable(110);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 't');
      hashSet0.add("error parse new");
      jSONReaderScanner0.scanStringArray(hashSet0, 'F');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 20, 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`-,sW5oXZ7F_");
      jSONScanner0.nextIdent();
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("xggFXy", 797);
      JSONScanner jSONScanner1 = new JSONScanner("-2`-mmmRBezv@", 797);
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = '6';
      charArray0[2] = 'O';
      charArray0[3] = 'r';
      charArray0[4] = 'W';
      charArray0[5] = 'U';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")");
      jSONScanner0.isBlankInput();
      jSONScanner0.nextToken();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("I\u0000");
      jSONScanner0.nextIdent();
      jSONScanner0.integerValue();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.nextToken();
      assertEquals(7, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fase");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.sp = 18;
      jSONScanner0.nextToken(18);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[1] = 'B';
      charArray0[2] = '2';
      charArray0[3] = 'b';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3158);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.sp = 3158;
      jSONReaderScanner0.scanDouble('+');
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.skipWhitespace();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.^NCL:oSG&");
      char[] charArray0 = new char[0];
      JSONLexerBase.readString(charArray0, 0);
      jSONScanner0.scanNumber();
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals('^', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 45380;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/J-RU", 45380);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.stringDefaultValue();
      char[] charArray0 = new char[1];
      charArray0[0] = '|';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 45380);
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.scanFieldString(charArray0);
      char char0 = '@';
      int int1 = (-1108553496);
      // Undeclared exception!
      try { 
        jSONScanner0.subString(99, (-1108553496));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.2GCL:zS6&");
      SymbolTable symbolTable0 = new SymbolTable(115);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : -pos 0, json : -.2GCL:zS6&
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", 21);
      jSONReaderScanner0.nextToken((-2789));
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[1] = '#';
      charArray0[2] = 'y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 45);
      jSONReaderScanner0.bp = 0;
      String string0 = jSONReaderScanner0.scanString('_');
      assertNull(string0);
      
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanInt('_');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 45, 45);
      jSONReaderScanner0.nextToken(0);
      assertEquals(45, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(20, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{Skne_-#'Yh ");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. {
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.^NCL:oSG&");
      jSONScanner0.bytesValue();
      jSONScanner0.scanNumber();
      assertEquals('^', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("*O=7y*7~<[[I");
      jSONScanner0.setToken((-3075));
      jSONScanner0.nextIdent();
      JSONScanner jSONScanner1 = new JSONScanner("*O=7y*7~<[[I");
      SymbolTable symbolTable0 = new SymbolTable(506);
      // Undeclared exception!
      try { 
        jSONScanner1.addSymbol(117, 506, 34, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", 47);
      jSONScanner0.close();
      char char0 = ')';
      char[] charArray0 = new char[4];
      charArray0[0] = ')';
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<xu^}8X~WU/PQ@c", (-2035));
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.JSONObject");
      jSONReaderScanner0.stringVal();
      StringReader stringReader0 = new StringReader("com.alibaba.fastjson.JSONObject");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.scanDate('2');
      jSONReaderScanner1.scanIdent();
      assertEquals(18, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ulclosed str");
      jSONScanner0.nextToken();
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~)66pvv7");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = 'K';
      charArray0[2] = '}';
      jSONScanner0.scanFieldBigInteger(charArray0);
      charArray0[3] = 'L';
      charArray0[4] = '{';
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals(')', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 47, 47);
      jSONReaderScanner0.sp = (-1719727397);
      jSONReaderScanner0.features = 47;
      jSONReaderScanner0.hasSpecial = false;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "q";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("q", 1585);
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = 'D';
      charArray0[2] = 'Y';
      charArray0[3] = '2';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      char[] charArray1 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.^NCL:oSG&");
      char[] charArray0 = new char[2];
      char char0 = 'q';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-1103));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - -, info : pos 0, json : -.^NCL:oSG&
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", info : ");
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanNumber();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.^NCL:oSG&");
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      SymbolTable symbolTable0 = new SymbolTable(2510);
      jSONScanner0.scanFieldStringArray(charArray0, 3467, symbolTable0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan false error");
      jSONScanner0.close();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      jSONReaderScanner0.setTimeZone(timeZone0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1*n-epr^");
      stringReader0.reset();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(39);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'c');
      jSONReaderScanner0.scanInt('U');
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = '(';
      charArray0[2] = ' ';
      charArray0[3] = '9';
      charArray0[4] = ' ';
      JSONScanner jSONScanner0 = new JSONScanner("1*n-epr^");
      jSONScanner0.close();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("W-2aPbKu$");
      boolean boolean0 = jSONReaderScanner0.isEnabled((-1489));
      assertTrue(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M9?f");
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-890KB", 0);
      jSONScanner0.close();
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = 'H';
      charArray0[2] = '=';
      charArray0[3] = 'i';
      charArray0[4] = 'B';
      charArray0[5] = 'e';
      charArray0[6] = 'O';
      charArray0[7] = '1';
      charArray0[8] = '(';
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals(0, jSONScanner0.getFeatures());
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = 3;
      JSONScanner jSONScanner0 = new JSONScanner("\"ay'v@wRm", 3);
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = '\"';
      charArray0[2] = '/';
      charArray0[3] = 'V';
      charArray0[4] = '<';
      charArray0[5] = '3';
      charArray0[6] = 'u';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanFloat('z');
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16, (-138));
      jSONReaderScanner0.scanString('y');
      JSONLexerBase.isWhitespace('y');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 45, 14);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 69, 45);
      SymbolTable symbolTable0 = new SymbolTable(69);
      jSONReaderScanner0.addSymbol(10, 49, 4542, symbolTable0);
      // Undeclared exception!
      try { 
        jSONReaderScanner2.scanFieldStringArray(charArray0, 999999999, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$en5N91BA");
      jSONScanner0.nextIdent();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<xu^}8X~WU/PQ@c", (-2035));
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanNumber();
      jSONScanner0.scanStringArray((Collection<String>) null, '\\');
      char char0 = jSONScanner0.getCurrent();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('<', char0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nloed.str.lit");
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = 'U';
      charArray0[2] = '@';
      charArray0[3] = 'q';
      charArray0[4] = '!';
      charArray0[5] = 'm';
      charArray0[6] = 'c';
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, 'q');
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.2GCL:zS6&");
      jSONScanner0.isBlankInput();
      jSONScanner0.nextToken();
      assertEquals(3, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      char char0 = '_';
      charArray0[1] = '_';
      char char1 = '>';
      charArray0[2] = '>';
      char char2 = '?';
      charArray0[3] = '?';
      charArray0[4] = 'p';
      int int0 = (-2788);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 576, (-2788));
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-2788), (-2788));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2788
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '#';
      charArray0[2] = 'y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 45);
      jSONReaderScanner0.scanDate(',');
      jSONReaderScanner0.info();
      jSONReaderScanner0.bp = 0;
      jSONReaderScanner0.scanString('\u0000');
      jSONReaderScanner0.isBlankInput();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 45, 45);
      jSONReaderScanner0.nextToken(0);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("xggNXy");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. g
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'U[d");
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 92, 92);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.nextToken(14);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int int0 = 1000;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.JSONObject", 1000);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertFalse(boolean0);
      
      jSONScanner0.scanUUID('%');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.^NCN7L:oSG&");
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString((char[]) null, 66);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse null");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.nextIdent();
      jSONScanner0.info();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", 48);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDouble('I');
      jSONReaderScanner0.close();
      assertEquals(48, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.^NCL:oSG&");
      jSONScanner0.bytesValue();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-.^NCL:oSG&");
      jSONReaderScanner0.nextToken(17);
      assertEquals('^', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.google.common.collect.TreeMultimap", 76);
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.^NCL:oSG&");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.close();
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      jSONScanner0.isBlankInput();
      jSONScanner0.matchStat = (-1841207068);
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.nextToken(13);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.^NCL:oSG&");
      jSONScanner0.nextIdent();
      jSONScanner0.integerValue();
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanEnum(class0, (SymbolTable) null, 'd');
      assertEquals(3, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("85=P<\"(Gsd^Q~", (-2789));
      jSONScanner0.close();
      jSONScanner0.token();
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = '[';
      charArray0[2] = 'z';
      charArray0[3] = 'D';
      charArray0[4] = 'P';
      charArray0[5] = '}';
      charArray0[6] = 'D';
      charArray0[7] = 'n';
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-2789), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("QTFYy");
      jSONScanner0.nextToken();
      assertEquals('T', jSONScanner0.getCurrent());
      
      SymbolTable symbolTable0 = new SymbolTable(78);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      int int0 = jSONScanner0.intValue();
      assertEquals(368683, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("V Fz");
      jSONReaderScanner0.scanNumber();
      Feature feature0 = Feature.SupportArrayToBean;
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      charArray0[1] = 'Q';
      charArray0[2] = '.';
      charArray0[3] = 's';
      charArray0[4] = '\"';
      charArray0[5] = '`';
      SymbolTable symbolTable0 = new SymbolTable(3220);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, (-2241), symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[2] = 'y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 45);
      jSONReaderScanner0.bp = 0;
      jSONReaderScanner0.scanString('_');
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanInt('_');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 45, 45);
      jSONReaderScanner0.nextToken(0);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextIdent();
      jSONScanner0.scanDecimal('Z');
      jSONScanner0.matchStat();
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-1320));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("c*r");
      jSONScanner0.nextToken();
      jSONScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'z';
      charArray0[2] = ':';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 123);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('@');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("N");
      jSONScanner0.nextToken();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      charArray0[4] = 'I';
      charArray0[5] = 'I';
      charArray0[6] = '%';
      charArray0[7] = 'I';
      charArray0[8] = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'I');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 2, 110);
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      Class<Integer> class0 = Integer.class;
      SymbolTable symbolTable0 = new SymbolTable(110);
      jSONReaderScanner1.scanEnum(class0, symbolTable0, '%');
      jSONReaderScanner1.close();
      assertEquals(110, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Udg");
      jSONScanner0.scanUUID('Z');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/J");
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[Og!6,");
      jSONScanner0.nextToken();
      assertEquals('O', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("I\u0000");
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.matchStat();
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".class");
      jSONScanner0.nextToken();
      assertEquals(25, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TODO");
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('R');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match R - T, info : pos 0, json : TODO
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("jav.uril.OptioDalInv");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanBoolean('2');
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      SymbolTable symbolTable0 = new SymbolTable(1040);
      jSONScanner0.scanEnum(class0, symbolTable0, '>');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = ',';
      charArray0[2] = 'r';
      charArray0[3] = '';
      charArray0[4] = '1';
      charArray0[5] = 'p';
      charArray0[6] = 'Q';
      charArray0[7] = 'c';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 8, (-1094409860));
      jSONScanner0.scanType("ignoreerrorgetter");
      jSONScanner0.matchField(charArray0);
      jSONScanner0.setToken(8);
      jSONScanner0.scanSymbol((SymbolTable) null);
      char[] charArray1 = new char[4];
      charArray1[0] = 'p';
      charArray1[1] = 'Q';
      charArray1[2] = '1';
      charArray1[3] = ',';
      jSONScanner0.scanFieldFloat(charArray1);
      jSONScanner0.intValue();
      jSONScanner0.setToken((-2));
      jSONScanner0.skipWhitespace();
      assertEquals((-2), jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";,/LJ");
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-2095));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ;, info : pos 0, json : ;,/LJ
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed string : ");
      StringReader stringReader0 = new StringReader("!3/-CFUi?I<p");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 2623);
      jSONReaderScanner0.scanInt('2');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("soho");
      jSONScanner0.sp = 10;
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanType("=6&W[`d?*");
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = 'A';
      charArray0[2] = 's';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 1535);
      jSONScanner0.tokenName();
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.matchField2(charArray0);
      jSONReaderScanner0.eofPos = 0;
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'H');
      jSONScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.setToken(14);
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.pos();
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S");
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("85=P<\"(Gsd^Q~", 106);
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.pos());
      assertEquals(106, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/J-RU");
      char[] charArray0 = new char[5];
      charArray0[0] = '\'';
      charArray0[1] = '_';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      charArray0[2] = '\\';
      charArray0[3] = 'V';
      charArray0[4] = 'p';
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanInt('F');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1j=Yp;K<h");
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.scanBoolean('l');
      jSONScanner0.nextIdent();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<xu^}8X~WU/PQ@c", (-2035));
      jSONScanner0.nextIdent();
      Locale locale0 = Locale.GERMANY;
      jSONScanner0.setLocale(locale0);
      jSONScanner0.scanIdent();
      assertEquals('^', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WWGP^");
      char[] charArray0 = new char[7];
      jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
      charArray0[0] = ',';
      charArray0[1] = ',';
      jSONReaderScanner0.features = 473;
      assertEquals('^', jSONReaderScanner0.getCurrent());
      
      charArray0[2] = '|';
      charArray0[3] = 'P';
      charArray0[4] = 'P';
      charArray0[5] = '\u0085';
      charArray0[6] = ']';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner1.scanIdent();
      JSONScanner jSONScanner0 = new JSONScanner("/", (-1785));
      assertEquals((-1785), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-890kb", (-1882295014));
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = '+';
      charArray0[2] = '{';
      charArray0[3] = '';
      charArray0[4] = 'T';
      charArray0[5] = 'i';
      charArray0[6] = '.';
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.close();
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("scan false error", 0);
      jSONReaderScanner0.nextToken(0);
      Feature feature0 = Feature.AutoCloseSource;
      jSONReaderScanner0.isEnabled(feature0);
      assertEquals(20, jSONReaderScanner0.token());
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "q";
      JSONScanner jSONScanner0 = new JSONScanner("q");
      jSONScanner0.bytesValue();
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TGNDX(HH", 2457);
      jSONScanner0.close();
      Locale locale0 = Locale.FRENCH;
      jSONScanner0.setLocale(locale0);
      String string0 = jSONScanner0.scanString('L');
      assertEquals(2457, jSONScanner0.getFeatures());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.bytesValue();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 127);
      jSONReaderScanner1.nextToken(20);
      assertEquals(20, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.^NCL:oSG+");
      jSONScanner0.nextToken(9);
      assertEquals('^', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";,/LJ");
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = 'V';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      charArray0[4] = '!';
      charArray0[5] = 'N';
      charArray0[6] = 'T';
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'C';
      charArray0[1] = 'u';
      charArray0[2] = 'L';
      charArray0[3] = '8';
      charArray0[4] = 'S';
      charArray0[5] = '(';
      charArray0[6] = '9';
      charArray0[7] = 'w';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 175);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.eofPos = 12;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.nextIdent();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = 'U';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 308);
      jSONReaderScanner0.bp = 3840;
      jSONReaderScanner0.stringDefaultValue = "BrowserCompatible";
      jSONReaderScanner0.close();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3CJXyS5&&ho16");
      jSONScanner0.nextToken();
      jSONScanner0.stringVal();
      SymbolTable symbolTable0 = new SymbolTable(115);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'E');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      Locale locale0 = Locale.CANADA_FRENCH;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.scanNumber();
      locale0.getExtensionKeys();
      jSONReaderScanner0.locale = locale0;
      char char0 = '(';
      jSONReaderScanner0.scanDate('(');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.2GCL:zS6&");
      int int0 = 104;
      JSONScanner jSONScanner1 = new JSONScanner(" >my~&7s!zO", 104);
      jSONScanner1.nextToken();
      int int1 = 1428;
      int int2 = 540;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("th7");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("vb;i");
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken();
      assertEquals('i', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.scanBoolean('K');
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('@', '@', '@', '=', '`');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.bytesValue();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 20, 20);
      jSONReaderScanner1.nextToken(70);
      assertEquals(1, jSONReaderScanner1.token());
      
      SymbolTable symbolTable0 = new SymbolTable(4469);
      jSONReaderScanner1.scanSymbolWithSeperator(symbolTable0, '');
      assertEquals(1, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = 'r';
      charArray0[2] = '|';
      charArray0[3] = 'z';
      charArray0[4] = '4';
      charArray0[5] = 'M';
      charArray0[6] = 'X';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 540, 0);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.token = 540;
      jSONReaderScanner0.resetStringPosition();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.close();
      jSONScanner0.nextToken(5354);
      int int0 = 5;
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", property ", 2393);
      char[] charArray0 = new char[7];
      charArray0[0] = '$';
      char char0 = '+';
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.2GCL:zS6&");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      charArray0[5] = 'A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 41);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 41, 41);
      jSONReaderScanner1.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",/LJ");
      jSONScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(3787);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("vd|YjkX9;k", 115);
      jSONReaderScanner0.setTimeZone((TimeZone) null);
      jSONReaderScanner0.eofPos = 74;
      jSONReaderScanner0.subString(95, 127);
      assertEquals(115, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", property ", 3894);
      jSONScanner0.nextIdent();
      assertEquals(16, jSONScanner0.token());
      
      SymbolTable symbolTable0 = new SymbolTable(110);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier :  pos 1, json : , property 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\u0000");
      jSONScanner0.skipWhitespace();
      jSONScanner0.hasSpecial = true;
      jSONScanner0.nextIdent();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/-U");
      jSONReaderScanner0.scanIdent();
      JSONScanner jSONScanner0 = new JSONScanner("/-U", 71);
      char[] charArray0 = new char[6];
      charArray0[0] = 'V';
      charArray0[1] = 'z';
      charArray0[2] = '!';
      charArray0[3] = 'q';
      charArray0[4] = ' ';
      charArray0[5] = 'y';
      jSONScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.subString(1699, 57344);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WriteNullNumberAsZero", 2393);
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. W
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-. GCL:zS6&");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        TimeZone.getTimeZone((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = "null";
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.skipWhitespace();
      jSONScanner0.stringDefaultValue();
      int int0 = (-1556);
      jSONScanner0.matchStat = (-1556);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - n, info : pos 0, json : null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("b{");
      jSONScanner0.nextToken();
      SymbolTable symbolTable0 = new SymbolTable(76);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'T');
      jSONScanner0.nextIdent();
      jSONScanner0.getFeatures();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('J');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match J - \u001A, info : pos 2, json : b{
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      TimeZone timeZone0 = TimeZone.getTimeZone("5[+~kB");
      jSONScanner0.timeZone = timeZone0;
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 3, json : new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("tava.util.OptionalInv");
      jSONScanner0.scanString('5');
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(127);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("|");
      jSONScanner0.scanBoolean('.');
      jSONScanner0.nextIdent();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'i';
      charArray0[2] = '4';
      charArray0[3] = '(';
      charArray0[4] = '{';
      charArray0[5] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3196, 3196);
      SymbolTable symbolTable0 = new SymbolTable(1755);
      jSONReaderScanner0.scanSymbol(symbolTable0, 'i');
      assertEquals('4', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      JSONScanner jSONScanner0 = new JSONScanner("scan false error", 0);
      jSONScanner0.close();
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("b");
      int int0 = jSONScanner0.scanType("");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-2), int0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = '\"';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4291);
      jSONReaderScanner0.scanDecimal('\'');
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 4291, 4291);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      int int0 = 47;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xggfxy", 47);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. g
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8OkCk`E");
      jSONScanner0.scanDecimal('3');
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      charArray0[1] = 'V';
      charArray0[2] = 'J';
      charArray0[3] = ' ';
      charArray0[4] = 'M';
      charArray0[5] = 'c';
      charArray0[6] = 'a';
      charArray0[7] = 'M';
      charArray0[8] = 'p';
      jSONScanner0.scanFieldFloat(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(45);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, ']');
      assertEquals(20, jSONScanner0.token());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'M';
      objectArray0[1] = (Object) 'M';
      jSONScanner0.lexError("", objectArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("xggFXy", 486);
      jSONScanner0.close();
      jSONScanner0.nextIdent();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = 'a';
      charArray0[2] = ':';
      charArray0[3] = 'Y';
      charArray0[4] = ']';
      charArray0[5] = '}';
      charArray0[6] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      char[] charArray0 = new char[4];
      charArray0[0] = ')';
      charArray0[1] = 'H';
      jSONScanner0.token = 17;
      charArray0[2] = '6';
      charArray0[3] = ',';
      JSONLexerBase.readString(charArray0, 0);
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanString('-');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[0] = '2';
      charArray0[2] = '-';
      int int0 = 2947;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2947, 101);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("n");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "WriteDateUseDateFormat");
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      JSONScanner jSONScanner1 = new JSONScanner("}}0~=8XtN|>s;", 0);
      jSONScanner1.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner1.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.OptionalInv");
      jSONScanner0.nextToken(0);
      System.setCurrentTimeMillis((-953L));
      Object[] objectArray0 = new Object[0];
      jSONScanner0.lexError("java.util.OptionalInv", objectArray0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = "";
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      SymbolTable symbolTable0 = new SymbolTable(2722);
      String string0 = jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals("true", string0);
      
      jSONScanner0.close();
      jSONScanner0.scanBoolean('h');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/J-RU");
      char[] charArray0 = new char[8];
      jSONScanner0.scanFieldDouble(charArray0);
      charArray0[0] = 'U';
      charArray0[1] = 'c';
      charArray0[2] = 'i';
      charArray0[3] = '1';
      charArray0[4] = 'S';
      charArray0[5] = 'B';
      charArray0[6] = '=';
      charArray0[7] = '+';
      // Undeclared exception!
      try { 
        jSONScanner0.skipWhitespace();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Ud");
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, 'O');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.2GCL:zS6&");
      JSONScanner jSONScanner1 = new JSONScanner("-.2GCL:zS6&");
      jSONScanner1.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanEnum(class0, (SymbolTable) null, 'j');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.^NCL:oSG&");
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      jSONScanner0.putChar('0');
      charArray0[1] = ';';
      charArray0[2] = '3';
      charArray0[3] = 'u';
      jSONScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/j", 3894);
      jSONScanner0.close();
      float float0 = jSONScanner0.scanFloat('*');
      assertEquals(0.0F, float0, 0.01F);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = '8';
      jSONScanner0.matchField2(charArray0);
      assertEquals(3894, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined", 103);
      jSONScanner0.putChar('g');
      jSONScanner0.scanUUID('g');
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nloed.str.lit");
      jSONScanner0.scanDecimal('6');
      jSONScanner0.nextIdent();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("f 4l6968kH|6VmI e");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8oUyCk`E");
      JSONScanner jSONScanner1 = new JSONScanner("8oUyCk`E", (-1110));
      char[] charArray0 = new char[0];
      jSONScanner1.scanFieldDecimal(charArray0);
      jSONScanner1.nextIdent();
      assertEquals('o', jSONScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("aEk.4\u001D$v^/>]");
      boolean boolean0 = jSONScanner0.isEnabled(45380, (-1836));
      assertTrue(boolean0);
      
      jSONScanner0.bytesValue();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = '-';
      charArray0[0] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 107);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("qY;i5/#7Wz");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("qY;i5/#7Wz");
      jSONReaderScanner0.nextToken(0);
      jSONReaderScanner0.stringVal();
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals('Y', char0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONLexerBase.isWhitespace('4');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]GX$G+");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONReaderScanner0.scanStringArray(linkedHashSet0, '`');
      jSONReaderScanner0.scanNumber();
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '4';
      charArray0[3] = '4';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 88, 125);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" *lm&A!V#UFg7e*'");
      jSONScanner0.nextIdent();
      float float0 = jSONScanner0.scanFloat('|');
      assertEquals(1, jSONScanner0.pos());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanFloat('E');
      jSONScanner0.nextIdent();
      char[] charArray1 = new char[1];
      charArray1[0] = 'E';
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray1);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", 48);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("undefined");
      StringReader stringReader0 = new StringReader("undefined");
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0, (-2957));
      jSONReaderScanner2.nextToken(0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      int int0 = 512;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.serializerFeatures.MapSortField", 512);
      jSONReaderScanner0.isRef();
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = 'O';
      charArray0[2] = '<';
      charArray0[3] = '/';
      charArray0[4] = 'K';
      charArray0[5] = '2';
      charArray0[6] = 'A';
      charArray0[7] = ']';
      charArray0[8] = '[';
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanBoolean('r');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" *lm&A!V#UFg7e*'");
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanUUID('0');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('0');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 0 - *, info : pos 1, json :  *lm&A!V#UFg7e*'
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.nextIdent();
      jSONScanner0.scanType("Feature.AllowSingleQuotes is false");
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      int int0 = 106;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ktQ\"", 106);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '2';
      charArray0[2] = '9';
      int int0 = 2947;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2947, 101);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      int int0 = 47;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xggfxy", 47);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.nextToken(0);
      assertEquals(20, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      JSONScanner jSONScanner0 = new JSONScanner("scan false error", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", 47);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "true";
      jSONScanner0.lexError("true", objectArray0);
      jSONScanner0.scanTrue();
      jSONScanner0.close();
      assertEquals(47, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16, (-138));
      jSONReaderScanner0.scanString('y');
      JSONLexerBase.isWhitespace('y');
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray1);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 45, 14);
      int int0 = 69;
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 69, 45);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('y');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match y - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\u0000");
      jSONScanner0.np = 8;
      Number number0 = jSONScanner0.integerValue();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7fz{bg>'", 19);
      jSONScanner0.pos = 77;
      jSONScanner0.nextToken();
      jSONScanner0.nextIdent();
      char char0 = 'i';
      jSONScanner0.info();
      jSONScanner0.scanDouble('i');
      jSONScanner0.scanString('i');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(19);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - {, info : pos 3, json : 7fz{bg>'
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("DisableSpecialKeyDetect", (-2848));
      jSONScanner0.close();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      char char0 = ' ';
      jSONReaderScanner0.getLocale();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.2GCL:zS6&");
      jSONScanner0.scanInt('a');
      jSONScanner0.scanNumber();
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.matchStat();
      assertEquals(1, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/-RU");
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" zlm&A!V#U`Fg7e*'");
      jSONScanner0.nextIdent();
      jSONScanner0.eofPos = (-3026);
      jSONScanner0.bp = (-1201);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$#VE/uvC");
      Calendar calendar0 = MockCalendar.getInstance();
      jSONScanner0.calendar = calendar0;
      jSONScanner0.close();
      jSONScanner0.info();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Udg");
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("I/TK#tlj^");
      jSONScanner0.putChar(']');
      jSONScanner0.next();
      jSONScanner0.tokenName();
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = ']';
      charArray0[2] = '6';
      charArray0[3] = ']';
      charArray0[4] = '/';
      charArray0[5] = '/';
      charArray0[6] = '/';
      charArray0[7] = '/';
      charArray0[8] = '/';
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":E6!N2<qKL");
      jSONScanner0.nextIdent();
      assertEquals('E', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("jav.uril.OptioDalInv");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '@';
      charArray0[2] = '$';
      charArray0[3] = 'r';
      charArray0[4] = '`';
      charArray0[5] = 'k';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 6);
      jSONReaderScanner0.eofPos = 46;
      jSONReaderScanner0.sub_chars(2613, 612);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - <, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1j=:p:Klh");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      jSONScanner0.decimalValue(false);
      jSONScanner0.nextIdent();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      charArray0[1] = '8';
      charArray0[2] = '-';
      charArray0[3] = 'I';
      charArray0[4] = '1';
      charArray0[5] = ')';
      charArray0[6] = 'R';
      charArray0[7] = '^';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 45);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat('9');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.^NCL:oSG&");
      jSONScanner0.setToken(24180);
      jSONScanner0.pos();
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = 'P';
      charArray0[2] = ' ';
      charArray0[3] = '>';
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals(24180, jSONScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      int int0 = 1517;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 1517);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e$au");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldIntArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONLexerBase.isWhitespace('a');
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = 'a';
      charArray0[4] = 'a';
      charArray0[5] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1, (-1232));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("D");
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.token();
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.2GCL:zS6&");
      jSONScanner0.scanDecimal('-');
      jSONScanner0.nextIdent();
      assertEquals(3, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char[] charArray0 = new char[6];
      jSONScanner0.skipWhitespace();
      charArray0[0] = '^';
      charArray0[1] = '';
      charArray0[2] = ']';
      charArray0[3] = 'n';
      char char0 = 'd';
      Feature feature0 = Feature.DisableASM;
      jSONScanner0.config(feature0, true);
      jSONScanner0.scanDecimal('1');
      charArray0[4] = 'd';
      charArray0[5] = ')';
      jSONScanner0.stringDefaultValue = "new";
      jSONScanner0.np = (-2549);
      jSONScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('D');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match D - n, info : pos 0, json : new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[tj|s:.p1d1>U");
      jSONScanner0.np = 2295;
      jSONScanner0.tokenName();
      jSONScanner0.nextIdent();
      jSONScanner0.getCalendar();
      assertEquals('t', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      charArray0[1] = '2';
      charArray0[2] = '9';
      charArray0[3] = '0';
      charArray0[5] = 'B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 101, 101);
      jSONReaderScanner0.nextToken((-2520));
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan false error", 120);
      char[] charArray0 = new char[6];
      charArray0[0] = 'q';
      charArray0[1] = '+';
      charArray0[2] = 'O';
      charArray0[3] = '&';
      charArray0[4] = '-';
      charArray0[5] = '?';
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.close();
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TODO");
      jSONScanner0.nextToken();
      jSONScanner0.close();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("s:");
      jSONScanner0.nextIdent();
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"WXs");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('P');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.^NCL:oSG&");
      jSONScanner0.matchStat = 5724;
      assertEquals(5724, jSONScanner0.matchStat());
      
      JSONScanner.checkDate('1', '1', '1', '1', '1', '1', '1', '1');
      jSONScanner0.scanLong('1');
      jSONScanner0.matchStat();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanDouble('u');
      JSONScanner jSONScanner0 = new JSONScanner("false", (-1));
      jSONReaderScanner0.nextToken(0);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8KSOkhCk`E");
      jSONScanner0.nextIdent();
      assertEquals('K', jSONScanner0.getCurrent());
      
      jSONScanner0.floatValue();
      StringReader stringReader0 = new StringReader("8KSOkhCk`E");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 0);
      jSONReaderScanner0.stringVal();
      jSONScanner0.scanDate('^');
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan false error", 120);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" *4{cN");
      jSONReaderScanner0.nextToken(44);
      assertEquals('4', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed str");
      SymbolTable symbolTable0 = new SymbolTable(134);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", property ", 3902);
      jSONScanner0.longValue();
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(3902, charArray0, 3902, 3902);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1j=Yp;W,h");
      jSONScanner0.nextIdent();
      jSONScanner0.getCurrent();
      jSONScanner0.scanIdent();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("qY;i5/#7Wz");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("qY;i5/#7Wz");
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '|';
      charArray0[2] = '2';
      charArray0[3] = 'W';
      charArray0[4] = 'T';
      charArray0[5] = 'J';
      charArray0[6] = '%';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-410));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".^NCL:oSG9&");
      JSONScanner jSONScanner1 = new JSONScanner(".^NCL:oSG9&", 0);
      jSONScanner1.nextIdent();
      jSONScanner1.skipWhitespace();
      assertEquals(25, jSONScanner1.token());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/-RU");
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('A');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match A - /, info : pos 0, json : /-RU
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.^NCL:oSG&");
      jSONScanner0.scanUUID('z');
      jSONScanner0.scanNumber();
      jSONScanner0.integerValue();
      assertEquals(3, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TODO");
      JSONScanner jSONScanner1 = new JSONScanner("null", 728);
      jSONScanner1.nextIdent();
      assertTrue(jSONScanner1.isEOF());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-09");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      timeZone0.getDisplayName();
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[1] = ',';
      charArray0[2] = ';';
      charArray0[3] = 'C';
      charArray0[4] = 'F';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.stringDefaultValue = "PzCid|##_nzFCSYv";
      jSONReaderScanner0.timeZone = timeZone0;
      jSONReaderScanner0.isEnabled(19);
      char[] charArray1 = new char[1];
      charArray1[0] = 'Y';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray1, 19);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("xggFXy", 797);
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. g
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("xggFXy");
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = 'q';
      charArray0[2] = 'h';
      charArray0[3] = '|';
      charArray0[4] = '\\';
      jSONScanner0.scanString('a');
      charArray0[5] = '[';
      charArray0[6] = '_';
      charArray0[7] = 'C';
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(2030, charArray0, 91, 1803);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~)66pvv7");
      jSONScanner0.scanIdent();
      jSONScanner0.nextIdent();
      assertEquals('6', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/J-RU");
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('6');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 6 - /, info : pos 0, json : /J-RU
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16, (-138));
      jSONReaderScanner0.scanString('y');
      jSONReaderScanner0.isBlankInput();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 45, 14);
      jSONReaderScanner1.nextToken(16);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      charArray0[1] = '2';
      charArray0[2] = '2';
      int int0 = 123;
      int int1 = 1359;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 115);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Ud");
      char char0 = '^';
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WriteNullNumberAsZero");
      char char0 = 'U';
      jSONScanner0.scanBoolean('U');
      jSONScanner0.bytesValue();
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(R-3Z y(^=;G%X");
      jSONScanner0.bytesValue();
      jSONScanner0.scanNumber();
      jSONScanner0.isEOF();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('(', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 92, 92);
      jSONReaderScanner0.scanUUID('_');
      int int0 = 14;
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan false error");
      jSONScanner0.close();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Ug");
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONScanner0.scanStringArray(linkedHashSet0, '4');
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined", 103);
      jSONScanner0.next();
      jSONScanner0.putChar('g');
      jSONScanner0.scanUUID('g');
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("qY;5/#7Wz", 120);
      SymbolTable symbolTable0 = new SymbolTable(531);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONScanner0.close();
      assertEquals(';', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/po3p8@jo)3BF?]");
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      char char0 = '6';
      charArray0[1] = '6';
      char char1 = '|';
      charArray0[2] = '|';
      jSONScanner0.matchField2(charArray0);
      Feature feature0 = Feature.SupportAutoType;
      jSONScanner0.config(feature0, false);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-2), "", (-2), (-1127), (-1127), (-2), 3392903, (-2), (-1127), 3392903, (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -2
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String string0 = "'Udg";
      JSONScanner jSONScanner0 = new JSONScanner("'Udg");
      String string1 = "[Dn~9ZX[i.x";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) "'Udg";
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'UdO'");
      jSONScanner0.nextIdent();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";,/LJ");
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.NGCL:oSG&");
      jSONScanner0.isRef();
      jSONScanner0.scanNumber();
      jSONScanner0.scanBoolean('.');
      int int0 = jSONScanner0.intValue();
      assertEquals(3, jSONScanner0.token());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("r>R");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.nextIdent();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/J-RU");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanInt('F');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("|");
      jSONScanner0.longValue();
      jSONScanner0.nextIdent();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", property ", 3894);
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(&E{k$9!uj3PhR", 0);
      jSONScanner0.putChar('g');
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanUUID('g');
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", property ", 3902);
      jSONScanner0.scanLong('6');
      jSONScanner0.intValue();
      jSONScanner0.nextIdent();
      jSONScanner0.getCalendar();
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"WXs");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1*n-epr^");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 0);
      char[] charArray0 = new char[8];
      jSONReaderScanner0.scanInt('U');
      charArray0[0] = ':';
      charArray0[1] = '*';
      jSONReaderScanner0.getLocale();
      Feature feature0 = Feature.AllowSingleQuotes;
      jSONReaderScanner0.config(feature0, true);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('*');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match * - 1, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-.^NCL:oSG&");
      JSONScanner jSONScanner1 = new JSONScanner("5) 5");
      char[] charArray0 = new char[5];
      charArray0[0] = '*';
      charArray0[1] = '|';
      charArray0[2] = 'A';
      charArray0[3] = '4';
      jSONScanner1.scanBoolean('x');
      charArray0[4] = 'Z';
      jSONScanner1.scanFieldLong(charArray0);
      jSONScanner1.scanNumber();
      assertEquals(')', jSONScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1j=:p:Klh");
      jSONScanner0.scanType("tava");
      jSONScanner0.nextIdent();
      assertEquals('j', jSONScanner0.getCurrent());
      
      jSONScanner0.floatValue();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("B{");
      jSONScanner0.close();
      jSONScanner0.getFeatures();
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      SymbolTable symbolTable0 = new SymbolTable(2330);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '^');
      jSONScanner0.nextToken();
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e$au");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.nextToken(0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      charArray0[1] = '8';
      charArray0[2] = '9';
      charArray0[1] = '0';
      charArray0[4] = 'K';
      charArray0[5] = 'B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 101, 101);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextToken((-2520));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/\"^$>", (-643));
      jSONReaderScanner0.scanIdent();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 34);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-643));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WriteNullNumberAsZero", 2393);
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(665);
      jSONScanner0.scanEnum(class0, symbolTable0, 'm');
      jSONScanner0.scanUUID('m');
      assertEquals(2393, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = 'r';
      charArray0[2] = '|';
      charArray0[3] = 'z';
      charArray0[4] = '4';
      charArray0[5] = 'M';
      charArray0[6] = 'X';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 540, 0);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.info();
      jSONReaderScanner0.token = 540;
      jSONReaderScanner0.resetStringPosition();
      assertEquals('|', jSONReaderScanner0.getCurrent());
  }
}
