/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 21:37:08 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FilterInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-65));
      classWriter0.version = 60;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-65), "M(I1sK#N$", "M(I1sK#N$", "M(I1sK#N$", "M(I1sK#N$");
      ByteVector byteVector0 = new ByteVector(2);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1509);
      classWriter0.index = (-2209);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1509, "", "", "", "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-65));
      classWriter0.version = 60;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-65), "M(I1sK#N$", "M(I1sK#N$", "M(I1sK#N$", "M(I1sK#N$");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1509);
      classWriter0.index = (-2209);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1509, "", "", "", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-72));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-72), "", "", "", "");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "org.apache.commons.io.filefilter.SizeFileFilter", "RuntimeInvisibleAnnotations", "", "'A$ZSN");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 1);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 1, ">z_&(&c]0-yF", "J83co\"&)1d6-Pbq", (String) null, pushbackInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.io.PushbackInputStream@7f6b531f
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1524);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2577, "J83co\"&)1d6-Pbq", "Synthetic", "t|q!kP\n8sws'>M", "J83co\"&)1d6-Pbq");
      Attribute attribute0 = new Attribute("J83co\"&)1d6-Pbq");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector();
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "J83co\"&)1d6-Pbq", "J83co\"&)1d6-Pbq", "J83co\"&)1d6-Pbq", "J83co\"&)1d6-Pbq");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitAnnotation("@j%xg{z^Ols\"", false);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1524);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "z7zW<wAI=", "", "");
      fieldWriter0.visitAnnotation("", true);
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-72));
      classWriter0.version = 49;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-72), "", "", "", "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-72));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-72), "", "", "", "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1494);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 76, "yT*4v*a-&dc", "yT*4v*a-&dc", (String) null, (Object) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1524);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2577, "J83co\"&)1d6-Pbq", "Synthetic", "t|q!kP\n8sws'>M", "J83co\"&)1d6-Pbq");
      Attribute attribute0 = new Attribute("J83co\"&)1d6-Pbq");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1524);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2577, "J83co\"&)1d6-Pbq", "Synthetic", "t|q!kP\n8sws'>M", "J83co\"&)1d6-Pbq");
      fieldWriter0.visitAnnotation("J83co\"&)1d6-Pbq", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1524);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "", "b{z[rz!K[Fga1Z>");
      fieldWriter0.visitAnnotation("", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-72));
      classWriter0.version = 49;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-72), "", "", "", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-72));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-72), "", "", "", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1494);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 76, "yT*4v*a-&dc", "yT*4v*a-&dc", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1207);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(3, "The array of prefixes must not be null", "The array of prefixes must not be null", "`(@E)|&B@2", "`(@E)|&B@2");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3105), "", "EY:(o+UqT]", "o0H/Le$DX9", "EY:(o+UqT]");
      assertFalse(fieldWriter0.equals((Object)fieldVisitor0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "J83co\"&)1d6-Pbq", "J83co\"&)1d6-Pbq", "", "J83co\"&)1d6-Pbq");
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "J83co\"&)1d6-Pbq", "J83co\"&)1d6-Pbq", "J83co\"&)1d6-Pbq", "J83co\"&)1d6-Pbq");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }
}
