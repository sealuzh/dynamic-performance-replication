/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 12:57:06 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put(integer0, integer0, "[_F&5");
      Integer integer1 = new Integer(0);
      String string0 = doubleKeyMap0.remove(integer1, integer0);
      assertEquals("[_F&5", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Map<String, Integer>, Map<String, Integer>> hashMap0 = new HashMap<Map<String, Integer>, Map<String, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<String, Integer>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<String, Integer>, String, Integer>(hashMap0, class0);
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      hashMap0.put(hashMap1, hashMap1);
      Map<String, Integer> map0 = doubleKeyMap1.newMap();
      Map<String, Integer> map1 = doubleKeyMap0.get(map0);
      assertNotSame(map1, map0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(class0);
      Integer integer0 = new Integer(1269);
      doubleKeyMap0.put("B", integer0, (Object) class0);
      Map<Integer, Object> map0 = doubleKeyMap0.get("B");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Map<String, Integer>, Map<Object, String>> hashMap1 = new HashMap<Map<String, Integer>, Map<Object, String>>();
      DoubleKeyMap<Map<String, Integer>, Object, String> doubleKeyMap0 = new DoubleKeyMap<Map<String, Integer>, Object, String>(hashMap1, class0);
      String string0 = doubleKeyMap0.remove((Map<String, Integer>) hashMap0, (Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, HashMap<String, Integer>, Map<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, HashMap<String, Integer>, Map<String, Integer>>();
      Integer integer0 = new Integer(2479);
      DoubleKeyMap<Integer, String, String> doubleKeyMap1 = new DoubleKeyMap<Integer, String, String>();
      Map<String, Map<String, Integer>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<String, String, Integer> doubleKeyMap2 = new DoubleKeyMap<String, String, Integer>(map0);
      Map<Integer, Map<Object, Map<Object, Integer>>> map1 = doubleKeyMap2.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, Map<Object, Integer>> doubleKeyMap3 = new DoubleKeyMap<Integer, Object, Map<Object, Integer>>(map1, class0);
      Map<Object, Integer> map2 = doubleKeyMap3.remove(integer0, (Object) doubleKeyMap0);
      assertNull(map2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1071);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>(class0);
      Integer integer1 = doubleKeyMap0.remove((Object) null, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>();
      Integer integer0 = new Integer(1);
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      Map<Object, String> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      Object object0 = new Object();
      Map<Object, String> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>();
      doubleKeyMap0.put(integer0, integer0, (String) null);
      Map<Integer, String> map0 = doubleKeyMap0.remove(integer0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      Object object1 = doubleKeyMap0.put(object0, integer0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, Object, HashMap<Map<String, Integer>, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, HashMap<Map<String, Integer>, Integer>>();
      Map<HashMap<Object, Map<String, Integer>>, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Object, Map<String, Integer>>, Object, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Map<String, Integer>>, Object, String>(map0);
      HashMap<Object, Map<String, Integer>> hashMap0 = new HashMap<Object, Map<String, Integer>>();
      String string0 = doubleKeyMap1.put(hashMap0, (Object) doubleKeyMap0, "eab");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Map<String, Integer>, Map<Object, Integer>> hashMap0 = new HashMap<Map<String, Integer>, Map<Object, Integer>>();
      DoubleKeyMap<Map<String, Integer>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<String, Integer>, Object, Integer>(hashMap0);
      Integer integer0 = new Integer(1);
      Integer integer1 = doubleKeyMap0.put((Map<String, Integer>) null, (Object) null, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0);
      Object object0 = doubleKeyMap0.get((Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Integer, String>>();
      Map<Object, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(map0, class0);
      Object object0 = new Object();
      String string0 = doubleKeyMap1.get((Object) doubleKeyMap0, object0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>();
      Map<String, String> map0 = doubleKeyMap0.get((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, HashMap<String, Integer>, Map<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, HashMap<String, Integer>, Map<String, Integer>>();
      DoubleKeyMap<Object, Object, HashMap<Integer, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, HashMap<Integer, Object>>();
      Map<Object, HashMap<Integer, Object>> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<Map<String, Integer>, Map<HashMap<String, Object>, HashMap<Map<String, Integer>, Object>>> hashMap0 = new HashMap<Map<String, Integer>, Map<HashMap<String, Object>, HashMap<Map<String, Integer>, Object>>>();
      DoubleKeyMap<Map<String, Integer>, HashMap<String, Object>, HashMap<Map<String, Integer>, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<String, Integer>, HashMap<String, Object>, HashMap<Map<String, Integer>, Object>>(hashMap0, class0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      HashMap<Map<String, Integer>, Object> hashMap3 = new HashMap<Map<String, Integer>, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Map<String, Integer>) hashMap1, hashMap2, hashMap3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>((Map<Integer, Map<Object, Object>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer((-72));
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>((Map<Integer, Map<Integer, String>>) null);
      Integer integer1 = new Integer((-2074));
      doubleKeyMap0.put(integer0, integer1, "");
      String string0 = doubleKeyMap0.remove(integer0, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Map<HashMap<Object, Map<String, Integer>>, Object>> hashMap0 = new HashMap<String, Map<HashMap<Object, Map<String, Integer>>, Object>>();
      DoubleKeyMap<String, HashMap<Object, Map<String, Integer>>, Object> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Map<String, Integer>>, Object>(hashMap0);
      HashMap<Object, Map<String, Integer>> hashMap1 = new HashMap<Object, Map<String, Integer>>();
      doubleKeyMap0.put("D\"v6C", hashMap1, (Object) "D\"v6C");
      Integer integer0 = new Integer(1);
      doubleKeyMap0.put("D\"v6C", hashMap1, (Object) integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, Map<Object, Integer>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Map<Object, Integer>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
