/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 02:06:08 GMT 2018
 */

package org.apache.commons.math3.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math3.analysis.function.Power;
import org.apache.commons.math3.analysis.function.Tanh;
import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventFilter;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.events.FilterType;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GraggBulirschStoerIntegrator_ESTest extends GraggBulirschStoerIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 10.0;
      doubleArray0[3] = 10.0;
      doubleArray0[4] = 10.0;
      doubleArray0[5] = 10.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(10.0, 10.0, doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(10.0, fixedStepHandler0, stepNormalizerMode0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(240, 240, 1619.4296666683476, 1619.4296666683476);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3047.731684079884), (-3047.731684079884), 705.54281407, (-3047.731684079884));
      graggBulirschStoerIntegrator0.setStepSizeControl(1876.0, 2371.13444, 629.02418606, 1876.0);
      graggBulirschStoerIntegrator0.setControlFactors(249.8955966207516, 1.7143988609313965, 2371.13444, 6.327431953939798E60);
      assertEquals(1876.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = 2971.28796205671;
      double double1 = 4273.31841583;
      double double2 = 0.9;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2971.28796205671, (-314.04179105253024), 4273.31841583, 0.9);
      double double3 = 408.864593764273;
      graggBulirschStoerIntegrator0.setControlFactors(0.9, 1.3910768032073975, 0.8, 408.864593764273);
      int int0 = 0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      double double4 = 3050.2845175;
      double double5 = 508.4416;
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      int int1 = (-2558);
      Tanh tanh0 = new Tanh();
      Power power0 = new Power((-314.04179105253024));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 408.864593764273;
      doubleArray0[1] = (-314.04179105253024);
      doubleArray0[2] = 408.864593764273;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[7];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      polynomialFunctionArray0[0] = polynomialFunction0;
      PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
      polynomialFunctionArray0[1] = polynomialFunction1;
      PolynomialFunction polynomialFunction2 = new PolynomialFunction(doubleArray0);
      polynomialFunctionArray0[2] = polynomialFunction2;
      PolynomialFunction polynomialFunction3 = new PolynomialFunction(doubleArray0);
      polynomialFunctionArray0[3] = polynomialFunction3;
      PolynomialFunction polynomialFunction4 = new PolynomialFunction(doubleArray0);
      polynomialFunctionArray0[4] = polynomialFunction4;
      PolynomialFunction polynomialFunction5 = new PolynomialFunction(doubleArray0);
      polynomialFunctionArray0[5] = polynomialFunction5;
      PolynomialFunction polynomialFunction6 = new PolynomialFunction(doubleArray0);
      polynomialFunctionArray0[6] = polynomialFunction6;
      PolynomialSplineFunction polynomialSplineFunction0 = null;
      try {
        polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 3
         //
         verifyException("org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(240).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3.8877083524279136E55, 240, 0.8, (-1775.566319917857));
      expandableStatefulODE0.setTime((-1775.566319917857));
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (double) 240);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimal step size (3.89E55) reached, integration needs 5.07E02
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(6).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1620.2498220819773, 2.0031331601617008E-8, 1.0E15, 2.0031331601617008E-8);
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1620.2498220819773);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-11.5536949978), 0.0, doubleArray0, doubleArray0);
      int int0 = (-733);
      graggBulirschStoerIntegrator0.mainSetDimension = (-733);
      int int1 = (-96);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (double) (-96));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(240).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(240, 240, 1620.2498220819773, 1620.2498220819773);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 240, 240, 1.7976931348623157E308);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.113946677051906E252, 2.113946677051906E252, (-3058.40887898133), 2.113946677051906E252);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 1390, 1390, 26.3);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (double) 1390);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1390, 1390, 1390, 1390);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 1390);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1009.5;
      doubleArray0[3] = 1009.5;
      doubleArray0[4] = 1009.5;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1009.5, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(108, 0.0, 324.584);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.3070250153541565;
      doubleArray0[1] = 0.3070250153541565;
      doubleArray0[2] = 0.3070250153541565;
      doubleArray0[3] = 0.3070250153541565;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.3070250153541565, 0.3070250153541565, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 581, 581, 0.3070250153541565);
      assertEquals(0.3070250153541565, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.14095008373260498, 0.14095008373260498, 0.14095008373260498, 0.14095008373260498);
      graggBulirschStoerIntegrator0.setOrderControl(365, 0.14095008373260498, 32);
      graggBulirschStoerIntegrator0.setOrderControl(365, 0.14095008373260498, 1014.25950249036);
      assertEquals(0.14095008373260498, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 130.941);
      int int0 = 1;
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 1);
      graggBulirschStoerIntegrator0.setOrderControl(0, 1014.25950249036, 562.74917476);
      double double0 = 729.8273;
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 833.9, doubleArray0, 2701.456, doubleArray0);
      graggBulirschStoerIntegrator0.vecRelativeTolerance = doubleArray0;
      double double1 = 1.0;
      graggBulirschStoerIntegrator0.setOrderControl(int0, double0, double1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.14095008373260498, 0.14095008373260498, 0.14095008373260498, (-2849.0));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getCompleteState();
      int int0 = (-3527);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, (-3527));
      graggBulirschStoerIntegrator0.setOrderControl(2, 599.14, 0.9999);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 562.4053948189515);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.14095008373260498, 0.14095008373260498, 0.14095008373260498, (-2849.0));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(32).when(secondOrderDifferentialEquations0).getDimension();
      graggBulirschStoerIntegrator0.mainSetDimension = (-1383);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 0);
      graggBulirschStoerIntegrator0.setOrderControl((-1383), 562.74917476, 562.74917476);
      RiddersSolver riddersSolver0 = new RiddersSolver(0.01, 4.307749759934266E-8);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, (-1.2542332720182776E186), (double) 32, 1075, (UnivariateSolver) riddersSolver0);
      graggBulirschStoerIntegrator0.setControlFactors(1075, 0.02, 0.02, 2.289022922515869);
      assertEquals(0.14095008373260498, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 2.113946677051906E252;
      double double1 = (-3058.40887898133);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.113946677051906E252, 2.113946677051906E252, (-3058.40887898133), 2.113946677051906E252);
      int int0 = 1390;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1390).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[4];
      expandableStatefulODE0.setTime(1.0001);
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (double) 1390);
      double double2 = 5.593494835247651E-9;
      doubleArray0[0] = double2;
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      expandableStatefulODE0.computeDerivatives(int0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (double) int0);
      double double3 = 0.3070250153541565;
      graggBulirschStoerIntegrator0.setOrderControl(int0, double3, doubleArray0[2]);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(240).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.4512746334075928, 0.4512746334075928, 1620.2498220819773, 1620.2498220819773);
      expandableStatefulODE0.setTime(240);
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 2.2028695035851698);
  }
}
