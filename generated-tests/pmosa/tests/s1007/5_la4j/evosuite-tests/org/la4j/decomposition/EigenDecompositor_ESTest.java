/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 08:42:25 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.EigenDecompositor;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositor_ESTest extends EigenDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1361, 0, doubleArray0);
      EigenDecompositor eigenDecompositor0 = null;
      try {
        eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Random.setNextRandom(1883);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      DenseVector denseVector0 = DenseVector.unit(3);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(13, 13, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(sparseMatrix0);
      eigenDecompositor0.decompose();
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(35, 0, mockRandom0);
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      // Undeclared exception!
      try { 
        eigenDecompositor0.decompose();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't decompose rectangle matrix
         //
         verifyException("org.la4j.decomposition.EigenDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(sparseMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(3, 3, mockRandom0);
      mockRandom0.nextInt();
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      eigenDecompositor0.decompose();
      Random.setNextRandom(9);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(sparseMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(13, 13, mockRandom0);
      mockRandom0.nextInt();
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(sparseMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(6, 6, mockRandom0);
      mockRandom0.nextInt();
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      eigenDecompositor0.decompose();
      Random.setNextRandom(36);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(sparseMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)104;
      mockRandom0.nextBytes(byteArray0);
      DenseMatrix denseMatrix0 = DenseMatrix.random(6, 6, mockRandom0);
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      eigenDecompositor0.decompose();
      Random.setNextRandom((byte)0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(sparseMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)104;
      mockRandom0.nextBytes(byteArray0);
      DenseMatrix denseMatrix0 = DenseMatrix.random(6, 6, mockRandom0);
      mockRandom0.nextInt();
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      eigenDecompositor0.decompose();
      Random.setNextRandom(37);
  }
}
