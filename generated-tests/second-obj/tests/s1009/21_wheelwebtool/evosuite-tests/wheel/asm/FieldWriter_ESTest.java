/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:09:47 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(177);
      classWriter0.visitAnnotation("?v4Rjk,", false);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      classWriter0.visitSource("ConstantValue", "ConstantValue");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 1136, "h?w_aL'f0W88#l;", "h?w_aL'f0W88#l;", (String) null, mockJapaneseDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@251a1402
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1296);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
      fieldWriter0.next = fieldWriter0;
      FieldWriter fieldWriter1 = fieldWriter0.next;
      Attribute attribute0 = new Attribute("RuntimeVisibleAnnotations");
      fieldWriter1.visitAttribute(attribute0);
      fieldWriter1.visitEnd();
      String string0 = "";
      fieldWriter1.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter1.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(177);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 177, "RuntimeVisibleAnnotations", "f.r$", "RuntimeVisibleAnnotations", "");
      FieldWriter fieldWriter1 = classWriter0.lastField;
      FieldWriter fieldWriter2 = fieldWriter1.next;
      Attribute attribute0 = new Attribute("");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      FieldWriter fieldWriter3 = new FieldWriter(classWriter0, 1, ":K:.", "", ":K:.", ":K:.");
      fieldWriter0.visitEnd();
      fieldWriter3.getSize();
      AnnotationVisitor annotationVisitor0 = fieldWriter1.visitAnnotation("", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(177);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("?v4Rjk,", false);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      ClassWriter classWriter1 = new ClassWriter(1003);
      classWriter1.visitSource("", "h?w_aL'f0W88#l;");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter1, 220, "?v4Rjk,", "RuntimeVisibleAnnotations", "?v4Rjk,", (Object) null);
      fieldWriter0.visitEnd();
      fieldWriter0.getSize();
      AnnotationVisitor annotationVisitor1 = fieldWriter0.visitAnnotation("YWkH95#3J^qxXuqc(", false);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(177);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("46FKc(A!", true);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2082), "46FKc(A!", "46FKc(A!", "", "46FKc(A!");
      fieldWriter0.visitEnd();
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      fieldWriter0.getSize();
      AnnotationVisitor annotationVisitor1 = fieldWriter0.visitAnnotation("46FKc(A!", false);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(177);
      classWriter0.visitAnnotation("?v4Rjk,", false);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      classWriter0.visitSource("h?w_aL'f0W88#l;", "?v4Rjk,");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 177, "h?w_aL'f0W88#l;", "h?w_aL'f0W88#l;", "?v4Rjk,", "h?w_aL'f0W88#l;");
      fieldWriter0.getSize();
      classWriter0.firstMethod = null;
      fieldWriter0.visitAnnotation(".class", true);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(177);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      classWriter0.visitSource("?v4Rjk,", "ConstantValue");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2082), "?v4Rjk,", "?v4Rjk,", "?v4Rjk,", "?v4Rjk,");
      ByteVector byteVector0 = new ByteVector(2);
      int int0 = Frame.SHORT;
      fieldWriter0.visitEnd();
      byteVector0.putLong((-733L));
      fieldWriter0.put(byteVector0);
      ByteVector byteVector1 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      fieldWriter0.put(byteVector1);
      fieldWriter0.visitAnnotation("DX-j", false);
      ByteVector byteVector2 = new ByteVector();
      fieldWriter0.put(byteVector0);
      int int1 = fieldWriter0.getSize();
      assertEquals(48, int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1296);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "RuntimeVisibleAnnotations", "b", "RuntimeVisibleAnnotations", "b");
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter0.next = fieldWriter1;
      FieldWriter fieldWriter2 = fieldWriter0.next;
      Attribute attribute0 = new Attribute("RuntimeVisibleAnnotations");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      fieldWriter2.visitAttribute(attribute0);
      FieldWriter fieldWriter3 = classWriter0.firstField;
      ByteVector byteVector0 = new ByteVector(177);
      Attribute attribute1 = new Attribute("RuntimeVisibleAnnotations");
      attribute0.next = attribute1;
      ByteVector byteVector1 = byteVector0.putUTF8("ConstantValue");
      ByteVector byteVector2 = byteVector1.put11(177, 2);
      ByteVector byteVector3 = byteVector2.putByteArray((byte[]) null, 2, 177);
      // Undeclared exception!
      try { 
        fieldWriter3.put(byteVector3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(177);
      classWriter0.visitAnnotation("?v4Rjk,", false);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      classWriter0.visitSource("h?w_aL'f0W88#l;", "ConstantValue");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2082), "h?w_aL'f0W88#l;", "h?w_aL'f0W88#l;", "?v4Rjk,", "h?w_aL'f0W88#l;");
      fieldWriter0.visitEnd();
      fieldWriter0.getSize();
      fieldWriter0.visitAnnotation("h?w_aL'f0W88#l;", true);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(177);
      classWriter0.visitAnnotation("46FKc(A!", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "9v", "9v", "9v", (Object) null);
      fieldWriter0.visitEnd();
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitAnnotation("9v", true);
      ByteVector byteVector1 = new ByteVector();
      fieldWriter0.put(byteVector1);
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(177);
      classWriter0.visitAnnotation("?v4Rjk,", false);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      classWriter0.visitSource("h?w_aL'f0W88#l;", "ConstantValue");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2082), "h?w_aL'f0W88#l;", "h?w_aL'f0W88#l;", "?v4Rjk,", "h?w_aL'f0W88#l;");
      fieldWriter0.visitEnd();
      fieldWriter0.getSize();
      fieldWriter0.visitAnnotation("h?w_aL'f0W88#l;", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "h?w_aL'f0W88#l;";
      stringArray0[1] = "?v4Rjk,";
      stringArray0[2] = "?v4Rjk,";
      stringArray0[3] = "h?w_aL'f0W88#l;";
      stringArray0[4] = "gQ{Te$e]I5";
      stringArray0[5] = "h?w_aL'f0W88#l;";
      stringArray0[6] = "ConstantValue";
      classWriter0.visit(49, 36, "?v4Rjk,", "gQ{Te$e]I5", "gQ{Te$e]I5", stringArray0);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      fieldWriter0.getSize();
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(138);
      classWriter0.visitAnnotation("46FKc(A!", true);
      classWriter0.visitAnnotation("46FKc(A!", true);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      classWriter0.visitSource("46FKc(A!", (String) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "_>-g>vK1(eT6 [", "Synthetic", (String) null, (Object) null);
      fieldWriter0.visitEnd();
      fieldWriter0.getSize();
      fieldWriter0.visitAnnotation("E*", true);
      ByteVector byteVector0 = new ByteVector();
      byteVector0.length = 2;
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter1.put(byteVector0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      fieldWriter0.getSize();
      fieldWriter1.put(byteVector0);
      fieldWriter1.visitEnd();
      assertSame(fieldWriter1, fieldWriter0);
  }
}
