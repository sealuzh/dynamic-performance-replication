/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 15:04:51 GMT 2019
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.io.File;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.Format;
import java.text.MessageFormat;
import java.text.ParseException;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Currency;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.Vector;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.setAutoTypeSupport(true);
      NumberFormatException numberFormatException0 = new NumberFormatException("fastjson.parser.autoTypeAccept");
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<Object> class1 = Object.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0);
      boolean boolean0 = TypeUtils.isPath(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.castToByte((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Integer integer0 = new Integer((-1134984628));
      TypeUtils.isHibernateInitialized(integer0);
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Class<SecurityException> class0 = SecurityException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Integer> class1 = Integer.class;
      TypeUtils.castToJavaBean((Object) float0, class1);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ParserConfig parserConfig1 = ParserConfig.global;
      assertNotSame(parserConfig1, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "~\\Lc2h#dDg[Q";
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("~Lc2h#dDg[Q");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      TypeUtils.isGenericParamType(class0);
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      SQLWarning sQLWarning0 = new SQLWarning(" u_N|f&R4GR+'t", "]8+$BuT+");
      Class<Integer> class1 = Integer.class;
      TypeUtils.castToJavaBean((Object) null, class1);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TypeUtils.fnv1a_64("'Q");
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Float float0 = new Float(0.0);
      TypeUtils.castToShort((Object) null);
      Class<Throwable> class0 = Throwable.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("notifyAll", "'Q");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      hashtable0.keySet();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) hashMap0, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      hashtable0.clear();
      InterruptedException interruptedException0 = new InterruptedException("Lx5a`");
      Boolean.valueOf("kotlin.jvm.internal.DefaultConstructorMarker");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("kotlin.jvm.internal.DefaultConstructorMarker");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"kotlin.jvm.internal.DefaultConstructorMarker\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      TypeUtils.getParserFeatures(class0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      imageCapabilities0.clone();
      TypeUtils.loadClass("");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(imageCapabilities0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TypeUtils.clearClassMapping();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<InstantiationError> class0 = InstantiationError.class;
      Class<Integer> class1 = Integer.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.InstantiationError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Short short0 = new Short((short) (-2450));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      classLoader0.clearAssertionStatus();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.isPath(class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      String string0 = "";
      treeMap0.put("", "");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, treeMap0, false, propertyNamingStrategy0);
      Class<Boolean> class1 = Boolean.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class1, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object object0 = new Object();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<InstantiationError> class0 = InstantiationError.class;
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0, false);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError((String) null);
      noSuchFieldError0.getSuppressed();
      TypeUtils.castToString(noSuchFieldError0);
      TypeUtils.decapitalize((String) null);
      TypeUtils.unwrapOptional(class0);
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TypeUtils.fnv1a_64("'Q");
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Float float0 = new Float(0.0);
      TypeUtils.castToShort((Object) null);
      Class<Throwable> class0 = Throwable.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 0.0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalOr(true, true);
      Boolean.logicalXor(false, true);
      Boolean.logicalAnd(false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Boolean.compare(true, false);
      Boolean.logicalOr(false, false);
      ParserConfig parserConfig0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) boolean0, (ParameterizedType) null, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<TypeNotPresentException> class0 = TypeNotPresentException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ClassLoader.getSystemClassLoader();
      TypeUtils.castToString(class0);
      TypeUtils.decapitalize("");
      TypeUtils.castToShort("");
      boolean boolean1 = TypeUtils.isNumber("Exi,vugF)DMq");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      Class<SQLTransientException> class1 = SQLTransientException.class;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("L", weakHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("L", class1, class1, class0, (Field) null, 2447, 1396, 1396);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      Class<Annotation> class2 = Annotation.class;
      beanContext0.getAnnation(class2);
      beanContext0.getMethod();
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<SQLTransientConnectionException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLTransientConnectionException, SQLNonTransientConnectionException>();
      TypeUtils.decapitalize("(Z)V");
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("(Z)V");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.lang.MockThrowable: (Z)V
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Time> class0 = Time.class;
      TypeUtils.getSerializeFeatures(class0);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("Ljava.awt.Rectangle", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put((String) null, "3r697%Pc[s/f1^+G|0");
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.isPath(class2);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.net.HttpCookie
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TypeUtils.fnv1a_64("'Q");
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.decapitalize("'Q");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Timestamp> class0 = Timestamp.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Rectangle> class1 = Rectangle.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class1, class0);
      Class<Time> class2 = Time.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      classLoader0.setClassAssertionStatus("fastjson.parser.deny", false);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<Integer> class0 = Integer.class;
      TypeUtils.castToJavaBean((Object) weakHashMap0, class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      String string0 = TypeUtils.decapitalize("'Q");
      assertEquals("'Q", string0);
      
      boolean boolean1 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("com.alibaba.fastjson.serializer.SerializerFeature");
      TypeUtils.isHibernateInitialized("com.alibaba.fastjson.serializer.SerializerFeature");
      MockThread mockThread0 = new MockThread((Runnable) null);
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      illegalMonitorStateException0.getLocalizedMessage();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValueExact();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      StackOverflowError stackOverflowError0 = new StackOverflowError("fastjson.parser.deny");
      Class<NullPointerException> class0 = NullPointerException.class;
      TypeUtils.cast((Object) null, class0, parserConfig0);
      TypeUtils.castToTimestamp(bigInteger0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Locale locale0 = JSON.defaultLocale;
      TypeUtils.isNumber("3r697%Pc[s/f1^+G|0");
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "Qn", class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Qn\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QCo]Xc)gpXA,YQ^l");
      TypeUtils.clearClassMapping();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<InstantiationError> class0 = InstantiationError.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, true);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("QG*rZ|TaCLCa_f=}Al");
      TypeUtils.castToString(weakHashMap0);
      TypeUtils.decapitalize("QG*rZ|TaCLCa_f=}Al");
      Type type0 = TypeUtils.unwrapOptional(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.InstantiationError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+");
      TypeUtils.clearClassMapping();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.fnv1a_64("getDeclaringClass");
      TypeUtils.loadClass("RI)m[W(AlV");
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.setAutoTypeSupport(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "+", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class0 = TypeUtils.loadClass("[int", (ClassLoader) aSMClassLoader0, true);
      TypeUtils.getCollectionItemType(class0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      TypeUtils.decapitalize("");
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      Boolean boolean0 = TypeUtils.castToBoolean("");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TypeUtils.fnv1a_64("'Q");
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.decapitalize("'Q");
      ClassLoader.getSystemClassLoader();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.size();
      weakHashMap0.put("'Q", "");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("'Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 'Q
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConcurrentHashMap<TimeZone, SQLIntegrityConstraintViolationException> concurrentHashMap0 = new ConcurrentHashMap<TimeZone, SQLIntegrityConstraintViolationException>(7, 7, 55232);
      TypeUtils.fnv1a_64_lower(";x21A9/5FjuQQC _");
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.decapitalize(";x21A9/5FjuQQC _");
      TypeUtils.unwrapOptional((Type) null);
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, true);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("QG*rZ|TaCLCa_f=}Al");
      String string0 = TypeUtils.castToString(noSuchFieldError0);
      String string1 = TypeUtils.decapitalize("java.lang.NoSuchFieldError@0000000001");
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TypeUtils.fnv1a_64("unclosed.str.lit");
      TypeUtils.loadClass("{g%z[#H-'_=hvP6BJ");
      Field[] fieldArray0 = new Field[6];
      Class<IllegalStateException> class0 = IllegalStateException.class;
      Class<Timestamp> class1 = Timestamp.class;
      Class<ParameterizedTypeImpl> class2 = ParameterizedTypeImpl.class;
      String string0 = "H";
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("H", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo(",", class1, class2, class2, (Field) null, 50900, (-341), 46);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      fieldArray0[0] = null;
      fieldArray0[1] = null;
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("", concurrentHashMap0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<?> class0 = TypeUtils.loadClass("C~OO><0xj,Y:-odRgW", classLoader1);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) genericArrayType0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, type0);
      TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      TypeUtils.getClass(type0);
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("bo");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : bo
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      List<FieldInfo> list0 = new Vector<FieldInfo>();
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("'Q");
      TypeUtils.castToString(noSuchFieldError0);
      TypeUtils.decapitalize("bu0");
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TypeUtils.fnv1a_64("scanString");
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.decapitalize("scanString");
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("scanString");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("scanString");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"scanString\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      dimension0.setSize((double) 937, (-1434.3640543923));
      dimension0.width = 937;
      dimension0.height = 937;
      dimension0.setSize(6, (-390));
      dimension0.height = 937;
      dimension0.width = 106;
      TypeUtils.castToString(dimension0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(dimension0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.awt.Dimension[width=106,height=937]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower(";u+[jxC7c?$=[<");
      assertEquals((-8192655383234622555L), long0);
      
      Class<Character> class0 = Character.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      Class<?> class1 = TypeUtils.getRawClass(type0);
      assertEquals(1, class1.getModifiers());
      
      TypeUtils.castToLong((Object) null);
      Type type1 = TypeUtils.getGenericParamType(class0);
      assertNull(type1);
      
      Locale locale0 = TypeUtils.toLocale(";u+[jxC7c?$=[<");
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TypeUtils.castToString((Object) null);
      Insets insets0 = new Insets(44, 44, 10, (-1726704164));
      Long long0 = new Long(2304L);
      Long.sum((-4270347329889690746L), 44);
      Long.getLong("QuoteFieldNames", 2304L);
      Long.toUnsignedString((long) 44);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentPut("", "QuoteFieldNames");
      JSONObject jSONObject2 = jSONObject1.fluentClear();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject3 = jSONObject2.fluentPut("QuoteFieldNames", boolean0);
      JSONObject jSONObject4 = jSONObject3.fluentPut("", (Object) null);
      jSONObject4.getBoolean("yyyy-MM-dd HH:mm:ss");
      TypeUtils.castToBigDecimal((Object) null);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("@type");
      SQLDataException sQLDataException0 = new SQLDataException("hl'2LPHpvi4", "1.2.46", 3089, mockIllegalAccessException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.sql.SQLDataException: hl'2LPHpvi4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class0 = TypeUtils.loadClass("[int", classLoader0, true);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[2]);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeArray0[5], (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put((String) null, "3r697%Pc[s/f1^+G|0");
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      TypeUtils.loadClass("defaultCenturyStart", classLoader0);
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, (Type) null);
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(54, 54);
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) concurrentHashMap0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Date> class0 = Date.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      hashtable0.keySet();
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      hashtable0.clear();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("fastjson.parser.autoTypeAccept");
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      TypeUtils.cast((Object) noClassDefFoundError0, class1, parserConfig0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.autoTypeSupport", "Lx5a`", noClassDefFoundError0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.sql.SQLSyntaxErrorException: fastjson.parser.autoTypeSupport
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Collator> class0 = Collator.class;
      TypeUtils.getClass((Type) class0);
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+");
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      TypeUtils.getKoltinConstructorParameters(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class1 = TypeUtils.loadClass("Zz>XR2G", (ClassLoader) aSMClassLoader0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SecurityException securityException0 = new SecurityException("6q[/K3", batchUpdateException0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) securityException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("com.alibaba.fastjson.serializer.SerializerFeature");
      TypeUtils.isHibernateInitialized(illegalMonitorStateException0);
      MockThread mockThread0 = new MockThread((Runnable) null);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(aSMClassLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      TypeUtils.cast((Object) null, class0, parserConfig0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.text.MockDateFormat@7555b158
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<SQLTransientConnectionException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLTransientConnectionException, SQLNonTransientConnectionException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      hashMap0.put((SQLTransientConnectionException) null, sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {null=java.sql.SQLNonTransientConnectionException}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<TypeNotPresentException> class0 = TypeNotPresentException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      JSON.parseObject((String) null);
      Class<Properties> class1 = Properties.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) null, class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      byte[] byteArray0 = new byte[1];
      ConcurrentHashMap<TimeZone, SQLIntegrityConstraintViolationException> concurrentHashMap0 = new ConcurrentHashMap<TimeZone, SQLIntegrityConstraintViolationException>(7, 7, 55232);
      Hashtable<TimeZone, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<TimeZone, SQLIntegrityConstraintViolationException>(concurrentHashMap0);
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      TypeUtils.castToJavaBean((Object) concurrentHashMap0, class0);
      Byte byte0 = new Byte((byte)124);
      TypeUtils.castToFloat(byte0);
      long long0 = TypeUtils.fnv1a_64("style");
      assertEquals((-4651511782417886218L), long0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<BreakIterator> class0 = BreakIterator.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Class<Long> class1 = Long.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<DecimalFormat> class2 = DecimalFormat.class;
      parserConfig0.checkAutoType("LocalVariableTypeTable", class2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      ClassLoader.getSystemClassLoader();
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      parserConfig0.createJavaBeanDeserializer(class1, class1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      TypeUtils.getParserFeatures(class0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(imageCapabilities0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gettoString");
      TypeUtils.decapitalize("gettoString");
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "o4YQH?<^o~8)7");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      TypeUtils.loadClass("gettoString", classLoader0);
      Class<?> class0 = TypeUtils.loadClass("WriteEnumUsingToString");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(indexOutOfBoundsException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      HashMap<SQLTransientConnectionException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLTransientConnectionException, SQLNonTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      hashMap0.put(sQLTransientConnectionException0, sQLNonTransientConnectionException0);
      MockDate mockDate0 = new MockDate((-2867), (-2867), (-2867), 44, (-2436));
      Time time0 = TypeUtils.castToSqlTime(mockDate0);
      assertEquals("03:24:00", time0.toString());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TypeUtils.toLocale("isgetSigners");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("isgetSigners");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("$}}G[&*JUza8W*]", classLoader0, false);
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = (Type) null;
      typeArray0[3] = type0;
      JSONArray jSONArray0 = new JSONArray(21);
      jSONArray0.getComponentType();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<TimeUnit> class0 = TimeUnit.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) throwableDeserializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@f83bdd2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.getClassFromMapping(",");
      TypeUtils.isGenericParamType((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TypeUtils.decapitalize((String) null);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TypeUtils.loadClass("x5a`");
      TypeUtils.castToLong((Object) null);
      TypeUtils.toLocale("x5a`");
      TypeUtils.isKotlin((Class) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("org.springframework.util.LinkedMultiValueMap", classLoader0, true);
      classLoader0.setDefaultAssertionStatus(false);
      TypeUtils.decapitalize("org.springframework.util.LinkedMultiValueMap");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, (Type) null);
      Dimension dimension0 = new Dimension(58, (-1795113739));
      Class<Dimension> class1 = Dimension.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.loadClass("can not cast to long, value : ", classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("org.springframework.util.LinkedMultiValueMap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : org.springframework.util.LinkedMultiValueMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TypeUtils.castToString((Object) null);
      Insets insets0 = new Insets(44, 44, 10, (-1726704164));
      insets0.clone();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints(10, 10, 97, (-1726704164), 10, 97, 1653, 211, insets0, 44, 333);
      Object object0 = new Object();
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      MockThread mockThread0 = new MockThread("]");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "]", class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
      
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("~]S6ybf(pC1ayk", "3r697%Pc[s/f1^+G|0");
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      imageCapabilities0.clone();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(imageCapabilities0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ConcurrentHashMap<SimpleTimeZone, SQLIntegrityConstraintViolationException> concurrentHashMap0 = new ConcurrentHashMap<SimpleTimeZone, SQLIntegrityConstraintViolationException>();
      Hashtable<TimeZone, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<TimeZone, SQLIntegrityConstraintViolationException>(concurrentHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(true);
      TypeUtils.loadClass("defaultCenturyStart", classLoader0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) treeMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      TypeUtils.isPath(class0);
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      Class<Annotation> class3 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class3);
      TypeUtils.isKotlin(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<TypeNotPresentException> class4 = TypeNotPresentException.class;
      TypeUtils.getKoltinConstructorParameters(class4);
      Class<?> class5 = TypeUtils.loadClass("java.awt.Point", (ClassLoader) aSMDeserializerFactory0.classLoader);
      assertEquals(1, class5.getModifiers());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      TypeUtils.isGenericParamType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      parserConfig0.compatibleWithJavaBean = false;
      ClassLoader.getSystemClassLoader();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<NoSuchFieldException> class1 = NoSuchFieldException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) aSMDeserializerFactory0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchFieldException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gettoString");
      TypeUtils.decapitalize("gettoString");
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      String string0 = "(Hm-l";
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("(Hm-l");
      TypeUtils.castToString(threadGroup0);
      MockThrowable mockThrowable0 = new MockThrowable("gettoString", noSuchFieldError0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(mockThrowable0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.sql.SQLTransactionRollbackException: org.evosuite.runtime.mock.java.lang.MockThrowable: gettoString
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      InternalError internalError0 = new InternalError("LocalVariableTypeTable;");
      internalError0.fillInStackTrace();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(decimalFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.text.DecimalFormatSymbols@1073a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TypeUtils.decapitalize("[Z");
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(linkedHashSet0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put((String) null, "3r697%Pc[s/f1^+G|0");
      Class<String> class0 = String.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("unterminated json string, ");
      assertEquals(5344473102845244412L, long0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TypeUtils.fnv1a_64("'Q");
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.decapitalize("'Q");
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("'Q");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("'Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : 'Q
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+");
      TypeUtils.clearClassMapping();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.fnv1a_64("getDeclaringClass");
      weakHashMap0.put("+", "RI)m[W(AlV");
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2021);
      intArray0[1] = 61;
      intArray0[2] = 2267;
      intArray0[3] = 8;
      intArray0[4] = (-1014);
      intArray0[5] = 1;
      intArray0[6] = (-38489319);
      intArray0[7] = (-91);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("+");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, noSuchMethodError0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException(batchUpdateException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(mockIllegalStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.BatchUpdateException: java.lang.NoSuchMethodError: +
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TypeUtils.fnv1a_64("'Q");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("'Q", (ClassLoader) aSMClassLoader0, false);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      PageAttributes pageAttributes0 = new PageAttributes();
      PageAttributes pageAttributes1 = new PageAttributes(pageAttributes0);
      Class<Annotation> class1 = Annotation.class;
      // Undeclared exception!
      try { 
        TypeUtils.getAnnotation((Class<?>) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = new Object();
      TypeUtils.isNumber("<q-2oD:pVcwPp");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.setClassAssertionStatus("8", false);
      TypeUtils.loadClass("<q-2oD:pVcwPp", (ClassLoader) aSMDeserializerFactory0.classLoader);
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.getParent();
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      classLoader2.clearAssertionStatus();
      classLoader0.getParent();
      ClassLoader classLoader3 = ClassLoader.getSystemClassLoader();
      TypeUtils.getGenericParamType((Type) null);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(classLoader3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object object0 = new Object();
      TypeUtils.getGenericParamType((Type) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.setAutoTypeSupport(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast(object0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Long.getLong("LocalVariableTypeTable", 1099511628211L);
      Long.toUnsignedString(1L);
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      weakHashMap1.put("LocalVariableTypeTable", "fastjson.parser.autoTypeAccept");
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap1);
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(";u+[jxC7c?$=[<");
      Class<Character> class0 = Character.TYPE;
      TypeUtils.getCollectionItemType(class0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockSimpleDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.text.MockSimpleDateFormat@a9427c06
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.isProxy(class0);
      Insets insets0 = new Insets((-2030), 41, (-68703773), 44);
      insets0.right = (-2030);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints((-2030), (-2759), (-2030), 41, (-2030), (-2030), (-2759), 1895, insets0, 41, 333);
      gridBagConstraints0.insets = insets0;
      insets0.left = (-2030);
      insets0.right = (-1045);
      gridBagConstraints0.insets.left = (-2030);
      gridBagConstraints0.insets = insets0;
      gridBagConstraints0.gridheight = 333;
      insets0.top = (-2759);
      insets0.right = 41;
      gridBagConstraints0.insets.left = (-2181);
      insets0.bottom = (-2759);
      gridBagConstraints0.gridy = (-1098);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.awt.GridBagConstraints@4527a00c
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      imageCapabilities0.clone();
      imageCapabilities0.clone();
      Class<TimeUnit> class0 = TimeUnit.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Class<PropertyProcessableDeserializer> class2 = PropertyProcessableDeserializer.class;
      TypeUtils.isKotlin(class2);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      classLoader0.setPackageAssertionStatus("(B)Ljava/lang/Byte;", true);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.getKoltinConstructorParameters(class2);
      Class<?> class3 = TypeUtils.loadClass("fastjson.parser.autoTypeAccept", (ClassLoader) aSMDeserializerFactory0.classLoader);
      assertNull(class3);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : Z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TypeUtils.castToString((Object) null);
      Insets insets0 = new Insets(44, 44, 10, (-1726704164));
      insets0.clone();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>(10);
      hashtable0.keySet();
      Class<MockCalendar> class0 = MockCalendar.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      hashtable0.clear();
      InterruptedException interruptedException0 = new InterruptedException("Lx5a`");
      Boolean.valueOf((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("Lx5a`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Lx5a`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ConcurrentHashMap<TimeZone, SQLIntegrityConstraintViolationException> concurrentHashMap0 = new ConcurrentHashMap<TimeZone, SQLIntegrityConstraintViolationException>(41, 2258.5708F, 7);
      TypeUtils.fnv1a_64_lower(";x21A9/5FjuGQC _");
      InternalError internalError0 = new InternalError("getTypeName");
      NumberFormatException numberFormatException0 = new NumberFormatException();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(internalError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.lang.InternalError: getTypeName
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      InternalError internalError0 = new InternalError("2|sB{WMfyH");
      internalError0.fillInStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ljava.lang.AutoCloseable", "Ljava.lang.AutoCloseable", 36, internalError0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("N]FZIP[,\"", "f#@@?iD");
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLIntegrityConstraintViolationException: Ljava.lang.AutoCloseable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TypeUtils.castToString((Object) null);
      InterruptedException interruptedException0 = new InterruptedException((String) null);
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, true);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("getMember");
      String string0 = TypeUtils.castToString(noSuchFieldError0);
      String string1 = TypeUtils.decapitalize("java.lang.NoSuchFieldError@0000000001");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      String string0 = "[int";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class0 = TypeUtils.loadClass("[int", (ClassLoader) aSMClassLoader0, true);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      typeArray0[0] = type0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      classLoader0.setDefaultAssertionStatus(false);
      TypeUtils.getClass(typeArray0[0]);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(typeArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Date> class0 = Date.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      hashtable0.clear();
      JSONType jSONType1 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType1, (Map<String, String>) treeMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy1);
      Class<HttpCookie> class1 = HttpCookie.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.net.HttpCookie
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SecurityException securityException0 = new SecurityException();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(securityException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.SecurityException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TypeUtils.loadClass("x5a`");
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("o");
      InstantiationError instantiationError0 = new InstantiationError("com.alibaba.fastjson.serializer.SerializerFeature");
      TypeUtils.isHibernateInitialized(instantiationError0);
      TypeUtils.getKoltinConstructorParameters((Class) null);
      MockThread mockThread0 = new MockThread((Runnable) null);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory1.classLoader;
      Class<?> class0 = TypeUtils.loadClass("x5a`", (ClassLoader) aSMClassLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<TypeNotPresentException> class0 = TypeNotPresentException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Short short0 = new Short((short)1000);
      Integer integer0 = TypeUtils.castToInt(short0);
      assertEquals(1000, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("com.alibaba.fastjson.serializer.SerializerFeature");
      TypeUtils.isHibernateInitialized(illegalMonitorStateException0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.SerializerFeature", classLoader0, true);
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      PageAttributes pageAttributes0 = new PageAttributes();
      PageAttributes pageAttributes1 = new PageAttributes(pageAttributes0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(pageAttributes1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : color=monochrome,media=iso-a4,orientation-requested=portrait,origin=physical,print-quality=normal,printer-resolution=[72,72,3]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getCollectionItemType(class0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.setAutoTypeSupport(false);
      NumberFormatException numberFormatException0 = new NumberFormatException("fastjson.parser.autoTypeAccept");
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<SQLDataException> class1 = SQLDataException.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0);
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      TypeUtils.getGenericParamType(class1);
      Class<SQLTransientException> class2 = SQLTransientException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) class0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("yA4(C2bi`<d~r}7~)x_").when(genericArrayType0).toString();
      doReturn(type0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      InternalError internalError0 = new InternalError("2|sB{WMfyH");
      internalError0.fillInStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ljava.lang.AutoCloseable", "Ljava.lang.AutoCloseable", 36, internalError0);
      Class<NoSuchFieldException> class1 = NoSuchFieldException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) sQLIntegrityConstraintViolationException0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchFieldException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      dimension0.setSize((double) 937, (-1434.3640543923));
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      String string0 = "L\\UA'2aAO\"u";
      weakHashMap0.put("LUA'2aAO\"u", (String) null);
      Class<Short> class0 = Short.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {LUA'2aAO\"u=null}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TypeUtils.loadClass("x5a`");
      TypeUtils.castToLong((Object) null);
      TypeUtils.toLocale("x5a`");
      TypeUtils.isKotlin((Class) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("org.springframework.util.LinkedMultiValueMap", classLoader0, true);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      classLoader0.setDefaultAssertionStatus(false);
      Long.toUnsignedString(1099511628211L);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, (Type) null);
      String string0 = "AWWk:jy";
      // Undeclared exception!
      try { 
        JSON.parseObject("org.springframework.util.LinkedMultiValueMap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : org.springframework.util.LinkedMultiValueMap
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TypeUtils.fnv1a_64("'Q");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.decapitalize((String) null);
      Class<java.util.Date> class0 = java.util.Date.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      Class<TimeZone> class2 = TimeZone.class;
      TypeUtils.getCollectionItemType(class1);
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.getKoltinConstructorParameters(class2);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass((String) null, (ClassLoader) aSMClassLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.getParserFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      TypeUtils.isGenericParamType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      parserConfig0.compatibleWithJavaBean = false;
      ClassLoader.getSystemClassLoader();
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      parserConfig0.createJavaBeanDeserializer(class1, class1);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("toJdbc", "0Vh@");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("toJdbc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : toJdbc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      Collection collection0 = new ArrayDeque<SQLTransientException>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<NoSuchFieldException> class2 = NoSuchFieldException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class1, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchFieldException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.isProxy(class0);
      Insets insets0 = new Insets((-2030), 41, (-68703773), 44);
      insets0.right = (-2030);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints((-2030), (-2759), (-2030), 41, (-2030), (-2030), (-2759), 1895, insets0, 41, 333);
      gridBagConstraints0.insets = insets0;
      insets0.left = (-2030);
      ConcurrentHashMap<SimpleTimeZone, SQLIntegrityConstraintViolationException> concurrentHashMap0 = new ConcurrentHashMap<SimpleTimeZone, SQLIntegrityConstraintViolationException>();
      Hashtable<TimeZone, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<TimeZone, SQLIntegrityConstraintViolationException>(concurrentHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(gridBagConstraints0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ja\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TypeUtils.fnv1a_64("'Q");
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      TypeUtils.decapitalize("'Q");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<FieldInfo> class0 = FieldInfo.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, true);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("'Q");
      HttpCookie httpCookie0 = new HttpCookie("Ljava.awt.Rectangle", "k}7OQ%303jU`T+2]#V");
      httpCookie0.setMaxAge((-3750763034362895579L));
      TypeUtils.castToString(httpCookie0);
      TypeUtils.decapitalize("eWlP~Bl");
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "[int";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(true);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.isHibernateInitialized(classLoader0);
      Float float0 = new Float(0.0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("[int");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("~]S6ybf(pC1ayk", "~]S6ybf(pC1ayk");
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<SQLTransientConnectionException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLTransientConnectionException, SQLNonTransientConnectionException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      hashtable0.clear();
      InterruptedException interruptedException0 = new InterruptedException("@#bJtU2#>!{dV");
      Boolean.valueOf("Lx5a`");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
      
      TypeUtils.castToChar((Object) null);
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      Type type0 = FieldInfo.getFieldType(class1, class0, class1);
      FieldInfo.getFieldType(class0, type0, class0);
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "-k/Ra", fieldArray0);
      FieldInfo fieldInfo0 = new FieldInfo("", class1, class0, class0, (Field) null, 5172, (-30733247), 43);
      Class<MockCalendar> class2 = MockCalendar.class;
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      beanContext0.getMethod();
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.isPath(class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, treeMap0, false, propertyNamingStrategy0);
      Class<Boolean> class1 = Boolean.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class1, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TypeUtils.fnv1a_64("'Q");
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.decapitalize("'Q");
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("'Q");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("'Q", "'Q");
      weakHashMap0.put("'Q", "'>Enk");
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      TypeUtils.getRawClass(class0);
      Class<IllegalAccessException> class1 = IllegalAccessException.class;
      boolean boolean1 = TypeUtils.isPath(class1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.IllegalArgumentException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TypeUtils.loadClass("x5a`");
      TypeUtils.toLocale("x5a`");
      TypeUtils.isKotlin((Class) null);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGettersWithFieldBase((Class<?>) null, concurrentHashMap0, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TypeUtils.castToString((Object) null);
      Long long0 = new Long(0L);
      Long.sum((-1778L), (-1778L));
      Long.sum((-1778L), (-1778L));
      String string0 = "QuoteFieldNames";
      Long.getLong("QuoteFieldNames", (-984L));
      Long.toUnsignedString((-304L));
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(long0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("com.alibaba.fastjson.serializer.SerializerFeature");
      boolean boolean0 = TypeUtils.isHibernateInitialized(illegalMonitorStateException0);
      MockThread mockThread0 = new MockThread((Runnable) null);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.SerializerFeature", classLoader0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
      
      boolean boolean1 = TypeUtils.isGenericParamType(class0);
      assertTrue(boolean1 == boolean0);
      
      long long0 = TypeUtils.fnv1a_64("QWdKH");
      assertEquals(1262592823988085804L, long0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Insets> class0 = Insets.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(imageCapabilities0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.awt.ImageCapabilities@5909202c
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      String string0 = "LocalVariableTypeable";
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("LocalVariableTypeable", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. LocalVariableTypeable
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TypeUtils.castToString((Object) null);
      Long long0 = new Long(0L);
      Long.sum((-1778L), (-1778L));
      Long.getLong((String) null, (-984L));
      Long.toUnsignedString((-304L));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("18446744073709551312");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"18446744073709551312\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class0, map0, false);
      Class<SQLDataException> class1 = SQLDataException.class;
      TypeUtils.getSerializeFeatures(class1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("J", "J", (Throwable) null);
      Class<Jdk8DateCodec> class2 = Jdk8DateCodec.class;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, "J");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      TypeUtils.castToString((Object) null);
      Class<Byte> class0 = Byte.TYPE;
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertEquals(1041, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Timestamp> class0 = Timestamp.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Rectangle> class1 = Rectangle.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class1, class0);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Class<Time> class2 = Time.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      Class<?> class3 = TypeUtils.loadClass("toI", classLoader0);
      assertNull(class3);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      Class<?> class1 = TypeUtils.getRawClass(type0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("com.alibaba.fastjson.serializer.SerializerFeature");
      TypeUtils.isHibernateInitialized(illegalMonitorStateException0);
      TypeUtils.getKoltinConstructorParameters(class0);
      MockThread mockThread0 = new MockThread((Runnable) null);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class1 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.SerializerFeature", classLoader0);
      assertEquals("class com.alibaba.fastjson.serializer.SerializerFeature", class1.toString());
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isHibernateInitialized(type0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      ClassLoader.getSystemClassLoader();
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      parserConfig0.createJavaBeanDeserializer(class0, class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      String string0 = "si";
      identityHashMap0.put("toJdbc", "si");
      Map<String, String> map0 = null;
      Class<Integer> class1 = Integer.class;
      Class<Date> class2 = Date.class;
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) weakHashMap0);
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[", classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qKg@bLg");
      Class<SQLWarning> class0 = SQLWarning.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object object0 = null;
      Type[] typeArray0 = new Type[1];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[inL", (ClassLoader) aSMClassLoader0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put((String) null, "o^");
      Class<Calendar> class0 = Calendar.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Insets> class0 = Insets.class;
      TypeUtils.getSerializeFeatures(class0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Cn;,d>u2oo)hDp(", "Cn;,d>u2oo)hDp(");
      hashMap0.clear();
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Class<DataTruncation> class1 = DataTruncation.class;
      DataTruncation dataTruncation0 = TypeUtils.castToJavaBean((Map<String, Object>) treeMap0, class1, (ParserConfig) null);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      InternalError internalError0 = new InternalError("2|sB{WMfyH");
      internalError0.fillInStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ljava.lang.AutoCloseable", "Ljava.lang.AutoCloseable", 36, internalError0);
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) sQLIntegrityConstraintViolationException0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchFieldException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      imageCapabilities0.clone();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.setDefaultAssertionStatus(true);
      Long.toUnsignedString((-3750763034362895579L));
      ParserConfig.getGlobalInstance();
      Dimension dimension0 = new Dimension(18, (-2083));
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      classLoader1.getParent();
      Class<?> class1 = TypeUtils.loadClass("can not cast to long, value : ", (ClassLoader) null);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TypeUtils.loadClass("x5a`");
      TypeUtils.castToLong((Object) null);
      TypeUtils.toLocale("x5a`");
      TypeUtils.isKotlin((Class) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("org.springframework.util.LinkedMultiValueMap", classLoader0, true);
      classLoader0.setDefaultAssertionStatus(false);
      Long.toUnsignedString(1099511628211L);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, (Type) null);
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      Class<DecimalFormat> class1 = DecimalFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "x5a`", class1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.unwrapOptional((Type) null);
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      assertTrue(weakHashMap1.equals((Object)weakHashMap0));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      mockThread0.getStackTrace();
      MockThread.getAllStackTraces();
      MockThread mockThread1 = new MockThread(mockThread0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      illegalMonitorStateException0.getLocalizedMessage();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      StackOverflowError stackOverflowError0 = new StackOverflowError("");
      Class<String> class0 = String.class;
      parserConfig0.setDefaultClassLoader(classLoader0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<java.util.Date> class1 = java.util.Date.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      InterruptedException interruptedException0 = new InterruptedException("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(interruptedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.InterruptedException: fastjson.parser.deny
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      Class<Timestamp> class1 = Timestamp.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class1, class0);
      Type[] typeArray0 = new Type[21];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[1]);
      parameterizedTypeImpl0.getTypeName();
      ParserConfig parserConfig1 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      ClassLoader.getSystemClassLoader();
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      parserConfig0.createJavaBeanDeserializer(class0, class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      String string0 = "si";
      identityHashMap0.put("toJdbc", "si");
      Map<String, String> map0 = null;
      Class<Integer> class1 = Integer.class;
      Class<Date> class2 = Date.class;
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) weakHashMap0);
      ClassLoader.getSystemClassLoader();
      String string1 = "[";
      long[] longArray0 = new long[5];
      longArray0[0] = (-36L);
      longArray0[1] = 1374L;
      longArray0[2] = (-1L);
      longArray0[3] = (-984L);
      longArray0[4] = (-9223372036854775807L);
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class2;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) class1;
      typeArray0[7] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[7], typeArray0[2]);
      // Undeclared exception!
      TypeUtils.cast((Object) bitSet0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Float float0 = new Float(0.0);
      TypeUtils.castToShort((Object) null);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("Tz/x9k+gk2<hd6djF<", "o+H7c=n_TGRv`2VR~j");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("Tz/x9k+gk2<hd6djF<", classLoader0);
      Byte byte0 = new Byte((byte)91);
      TypeUtils.castToSqlDate(byte0);
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object object0 = new Object();
      TypeUtils.getGenericParamType((Type) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.setAutoTypeSupport(true);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getCollectionItemType(class0);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(numberFormatException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put((String) null, "3r697%Pc[s/f1^+G|0");
      weakHashMap0.put((String) null, "3r697%Pc[s/f1^+G|0");
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("3r697%Pc[s/f1^+G|0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 3r697%Pc[s/f1^+G|0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, true);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("QG*rZ|TaCLCa_f=}Al");
      TypeUtils.castToString(noSuchFieldError0);
      TypeUtils.decapitalize("java.lang.NoSuchFieldError@0000000001");
      Constructor<MapDeserializer>[] constructorArray0 = (Constructor<MapDeserializer>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      InternalError internalError0 = new InternalError("LocalVariableTypeTable;");
      internalError0.fillInStackTrace();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(decimalFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.text.DecimalFormatSymbols@1073a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Float float0 = new Float(0.0);
      Class<IllegalAccessException> class0 = IllegalAccessException.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Float float0 = new Float(0.0);
      Short short0 = TypeUtils.castToShort(float0);
      assertEquals((short)0, (short)short0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(point0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.Point[x=0,y=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException("PCU@");
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      Class<DecimalFormat> class0 = DecimalFormat.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) noSuchMethodError0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TypeUtils.castToString((Object) null);
      TypeUtils.loadClass((String) null);
      VerifyError verifyError0 = new VerifyError("-+j6vz");
      assertEquals("java.lang.VerifyError: -+j6vz", verifyError0.toString());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("~]S6ybf(pC1ayk", "3r697%Pc[s/f1^+G|0");
      Insets insets0 = new Insets(13, Integer.MAX_VALUE, (-2160), 13);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) insets0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLSyntaxErrorException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(typeUtils0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      String string0 = "o^";
      weakHashMap0.put((String) null, "o^");
      Class<Calendar> class0 = Calendar.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      Class<MockCalendar> class1 = MockCalendar.class;
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) noSuchFieldException0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.NoSuchFieldException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Object object0 = null;
      TypeUtils.castToShort((Object) null);
      MessageFormat messageFormat0 = new MessageFormat("-k/Ra");
      Format[] formatArray0 = new Format[8];
      formatArray0[0] = (Format) messageFormat0;
      String string0 = "Ljava.util.concurrent.ConcurrentSkipListMap";
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("Ljava.util.concurrent.ConcurrentSkipListMap", (DecimalFormatSymbols) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TypeUtils.fnv1a_64("'Q");
      Class<Timestamp> class0 = Timestamp.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Integer integer0 = new Integer((-1134984628));
      TypeUtils.isHibernateInitialized(integer0);
      Float float0 = new Float(1.0);
      Class<SecurityException> class0 = SecurityException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      MockThread mockThread0 = new MockThread((Runnable) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      TypeUtils.getSerializeFeatures(class1);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Locale> class2 = Locale.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      classLoader0.setDefaultAssertionStatus(false);
      TypeUtils.loadClass("kotlin.Metadata", classLoader0);
      Class<?> class3 = TypeUtils.getClassFromMapping("fastjson.parser.autoTypeAccept");
      assertNull(class3);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TypeUtils.fnv1a_64("w~>z.");
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.decapitalize("w~>z.");
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("w~>z.");
      Class<MessageFormat> class0 = MessageFormat.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TypeUtils.castToChar((Object) null);
      Class<Float> class0 = Float.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.getRawClass(class0);
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TypeUtils.clearClassMapping();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QG*rZ|TaCLCa_f=}Al");
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("QG*rZ|TaCLCa_f=}Al");
      TypeUtils.decapitalize("QG*rZ|TaCLCa_f=}Al");
      AtomicLong atomicLong0 = new AtomicLong(91L);
      Byte byte0 = TypeUtils.castToByte(atomicLong0);
      assertEquals((byte)91, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getCollectionItemType(class0);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      assertEquals(0, treeMap0.size());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Collator> class0 = Collator.class;
      TypeUtils.getClass((Type) class0);
      Double double0 = new Double((-1.0));
      TypeUtils.castToFloat(double0);
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("I)V");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : I)V
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.castToString(weakHashMap0);
      TypeUtils.decapitalize("}G*rZ|UaCLCa_f=}Al");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("QCo]Xc)gpXA,YQ^l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"QCo]Xc)gpXA,YQ^l\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TypeUtils.fnv1a_64("'Q");
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Float float0 = new Float(0.0);
      TypeUtils.castToShort((Object) null);
      Class<Throwable> class0 = Throwable.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0, true);
      Class<DecimalFormat> class1 = DecimalFormat.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) float0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakHashMap0.replaceAll(biFunction0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, true);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("%{3");
      TypeUtils.castToString(sQLSyntaxErrorException0);
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      byte[] byteArray0 = TypeUtils.castToBytes("QG*rZ|TaCLCa_f=}Al");
      assertEquals(14, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.isProxy(class0);
      Insets insets0 = new Insets((-2030), 41, (-68703773), 44);
      insets0.right = (-2030);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints((-2030), (-2759), (-2030), 41, (-2030), (-2030), (-2759), 1895, insets0, 41, 333);
      gridBagConstraints0.insets = insets0;
      insets0.left = (-2030);
      insets0.right = (-1045);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("]ja%{PY5[", "fi");
      identityHashMap0.put("fi", "ishashCode");
      Class<Dimension> class1 = Dimension.class;
      TypeUtils.computeGetters(class1, (Map<String, String>) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("l4", classLoader0);
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = null;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass((String) null, (ClassLoader) aSMClassLoader0, false);
      TypeUtils.getCollectionItemClass((Type) null);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException((Throwable) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("can not cast to byte, value : ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      TypeUtils.isNumber("Ljava.awt.Color");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      boolean boolean0 = false;
      classLoader0.setClassAssertionStatus("Ljava.awt.Color", false);
      TypeUtils.loadClass("Ljava.awt.Color", classLoader0);
      classLoader0.clearAssertionStatus();
      classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils.getGenericParamType((Type) null);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockSimpleDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.text.MockSimpleDateFormat@a9427c06
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      TypeUtils.loadClass("defaultCenturyStart", classLoader0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, (Type) null);
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.getCollectionItemType(type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("UA'2aAO\"u", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. UA'2aAO\"u
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("fastjson.parser.deny", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. fastjson.parser.deny
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      TypeUtils.castToSqlDate((Object) null);
      TypeUtils.castToDouble((Object) null);
      TypeUtils.fnv1a_64_lower("message");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      TypeUtils.fnv1a_64("org.springframework.security.web.savedrequest.DefaultSavedRequest");
      TypeUtils.isNumber("org.springframework.security.web.savedrequest.DefaultSavedRequest");
      TypeUtils.decapitalize("methodName");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      mockSimpleDateFormat0.setLenient(false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("tb<F]T,R DD|E");
      SQLWarning sQLWarning0 = new SQLWarning("java.lang.", "java.lang.", sQLTimeoutException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("{OJ(", "java.lang.", sQLWarning0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("tb<F]T,R DD|E", "{OJ(", 102, sQLNonTransientConnectionException0);
      Class<MockCalendar> class0 = MockCalendar.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) sQLTransientConnectionException0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLTransientConnectionException: tb<F]T,R DD|E
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<TypeNotPresentException> class0 = TypeNotPresentException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.castToString(class0);
      TypeUtils.castToShort("");
      Class<?> class1 = TypeUtils.loadClass(".000000000", classLoader0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException("PCU@");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(interruptedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.InterruptedException: PCU@
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      NumberFormatException numberFormatException0 = new NumberFormatException();
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      int[] intArray0 = new int[5];
      TypeUtils.castToShort((Object) null);
      intArray0[0] = 1291;
      intArray0[3] = (int) 'n';
      intArray0[4] = (-266);
      TypeUtils.castToTimestamp((Object) null);
      TypeUtils.fnv1a_64("0");
      long long0 = TypeUtils.fnv1a_64("0");
      assertEquals((-5808608550200435537L), long0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      BiFunction<Object, Object, VerifyError> biFunction0 = (BiFunction<Object, Object, VerifyError>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      TypeUtils.fnv1a_64("java.lang.AutoCloseable");
      TypeUtils.loadClass("parseArray", (ClassLoader) aSMClassLoader0);
      Class<Timestamp> class0 = Timestamp.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, (PropertyNamingStrategy) null, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "~\\Lc2h#dDg[Q";
      TypeUtils.loadClass("~Lc2h#dDg[Q");
      TypeUtils.toLocale("~Lc2h#dDg[Q");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("~Lc2h#dDg[Q");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getCollectionItemType(class0);
      Class<Timestamp> class1 = Timestamp.class;
      NumberFormatException numberFormatException0 = new NumberFormatException();
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.isProxy(class0);
      Insets insets0 = new Insets((-2030), 41, (-68703773), 44);
      insets0.right = (-2030);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints((-2030), (-2759), (-2030), 41, (-2030), (-2030), (-2759), 1895, insets0, 41, 333);
      gridBagConstraints0.insets = insets0;
      insets0.left = (-2030);
      insets0.right = (-1045);
      gridBagConstraints0.insets.left = (-2030);
      gridBagConstraints0.insets = insets0;
      gridBagConstraints0.gridheight = 333;
      insets0.top = (-2759);
      insets0.right = 41;
      insets0.set(41, 44, 41, 41);
      gridBagConstraints0.insets.left = (-2181);
      insets0.bottom = (-2759);
      gridBagConstraints0.gridy = (-1098);
      TypeUtils.unwrapOptional(class0);
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      TypeUtils.loadClass("x5a`");
      TypeUtils.castToLong((Object) null);
      TypeUtils.toLocale("x5a`");
      TypeUtils.isKotlin((Class) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("org.springframework.util.LinkedMultiValueMap", classLoader0, true);
      classLoader0.setDefaultAssertionStatus(false);
      Long.toUnsignedString(1099511628211L);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, (Type) null);
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      parserConfig1.setAsmEnable(false);
      parserConfig1.addAccept("5WRxqnjcU8iWlTL");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "x5a`", (Class<DecimalFormat>) null, parserConfig1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "Ljava.util.concurrent.ConcurrentSkipListSet");
      MockThread mockThread2 = new MockThread(mockThread1);
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      classLoader0.clearAssertionStatus();
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<?> class0 = TypeUtils.loadClass((String) null, classLoader1);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "getDeserializer";
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("getDeserializer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : getDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      TypeUtils.castToBoolean(bigDecimal0);
      MockThread mockThread0 = new MockThread((Runnable) null, "fastjson.parser.autoTypeSupport");
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      classLoader0.setPackageAssertionStatus("Xq8adHU7", true);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      imageCapabilities0.clone();
      TypeUtils.loadClass("");
      Float float0 = new Float(0.0);
      VerifyError verifyError0 = new VerifyError("");
      assertEquals("", verifyError0.getMessage());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("java.lang.NoSuchFieldException", classLoader0, true);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = type0;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class0, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Integer integer0 = new Integer((-1134984628));
      boolean boolean0 = TypeUtils.isHibernateInitialized(integer0);
      assertTrue(boolean0);
      
      Float float0 = new Float(1.0);
      Class<SecurityException> class0 = SecurityException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      MockThread mockThread0 = new MockThread((Runnable) null);
      ClassLoader.getSystemClassLoader();
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      TypeUtils.getSerializeFeatures(class1);
      Class<OptionalCodec> class2 = OptionalCodec.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class2, (Map<String, String>) null, false);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      TypeUtils.fnv1a_64("'Q");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("'Q", (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) null;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], (Type) null);
      aSMClassLoader0.setClassAssertionStatus("'Q", false);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("'Q", (ClassLoader) aSMClassLoader0);
      Class class1 = (Class)TypeUtils.getCollectionItemType(type0);
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Short> class0 = Short.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      Class<?> class1 = TypeUtils.getRawClass(type0);
      parserConfig0.getDeserializer((Type) class1);
      NumberFormatException numberFormatException0 = new NumberFormatException("fastjson.parser.autoTypeAccept");
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      TypeUtils.fnv1a_64("'Q");
      Float float0 = new Float(0.0);
      TypeUtils.castToShort((Object) null);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<DecimalFormat> class0 = DecimalFormat.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) float0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConcurrentHashMap<TimeZone, SQLIntegrityConstraintViolationException> concurrentHashMap0 = new ConcurrentHashMap<TimeZone, SQLIntegrityConstraintViolationException>(7, 7, 55232);
      Hashtable<TimeZone, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<TimeZone, SQLIntegrityConstraintViolationException>(concurrentHashMap0);
      TypeUtils.isHibernateInitialized((Object) null);
      Float float0 = new Float(1469.81630388409);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getCollectionItemType(class0);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("getgetTimeZone");
      illegalMonitorStateException0.getLocalizedMessage();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValueExact();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread("getgetTimeZone");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "getgetTimeZone", 10L);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      StackOverflowError stackOverflowError0 = new StackOverflowError("getgetTimeZone");
      Class<String> class1 = String.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0);
      ParserConfig parserConfig1 = ParserConfig.global;
      Class<DecimalFormatSymbols> class2 = DecimalFormatSymbols.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig1, class2);
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(jSONPDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.JSONPDeserializer@b6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Date> class0 = Date.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      hashtable0.keySet();
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      hashtable0.clear();
      InterruptedException interruptedException0 = new InterruptedException("Lx5a`");
      Boolean boolean0 = Boolean.valueOf("Lx5a`");
      Integer integer0 = TypeUtils.castToInt(boolean0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class0 = TypeUtils.loadClass("[int", (ClassLoader) aSMClassLoader0, true);
      TypeUtils.getCollectionItemType(class0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class com.alibaba.fastjson.util.ParameterizedTypeImpl, create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QCo]Xc)gpXA,YQ^l");
      TypeUtils.clearClassMapping();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<InstantiationError> class0 = InstantiationError.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, true);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("QG*rZ|TaCLCa_f=}Al");
      TypeUtils.castToString(weakHashMap0);
      TypeUtils.decapitalize("QG*rZ|TaCLCa_f=}Al");
      TypeUtils.unwrapOptional(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("QG*rZ|TaCLCa_f=}Al");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : QG*rZ|TaCLCa_f=}Al
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Float float0 = new Float(2613.2941);
      TypeUtils.castToShort(float0);
      Class<Throwable> class0 = Throwable.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0, true);
      Class<DecimalFormat> class1 = DecimalFormat.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("fe1!zmjm3gC", "@e");
      LinkageError linkageError0 = new LinkageError("B=:9E", sQLNonTransientException0);
      sQLNonTransientException0.printStackTrace();
      InternalError internalError0 = new InternalError("fastjson.parser.autoTypeSupport", linkageError0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) internalError0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, true);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      TypeUtils.castToString(noSuchFieldError0);
      TypeUtils.decapitalize("java.lang.NoSuchFieldError@0000000001");
      List<FieldInfo> list1 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Object object0 = new Object();
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      parserConfig0.setAutoTypeSupport(false);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.buildBeanInfo(class0, map0, (PropertyNamingStrategy) null, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(timeUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : HOURS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "\\UA'2aAO\"u";
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<MockDate> class0 = MockDate.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("LocalVariableTypeTable", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. LocalVariableTypeTable
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.isProxy(class0);
      Insets insets0 = new Insets((-2030), 41, (-68703773), 44);
      insets0.right = (-2030);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints((-2030), (-2759), (-2030), 41, (-2030), (-2030), (-2759), 1895, insets0, 41, 333);
      gridBagConstraints0.insets = insets0;
      insets0.left = (-2030);
      insets0.right = (-1045);
      gridBagConstraints0.insets.left = (-2030);
      TypeUtils.fnv1a_64_lower("NULL");
      TypeUtils.unwrapOptional((Type) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConcurrentHashMap<TimeZone, SQLIntegrityConstraintViolationException> concurrentHashMap0 = new ConcurrentHashMap<TimeZone, SQLIntegrityConstraintViolationException>();
      Hashtable<TimeZone, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<TimeZone, SQLIntegrityConstraintViolationException>(concurrentHashMap0);
      TypeUtils.isHibernateInitialized((Object) null);
      Float float0 = new Float(1469.81630388409);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.clearClassMapping();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Object object0 = new Object();
      Type type0 = null;
      TypeUtils.getGenericParamType((Type) null);
      Type[] typeArray0 = new Type[1];
      Class<Float> class0 = Float.TYPE;
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@3d171f82
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      HashMap<SQLTransientConnectionException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLTransientConnectionException, SQLNonTransientConnectionException>();
      Class<Short> class0 = Short.class;
      TypeUtils.isKotlin(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("long", classLoader0, false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      InternalError internalError0 = new InternalError("LocalariabeTypeTable;");
      internalError0.fillInStackTrace();
      classLoader0.setDefaultAssertionStatus(false);
      TypeUtils.loadClass((String) null, classLoader0);
      Class<?> class0 = TypeUtils.getCollectionItemClass(type0);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, (Type) null);
      Type type1 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      TypeUtils.loadClass("defaultCenturyStart", classLoader0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      Class<LinkageError> class2 = LinkageError.class;
      Type type0 = FieldInfo.getFieldType(class2, class2, class2);
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class2, "com.alibaba.fastjson.JSONPObject", fieldArray0);
      FieldInfo fieldInfo0 = new FieldInfo("Ljava.util.concurrent.ConcurrentSkipListSet", class1, class2, type0, (Field) null, 3, 3, 3);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      TypeUtils.loadClass("Ljava.awt.Font", classLoader0);
      String string0 = "Ljava.awt.Color";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("'Uh8[0");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Ljava.awt.Font", "Ljava.awt.Color", 223, sQLTimeoutException0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) sQLNonTransientConnectionException0, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLNonTransientConnectionException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "getDeserializer";
      TypeUtils.fnv1a_64("getDeserializer");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("getDeserializer");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.getClassFromMapping("[boolean");
      InstantiationException instantiationException0 = new InstantiationException("[boolean");
      MockFile mockFile0 = new MockFile("is");
      File file0 = MockFile.createTempFile("[boolean", "[boolean", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "[boolean");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // [boolean
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Point point0 = new Point();
      TypeUtils.castToDate((Object) null);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      TypeUtils.isPath(class0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.isKotlin(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<MockSimpleDateFormat> class2 = MockSimpleDateFormat.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      Class<?> class3 = TypeUtils.loadClass("oracle.sql.TIMESTAMP", classLoader0);
      assertNull(class3);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.isProxy(class0);
      Insets insets0 = new Insets((-2030), 41, (-68703773), 44);
      insets0.right = (-2030);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints((-2030), (-2759), (-2030), 41, (-2030), (-2030), (-2759), 1895, insets0, 41, 333);
      gridBagConstraints0.insets = insets0;
      insets0.left = (-2030);
      insets0.right = (-1045);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      identityHashMap0.putAll(concurrentHashMap0);
      Class<Annotation> class1 = Annotation.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      Class<DecimalFormat> class2 = DecimalFormat.class;
      ParserConfig parserConfig1 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) outOfMemoryError0, class2, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      TypeUtils.fnv1a_64("'Q");
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.decapitalize("'Q");
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("'Q");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("'Q", "'Q");
      Class<TimeUnit> class0 = TimeUnit.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("com.alibaba.fastjson.serializer.SerializerFeature");
      TypeUtils.isHibernateInitialized(illegalMonitorStateException0);
      MockThread mockThread0 = new MockThread((Runnable) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      illegalMonitorStateException0.getLocalizedMessage();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.longValueExact();
      Long.toUnsignedString(1L);
      TypeUtils.castToBigDecimal(bigInteger0);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("L");
      SQLDataException sQLDataException0 = new SQLDataException("L", "n=\"u.|=CRn", 767, mockIllegalAccessException0);
      assertEquals("n=\"u.|=CRn", sQLDataException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("Lava.awt.Color", false);
      TypeUtils.loadClass("Lava.awt.Color", classLoader0);
      classLoader0.clearAssertionStatus();
      classLoader0.getParent();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(701, 701);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(weakHashMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QCo]Xc)gpXA,YQ^l");
      TypeUtils.clearClassMapping();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("QG*rZ|TaCLCa_f=}Al");
      TypeUtils.castToString(weakHashMap0);
      TypeUtils.decapitalize("QG*rZ|TaCLCa_f=}Al");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("QCo]Xc)gpXA,YQ^l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"QCo]Xc)gpXA,YQ^l\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      TypeUtils.fnv1a_64("'Q");
      TypeUtils.isNumber("'Q");
      TypeUtils.decapitalize("'Q");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      mockSimpleDateFormat0.setLenient(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("'Q");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'Q\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      Point point0 = new Point();
      MockDate mockDate0 = new MockDate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.isPath(class0);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      TypeUtils.getGenericParamType(class0);
      typeArray0[4] = null;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      typeArray0[8] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[1]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class java.lang.Class, write javaBean error, fastjson version 1.2.46, class sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl, fieldName : annotatedSuperclass, write javaBean error, fastjson version 1.2.46, class java.lang.Class, fieldName : type, write javaBean error, fastjson version 1.2.46, class sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl, fieldName : annotatedSuperclass, write javaBean error, fastjson version 1.2.46, class java.lang.Class, fieldName : type, write javaBean error, fastjson version 1.2.46, class sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl, fieldName : annotatedSuperclass, write javaBean error, fastjson version 1.2.46, class java.lang.Class, fieldName : type, write javaBean error, fastjson version 1.2.46, class sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl, fieldName : 0, write javaBean error, fastjson version 1.2.46, class java.lang.Class, fieldName : type
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      imageCapabilities0.clone();
      TypeUtils.loadClass("");
      Locale locale0 = Locale.US;
      TypeUtils.isNumber("Qn");
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "Qn", class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Qn\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      TypeUtils.getGenericParamType((Type) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.setAutoTypeSupport(true);
      TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      boolean boolean0 = TypeUtils.isNumber("fastjson.parser.autoTypeSupport");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "s");
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("{tLn");
      SQLException sQLException0 = new SQLException();
      illegalMonitorStateException0.addSuppressed(sQLException0);
      illegalMonitorStateException0.getLocalizedMessage();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.longValueExact();
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      StackOverflowError stackOverflowError0 = new StackOverflowError("fastjson.parser.autoTypeSupport");
      Class<String> class1 = String.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      Class<ParameterizedTypeImpl> class2 = ParameterizedTypeImpl.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class2, class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@a8
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      InternalError internalError0 = new InternalError("2|sB{WMfyH");
      internalError0.fillInStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ljava.lang.AutoCloseable", "Ljava.lang.AutoCloseable", 36, internalError0);
      Class<NoSuchFieldException> class1 = NoSuchFieldException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) sQLIntegrityConstraintViolationException0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchFieldException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      TypeUtils.fnv1a_64("'Q");
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      String string0 = TypeUtils.decapitalize("'Q");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<FieldInfo> class0 = FieldInfo.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, true);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("'Q");
      HttpCookie httpCookie0 = new HttpCookie("Ljava.awt.Rectangle", "k}7OQ%303jU`T+2]#V");
      TypeUtils.castToString(httpCookie0);
      String string1 = TypeUtils.decapitalize("eWlP~Bl");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      String string0 = TypeUtils.decapitalize("~]S6ybf(pC1ayk");
      assertEquals("~]S6ybf(pC1ayk", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.isNumber("<q-2oD:pVcwPp");
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("<q-2oD:pVcwPp", true);
      TypeUtils.loadClass("<q-2oD:pVcwPp", classLoader0);
      ClassLoader classLoader2 = classLoader1.getParent();
      classLoader2.clearAssertionStatus();
      classLoader2.getParent();
      ClassLoader.getSystemClassLoader();
      TypeUtils.getGenericParamType((Type) null);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("<q-2oD:pVcwPp");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"<q-2oD:pVcwPp\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Point point0 = new Point();
      TypeUtils.castToDate((Object) null);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      TypeUtils.isPath(class0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.isKotlin(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<?> class2 = TypeUtils.loadClass("oracle.sql.TIMESTAMP", classLoader0);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("c", (ClassLoader) aSMClassLoader0, true);
      TypeUtils.getCollectionItemType((Type) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      parameterizedTypeImpl0.getTypeName();
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@745f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      TypeUtils.loadClass("x5a`");
      Locale locale0 = TypeUtils.toLocale("x5a`");
      TypeUtils.isKotlin((Class) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("org.springframework.util.LinkedMultiValueMap", classLoader0, true);
      classLoader0.setDefaultAssertionStatus(false);
      Long.toUnsignedString(1099511628213L);
      Long.toUnsignedString((-984L));
      LinkedHashMap<JavaObjectDeserializer, ChoiceFormat> linkedHashMap0 = new LinkedHashMap<JavaObjectDeserializer, ChoiceFormat>();
      TypeUtils.castToBigDecimal(linkedHashMap0);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("org.springframework.util.LinkedMultiValueMap");
      SQLDataException sQLDataException0 = new SQLDataException("18446744073709550632", "gethashCode", 767, mockIllegalAccessException0);
      MessageFormat messageFormat0 = new MessageFormat("gethashCode", locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(messageFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.text.MessageFormat@80cd8571
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Integer integer0 = new Integer((-1134984628));
      TypeUtils.isHibernateInitialized(integer0);
      Float float0 = new Float(1.0);
      Class<SecurityException> class0 = SecurityException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      MockThread mockThread0 = new MockThread((Runnable) null);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.KOREA;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      Time time0 = TypeUtils.castToSqlTime(calendar0);
      assertEquals("20:21:21", time0.toString());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = "2|sB{WMfyH";
      InternalError internalError0 = new InternalError("Ljava.lang.AutoCloseable");
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "Ljava.lang.AutoCloseable", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchFieldException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Long.toUnsignedString((-304L));
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.containsValue("18446744073709551312");
      weakHashMap0.put("+W45b]^!t$7qF#?>`", "18446744073709551312");
      Class<NullPointerException> class0 = NullPointerException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("18446744073709551312");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"18446744073709551312\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      Class<Timestamp> class1 = Timestamp.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class1, class0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      TypeUtils.castToBoolean(bigDecimal0);
      SQLWarning sQLWarning0 = new SQLWarning("Ljava.util.concurrent.ConcurrentSkipListMap", "fastjson.parser.deny");
      Class<Integer> class2 = Integer.class;
      TypeUtils.castToJavaBean((Object) null, class2);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      ParserConfig parserConfig2 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass(",s9T[3", classLoader0, false);
      Vector<FieldInfo> vector0 = new Vector<FieldInfo>();
      AtomicLong atomicLong0 = new AtomicLong((-7766605818834748097L));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(atomicLong0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -7766605818834748097
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      TypeUtils.fnv1a_64("'Q");
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Float float0 = new Float(0.0);
      TypeUtils.castToShort((Object) null);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      boolean boolean0 = true;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      TypeUtils.getClass((Type) class0);
      String string0 = "$7Ya9>y~.uK[1[]z:8";
      InstantiationException instantiationException0 = new InstantiationException();
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("$7Ya9>y~.uK[1[]z:8", instantiationException0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(typeNotPresentException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.lang.TypeNotPresentException: Type $7Ya9>y~.uK[1[]z:8 not present
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Function<String, InstantiationException> function0 = (Function<String, InstantiationException>) mock(Function.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      hashtable0.keySet();
      Class<TimeUnit> class0 = TimeUnit.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      hashtable0.clear();
      String string0 = ".000000";
      InterruptedException interruptedException0 = new InterruptedException(".000000");
      Boolean.valueOf(".000000");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("Lx5a`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Lx5a`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class1 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      Type type0 = FieldInfo.getFieldType(class1, class1, parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Class<NumberFormatException> class0 = NumberFormatException.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      TypeUtils.loadClass("~^j~IQ^y");
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.CANADA_FRENCH;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale1);
      Currency currency0 = decimalFormatSymbols0.getCurrency();
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.isHibernateInitialized(currency0);
      Float float0 = new Float(760.99391942);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<TypeNotPresentException> class0 = TypeNotPresentException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.setClassAssertionStatus("N2BEl |U2q;", true);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Class<DateFormatSymbols> class1 = DateFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      Class<?> class2 = TypeUtils.loadClass(";+[za'q2+<6&{*u", (ClassLoader) aSMClassLoader0);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<?> class0 = TypeUtils.loadClass("[int", classLoader1);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      Class<?> class1 = TypeUtils.loadClass("[int", classLoader1, true);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      TypeUtils.getParserFeatures(class0);
      Float float0 = new Float(0.0);
      Short short0 = TypeUtils.castToShort(float0);
      assertEquals((short)0, (short)short0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Function<String, InstantiationException> function0 = (Function<String, InstantiationException>) mock(Function.class, new ViolatedAssumptionAnswer());
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("getClass");
      TypeUtils.decapitalize("getClass");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.loadClass("getClass", classLoader0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) null, propertyNamingStrategy0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("QG*rZ|TaCLCa_f=}Al");
      TypeUtils.castToString(noSuchFieldError0);
      TypeUtils.decapitalize("java.lang.NoSuchFieldError@0000000001");
      Type type0 = TypeUtils.unwrapOptional(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      String string0 = "Z";
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : Z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("[int", (ClassLoader) aSMClassLoader0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConcurrentHashMap<TimeZone, SQLIntegrityConstraintViolationException> concurrentHashMap0 = new ConcurrentHashMap<TimeZone, SQLIntegrityConstraintViolationException>(37, 3526.452F, 199);
      Hashtable<TimeZone, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<TimeZone, SQLIntegrityConstraintViolationException>(concurrentHashMap0);
      Integer integer0 = new Integer((-1980));
      TypeUtils.isHibernateInitialized(integer0);
      Float float0 = new Float(Double.NaN);
      Short short0 = TypeUtils.castToShort(integer0);
      assertEquals((short) (-1980), (short)short0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+");
      TypeUtils.clearClassMapping();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.toLocale("+");
      Class<BitSet> class1 = BitSet.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      TypeUtils.castToByte((Object) null);
      TypeUtils.getClassFromMapping("getSuppressed");
      TypeUtils.getClassFromMapping("getSuppressed");
      Class<PageAttributes> class2 = PageAttributes.class;
      int int0 = TypeUtils.getSerializeFeatures(class2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = "'Q";
      TypeUtils.fnv1a_64("'Q");
      Method method0 = null;
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      TypeUtils.decapitalize("'Q");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put((String) null, "3r697%Pc[s/f1^+G|0");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("3r697%Pc[s/f1^+G|0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : 3r697%Pc[s/f1^+G|0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      HashMap<SQLTransientConnectionException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLTransientConnectionException, SQLNonTransientConnectionException>();
      TypeUtils.castToSqlDate((Object) null);
      TypeUtils.castToDouble((Object) null);
      TypeUtils.fnv1a_64_lower("[long");
      TypeUtils.unwrapOptional((Type) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = "x5`";
      TypeUtils.loadClass("x5`");
      TypeUtils.castToLong((Object) null);
      Locale locale0 = TypeUtils.toLocale("x5`");
      Class<Character> class0 = Character.TYPE;
      TypeUtils.getCollectionItemType(class0);
      Double double0 = new Double(0.0);
      TypeUtils.castToFloat(double0);
      Object object0 = new Object();
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      MockThread mockThread0 = new MockThread("]");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) locale0, class1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      List<FieldInfo> list0 = new LinkedList<FieldInfo>();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("3r697%Pc[s/f1^+G|0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      String string0 = TypeUtils.decapitalize("");
      assertEquals("", string0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<SQLDataException> class0 = SQLDataException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      imageCapabilities0.clone();
      imageCapabilities0.clone();
      String string0 = "2|sB{WMfyH";
      InternalError internalError0 = new InternalError("Ljava.lang.AutoCloseable");
      internalError0.fillInStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("2|sB{WMfyH", "Ljava.lang.AutoCloseable", 36, internalError0);
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "Ljava.lang.AutoCloseable", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchFieldException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Object object0 = new Object();
      TypeUtils.getGenericParamType((Type) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.setAutoTypeSupport(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      TypeUtils.isGenericParamType(class0);
      Long long0 = Long.getLong("@k}Jq4t7sa]5NoM(u8/", (-984L));
      Long.toUnsignedString((-304L));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -984
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, concurrentHashMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      TypeUtils.fnv1a_64("'Q");
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Float float0 = new Float(0.0);
      TypeUtils.castToShort((Object) null);
      Class<Throwable> class0 = Throwable.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("o+H7c=n_TGRv`2VR~j", "'Q");
      identityHashMap0.put("Tz/x9k+gk2<hd6djF<", "o+H7c=n_TGRv`2VR~j");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("Tz/x9k+gk2<hd6djF<", classLoader0);
      Byte byte0 = new Byte((byte)91);
      Date date0 = TypeUtils.castToSqlDate(byte0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.getClassFromMapping("%*Y_gVP.-P7b");
      Class<NullPointerException> class1 = NullPointerException.class;
      String string0 = "Ljava.awt.Font";
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      Class<StringCharacterIterator> class3 = StringCharacterIterator.class;
      Class<Short> class4 = Short.TYPE;
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("%*Y_gVP.-P7b", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Short short0 = new Short((short)16);
      TypeUtils.castToDate(short0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      String string0 = "isiterator";
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("isiterator", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. isiterator
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      TypeUtils.loadClass("x5`");
      TypeUtils.castToLong((Object) null);
      TypeUtils.toLocale("x5`");
      TypeUtils.isKotlin((Class) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      aSMDeserializerFactory0.classLoader.clearAssertionStatus();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) imageCapabilities0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      TypeUtils.loadClass("x5a`");
      TypeUtils.toLocale("x5a`");
      Long.toUnsignedString(1099511628211L);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, (Type) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      Class<DecimalFormat> class1 = DecimalFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "x5a`", class1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      TypeUtils.getParserFeatures(class0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      imageCapabilities0.clone();
      imageCapabilities0.clone();
      ClassLoader.getSystemClassLoader();
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(".)5ysDW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : .)5ysDW
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      TypeUtils.getClass((Type) class0);
      Class<SQLDataException> class1 = SQLDataException.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = null;
      try {
        weakHashMap0 = new WeakHashMap<String, String>((-1792083026), (-1792083026));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Initial Capacity: -1792083026
         //
         verifyException("java.util.WeakHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("c", (ClassLoader) aSMClassLoader0, true);
      TypeUtils.getCollectionItemType((Type) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      aSMDeserializerFactory0.classLoader.setClassAssertionStatus((String) null, false);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("can not cast to long, value : ", (ClassLoader) aSMClassLoader1);
      Class class1 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.clearClassMapping();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("com.alibaba.fastjson.serializer.SerializerFeature");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.SerializerFeature", classLoader0, true);
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      PageAttributes pageAttributes0 = new PageAttributes();
      PageAttributes pageAttributes1 = new PageAttributes(pageAttributes0);
      assertTrue(pageAttributes1.equals((Object)pageAttributes0));
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Point point0 = new Point();
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 0);
      TypeUtils.castToSqlDate(mockDate0);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<JobAttributes> class0 = JobAttributes.class;
      boolean boolean1 = TypeUtils.isPath(class0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+");
      TypeUtils.clearClassMapping();
      TypeUtils.getKoltinConstructorParameters(class1);
      MockThread mockThread0 = new MockThread((Runnable) null);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gettoStrv4");
      TypeUtils.decapitalize("gettoStrv4");
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "o4YQH?<^o~8)7");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      TypeUtils.loadClass("gettoStrv4", classLoader0);
      TypeUtils.loadClass("WriteEnumUsingToString");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : org.evosuite.instrumentation.InstrumentingClassLoader@7152d66e
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+");
      TypeUtils.clearClassMapping();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("<U");
      TypeUtils.castToString("+");
      TypeUtils.decapitalize("");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("<U");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"<U\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      MessageFormat messageFormat0 = new MessageFormat("-k/Ra");
      Format[] formatArray0 = new Format[8];
      formatArray0[0] = (Format) messageFormat0;
      TypeUtils.castToChar((Object) null);
      Short short0 = new Short((short) (-2450));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      classLoader0.clearAssertionStatus();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) imageCapabilities0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Class<NumberFormatException> class0 = NumberFormatException.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.castToDate((Object) null);
      TypeUtils.isPath(class0);
      Class<IndexOutOfBoundsException> class2 = IndexOutOfBoundsException.class;
      Class<Annotation> class3 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class2, class3);
      TypeUtils.getCollectionItemType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : class java.lang.IndexOutOfBoundsException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      Class<Point> class0 = Point.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      BiFunction<Object, Object, VerifyError> biFunction0 = (BiFunction<Object, Object, VerifyError>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.computeIfPresent("Ljava.awt.Point", biFunction0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) concurrentHashMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>(hashMap0);
      ParserConfig.getFieldFromCache("throwException", identityHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class0 = TypeUtils.loadClass("[int", (ClassLoader) aSMClassLoader0, true);
      TypeUtils.getCollectionItemType(class0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      TypeUtils.decapitalize("");
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      Class<?> class1 = TypeUtils.loadClass("", classLoader0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Long.toUnsignedString((-304L));
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.decapitalize("18446744073709551312");
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("18446744073709551312");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"18446744073709551312\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      HashMap<SQLTransientConnectionException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLTransientConnectionException, SQLNonTransientConnectionException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class0 = TypeUtils.loadClass("[int", (ClassLoader) aSMClassLoader0, true);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      typeArray0[0] = type0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      classLoader0.setDefaultAssertionStatus(false);
      Class<Insets> class1 = Insets.class;
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory1);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) classLoader1, class1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Insets
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      HashMap<SQLTransientConnectionException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLTransientConnectionException, SQLNonTransientConnectionException>();
      TypeUtils.fnv1a_64("Ljava.awt.Font");
      TypeUtils.isNumber("Ljava.awt.Font");
      TypeUtils.decapitalize("Ljava.awt.Font");
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("ljava.awt.Font");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.lang.MockThrowable: ljava.awt.Font
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      HashMap<SQLTransientConnectionException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLTransientConnectionException, SQLNonTransientConnectionException>();
      boolean boolean0 = true;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) null, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.getCollectionItemType(class0);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      InstantiationException instantiationException0 = new InstantiationException();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(instantiationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.InstantiationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig1 = new ParserConfig(classLoader1);
      ClassLoader.getSystemClassLoader();
      TypeUtils.fnv1a_64("fastjson.parser.deny");
      TypeUtils.loadClass("fastjson.parser.deny");
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.text.MockDateFormat@5fb7134b
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      TypeUtils.castToString((Object) null);
      Long long0 = new Long(0L);
      Long.sum((-1778L), (-1778L));
      Long.sum((-1778L), (-1778L));
      Long.getLong("QuoteFieldNames", (-984L));
      Long.toUnsignedString((-304L));
      Short short0 = new Short((short)6229);
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader2 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(classLoader2);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory1.classLoader;
      TypeUtils.castToInt((Object) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1.classLoader);
      aSMClassLoader1.clearAssertionStatus();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) aSMDeserializerFactory0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      PageAttributes pageAttributes0 = new PageAttributes();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PageAttributes pageAttributes1 = new PageAttributes(pageAttributes0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(pageAttributes1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : color=monochrome,media=iso-a4,orientation-requested=portrait,origin=physical,print-quality=normal,printer-resolution=[72,72,3]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      TypeUtils.isPath(class0);
      Class<Annotation> class1 = Annotation.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      Class<Byte> class3 = Byte.class;
      TypeUtils.isKotlin(class3);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<DecimalFormatSymbols> class4 = DecimalFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class4);
      Class<?> class5 = TypeUtils.loadClass("fastjson.parser.deny", classLoader0);
      assertNull(class5);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+");
      Class<Integer> class1 = Integer.class;
      TypeUtils.castToJavaBean((Object) null, class1);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      ClassLoader.getSystemClassLoader();
      Class<?> class2 = TypeUtils.getClassFromMapping("+");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Insets insets0 = new Insets((-1726704164), (-1726704164), (-1726704164), 8);
      insets0.clone();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.loadClass("[double", classLoader0);
      ClassLoader.getSystemClassLoader();
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("E9Mb*Tw{}41#Bv");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : E9Mb*Tw{}4
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      GenericArrayType genericArrayType0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      TypeUtils.loadClass("x5a`");
      TypeUtils.castToLong((Object) null);
      TypeUtils.toLocale("x5a`");
      TypeUtils.isKotlin((Class) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("org.springframework.util.LinkedMultiValueMap", classLoader0, true);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      classLoader0.setDefaultAssertionStatus(true);
      Long.toUnsignedString(0L);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGettersWithFieldBase((Class<?>) null, hashMap0, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      hashtable0.keySet();
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) treeMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      Hashtable<String, Field> hashtable1 = new Hashtable<String, Field>();
      hashtable1.clear();
      InterruptedException interruptedException0 = new InterruptedException("[dYV^J-M/,");
      Boolean.valueOf(";u+[jxC7c?$=[<");
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(noSuchFieldError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.NoSuchFieldError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("L", parserConfig0, 3392903);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "L", (Object) "L");
      SQLWarning sQLWarning0 = new SQLWarning("zaqg*", "fastjson.parser.autoTypeSupport", 1026);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, (Object) sQLWarning0, (Object) noSuchFieldException0);
      Type type0 = parseContext1.type;
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      String string0 = "";
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      Class<Exception> class2 = Exception.class;
      Field[] fieldArray0 = new Field[2];
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("Lorg.springframework.util.LinkedMultiValueMap", hashtable0);
      fieldArray0[0] = null;
      ParserConfig.getFieldFromCache("Lorg.springframework.util.LinkedMultiValueMap", hashtable0);
      fieldArray0[1] = null;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class2, "", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<TypeNotPresentException> class0 = TypeNotPresentException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      TypeUtils.loadClass("N2BEl |U2q;", (ClassLoader) aSMDeserializerFactory0.classLoader);
      boolean boolean1 = TypeUtils.isPath(class0);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      boolean boolean0 = false;
      Locale locale0 = Locale.FRANCE;
      MessageFormat messageFormat0 = new MessageFormat("defaultCenturyStart", locale0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) messageFormat0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.decapitalize("isInitialized");
      TypeUtils.castToBytes("isInitialized");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) class0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLSyntaxErrorException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      LinkedHashMap<SQLInvalidAuthorizationSpecException, TimeUnit> linkedHashMap0 = new LinkedHashMap<SQLInvalidAuthorizationSpecException, TimeUnit>();
      String string0 = "L";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Ff}vDdaz0w#C}H`", "L", sQLNonTransientException0);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      linkedHashMap0.put(sQLInvalidAuthorizationSpecException0, timeUnit0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {java.sql.SQLInvalidAuthorizationSpecException: Ff}vDdaz0w#C}H`=MICROSECONDS}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      TypeUtils.isNumber("Ljava.awt.Color");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Long.toUnsignedString((-304L));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(53, 22, 53, 53, 22);
      TypeUtils.castToSqlTime(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = ParserConfig.global;
      classLoader0.setDefaultAssertionStatus(false);
      // Undeclared exception!
      try { 
        TypeUtils.getClass(typeArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Long long0 = new Long((-17L));
      Long.sum((-1778L), (-1778L));
      Integer integer0 = TypeUtils.castToInt(long0);
      assertEquals((-17), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      Collection collection0 = TypeUtils.createCollection(type0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      Class<Point> class0 = Point.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      String string0 = "Ljava.awt.Point";
      BiFunction<Object, Object, VerifyError> biFunction0 = (BiFunction<Object, Object, VerifyError>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Field[] fieldArray0 = new Field[4];
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("Ljava.awt.Point", identityHashMap0);
      fieldArray0[0] = null;
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      FieldInfo fieldInfo0 = new FieldInfo("?gSH`9dvfD,#", class0, class1, class1, (Field) null, (-62), 2490, 2490);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getField();
      fieldArray0[1] = null;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("Tj';V$BC`M FYI", linkedHashMap0);
      fieldArray0[2] = null;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class1, (String) null, fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, true);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("QG*rZ|TaCLCa_f=}Al");
      TypeUtils.castToString(noSuchFieldError0);
      TypeUtils.decapitalize("java.lang.NoSuchFieldError@0000000001");
      Type type0 = TypeUtils.unwrapOptional(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      String string0 = "java.time.";
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "(DZ)V", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      TypeUtils.getClass((Type) class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<Calendar> class0 = Calendar.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      TypeUtils.isGenericParamType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      parserConfig0.compatibleWithJavaBean = false;
      ClassLoader.getSystemClassLoader();
      Class<Integer> class1 = Integer.class;
      parserConfig0.createJavaBeanDeserializer(class1, class0);
      parserConfig0.compatibleWithJavaBean = true;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = "getDeserializer";
      TypeUtils.fnv1a_64("getDeserializer");
      TypeUtils.castToFloat((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("getDeserializer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : getDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      TypeUtils.getClassFromMapping("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d7");
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      HashMap<SQLTransientConnectionException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLTransientConnectionException, SQLNonTransientConnectionException>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, sQLNonTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      hashMap0.put(sQLTransientConnectionException0, sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException((Throwable) null);
      hashMap0.put((SQLTransientConnectionException) null, sQLNonTransientConnectionException1);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {null=java.sql.SQLNonTransientConnectionException, java.sql.SQLTransientConnectionException=java.sql.SQLNonTransientConnectionException}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      TypeUtils.fnv1a_64("'Q");
      TypeUtils.toLocale("'Q");
      Class<Character> class0 = Character.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      Double double0 = new Double(0.0);
      Float float0 = new Float((-1.0));
      TypeUtils.castToFloat(float0);
      Object object0 = new Object();
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      MockThread mockThread0 = new MockThread("W ]H~");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      ParserConfig parserConfig2 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, class1, parserConfig2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Class<IllegalStateException> class0 = IllegalStateException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.isEmpty();
      weakHashMap0.put("e", "e");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      weakHashMap0.put("}$SQ_QA\"0~H'}>QA", "e");
      weakHashMap0.put("", "yyyy-MM-dd'T'HH:mm:ss");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      weakHashMap0.put("Ljava.lang.AutoCloseable", "Zj_AaT");
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : SnakeCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Timestamp> class0 = Timestamp.class;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      TypeUtils.castToBoolean(bigDecimal0);
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertEquals(1, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<?> class0 = TypeUtils.loadClass("s");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Integer integer0 = new Integer((-1134984628));
      TypeUtils.fnv1a_64("No$B");
      TypeUtils.loadClass("value");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TypeUtils.castToSqlDate(mockGregorianCalendar0);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("`t");
      Locale locale0 = Locale.forLanguageTag("No$B");
      DecimalFormatSymbols.getInstance(locale0);
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      TypeUtils.castToString(outOfMemoryError0);
      TypeUtils.decapitalize((String) null);
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      TypeUtils.loadClass("defaultCenturyStart", classLoader0);
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, (Type) null);
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Long.toUnsignedString((-1533L));
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<ClassLoader> class0 = ClassLoader.class;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class1);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Object object0 = new Object();
      TypeUtils.getGenericParamType((Type) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      boolean boolean0 = true;
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Short> class0 = Short.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      parserConfig0.getDeserializer(type0);
      NumberFormatException numberFormatException0 = new NumberFormatException("fastjson.parser.autoTypeAccept");
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils typeUtils0 = new TypeUtils();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(noClassDefFoundError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeUtils.isPath(class0);
      Class<AtomicLong> class1 = AtomicLong.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class1, map0);
      TypeUtils.fnv1a_64_lower(",xkfE<U_gZ-");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list1 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, map0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      Class<Timestamp> class1 = Timestamp.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class1, class0);
      String string0 = "?ZQf/{toU5WXX_>mPU\\";
      TypeUtils.fnv1a_64("java.beans.Transient");
      TypeUtils.loadClass((String) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.autoTypeAccept", "?WR_tS?h+tXreBw", 1024);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLTransientConnectionException: fastjson.parser.autoTypeAccept
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Long.toUnsignedString((-304L));
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<BitSet> class0 = BitSet.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) null, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.class;
      TypeUtils.fnv1a_64("?ZQf/{toU5WXX_>mPU");
      classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.getGenericParamType(class1);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      dimension0.setSize((double) 937, (-1434.3640543923));
      dimension0.width = 937;
      dimension0.height = 937;
      dimension0.setSize(6, (-390));
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError((String) null);
      TypeUtils.castToString(noSuchFieldError0);
      TypeUtils.decapitalize("java.lang.NoSuchFieldError@0000000001");
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Function<String, InstantiationException> function0 = (Function<String, InstantiationException>) mock(Function.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Throwable, SQLTimeoutException> biFunction0 = (BiFunction<Object, Throwable, SQLTimeoutException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceKeys(1L, (Function<? super String, ? extends Exception>) function0, (BiFunction<? super Exception, ? super Exception, ? extends Exception>) biFunction0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        concurrentHashMap0.compute((String) null, biFunction1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      TypeUtils.getParserFeatures(class0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      imageCapabilities0.clone();
      imageCapabilities0.clone();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("g", classLoader0, true);
      classLoader0.setDefaultAssertionStatus(true);
      Long.toUnsignedString(1099511628213L);
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      TypeUtils.castToChar("g");
      Class<?> class1 = TypeUtils.loadClass(".s,t[}Cz{~6", classLoader0, true);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TypeUtils.getCollectionItemType((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.isNumber("&&_'NDXWQ");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus((String) null, false);
      String string0 = null;
      TypeUtils.loadClass((String) null, classLoader0);
      classLoader0.getParent();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      classLoader1.clearAssertionStatus();
      classLoader1.getParent();
      ClassLoader.getSystemClassLoader();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(point0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.awt.Point[x=0,y=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      TypeUtils.isGenericParamType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      parserConfig0.compatibleWithJavaBean = false;
      ClassLoader.getSystemClassLoader();
      Class<Integer> class1 = Integer.class;
      Class<JavaBeanDeserializer> class2 = JavaBeanDeserializer.class;
      parserConfig0.createJavaBeanDeserializer(class2, class2);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'n';
      char char0 = 'R';
      charArray0[2] = 'R';
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-59432204));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Function<String, InstantiationException> function0 = (Function<String, InstantiationException>) mock(Function.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Throwable, SQLTimeoutException> biFunction0 = (BiFunction<Object, Throwable, SQLTimeoutException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.longValueExact();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      StackOverflowError stackOverflowError0 = new StackOverflowError("DG1To}gHuu]>ptm");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<DataTruncation> class1 = DataTruncation.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) concurrentHashMap0);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(negativeArraySizeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.NegativeArraySizeException: fastjson.parser.deny
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      TypeUtils.castToString((Object) null);
      Long long0 = new Long((-17L));
      TypeUtils.loadClass((String) null, (ClassLoader) null, true);
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, type0, (Type) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.addDeny((String) null);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = "~\\Lc2h#dDg[Q";
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      TypeUtils.loadClass(".5s");
      TypeUtils.castToLong((Object) null);
      TypeUtils.toLocale(".5s");
      Class<Character> class0 = Character.TYPE;
      TypeUtils.getCollectionItemType(class0);
      Double double0 = new Double(0.0);
      TypeUtils.castToFloat(double0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      String string0 = "[double";
      identityHashMap0.put((String) null, "fi");
      String string1 = "kZ[\"Yg\\('W+evFRk0?U";
      identityHashMap0.put("kZ[\"Yg('W+evFRk0?U", (String) null);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class0 = TypeUtils.loadClass("[int", (ClassLoader) aSMClassLoader0, true);
      TypeUtils.getCollectionItemType((Type) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class com.alibaba.fastjson.util.ParameterizedTypeImpl, create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      TypeUtils.isProxy(class0);
      TypeUtils.castToBoolean((Object) null);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>(concurrentHashMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap1, propertyNamingStrategy0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy1);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("~]S6ybf(pC1ayk", "3r697%Pc[s/f1^+G|0");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Float float0 = new Float(0.0);
      NumberFormatException numberFormatException0 = new NumberFormatException("F");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(numberFormatException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.NumberFormatException: F
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      TypeUtils.isNumber("Lava.awt.Color");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("Lava.awt.Color", false);
      TypeUtils.loadClass("Lava.awt.Color", classLoader0);
      classLoader0.clearAssertionStatus();
      classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      TypeUtils.getCollectionItemClass((Type) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("ge", "+T-wAEO9");
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      TypeUtils.fnv1a_64("'");
      String string0 = TypeUtils.decapitalize("'");
      assertEquals("'", string0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      TypeUtils.getClassFromMapping("r:H7:W,SC8|'");
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      timeUnit0.convert((-2364987994247679115L), timeUnit1);
      timeUnit0.toMicros(32767L);
      timeUnit0.toDays((-811277319855450459L));
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(timeUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : HOURS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConcurrentHashMap<TimeZone, SQLIntegrityConstraintViolationException> concurrentHashMap0 = new ConcurrentHashMap<TimeZone, SQLIntegrityConstraintViolationException>(7, 7, 55232);
      long long0 = TypeUtils.fnv1a_64_lower(";x21A9/5FjuGQC _");
      assertEquals((-5223849016835879701L), long0);
      
      TypeUtils.unwrapOptional((Type) null);
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      Class<BitSet> class0 = BitSet.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
  }
}
