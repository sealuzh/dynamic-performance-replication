/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 02 22:07:10 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.util.Calendar;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.LongBinaryOperator;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.contains(989);
      assertFalse(boolean0);
      
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportAutoType;
      TreeMap<JSONArray, String> treeMap0 = new TreeMap<JSONArray, String>();
      treeMap0.keySet();
      JSONArray jSONArray1 = new JSONArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSONArray1.sort(comparator0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.add((Object) "yyyy-MM-dd HH:mm:ss");
      assertTrue(boolean0);
      
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      jSONArray0.setRelatedArray(linkedList0);
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray0.toJavaList(class0);
      assertTrue(list0.contains("yyyy-MM-dd HH:mm:ss"));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.defaultLocale = jSONArray0.defaultLocale;
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.toJSONString();
      jSONArray0.removeAll(jSONArray1);
      jSONArray1.add((Object) "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.toJSON((Object) null);
      jSONArray0.hashCode();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3064, class0);
      jSONArray1.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray0.getByteValue(102);
      // Undeclared exception!
      try { 
        jSONArray1.listIterator(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-541));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.setDefaultTypeKey("");
      Class<Object> class0 = Object.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      Class<Integer> class1 = Integer.class;
      FieldInfo fieldInfo0 = new FieldInfo("", class1, class0, class1, (Field) null, 989, 1, 999999);
      BeanContext beanContext0 = new BeanContext(fieldInfo0.fieldClass, fieldInfo0);
      Class<Annotation> class2 = Annotation.class;
      beanContext0.getAnnation(class2);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      jSONArray0.set(999999, uTF8Decoder0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray1.getFloatValue(205);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)64;
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableASM;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.IgnoreNotMatch;
      featureArray0[2] = feature2;
      JSON.parseObject(byteArray0, (Type) class0, featureArray0);
      JSONArray jSONArray3 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray2.getDate(970);
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      jSONArray2.getString(948);
      jSONArray3.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray3.getString(2044);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2044, Size: 1980
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      featureArray0[2] = feature0;
      jSONArray2.fluentRetainAll(jSONArray1);
      MockDate mockDate0 = new MockDate((-1), 3089, 1, (-519), 3089, (-233));
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      jSONArray1.isEmpty();
      JSONArray jSONArray3 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray3.getShort((-2925));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains(989);
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, class0);
      assertEquals(990, jSONArray0.size());
      
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray1);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray2.equals((Object) null);
      assertEquals(990, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.spliterator();
      Object object0 = null;
      jSONArray0.fluentSet(989, (Object) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Type type0 = jSONArray0.getComponentType();
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, "yyyy-MM-dd HH:mm:ss");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Integer integer0 = new Integer(989);
      jSONArray2.getShortValue(989);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray0);
      jSONArray2.getBigDecimal((short)0);
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      Integer integer1 = new Integer(1292);
      // Undeclared exception!
      try { 
        jSONArray3.getDoubleValue(8232);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8232, Size: 3090
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%U!J(B.6NN?pq");
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.subList(1283, 1283);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportAutoType;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowSingleQuotes;
      int int0 = (-910);
      Integer integer0 = new Integer(989);
      // Undeclared exception!
      try { 
        jSONArray0.set((-910), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3089, "1.2.46");
      assertEquals(3090, jSONArray0.size());
      
      JSON.toJSON((Object) null);
      float float0 = jSONArray0.getFloatValue(1334);
      assertEquals(3090, jSONArray0.size());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(989);
      JSON.toJSONString((Object) jSONArray0);
      int int0 = 2942;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-169), (Type) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(989);
      ConcurrentHashMap<ByteArrayInputStream, UTF8Decoder> concurrentHashMap0 = new ConcurrentHashMap<ByteArrayInputStream, UTF8Decoder>();
      concurrentHashMap0.remove((Object) jSONArray0);
      jSONArray1.fluentSet(1, concurrentHashMap0);
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(jSONArray1);
      Class<Object> class0 = Object.class;
      jSONArray2.toJavaList(class0);
      jSONArray2.containsAll(jSONArray1);
      jSONArray0.listIterator();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(66);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 66, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.defaultLocale = jSONArray0.defaultLocale;
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.toJSONString();
      jSONArray0.removeAll(jSONArray1);
      jSONArray1.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(966);
      jSONArray0.iterator();
      jSONArray0.contains(989);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-1410));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      assertSame(jSONArray1, jSONArray0);
      
      TreeMap<JSONArray, String> treeMap0 = new TreeMap<JSONArray, String>();
      treeMap0.keySet();
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.fluentSet(989, class0);
      List<Object> list0 = jSONArray0.toJavaList(class0);
      assertEquals(990, jSONArray0.size());
      
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.fluentRemoveAll(list0);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, class0);
      // Undeclared exception!
      try { 
        jSONArray1.getDate(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Integer integer0 = new Integer(989);
      jSONArray2.getShortValue(989);
      jSONArray2.fluentRetainAll(jSONArray0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONArray0.getDate(3089);
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(3089, "1.2.46");
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "#TY%)X";
      int int0 = 1107297537;
      JSONArray jSONArray0 = new JSONArray(1107297537);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(14, class0);
      Spliterator<Object> spliterator0 = jSONArray1.spliterator();
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray1.fluentSet(3089, spliterator0);
      jSONArray3.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, class0);
      assertEquals(990, jSONArray1.size());
      
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      
      List<Object> list0 = jSONArray0.toJavaList(class0);
      boolean boolean0 = jSONArray1.containsAll(list0);
      assertTrue(boolean0);
      
      jSONArray2.setComponentType(class0);
      JSONArray jSONArray3 = jSONArray2.fluentSet(3089, list0);
      jSONArray3.addAll((Collection<?>) jSONArray1);
      jSONArray3.get(352);
      jSONArray3.toJavaList(class0);
      jSONArray0.getComponentType();
      assertEquals(6180, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.AllowComment;
      featureArray0[2] = feature0;
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray1);
      Integer integer0 = new Integer(989);
      // Undeclared exception!
      try { 
        jSONArray3.add(3089, (Object) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("yyyy-MM-dd HH:mm:ss");
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(3080);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3080, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Type type0 = jSONArray0.componentType;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1517, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1517, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(14, class0);
      Spliterator<Object> spliterator0 = jSONArray1.spliterator();
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray1.fluentSet(3089, spliterator0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      long long0 = jSONArray2.getLongValue(947);
      assertEquals(3090, jSONArray0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains(989);
      jSONArray0.getRelatedArray();
      // Undeclared exception!
      try { 
        jSONArray0.add(55232, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55232, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.set(3081, class0);
      jSONArray0.getJSONObject(1347);
      // Undeclared exception!
      try { 
        jSONArray0.subList(3081, (-878));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(3081) > toIndex(-878)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.setDefaultTypeKey("");
      int int0 = 1;
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, "");
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      JSONArray jSONArray3 = jSONArray1.fluentRemove((Object) jSONArray2);
      jSONArray3.getSqlDate(1);
      jSONArray2.fluentAddAll((Collection<?>) jSONArray3);
      jSONArray3.getBoolean(1);
      // Undeclared exception!
      try { 
        jSONArray3.getFloatValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 8
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.remove(988);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 988, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "1.2.46";
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = 'J';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3089, 633);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Object object0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.getLong(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList(989, 3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3089
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, "");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Integer integer0 = new Integer(989);
      jSONArray2.getShortValue(205);
      jSONArray2.fluentRetainAll(jSONArray0);
      jSONArray2.getBigDecimal((short)0);
      jSONArray1.toArray();
      jSONArray0.add(205, (Object) "");
      assertEquals(3091, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<ByteArrayInputStream> linkedHashSet0 = new LinkedHashSet<ByteArrayInputStream>();
      jSONArray0.retainAll(linkedHashSet0);
      jSONArray0.contains("yyyy-MM-dd HH:mm:ss");
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(50900);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 50900, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONObject0);
      Class<Object> class1 = Object.class;
      Class<Object> class2 = Object.class;
      jSONArray1.toJavaList(class2);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("yyyy-MM-dd HH:mm:ss");
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) class0, (Object) class1);
      Type type0 = parseContext0.type;
      jSONArray0.setComponentType((Type) null);
      jSONArray1.lastIndexOf(jSONArray0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      jSONArray1.fluentSet(989, (Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockDate mockDate0 = new MockDate(0, 1134, 3089, (-259), 989, 3528);
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray0.isEmpty();
      JSONArray jSONArray2 = new JSONArray(29);
      jSONArray0.getLong(87);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(1134);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1134, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.removeAll(list0);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((Object) "yyyy-MM-dd HH:mm:ss");
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(494);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 494, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3089, "1.2.46");
      boolean boolean0 = jSONArray0.isEmpty();
      assertEquals(3090, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.AllowComment;
      featureArray0[2] = feature0;
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray1);
      JSON.toJSON((Object) jSONArray3, (ParserConfig) null);
      JSONArray jSONArray4 = new JSONArray(989);
      Integer integer0 = new Integer(3089);
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger((-337));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      List<String> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.fluentRetainAll(list0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-10), jSONArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, "");
      jSONArray2.spliterator();
      Class<Object> class0 = Object.class;
      jSONArray1.toJavaList(class0);
      jSONArray2.spliterator();
      JSONArray jSONArray3 = new JSONArray(4561);
      JSONArray jSONArray4 = jSONArray2.fluentSet(906, "yJ9M");
      jSONArray4.toJavaObject(class0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray0.getIntValue(8);
      jSONArray0.getObject(906, (Type) class0);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.toJavaObject((JSON) jSONArray0, class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-1504), (Object) "com.alibaba.fastjson.JSONArray@0000000001");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1504, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, "<hc:/<b0^#i5#");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Integer integer0 = new Integer(989);
      jSONArray2.getShortValue(989);
      jSONArray2.fluentRetainAll(jSONArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSON.setDefaultTypeKey("yyyy-MM-dd HH:mm:ss");
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : <hc:/<b0^#i5#
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(14, class0);
      Spliterator<Object> spliterator0 = jSONArray1.spliterator();
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(989);
      JSONArray jSONArray3 = jSONArray1.fluentSet(3089, spliterator0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      int int0 = JSON.DEFAULT_PARSER_FEATURE;
      jSONArray3.getObject(970, (Type) class0);
      jSONArray1.addAll((Collection<?>) jSONArray0);
      assertEquals(6180, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.getDate(1024);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1024, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.containsAll(jSONArray0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(1916);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1916, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      jSONArray0.toJavaList(class0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@type";
      stringArray0[1] = "@type";
      stringArray0[2] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[3] = "isEnabled";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      Set<String> set0 = simplePropertyPreFilter0.getExcludes();
      jSONArray0.removeAll(set0);
      jSONArray0.add((Object) null);
      jSONArray0.fluentAddAll((Collection<?>) set0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 3197;
      MockDate mockDate0 = new MockDate(77, 1724, 77, 3197, (-3304), 986);
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = new JSONArray(986);
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray1.getLong(947);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 947, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(14, class0);
      Spliterator<Object> spliterator0 = jSONArray1.spliterator();
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray1.fluentSet(3089, spliterator0);
      jSONArray1.getByteValue(119);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray3.getIntValue(989);
      jSONArray3.getDate(989);
      jSONArray0.get(3089);
      jSONArray2.getJSONObject(989);
      jSONArray3.getString(3089);
      // Undeclared exception!
      try { 
        jSONArray2.getByteValue(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.util.Spliterators$IteratorSpliterator@c8759ee
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.addAll(1168, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1168, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      jSONArray1.fluentSet(989, list0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray1.getFloatValue(205);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.InternFieldNames;
      featureArray0[0] = feature0;
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      jSONArray0.isEmpty();
      JSONArray jSONArray2 = new JSONArray(2905);
      jSONArray0.getComponentType();
      int int0 = (-3546);
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-3546));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      jSONArray1.fluentSet(989, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3089, "1.2.46");
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.io.ByteArrayInputStream
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3075, class0);
      jSONArray0.toJavaList(class0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@type";
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "@type";
      stringArray0[4] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[5] = "1.2.46";
      stringArray0[6] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[7] = "@type";
      // Undeclared exception!
      try { 
        jSONArray1.toArray(stringArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(181, "1.2.46");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      jSONArray1.fluentRemoveAll(jSONArray0);
      JSON.setDefaultTypeKey("@type");
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate(1700);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1700, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray1.getFloatValue(205);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.InternFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableSpecialKeyDetect;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowComment;
      featureArray0[2] = feature2;
      featureArray0[3] = feature0;
      jSONArray2.getShortValue(989);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.getBigDecimal(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.set(3093, class0);
      jSONArray0.getJSONObject(70);
      jSONArray0.get(3089);
      LinkedHashSet<ByteArrayInputStream> linkedHashSet0 = new LinkedHashSet<ByteArrayInputStream>();
      jSONArray0.retainAll(linkedHashSet0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) bufferedInputStream0);
      int int0 = jSONArray0.indexOf(jSONArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      int int0 = (-1);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      Class<Object> class1 = Object.class;
      jSONArray0.toJavaList(class1);
      Class<Annotation> class2 = Annotation.class;
      List<Annotation> list0 = jSONArray0.toJavaList(class2);
      jSONArray0.removeAll(list0);
      jSONArray0.add((Object) class0);
      Class<JSONArray> class3 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(255);
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONArray0.equals(object0);
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(945);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 945, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      List<Object> list0 = jSONArray0.subList(0, 0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) null);
      jSONArray1.indexOf(jSONArray2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte)30;
      JSON.parse(byteArray0, (Feature[]) null);
      JSONArray jSONArray3 = jSONArray0.fluentAdd((Object) null);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, "1.2.46");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Integer integer0 = new Integer(989);
      jSONArray2.getShortValue(989);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.getBooleanValue(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : 1.2.46
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "1.2.46";
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = 'J';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3089, 633);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      JSON.handleResovleTask(defaultJSONParser0, (Object) null);
      jSONArray0.toArray(stringArray0);
      int int0 = (-810);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-810));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray[] jSONArrayArray0 = new JSONArray[3];
      jSONArrayArray0[0] = jSONArray0;
      jSONArrayArray0[1] = jSONArray0;
      jSONArrayArray0[2] = jSONArray0;
      jSONArray0.toArray(jSONArrayArray0);
      int int0 = (-232);
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-232));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.defaultLocale = jSONArray0.defaultLocale;
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.removeAll(jSONArray1);
      jSONArray1.add((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, jSONArray0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray2.getIntValue(148);
      String string0 = "I+Z+h";
      Map<String, Field> map0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 1.2.46
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.OrderedField;
      featureArray0[1] = feature0;
      jSONArray0.getShortValue(0);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray1.isEmpty();
      boolean boolean0 = jSONArray2.isEmpty();
      assertEquals(990, jSONArray1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.OrderedField;
      featureArray0[1] = feature0;
      Feature feature1 = Feature.AllowComment;
      featureArray0[2] = feature1;
      Feature feature2 = Feature.CustomMapDeserializer;
      featureArray0[3] = feature2;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray0.fluentAddAll(989, (Collection<?>) list0);
      jSONArray1.setRelatedArray(feature2);
      // Undeclared exception!
      try { 
        jSONArray2.getFloat(2375);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2375, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(48);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(3073);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3073, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.setDefaultTypeKey("");
      Class<Object> class0 = Object.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("F:O9*x#.+=", class0, class0, class0, (Field) null, 1, 982, 1);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<Annotation> class1 = Annotation.class;
      beanContext0.getAnnation(class1);
      jSONArray0.set(982, "1.2.46");
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.lastIndexOf(class1);
      jSONArray0.fluentRemoveAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getBigDecimal(982);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 982, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.containsAll(jSONArray0);
      assertTrue(boolean0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean1 = jSONArray0.removeAll(linkedList0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.setDefaultTypeKey("yyyy-MM-dd HH:mm:ss");
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      ToLongFunction<String> toLongFunction0 = (ToLongFunction<String>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceKeysToLong(989, toLongFunction0, (-921L), longBinaryOperator0);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      ParserConfig.getFieldFromCache("vBYPQH", concurrentHashMap0);
      jSONArray1.contains((Object) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        jSONArray1.remove((-1246));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.OrderedField;
      featureArray0[1] = feature0;
      Feature feature1 = Feature.AllowComment;
      Feature feature2 = Feature.CustomMapDeserializer;
      Feature feature3 = Feature.DisableFieldSmartMatch;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Feature[] featureArray1 = new Feature[3];
      featureArray1[0] = feature3;
      featureArray1[1] = feature2;
      featureArray1[2] = feature1;
      jSONArray1.remove((Object) feature0);
      jSONArray1.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray2.getLong((byte) (-70));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[2];
      jSONArray0.DEFFAULT_DATE_FORMAT = jSONArray0.DEFFAULT_DATE_FORMAT;
      stringArray0[1] = "1.2.46";
      char[] charArray0 = new char[2];
      int int0 = 633;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3089, 633);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<JSONObject> class0 = JSONObject.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      JSON.handleResovleTask(defaultJSONParser0, (Object) null);
      jSONArray0.toArray(stringArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-605));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      boolean boolean0 = jSONArray1.contains("yyyy-MM-dd HH:mm:ss");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.clone();
      assertTrue(object0.equals((Object)jSONArray0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(14, class0);
      jSONArray1.spliterator();
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray1.fluentAddAll((Collection<?>) jSONArray2);
      JSON.toJSON((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(3089, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 30
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<BufferedInputStream, UTF8Decoder> concurrentHashMap0 = new ConcurrentHashMap<BufferedInputStream, UTF8Decoder>(989, 539.99F);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) concurrentHashMap0);
      jSONArray0.add((Object) "yyyy-MM-dd HH:mm:ss");
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray1.getInteger(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yyyy-MM-dd HH:mm:ss\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator((-2353));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2353
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      List<String> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(0, jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(list0);
      jSONArray3.getJSONArray(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte byte0 = (byte)27;
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte)80;
      int int0 = 1295;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        uTF8Decoder0.replaceWith("yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Replacement too long
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.fluentSet(989, class0);
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-2213));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      jSONArray1.fluentSet(3089, "");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Integer integer0 = new Integer(989);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(3089);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) jSONArray0);
      JSONArray jSONArray4 = new JSONArray(jSONArray3);
      int int0 = 966;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      Annotation[] annotationArray0 = new Annotation[0];
      // Undeclared exception!
      try { 
        jSONArray3.toArray(annotationArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, "");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Integer integer0 = new Integer(989);
      jSONArray2.getShortValue(205);
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      jSONArray1.getIntValue((short)0);
      jSONArray0.getDate(989);
      jSONArray1.get(788);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONObject(3089);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(255);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)34;
      jSONArray0.add((Object) codingErrorAction0);
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : REPORT
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3089, "1.2.46");
      jSONArray0.indexOf((Object) null);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3089, "1.2.46");
      int int0 = 0;
      // Undeclared exception!
      try { 
        JSON.parse("yyyy-MM-dd HH:mm:ss", 989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-424));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, "");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Integer integer0 = new Integer(989);
      jSONArray2.getShortValue(989);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray0);
      jSONArray2.getBigDecimal((short)0);
      jSONArray3.equals(integer0);
      jSONArray2.retainAll(jSONArray0);
      assertEquals(3090, jSONArray1.size());
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(14, class0);
      Spliterator<Object> spliterator0 = jSONArray1.spliterator();
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray1.fluentSet(3089, spliterator0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      JSONArray jSONArray4 = jSONArray3.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray4.getBigDecimal((-1858));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(14, class0);
      Integer integer0 = new Integer(3089);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3089, "1.2.46");
      jSONArray0.getJSONArray(1920);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(3089);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      jSONArray1.fluentSet(989, (Object) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray1.getFloatValue(205);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)64;
      Feature feature0 = Feature.DisableASM;
      Feature feature1 = Feature.IgnoreNotMatch;
      Feature[] featureArray0 = new Feature[2];
      featureArray0[0] = feature1;
      featureArray0[1] = feature0;
      JSON.parseObject(byteArray0, (Type) class0, featureArray0);
      jSONArray0.fluentAddAll((Collection<?>) list0);
      int int0 = 970;
      // Undeclared exception!
      try { 
        jSONArray1.getDate((byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.OrderedField;
      featureArray0[1] = feature0;
      Feature feature1 = Feature.AllowComment;
      featureArray0[2] = feature1;
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray1);
      JSON.toJSON((Object) jSONArray3, (ParserConfig) null);
      jSONArray0.getBooleanValue(26);
      jSONArray1.fluentClear();
      jSONArray3.getComponentType();
      jSONArray1.hashCode();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) "yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray4 = jSONArray3.fluentRetainAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray4.getJSONArray(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      assertFalse(uTF8Decoder0.isAutoDetecting());
      
      jSONArray0.set((-1), uTF8Decoder0);
      int int0 = 981;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 3089);
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, (-356));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      jSONArray1.fluentSet(989, (Object) null);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.OrderedField;
      featureArray0[1] = feature0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)40;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray1.remove((Object) feature0);
      // Undeclared exception!
      try { 
        jSONArray1.addAll((-1334), (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1334, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      jSONArray2.getShortValue(47);
      jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray1.getBigDecimal(47);
      jSONArray0.getDate(1);
      JSONArray jSONArray3 = jSONArray1.fluentRemoveAll(list0);
      JSONArray jSONArray4 = jSONArray3.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray4.get((-809));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(981);
      // Undeclared exception!
      try { 
        jSONArray0.getString(985);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 985, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.set(0, class0);
      jSONArray0.toJavaList(class0);
      Class<Field> class1 = Field.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.reflect.Field
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, "");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Integer integer0 = new Integer(989);
      jSONArray2.getShortValue(989);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray0);
      jSONArray3.addAll(989, (Collection<?>) jSONArray0);
      jSONArray2.getBigDecimal((short)0);
      jSONArray0.getDate(3089);
      jSONArray2.getJSONObject(989);
      int int0 = jSONArray1.size();
      assertEquals(6180, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.fluentSet(989, class0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/Date(");
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      jSONArray0.setRelatedArray((Object) null);
      jSONArray0.set(1, concurrentHashMap0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%U!J(B.6NN?pq");
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      int int0 = (-800);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-800));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray0.toJavaList(class0);
      assertTrue(list0.isEmpty());
      
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      jSONArray0.fluentSet(989, (Object) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray1.getIntValue(659);
      jSONArray2.getObject(0, (Type) class0);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger((-1583));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3089, "1.2.46");
      JSON.DEFAULT_TYPE_KEY = "1.2.46";
      Class<MockDate> class0 = MockDate.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-4426), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((Object) "yyyy-MM-dd HH:mm:ss");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((Object) "yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray1 = jSONArray0.fluentRemove(0);
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray1.toJavaList(class0);
      assertFalse(list0.contains("yyyy-MM-dd HH:mm:ss"));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.OrderedField;
      featureArray0[1] = feature0;
      Feature feature1 = Feature.AllowComment;
      featureArray0[2] = feature1;
      Feature feature2 = Feature.CustomMapDeserializer;
      featureArray0[3] = feature2;
      jSONArray0.getString(989);
      boolean boolean0 = jSONArray2.isEmpty();
      assertEquals(990, jSONArray1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, "");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray1.forEach(consumer0);
      Integer integer0 = new Integer(989);
      jSONArray2.getShortValue(989);
      jSONArray1.getIntValue(989);
      jSONArray1.getComponentType();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      jSONArray2.getObject(632, (Type) parameterizedTypeImpl0);
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      JSONArray jSONArray3 = jSONArray1.fluentSet(2048, uTF8Decoder1);
      // Undeclared exception!
      try { 
        jSONArray3.getInteger(5276);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5276, Size: 3090
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) "yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray4 = jSONArray3.fluentRetainAll(jSONArray1);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[7] = serializerFeature7;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) jSONArray4, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class java.lang.String, fieldName : 0, create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[1] = feature0;
      Feature feature1 = Feature.AllowComment;
      featureArray0[2] = feature1;
      Feature feature2 = Feature.CustomMapDeserializer;
      featureArray0[3] = feature2;
      Feature feature3 = Feature.DisableFieldSmartMatch;
      featureArray0[4] = feature3;
      jSONArray2.getComponentType();
      int int0 = jSONArray2.getIntValue(949);
      assertEquals(990, jSONArray1.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, "yyyy-MM-dd HH:mm:ss");
      Integer integer0 = new Integer(989);
      jSONArray1.getShortValue(989);
      jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray1.getBigDecimal(67);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(3089);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.set(3093, class0);
      Class<InputStream> class1 = InputStream.class;
      jSONArray0.getObject(980, class1);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(3093);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.setDefaultTypeKey("yyyy-MM-dd HH:mm:ss");
      Class<Object> class0 = Object.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class0, class0, (Field) null, 1, 989, 1);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<Annotation> class1 = Annotation.class;
      beanContext0.getAnnation(class1);
      Class<Object> class2 = Object.class;
      jSONArray0.toJavaList(class2);
      Class<ByteArrayInputStream> class3 = ByteArrayInputStream.class;
      List<ByteArrayInputStream> list0 = jSONArray0.toJavaList(class3);
      boolean boolean0 = jSONArray0.addAll((Collection<?>) list0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("yyyy-MM-dd HH:mm:ss");
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-2872));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, "<hc:/<b0^#i5#");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray2.getShortValue(989);
      jSONArray2.fluentRetainAll(jSONArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSON.setDefaultTypeKey("");
      jSONArray1.getSqlDate((short)0);
      assertEquals(3090, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3089, "1.2.46");
      jSONArray0.contains((Object) null);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "Q%U!J(B.6NN?pq";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%U!J(B.6NN?pq");
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-800));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "@type";
      stringArray0[2] = "D ~b}7/L<Lsw";
      stringArray0[3] = "1.2.46";
      stringArray0[4] = "%02d";
      stringArray0[5] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[8] = serializerFeature8;
      JSON.toJSONBytes((Object) jSONArray0, serializeConfig0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      Spliterator<Object> spliterator0 = jSONArray0.spliterator();
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(949, (Object) spliterator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 949, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(14, class0);
      Spliterator<Object> spliterator0 = jSONArray1.spliterator();
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray1.fluentSet(3089, spliterator0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray3.getIntValue(989);
      jSONArray1.toArray();
      // Undeclared exception!
      try { 
        jSONArray1.getFloat((-3157));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      jSONArray1.fluentSet(3089, "");
      jSONArray1.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(3089);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(1534);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray1);
      JSONArray jSONArray4 = jSONArray1.fluentRemove((Object) null);
      jSONArray4.fluentAddAll((Collection<?>) jSONArray2);
      jSONArray1.getBoolean(3062);
      jSONArray2.getFloatValue(3089);
      // Undeclared exception!
      jSONArray3.fluentRemoveAll(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShort(3705);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3705, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, "yyyy-MM-dd HH:mm:ss");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Integer integer0 = new Integer(989);
      jSONArray1.getShortValue(989);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      jSONArray3.fluentRemove((Object) jSONArray1);
      jSONArray1.getInteger(989);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, "yyyy-MM-dd HH:mm:ss");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Integer integer0 = new Integer(989);
      jSONArray1.getShortValue(989);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray0.getBigDecimal(989);
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      double double0 = new Short((short)0);
      boolean boolean0 = jSONArray0.equals(jSONArray2);
      assertEquals(3090, jSONArray0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(14, class0);
      Spliterator<Object> spliterator0 = jSONArray1.spliterator();
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray1.fluentSet(3089, spliterator0);
      jSONArray1.isEmpty();
      JSONArray jSONArray4 = new JSONArray(2542);
      JSONArray jSONArray5 = jSONArray3.fluentRemove(989);
      jSONArray5.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray1.getLong(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 3089
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray1.getFloatValue(205);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.InternFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableSpecialKeyDetect;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowComment;
      featureArray0[2] = feature2;
      featureArray0[3] = feature0;
      jSONArray2.getShortValue(989);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      boolean boolean0 = jSONArray2.isEmpty();
      assertEquals(990, jSONArray1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray1.getFloatValue(205);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.InternFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableSpecialKeyDetect;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowComment;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.CustomMapDeserializer;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.DisableFieldSmartMatch;
      featureArray0[4] = feature4;
      JSON.parse((byte[]) null, 3089, 205, (CharsetDecoder) uTF8Decoder0, featureArray0);
      jSONArray2.remove((Object) null);
      jSONArray2.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getLong(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 989
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.add((Object) class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      jSONArray0.spliterator();
      List<Object> list1 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(list1);
      int int0 = 952;
      jSONArray0.fluentSet(952, "1.2.46");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      JSONArray jSONArray3 = jSONArray1.fluentRemove((Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.getDate(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((Object) "yyyy-MM-dd HH:mm:ss");
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-1), (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.add((Object) class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.contains(class0);
      jSONArray1.fluentAddAll((Collection<?>) list0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Integer integer0 = new Integer(2432);
      assertEquals(2432, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Spliterator<Object> spliterator0 = jSONArray1.spliterator();
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray1.fluentSet(3089, spliterator0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray3.getIntValue(989);
      jSONArray3.getObject(970, (Type) class0);
      boolean boolean0 = jSONArray2.getBooleanValue(0);
      assertEquals(3090, jSONArray2.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-2314);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-2314));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      List<String> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(0, jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(list0);
      JSONArray jSONArray4 = jSONArray3.getJSONArray(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)27;
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.putDeserializer(class0, (ObjectDeserializer) null);
      JSON.parseObject("", (Type) class0, parserConfig0, (Feature[]) null);
      JSONArray jSONArray5 = jSONArray0.fluentAdd((Object) null);
      JSONArray jSONArray6 = jSONArray5.fluentClear();
      jSONArray0.set(74, jSONArray6);
      jSONArray2.setRelatedArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray4.getFloat((-206));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      Spliterator<Object> spliterator0 = jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.removeAll(list0);
      jSONArray0.add((Object) class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature0;
      JSON.toJSONStringZ(serializerFeature0, serializeConfig0, serializerFeatureArray0);
      jSONArray1.fluentAdd((Object) spliterator0);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("N#w^z\"&Dt:L-.", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ident, pos 1, json : N#w^z\"&Dt:L-.
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((byte) (-117));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      jSONArray1.fluentSet(989, (Object) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue((-1351));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, class0);
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray2.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray2.getShort(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray2.toJSONString();
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) "yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray4 = jSONArray3.fluentRetainAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray4.getJSONArray(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(1534);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray1.fluentRemove((Object) jSONArray3);
      Integer integer0 = new Integer((-1190));
      jSONArray3.getShortValue(989);
      // Undeclared exception!
      jSONArray1.fluentRetainAll(jSONArray3);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.AllowComment;
      featureArray0[2] = feature0;
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray1);
      JSON.toJSON((Object) jSONArray3, (ParserConfig) null);
      JSONArray jSONArray4 = new JSONArray(989);
      jSONArray2.getLong(989);
      jSONArray3.getShort(26);
      // Undeclared exception!
      try { 
        jSONArray2.getTimestamp((-274));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSON.parseArray((String) null);
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.reset();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((Object) uTF8Decoder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.InternFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableSpecialKeyDetect;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowComment;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.CustomMapDeserializer;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.DisableFieldSmartMatch;
      featureArray0[4] = feature4;
      JSON.parse((byte[]) null, 3089, 205, (CharsetDecoder) uTF8Decoder0, featureArray0);
      jSONArray2.remove((Object) null);
      jSONArray2.getComponentType();
      assertEquals(989, jSONArray2.size());
      
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray(Integer.MIN_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      jSONArray1.fluentSet(989, (Object) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray1.getFloatValue(205);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.InternFieldNames;
      featureArray0[0] = feature0;
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      jSONArray0.isEmpty();
      JSONArray jSONArray2 = new JSONArray(2897);
      jSONArray0.getComponentType();
      jSONArray0.getLong(104);
      // Undeclared exception!
      try { 
        jSONArray2.getFloat(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      jSONArray1.setComponentType(class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(3089, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, "");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Integer integer0 = new Integer(989);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSON.setDefaultTypeKey(">PLu#[fw{$M-W{_!tY");
      // Undeclared exception!
      try { 
        jSONArray2.getSqlDate((-1549));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1387);
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-1387));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Spliterator<Object> spliterator0 = jSONArray0.spliterator();
      jSONArray0.toJSONString();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, "[]");
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray0.removeAll(jSONArray2);
      jSONArray2.add((Object) spliterator0);
      // Undeclared exception!
      try { 
        jSONArray1.listIterator((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      ConcurrentHashMap<Object, JSONArray> concurrentHashMap0 = new ConcurrentHashMap<Object, JSONArray>();
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) concurrentHashMap0);
      Object object0 = jSONArray2.get(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("yyyy-MM-dd HH:mm:ss", hashMap0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(943, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 943, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      jSONArray0.fluentSet(1224736769, class0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, class0);
      Class<Object> class1 = Object.class;
      jSONArray1.toJavaList(class1);
      Class<UTF8Decoder> class2 = UTF8Decoder.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(989, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.UTF8Decoder
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      List<String> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(0, jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(list0);
      JSONArray jSONArray4 = jSONArray3.getJSONArray(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)27;
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSON.parseObject("", (Type) class0, parserConfig0, (Feature[]) null);
      jSONArray2.setRelatedArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray4.getFloat((-206));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.set(3093, class0);
      Class<Object> class1 = Object.class;
      jSONArray0.toJavaList(class1);
      int int0 = jSONArray0.lastIndexOf(class0);
      assertEquals(3094, jSONArray0.size());
      assertEquals(3093, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(3089);
      jSONArray1.spliterator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray2 = new JSONArray(989);
      jSONArray2.contains((Object) null);
      JSONArray jSONArray3 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JSON.setDefaultTypeKey("@type");
      // Undeclared exception!
      try { 
        jSONArray3.getSqlDate((-1867));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3064, class0);
      jSONArray1.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray0.getByteValue(102);
      JSON.parse((String) null);
      jSONArray0.indexOf((Object) null);
      jSONArray1.listIterator(2534);
      assertEquals(3065, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(420);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 420, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.toArray((UTF8Decoder[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      jSONArray1.fluentSet(989, (Object) null);
      jSONArray1.fluentSet(961, "CvkjR");
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(961);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-2142));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.defaultLocale = jSONArray0.defaultLocale;
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.removeAll(jSONArray1);
      jSONArray1.add((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, jSONArray0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray2.getIntValue(148);
      jSONArray1.getTimestamp(91);
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("I+Zh", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(602);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, "");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      float float0 = new Integer(989);
      jSONArray2.getShortValue(205);
      jSONArray2.fluentRetainAll(list0);
      // Undeclared exception!
      try { 
        jSONArray2.getBigDecimal((short)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = (-1213);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((-1213));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1213
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      Set<String> set0 = simplePropertyPreFilter0.getExcludes();
      jSONArray0.containsAll(set0);
      ConcurrentHashMap<Annotation, JSONArray> concurrentHashMap0 = new ConcurrentHashMap<Annotation, JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, concurrentHashMap0);
      byte byte0 = (byte) (-67);
      int int0 = 3033;
      MockDate mockDate0 = new MockDate(989, 361, 3033, 3055, 0, (-788));
      jSONArray0.isEmpty();
      Class<Object> class0 = Object.class;
      jSONArray1.toJavaList(class0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int1 = 1381;
      // Undeclared exception!
      try { 
        jSONArray0.getLong(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3089, "1.2.46");
      double double0 = jSONArray0.getDoubleValue(685);
      assertEquals(3090, jSONArray0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, class0);
      List<Object> list0 = new JSONArray();
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray2.isEmpty();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      jSONArray2.listIterator(0);
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) jSONArray1, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.defaultLocale = jSONArray0.defaultLocale;
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray2 = new JSONArray(972);
      JSONArray jSONArray3 = jSONArray2.fluentSet(947, jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray3.getDouble(972);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 972, Size: 948
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.setDefaultTypeKey("@type");
      Class<Object> class0 = Object.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("lT(Zi69F`YYHh1", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("yyyy-MM-dd HH:mm:ss", class0, class0, class0, (Field) null, 0, 1, 1);
      Class<MockDate> class1 = MockDate.class;
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      Class<Annotation> class2 = Annotation.class;
      beanContext0.getAnnation(class2);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3290);
      jSONArray0.set(3290, pipedInputStream0);
      jSONArray0.getJSONObject(3290);
      assertEquals(3291, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      Integer integer0 = new Integer(989);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) integer0);
      JSON.toJSONString((Object) jSONArray1);
      int int0 = 2942;
      // Undeclared exception!
      try { 
        jSONArray2.getFloat(2942);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2942, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.defaultLocale = jSONArray0.defaultLocale;
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.toJSONString();
      jSONArray0.removeAll(jSONArray1);
      jSONArray1.add((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getDate(1372);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1372, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONArray0.contains(object0);
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray0.toJavaList(class0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "scanFloat");
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(14, class0);
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      int int0 = jSONArray2.size();
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet((-1), class0);
      assertEquals(1, jSONArray0.size());
      
      jSONArray1.fluentRemoveAll(jSONArray0);
      boolean boolean0 = jSONArray0.containsAll(jSONArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = new JSONArray(3089);
      Spliterator<Object> spliterator0 = jSONArray1.spliterator();
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray1.fluentSet(3089, spliterator0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray3.getIntValue(989);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        jSONArray1.getDate(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.util.Spliterators$IteratorSpliterator@25bd2a8e
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((Object) "yyyy-MM-dd HH:mm:ss");
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yyyy-MM-dd HH:mm:ss\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray1.fluentRetainAll(list0);
      jSONArray1.fluentSet(989, class0);
      // Undeclared exception!
      try { 
        jSONArray1.getDouble(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      jSONArray1.fluentSet(3089, "");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Integer integer0 = new Integer(989);
      Integer integer1 = new Integer(1324);
      JSONArray jSONArray2 = new JSONArray(1324);
      jSONArray0.getLong(3089);
      JSON.parseArray("");
      JSONArray jSONArray3 = jSONArray0.fluentClear();
      assertTrue(jSONArray3.equals((Object)jSONArray2));
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      Class<String> class0 = String.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("java.time.LocalDate", class0, class0, class0, (Field) null, 3089, (-2634), 1973);
      Class<UTF8Decoder> class1 = UTF8Decoder.class;
      FieldInfo fieldInfo1 = new FieldInfo("qH", class1, fieldInfo0.declaringClass, fieldInfo0.declaringClass, (Field) null, 989, 2379, 1973);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo1);
      Class<Annotation> class2 = Annotation.class;
      Class<Annotation> class3 = Annotation.class;
      beanContext0.getAnnation(class3);
      jSONArray0.set(1, class2);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<UTF8Decoder> class0 = UTF8Decoder.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(3047, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3047, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.containsAll(jSONArray0);
      MockDate mockDate0 = new MockDate(3089);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) mockDate0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, "yyyy-MM-dd HH:mm:ss");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Integer integer0 = new Integer(989);
      jSONArray1.getShortValue(989);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray1.getBigDecimal(3064);
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      jSONArray2.getDoubleValue(3069);
      jSONArray2.equals(uTF8Decoder1);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray0 = new JSONArray(81);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1642, "yyyy-MM-dd HH:mm:ss");
      Integer integer0 = new Integer(1012);
      jSONArray1.fluentRemove((Object) integer0);
      int int0 = 2884;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(1642);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(163);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 163, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentClear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3324);
      int int0 = (-1041);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-1041));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(1534);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray1.fluentRemove((Object) jSONArray3);
      JSONArray jSONArray4 = new JSONArray();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.IGNORE;
      // Undeclared exception!
      try { 
        jSONArray1.getShort(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList((Class<Object>) null);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.AllowComment;
      featureArray0[2] = feature0;
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray1);
      JSON.toJSON((Object) jSONArray3, (ParserConfig) null);
      int int0 = 26;
      SerializeConfig serializeConfig0 = new SerializeConfig(3089);
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ(jSONArray1, serializeConfig0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.containsAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((-1157));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(14, class0);
      Spliterator<Object> spliterator0 = jSONArray1.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray1.fluentSet(3089, spliterator0);
      jSONArray3.retainAll(list0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray3.getIntValue(989);
      jSONArray3.getDate(989);
      // Undeclared exception!
      try { 
        jSONArray0.get(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 3089
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.set(3075, class0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(57, (Object) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      jSONArray1.remove((Object) bufferedInputStream0);
      jSONArray1.fluentSet(989, (Object) null);
      assertEquals(3076, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSON.setDefaultTypeKey("@type");
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("E:19gpT4Ga", hashMap0);
      jSONArray0.set(0, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(602);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 602, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) jSONArray0);
      JSONArray jSONArray4 = new JSONArray(jSONArray3);
      // Undeclared exception!
      try { 
        jSONArray4.getString(966);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 966, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Spliterator<Object> spliterator0 = jSONArray0.spliterator();
      JSONArray jSONArray1 = jSONArray0.fluentSet((-1), spliterator0);
      jSONArray1.spliterator();
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray0.fluentAddAll((Collection<?>) list0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.defaultLocale = jSONArray0.defaultLocale;
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.removeAll(jSONArray1);
      jSONArray1.add((Object) "1.2.46");
      jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd(3089, (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.set(3117, class0);
      Class<InputStream> class1 = InputStream.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(3117, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.io.InputStream
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(1534);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray1);
      JSONArray jSONArray4 = jSONArray1.fluentRemove((Object) jSONArray3);
      jSONArray4.fluentAddAll((Collection<?>) jSONArray2);
      jSONArray1.getBoolean(3062);
      // Undeclared exception!
      try { 
        jSONArray2.getFloatValue(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = new JSONArray(3089);
      jSONArray0.equals("]");
      jSONArray1.size();
      assertTrue(jSONArray1.equals((Object)jSONArray2));
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains(989);
      jSONArray0.getRelatedArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList((-2440), (-2440));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -2440
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<ByteArrayInputStream, UTF8Decoder> concurrentHashMap0 = new ConcurrentHashMap<ByteArrayInputStream, UTF8Decoder>();
      jSONArray0.remove((Object) concurrentHashMap0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.set(3089, "1.2.46");
      jSONArray0.getJSONObject(989);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.containsAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(162);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 162, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3089, "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.get((-983));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(966);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.remove((Object) jSONArray1);
      jSONArray1.setRelatedArray(fileSystemHandling0);
      int int0 = 2879;
      Integer integer0 = new Integer(2879);
      jSONArray0.contains(integer0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(946);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 946, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      int int0 = (-1380);
      int int1 = 3082;
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(3071);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      List<String> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove((-206));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, "yyyy-MM-dd HH:mm:ss");
      Integer integer0 = new Integer(989);
      jSONArray1.getShortValue(989);
      jSONArray1.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getBigDecimal(3089);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLong(200);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 200, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.OrderedField;
      featureArray0[1] = feature0;
      Feature feature1 = Feature.AllowUnQuotedFieldNames;
      featureArray0[2] = feature1;
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray1);
      JSONArray jSONArray4 = (JSONArray)JSON.toJSON((Object) jSONArray3, (ParserConfig) null);
      jSONArray0.getBooleanValue(26);
      JSON.parseArray("");
      // Undeclared exception!
      try { 
        jSONArray4.fluentAddAll((-1496), (Collection<?>) jSONArray3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1496, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(989);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      jSONArray1.add((Object) charsetDecoder0);
      jSONArray1.getComponentType();
      JSONArray jSONArray2 = new JSONArray(989);
      // Undeclared exception!
      try { 
        jSONArray2.getLongValue((-4434));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(554);
      Collection<JSONArray> collection0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(554, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 554, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      int int0 = (-800);
      Object object0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(117);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.setDefaultTypeKey("");
      jSONArray0.remove((Object) "");
      Integer integer0 = new Integer(3089);
      jSONArray0.contains("");
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(966);
      jSONArray0.remove((Object) jSONArray0);
      Integer integer0 = new Integer(989);
      jSONArray0.contains(integer0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) jSONArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        jSONArray1.getDate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(255);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)113;
      jSONArray0.add((Object) codingErrorAction0);
      jSONArray0.getComponentType();
      jSONArray0.getComponentType();
      jSONArray0.listIterator();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-1438), (Object) charsetDecoder0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1438, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((Object) "yyyy-MM-dd HH:mm:ss");
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList((Class<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // clazz is null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.setComponentType(class0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSONArray0.sort(comparator0);
      jSONArray0.set(0, class0);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(14, class0);
      jSONArray0.remove((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSON.parse("", parserConfig0, (-596));
      jSONArray0.contains((Object) null);
      jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Integer integer0 = new Integer((-596));
      jSONArray1.clear();
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.spliterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@type");
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      Object object0 = null;
      // Undeclared exception!
      try { 
        jSONArray1.getFloat((-934));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((Object) "yyyy-MM-dd HH:mm:ss");
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(602);
      Object[] objectArray0 = jSONArray0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3089, "1.2.46");
      jSONArray0.iterator();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.fluentAdd(277, (Object) jSONArray1);
      assertEquals(3091, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      Spliterator<Object> spliterator0 = jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      jSONArray1.fluentSet(3089, spliterator0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.util.Spliterators$IteratorSpliterator@6a6f6ada
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(81);
      JSONArray jSONArray1 = jSONArray0.fluentSet(81, "yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.subList(2126, 3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3089
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      BiFunction<Object, Object, Field> biFunction0 = (BiFunction<Object, Object, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      treeMap0.computeIfPresent("1.2.46", biFunction0);
      treeMap0.tailMap("y_e~c-R<");
      treeMap0.put("yyyy-MM-dd HH:mm:ss", (Field) null);
      ParserConfig.getFieldFromCache("%/?c[V=G", treeMap0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray1.indexOf(jSONArray2);
      // Undeclared exception!
      try { 
        JSON.parse("y_e~c-R<", 3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : y_e~c-R<
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-4450));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.OrderedField;
      featureArray0[1] = feature0;
      Feature feature1 = Feature.AllowComment;
      featureArray0[2] = feature1;
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray1);
      JSON.toJSON((Object) jSONArray3, (ParserConfig) null);
      jSONArray0.getBooleanValue(26);
      JSON.parseArray("");
      jSONArray3.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray3.getLongValue(2287);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2287, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3089, "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(3089);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = new JSONArray(3089);
      Spliterator<Object> spliterator0 = jSONArray1.spliterator();
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray1.fluentSet(3089, spliterator0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray3.getIntValue(989);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JSON.setDefaultTypeKey("");
      jSONArray3.getSqlDate(736);
      assertEquals(3090, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-2525));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(14, class0);
      Spliterator<Object> spliterator0 = jSONArray1.spliterator();
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray1.fluentSet(3089, spliterator0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray3.getIntValue(989);
      jSONArray3.getObject(970, (Type) class0);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3089, "1.2.46");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.getJSONObject(15);
      jSONArray0.getInteger(989);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray2.fluentClear();
      jSONArray1.setComponentType(class0);
      JSONArray jSONArray3 = jSONArray0.fluentAddAll(0, (Collection<?>) jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray3.getString(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = new JSONArray(list0);
      jSONArray1.fluentSet(989, (Object) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      long long0 = jSONArray1.getLongValue(977);
      assertEquals(990, jSONArray1.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, "yyyy-MM-dd HH:mm:ss");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(989);
      jSONArray1.getShortValue(989);
      jSONArray1.fluentRetainAll(jSONArray0);
      int int0 = 3064;
      jSONArray1.getBigDecimal(3064);
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(3089);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yyyy-MM-dd HH:mm:ss\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.setDefaultTypeKey("");
      Class<Object> class0 = Object.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("F:O9*x#.+=", class0, class0, class0, (Field) null, 1, 982, 1);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<Annotation> class1 = Annotation.class;
      beanContext0.getAnnation(class1);
      jSONArray0.set(1, (Object) null);
      jSONArray0.fluentSet(1209, concurrentHashMap0);
      assertEquals(1210, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(2566, "1.2.46");
      JSONArray jSONArray1 = new JSONArray(2566);
      jSONArray0.containsAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getString((-1186));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.get(122);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 122, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray0.set(1, uTF8Decoder0);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, "Q%U!J(B.6NN?pq");
      jSONArray1.getDouble(13);
      jSONArray1.getIntValue(0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray((-3044));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1848);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-73);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-4701), (-2215));
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, byteArrayInputStream0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      jSONArray0.set(0, jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : [{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(111);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 111, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.removeAll(list0);
      jSONArray0.add((Object) class0);
      jSONArray0.fluentAddAll((Collection<?>) list0);
      LinkedList<Field> linkedList0 = new LinkedList<Field>();
      jSONArray0.fluentRetainAll(linkedList0);
      int int0 = 981;
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(981);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 981, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 633;
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 633, 633);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      JSON.handleResovleTask(defaultJSONParser0, (Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.toArray((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      int int0 = 2566;
      JSON.DEFAULT_GENERATE_FEATURE = 2566;
      jSONArray0.setRelatedArray(integer0);
      jSONArray0.size();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      int int0 = 255;
      JSONArray jSONArray0 = new JSONArray(255);
      byte byte0 = (byte)113;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-817));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(933);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, "");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Integer integer0 = new Integer(989);
      jSONArray2.getShortValue(205);
      jSONArray2.fluentRetainAll(jSONArray0);
      jSONArray2.getBigDecimal((short)0);
      jSONArray1.toArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, class0);
      jSONArray0.toJavaList(class0);
      jSONArray0.addAll((Collection<?>) jSONArray1);
      assertEquals(1980, jSONArray1.size());
      assertEquals(1980, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, "");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Integer integer0 = new Integer(989);
      jSONArray2.getShortValue(989);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray0);
      jSONArray2.getBigDecimal((short)0);
      jSONArray0.getDate(3089);
      jSONArray3.get(3089);
      Type type0 = jSONArray3.componentType;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(3089, (Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.containsAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.subList(337, (-607));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(337) > toIndex(-607)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-268));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, "");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Integer integer0 = new Integer(989);
      jSONArray2.getShortValue(989);
      jSONArray2.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(3089);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      jSONArray1.fluentSet(989, (Object) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray1.getFloatValue(205);
      Feature feature0 = Feature.CustomMapDeserializer;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(linkedList0);
      jSONArray2.fluentAddAll(989, (Collection<?>) jSONArray0);
      jSONArray2.setRelatedArray(feature0);
      jSONArray0.getFloat(989);
      assertEquals(1980, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      Spliterator<Object> spliterator0 = jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      MockDate mockDate0 = new MockDate(3089, 3089, 3089, (-980), (-1), 989);
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray0.isEmpty();
      jSONArray0.listIterator(232);
      jSONArray0.iterator();
      jSONArray2.equals(spliterator0);
      assertEquals(990, jSONArray1.size());
      assertEquals(990, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, "");
      jSONArray0.getByte(3089);
      jSONArray2.getDouble(989);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Integer integer0 = new Integer(989);
      assertEquals(989, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.OrderedField;
      featureArray0[1] = feature0;
      Feature feature1 = Feature.AllowComment;
      jSONArray2.getDouble(949);
      featureArray0[2] = feature1;
      Feature feature2 = Feature.CustomMapDeserializer;
      featureArray0[3] = feature2;
      Feature feature3 = Feature.DisableFieldSmartMatch;
      featureArray0[4] = feature3;
      jSONArray2.getIntValue(949);
      // Undeclared exception!
      try { 
        jSONArray1.getObject(3089, (Type) class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(1722);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1722, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(966);
      jSONArray0.remove((Object) jSONArray0);
      Integer integer0 = new Integer(989);
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) jSONArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSON.setDefaultTypeKey("yyyy-MM-dd HH:mm:ss");
      Integer integer1 = new Integer(989);
      // Undeclared exception!
      try { 
        jSONArray1.getFloat(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 3093;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3093, "+;Gr_8Z/");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Integer integer0 = new Integer(805);
      jSONArray0.getShortValue(989);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray1.addAll((int) (short)0, (Collection<?>) jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray3.getBigDecimal(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)43;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        jSONArray0.add(36, (Object) bufferedInputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 36, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3089, "1.2.46");
      MockDate mockDate0 = new MockDate(288, 3061, 3061, (-475), 1, (-1));
      jSONArray0.isEmpty();
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      jSONArray0.getIntValue(410);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue((-475));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      int int0 = 3093;
      jSONArray0.set(3093, class0);
      // Undeclared exception!
      try { 
        jSONArray0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-1604), "1.2.46");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      int int0 = 3324;
      JSONArray jSONArray0 = new JSONArray(3324);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-445));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(14, class0);
      Spliterator<Object> spliterator0 = jSONArray1.spliterator();
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray1.fluentSet(3089, spliterator0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray3.getIntValue(989);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", concurrentSkipListMap0);
      // Undeclared exception!
      try { 
        jSONArray3.add((-1458), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1458, Size: 3090
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(964);
      Integer integer0 = new Integer((-1443));
      JSONArray jSONArray1 = jSONArray0.fluentSet(981, integer0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(jSONArray1);
      jSONArray3.fluentAddAll((Collection<?>) jSONArray0);
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.CustomMapDeserializer;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableASM;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowUnQuotedFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.DisableCircularReferenceDetect;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.OrderedField;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.OrderedField;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.AllowUnQuotedFieldNames;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.InitStringFieldAsEmpty;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.SupportAutoType;
      featureArray0[8] = feature8;
      JSON.parse((byte[]) null, (-1443), 964, (CharsetDecoder) null, featureArray0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1443));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1443
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      Set<String> set0 = simplePropertyPreFilter0.getExcludes();
      jSONArray0.containsAll(set0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3057, (-873));
      JSONArray jSONArray1 = jSONArray0.fluentSet(1354, byteArrayInputStream0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArrayInputStream0.read();
      MockDate mockDate0 = new MockDate((-873), 1701, 1, 1701, 1965, (byte)0);
      jSONArray1.isEmpty();
      Class<Object> class0 = Object.class;
      jSONArray1.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloat(1354);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.io.ByteArrayInputStream@169014cb
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, class0);
      jSONArray0.toJavaList(class0);
      jSONArray1.getBigInteger(512);
      assertEquals(990, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-138));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      jSONArray0.contains(989);
      // Undeclared exception!
      try { 
        jSONArray0.set((-145), iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      TreeMap<JSONArray, String> treeMap0 = new TreeMap<JSONArray, String>();
      Set<JSONArray> set0 = treeMap0.keySet();
      jSONArray0.fluentAddAll((Collection<?>) set0);
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = (JSONArray)jSONArray0.toJavaObject(class0);
      // Undeclared exception!
      try { 
        jSONArray1.getString((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      Class<Object> class1 = Object.class;
      Type type0 = jSONArray0.componentType;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("@type", class1, class0, (Type) null, (Field) null, 3089, 989, 989);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      Class<Annotation> class2 = Annotation.class;
      beanContext0.getAnnation(class2);
      jSONArray0.set(989, "r?N8:Ub9NWZ4");
      jSONArray0.fluentClear();
      int int0 = jSONArray0.lastIndexOf((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-250));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray1.getFloatValue(205);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)64;
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableASM;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.IgnoreNotMatch;
      featureArray0[2] = feature2;
      JSON.parseObject(byteArray0, (Type) class0, featureArray0);
      JSONArray jSONArray3 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray2.getDate(970);
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      jSONArray0.getLongValue((byte)64);
      jSONArray3.remove((int) (byte)64);
      assertEquals(1979, jSONArray1.size());
      assertEquals(1979, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.defaultLocale = jSONArray0.defaultLocale;
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.toJSONString();
      jSONArray1.clone();
      jSONArray1.add((Object) "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      List<String> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(0, jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(list0);
      jSONArray3.getJSONArray(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      Feature feature0 = Feature.InternFieldNames;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.reset();
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 989, 989, charsetDecoder0, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(989, (Object) "yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      Object object0 = jSONArray0.getRelatedArray();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.setDefaultTypeKey("1.2.46");
      Class<Object> class0 = Object.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, class0);
      jSONArray1.getBooleanValue(26);
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-2482), (Type) class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(set0);
      boolean boolean0 = jSONArray1.containsAll(set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.removeAll(jSONArray0);
      jSONArray0.add((Object) jSONArray1);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAdd((-354), (Object) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -354, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray1.getFloatValue(205);
      JSONObject jSONObject0 = new JSONObject(989);
      jSONArray2.indexOf(jSONObject0);
      jSONArray1.getDouble(989);
      JSONArray jSONArray3 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-3602), (Collection<?>) jSONArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3602, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "1.2.46";
      char[] charArray0 = new char[2];
      char char0 = 'R';
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, class0);
      short short0 = jSONArray1.getShortValue(119);
      assertEquals(990, jSONArray0.size());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(14, class0);
      Spliterator<Object> spliterator0 = jSONArray1.spliterator();
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(989);
      JSONArray jSONArray3 = jSONArray1.fluentSet(3089, spliterator0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray3.getIntValue(989);
      jSONArray3.getObject(989, (Type) class0);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray1.getFloatValue(205);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.InternFieldNames;
      featureArray0[0] = feature0;
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray1);
      JSONArray jSONArray4 = jSONArray2.fluentRemove((Object) null);
      jSONArray3.getIntValue(205);
      jSONArray4.hashCode();
      jSONArray4.getString(67);
      assertEquals(1979, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, class0);
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray2.set(989, class0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        jSONArray0.getString(3061);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3061, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.spliterator();
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      jSONArray1.fluentSet(989, (Object) null);
      jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      JSONArray jSONArray2 = jSONArray0.fluentAdd(989, (Object) list0);
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray3.getIntValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((Object) "yyyy-MM-dd HH:mm:ss");
      jSONArray0.isEmpty();
      int int0 = (-141);
      // Undeclared exception!
      try { 
        jSONArray0.remove((-141));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray2.toJSONString();
      jSONArray1.removeAll(jSONArray0);
      jSONArray0.add((Object) jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray2.listIterator((-297));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -297
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, "");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Integer integer0 = new Integer(989);
      jSONArray2.getShortValue(989);
      jSONArray2.fluentRetainAll(jSONArray0);
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      jSONArray2.getDoubleValue((short)0);
      boolean boolean0 = jSONArray2.equals(jSONArray1);
      assertEquals(3090, jSONArray1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(14, class0);
      Spliterator<Object> spliterator0 = jSONArray1.spliterator();
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray1.fluentSet(3089, spliterator0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray3.getIntValue(989);
      jSONArray3.getDate(989);
      jSONArray0.get(3089);
      jSONArray2.getJSONObject(989);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-1380), (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
