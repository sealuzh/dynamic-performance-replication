/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:25:23 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.nio.charset.Charset;
import java.util.Set;
import java.util.zip.Deflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealBufferedSource_ESTest extends RealBufferedSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      String string0 = realBufferedSource0.readUtf8Line();
      assertNull(string0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      long long0 = realBufferedSource0.indexOfElement(byteString0);
      assertEquals((-1L), long0);
      
      boolean boolean0 = realBufferedSource0.rangeEquals((-1L), byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      try { 
        realBufferedSource0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Pipe pipe0 = new Pipe(6L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = realBufferedSource0.indexOf((byte)32, (long) (byte)32);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.toString();
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteArray(2281L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer0, (-18L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -18
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = realBufferedSource0.read(buffer0, 62L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      gzipSink0.flush();
      Deflater deflater1 = new Deflater();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)109, 1295L, (long) (byte)109);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=1295 toIndex=109
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      Pipe pipe0 = new Pipe(2181L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)1, (-1808L), 2389L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-1808 toIndex=2389
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource1.readByteString();
      boolean boolean0 = realBufferedSource0.rangeEquals(65536L, byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.timeout();
      ByteString byteString0 = realBufferedSource0.readByteString();
      boolean boolean0 = realBufferedSource0.rangeEquals(719L, byteString0, 255, (-1092));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8Line();
      realBufferedSource0.readByteString();
      try { 
        realBufferedSource0.readByteString(100000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Pipe pipe0 = new Pipe(2147483647L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readIntLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8Line();
      realBufferedSource0.exhausted();
      try { 
        realBufferedSource0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      deflaterSink0.close();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.exhausted();
      realBufferedSource0.readUtf8CodePoint();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(1906L);
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = realBufferedSource0.readLongLe();
      assertEquals(1906L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.toString();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource0.readString(charset0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1474L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readDecimalLong();
      realBufferedSource0.readByteString();
      try { 
        realBufferedSource0.readFully(buffer0, 1474L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong((-1788L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x66
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.timeout();
      boolean boolean0 = realBufferedSource0.rangeEquals(719L, byteString0, 255, 255);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8Line();
      realBufferedSource0.timeout();
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)53, (long) (byte)53, (long) (byte)53);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      long long0 = realBufferedSource0.readAll(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, long0);
      
      try { 
        realBufferedSource0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertNotNull(deflater0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte(240);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(bufferedSink0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertSame(realBufferedSink0, bufferedSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(inputStream0);
      
      long long0 = realBufferedSource0.readAll(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(1L, long0);
      
      try { 
        realBufferedSource0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.request((-778L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -778
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertEquals("US-ASCII", charset1.name());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.toString());
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.displayName());
      assertNotNull(charset1);
      
      Set<String> set0 = charset0.aliases();
      assertSame(charset0, charset1);
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertNotNull(set0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = buffer0.writeUtf8("`7.;_J{8Ev");
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      long long0 = realBufferedSource0.read(buffer0, 62L);
      assertSame(buffer0, buffer1);
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, long0);
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertSame(buffer0, buffer1);
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      String string0 = realBufferedSource0.readUtf8Line();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNull(string0);
      
      realBufferedSource0.close();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      assertNotNull(deflater0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1474L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      long long0 = realBufferedSource0.readDecimalLong();
      assertSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, long0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertNotNull(realBufferedSource2);
      
      int int0 = realBufferedSource1.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(realBufferedSource1, realBufferedSource2);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertEquals(99, int0);
      
      try { 
        realBufferedSource1.skip(1474L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      String string0 = realBufferedSource0.readUtf8();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("", string0);
      assertNotNull(string0);
      
      realBufferedSource0.close();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      String string0 = realBufferedSource0.readUtf8Line();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNull(string0);
      
      realBufferedSource0.close();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      HashingSource hashingSource1 = HashingSource.sha256(buffer0);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotNull(hashingSource1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertNotNull(realBufferedSource0);
      
      long long0 = buffer0.readAll(hashingSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, long0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte(248);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(bufferedSink0);
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotSame(hashingSource0, hashingSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertNotNull(inputStream0);
      
      long long1 = realBufferedSource0.readAll(realBufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(hashingSource0, hashingSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      long long2 = realBufferedSource0.indexOfElement(byteString0);
      assertNotSame(hashingSource0, hashingSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals((-1L), long2);
      
      long long3 = realBufferedSource0.indexOf(byteString0, 0L);
      assertNotSame(hashingSource0, hashingSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertTrue(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertEquals((-1L), long3);
      
      realBufferedSource0.close();
      assertNotSame(hashingSource0, hashingSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      
      // Undeclared exception!
      try { 
        realBufferedSource0.rangeEquals(3172L, byteString0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(deflater0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1474L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      
      byte[] byteArray0 = realBufferedSource0.readByteArray();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = new Buffer();
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(hashingSource0);
      
      String string0 = hashingSource0.toString();
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(string0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(realBufferedSource0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      String string1 = realBufferedSource0.readString(charset0);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      long long0 = realBufferedSource0.buffer.readAll(buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, long0);
      
      String string2 = realBufferedSource0.readString(0L, charset0);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertNotNull(deflater0);
      
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(9, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.md5();
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(9, byteString0.size());
      assertEquals(16, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      
      ByteString byteString2 = new ByteString(byteArray0);
      assertEquals(9, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertNotNull(byteString2);
      
      int int0 = byteString2.indexOf(byteArray0);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertEquals(9, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(0, int0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString3 = realBufferedSource0.readByteString();
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString3.size());
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString2));
      assertNotNull(byteString3);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      realBufferedSource0.close();
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      
      boolean boolean1 = realBufferedSource1.rangeEquals((-455L), byteString3, (-1096), 8230);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString3.size());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        realBufferedSource1.readUtf8Line();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      ByteString[] byteStringArray0 = new ByteString[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(3, options0.size());
      assertNotNull(options0);
      
      Timeout timeout0 = realBufferedSource0.timeout();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(timeout0);
      
      boolean boolean0 = realBufferedSource0.rangeEquals(2556L, byteString0, (-363), (-363));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertNotNull(deflater0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      try { 
        realBufferedSource0.readUtf8(425L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertNotNull(deflater0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      Timeout timeout0 = realBufferedSource0.timeout();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(timeout0);
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      
      try { 
        realBufferedSource0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Pipe pipe0 = new Pipe(2147483652L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict((-1245L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1245
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Pipe pipe0 = new Pipe(2147483647L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      long long0 = realBufferedSource0.indexOf(byteString0, 2147483647L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      assertEquals((-1L), long0);
      
      try { 
        realBufferedSource0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertNotNull(deflater0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte(240);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(bufferedSink0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertSame(realBufferedSink0, bufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(inputStream0);
      
      long long0 = realBufferedSource0.readAll(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(1L, long0);
      
      byte[] byteArray0 = new byte[2];
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Pipe pipe0 = new Pipe(2147483647L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertNotNull(deflater0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertNotNull(deflaterSink0);
      
      deflaterSink0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertTrue(deflater0.needsInput());
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      boolean boolean0 = realBufferedSource0.exhausted();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(boolean0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      HashingSink hashingSink0 = HashingSink.sha512(realBufferedSource1.buffer);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(hashingSink0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(byteString0);
      
      long long0 = realBufferedSource1.indexOfElement(byteString0);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      String string0 = realBufferedSource0.readUtf8Line();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNull(string0);
      
      try { 
        realBufferedSource0.readUtf8LineStrict(1937L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      assertNotNull(deflater0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte(240);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(bufferedSink0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertSame(realBufferedSink0, bufferedSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(inputStream0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      long long0 = realBufferedSource1.readAll(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(1L, long0);
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(((RealBufferedSink) bufferedSink0).buffer, byteString0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(hashingSource0);
      
      ByteString byteString1 = hashingSource0.hash();
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      
      HashingSink hashingSink0 = HashingSink.hmacSha256(realBufferedSource1.buffer, byteString1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotNull(hashingSink0);
      
      ByteString byteString2 = hashingSink0.hash();
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertEquals(32, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertNotNull(byteString2);
      
      long long1 = realBufferedSource1.indexOf(byteString2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertEquals(32, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      String string0 = realBufferedSource0.readUtf8Line();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNull(string0);
      
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        realBufferedSource0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertNotNull(deflater0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      boolean boolean0 = realBufferedSource0.rangeEquals((long) (byte)0, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      long long0 = realBufferedSource0.indexOf(byteString0, (long) (byte)0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals((-1L), long0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertNotNull(deflater0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(realBufferedSource0);
      
      long long0 = realBufferedSource0.readDecimalLong();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, long0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      long long1 = realBufferedSource0.indexOfElement(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesWritten());
      assertNotNull(deflater0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1474L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(realBufferedSource0, byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      assertNotNull(hashingSource0);
      
      Source source0 = hashingSource0.delegate();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(realBufferedSource0, source0);
      assertSame(source0, realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      assertNotNull(source0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(source0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      assertFalse(realBufferedSource1.equals((Object)source0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      // Undeclared exception!
      try { 
        realBufferedSource1.read((Buffer) null, 1474L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      String string0 = realBufferedSource0.readUtf8Line();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNull(string0);
      
      boolean boolean0 = realBufferedSource0.exhausted();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(boolean0);
      
      byte byte0 = ObjectStreamConstants.TC_BASE;
      assertEquals((byte)112, byte0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = new Buffer();
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(realBufferedSource0);
      
      String string0 = realBufferedSource0.readUtf8Line();
      assertNotSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNull(string0);
      
      try { 
        realBufferedSource0.skip(1000000000000000001L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertNotNull(deflater0);
      
      GzipSink gzipSink0 = new GzipSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(gzipSink0);
      
      gzipSink0.flush();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(15L, buffer0.size());
      
      Deflater deflater1 = new Deflater();
      assertEquals(1, deflater1.getAdler());
      assertEquals(0L, deflater1.getBytesRead());
      assertEquals(0, deflater1.getTotalOut());
      assertEquals(0L, deflater1.getBytesWritten());
      assertTrue(deflater1.needsInput());
      assertEquals(0, deflater1.getTotalIn());
      assertFalse(deflater1.equals((Object)deflater0));
      assertNotNull(deflater1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(15L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      realBufferedSource0.skip((-888L));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(15L, buffer0.size());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x1f
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(deflater0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(deflaterSink0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1468L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(realBufferedSource0);
      
      String string0 = buffer0.toString();
      assertSame(buffer0, buffer1);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("[text=5bc]", string0);
      assertNotNull(string0);
      
      long long0 = realBufferedSource0.readDecimalLong();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(5L, long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSource0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      boolean boolean1 = realBufferedSource0.rangeEquals(1468L, byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(16, byteString0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)23;
      int int0 = realBufferedSource0.read(byteArray0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertArrayEquals(new byte[] {(byte)98, (byte)99, (byte)23}, byteArray0);
      assertEquals(2, int0);
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertEquals("US-ASCII", charset1.name());
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.toString());
      assertNotNull(charset1);
      
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      ByteString byteString0 = realBufferedSource1.readByteString();
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(byteString0);
      
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(1, options0.size());
      assertNotNull(options0);
      
      int int0 = realBufferedSource0.select(options0);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(1, options0.size());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        realBufferedSource1.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      ByteString byteString1 = realBufferedSource0.readByteString();
      assertNotSame(byteString1, byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      
      Options options0 = Options.of(byteStringArray0);
      assertEquals(3, options0.size());
      assertNotNull(options0);
      
      int int0 = realBufferedSource0.select(options0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(3, options0.size());
      assertEquals((-1), int0);
      
      ByteString byteString2 = realBufferedSource0.readByteString();
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString2.size());
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(byteString2.equals((Object)byteString1));
      assertNotNull(byteString2);
      
      long long0 = realBufferedSource0.indexOfElement(byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString2.size());
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(byteString2.equals((Object)byteString1));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      GzipSink gzipSink0 = new GzipSink(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(gzipSink0);
      
      Deflater deflater0 = gzipSink0.deflater();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertNotNull(deflater0);
      
      Timeout timeout0 = realBufferedSource0.timeout();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(timeout0);
      
      Buffer buffer1 = realBufferedSource0.buffer.writeShort((-2092419963));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      
      try { 
        realBufferedSource0.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=3485\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertNotNull(deflater0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      GzipSink gzipSink0 = new GzipSink(realBufferedSource0.buffer);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(gzipSink0);
      
      gzipSink0.flush();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Deflater deflater1 = gzipSink0.deflater();
      assertNotSame(deflater1, deflater0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(deflater1.needsInput());
      assertEquals(0, deflater1.getTotalIn());
      assertEquals(5, deflater1.getTotalOut());
      assertEquals(0L, deflater1.getBytesRead());
      assertEquals(1, deflater1.getAdler());
      assertEquals(5L, deflater1.getBytesWritten());
      assertFalse(deflater1.equals((Object)deflater0));
      assertNotNull(deflater1);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(15, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      assertEquals(0, options0.size());
      assertNotNull(options0);
      
      int int0 = realBufferedSource0.select(options0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, options0.size());
      assertEquals((-1), int0);
      
      Timeout timeout0 = realBufferedSource0.timeout();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(timeout0);
      
      boolean boolean0 = realBufferedSource0.closed;
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-105);
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readAll((Sink) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0L, deflater0.getBytesRead());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertNotNull(deflater0);
      
      GzipSink gzipSink0 = new GzipSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(gzipSink0);
      
      gzipSink0.flush();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(15L, buffer0.size());
      
      Deflater deflater1 = gzipSink0.deflater();
      assertNotSame(deflater1, deflater0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(15L, buffer0.size());
      assertTrue(deflater1.needsInput());
      assertEquals(0L, deflater1.getBytesRead());
      assertEquals(5L, deflater1.getBytesWritten());
      assertEquals(1, deflater1.getAdler());
      assertEquals(0, deflater1.getTotalIn());
      assertEquals(5, deflater1.getTotalOut());
      assertFalse(deflater1.equals((Object)deflater0));
      assertNotNull(deflater1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(15L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(15L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(15L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      try { 
        realBufferedSource0.skip(2075L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1474L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource2);
      
      long long0 = realBufferedSource0.readHexadecimalUnsignedLong();
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertEquals(1474L, long0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertNotNull(deflater0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      GzipSink gzipSink0 = new GzipSink(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(gzipSink0);
      
      gzipSink0.flush();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Deflater deflater1 = gzipSink0.deflater();
      assertNotSame(deflater1, deflater0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(deflater1.needsInput());
      assertEquals(0L, deflater1.getBytesRead());
      assertEquals(5L, deflater1.getBytesWritten());
      assertEquals(1, deflater1.getAdler());
      assertEquals(0, deflater1.getTotalIn());
      assertEquals(5, deflater1.getTotalOut());
      assertFalse(deflater1.equals((Object)deflater0));
      assertNotNull(deflater1);
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(deflater1.needsInput());
      assertEquals(0L, deflater1.getBytesRead());
      assertEquals(5L, deflater1.getBytesWritten());
      assertEquals(1, deflater1.getAdler());
      assertEquals(0, deflater1.getTotalIn());
      assertEquals(5, deflater1.getTotalOut());
      assertFalse(deflater1.equals((Object)deflater0));
      assertNotNull(deflaterSink0);
      
      deflaterSink0.close();
      assertNotSame(deflater1, deflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertTrue(deflater1.needsInput());
      assertFalse(deflater1.equals((Object)deflater0));
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x1f
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      ByteString[] byteStringArray0 = new ByteString[3];
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      Options options0 = Options.of(byteStringArray0);
      assertEquals(3, options0.size());
      assertNotNull(options0);
      
      Deflater deflater0 = new Deflater();
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertNotNull(deflater0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertNotNull(deflaterSink0);
      
      deflaterSink0.close();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertTrue(deflater0.needsInput());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x78
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      hashingSink0.close();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(realBufferedSource0);
      
      long long0 = buffer0.readAll(hashingSink0);
      assertNotSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, long0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte(230);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotNull(bufferedSink0);
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotNull(inputStream0);
      
      long long1 = realBufferedSource0.readAll(realBufferedSink0);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      try { 
        realBufferedSource0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      assertNotNull(deflater0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      GzipSink gzipSink0 = new GzipSink(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(gzipSink0);
      
      gzipSink0.flush();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Deflater deflater1 = gzipSink0.deflater();
      assertNotSame(deflater1, deflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, deflater1.getBytesRead());
      assertEquals(5L, deflater1.getBytesWritten());
      assertEquals(0, deflater1.getTotalIn());
      assertEquals(5, deflater1.getTotalOut());
      assertEquals(1, deflater1.getAdler());
      assertTrue(deflater1.needsInput());
      assertFalse(deflater1.equals((Object)deflater0));
      assertNotNull(deflater1);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      boolean boolean0 = realBufferedSource0.exhausted();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(boolean0);
      
      byte byte0 = realBufferedSource0.readByte();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((byte)31, byte0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeInt((-1321));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = realBufferedSource0.read(byteArray0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, int0);
      
      String string0 = realBufferedSource0.toString();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("buffer([size=0])", string0);
      assertNotNull(string0);
      
      boolean boolean0 = realBufferedSource0.closed;
      assertFalse(boolean0);
      
      byte byte0 = ObjectStreamConstants.TC_BASE;
      assertEquals((byte)112, byte0);
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertTrue(deflater0.needsInput());
      assertNotNull(deflater0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1474L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      String string0 = realBufferedSource0.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("5c2", string0);
      assertNotNull(string0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      boolean boolean0 = buffer0.rangeEquals(1474L, byteString0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertFalse(boolean0);
      
      realBufferedSource0.close();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.skip(1474L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      assertNotNull(deflater0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      GzipSink gzipSink0 = new GzipSink(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(gzipSink0);
      
      gzipSink0.flush();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(4, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      boolean boolean1 = byteString0.rangeEquals(1, byteArray0, (int) (byte)0, 2837);
      assertEquals(4, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = realBufferedSource0.rangeEquals((long) (byte)0, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(4, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      long long0 = realBufferedSource0.indexOf(byteString0, (long) (byte)0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(4, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3L, long0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      ByteString byteString1 = realBufferedSource0.readByteString();
      assertNotSame(byteString1, byteString0);
      assertEquals(15, byteString1.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      assertNotNull(deflater0);
      
      Deflater deflater1 = new Deflater();
      assertEquals(0L, deflater1.getBytesWritten());
      assertTrue(deflater1.needsInput());
      assertEquals(0, deflater1.getTotalIn());
      assertEquals(0L, deflater1.getBytesRead());
      assertEquals(1, deflater1.getAdler());
      assertEquals(0, deflater1.getTotalOut());
      assertFalse(deflater1.equals((Object)deflater0));
      assertNotNull(deflater1);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1474L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      long long0 = realBufferedSource0.readDecimalLong();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(5L, long0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer1, deflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertFalse(deflater0.equals((Object)deflater1));
      assertNotNull(deflaterSink0);
      
      deflaterSink0.close();
      assertSame(buffer0, buffer1);
      assertNotSame(deflater0, deflater1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertTrue(deflater0.needsInput());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(deflater0.equals((Object)deflater1));
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertNotNull(realBufferedSource2);
      
      long long1 = realBufferedSource0.readHexadecimalUnsignedLong();
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(long1 == long0);
      assertEquals(194L, long1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = new Buffer();
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      
      String string0 = buffer1.readUtf8();
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals("", string0);
      assertNotNull(string0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(hashingSource0);
      
      String string1 = hashingSource0.toString();
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(realBufferedSource0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      String string2 = realBufferedSource0.readString(charset0);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      long long0 = realBufferedSource0.buffer.readAll(buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, long0);
      
      realBufferedSource0.close();
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSource0.buffer);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(hashingSink0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(20, byteString0.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement(byteString0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      GzipSink gzipSink0 = new GzipSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(gzipSink0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      String string0 = realBufferedSource0.readUtf8Line();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNull(string0);
      
      realBufferedSource0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.exhausted();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(byteString0);
      
      HashingSource hashingSource1 = HashingSource.sha256(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotNull(hashingSource1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertNotNull(realBufferedSource0);
      
      long long0 = buffer0.readAll(hashingSink0);
      assertNotSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, long0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte(248);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotNull(bufferedSink0);
      
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(7, options0.size());
      assertNotNull(options0);
      
      int int0 = realBufferedSource0.select(options0);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertNotSame(hashingSource0, hashingSource1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7, options0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        options0.get(248);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 248
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(byteString0);
      
      HashingSource hashingSource1 = HashingSource.sha256(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotNull(hashingSource1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertNotNull(realBufferedSource0);
      
      long long0 = buffer0.readAll(hashingSink0);
      assertNotSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, long0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte(248);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotNull(bufferedSink0);
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertNotSame(hashingSource0, hashingSource1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertNotNull(inputStream0);
      
      long long1 = realBufferedSource0.readAll(realBufferedSink0);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertNotSame(hashingSource0, hashingSource1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      
      long long2 = realBufferedSource0.indexOfElement(byteString0);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertNotSame(hashingSource0, hashingSource1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(0L, long2);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0, (-1166L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }
}
